
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a22c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001688  20000238  0800aae4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018c0  0800aae4  000218c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fa9  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046ad  00000000  00000000  0003724d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113e  00000000  00000000  0003cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ba8  00000000  00000000  0003e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df0b  00000000  00000000  00061ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf187  00000000  00000000  0007fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006410  00000000  00000000  0013ed38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00145148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000238 	.word	0x20000238
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a3fc 	.word	0x0800a3fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000023c 	.word	0x2000023c
 8000224:	0800a3fc 	.word	0x0800a3fc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b972 	b.w	8001398 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9e08      	ldr	r6, [sp, #32]
 80010d2:	460d      	mov	r5, r1
 80010d4:	4604      	mov	r4, r0
 80010d6:	468e      	mov	lr, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14c      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010dc:	428a      	cmp	r2, r1
 80010de:	4694      	mov	ip, r2
 80010e0:	d967      	bls.n	80011b2 <__udivmoddi4+0xe6>
 80010e2:	fab2 f382 	clz	r3, r2
 80010e6:	b153      	cbz	r3, 80010fe <__udivmoddi4+0x32>
 80010e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010ec:	f1c3 0220 	rsb	r2, r3, #32
 80010f0:	fa01 fe03 	lsl.w	lr, r1, r3
 80010f4:	fa20 f202 	lsr.w	r2, r0, r2
 80010f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80010fc:	409c      	lsls	r4, r3
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fbbe f1f7 	udiv	r1, lr, r7
 8001106:	fa1f f58c 	uxth.w	r5, ip
 800110a:	fb07 ee11 	mls	lr, r7, r1, lr
 800110e:	fb01 f005 	mul.w	r0, r1, r5
 8001112:	0c22      	lsrs	r2, r4, #16
 8001114:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001118:	4290      	cmp	r0, r2
 800111a:	d90a      	bls.n	8001132 <__udivmoddi4+0x66>
 800111c:	eb1c 0202 	adds.w	r2, ip, r2
 8001120:	f101 3eff 	add.w	lr, r1, #4294967295
 8001124:	f080 8119 	bcs.w	800135a <__udivmoddi4+0x28e>
 8001128:	4290      	cmp	r0, r2
 800112a:	f240 8116 	bls.w	800135a <__udivmoddi4+0x28e>
 800112e:	3902      	subs	r1, #2
 8001130:	4462      	add	r2, ip
 8001132:	1a12      	subs	r2, r2, r0
 8001134:	fbb2 f0f7 	udiv	r0, r2, r7
 8001138:	fb07 2210 	mls	r2, r7, r0, r2
 800113c:	fb00 f505 	mul.w	r5, r0, r5
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001146:	42a5      	cmp	r5, r4
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0404 	adds.w	r4, ip, r4
 800114e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001152:	f080 8104 	bcs.w	800135e <__udivmoddi4+0x292>
 8001156:	42a5      	cmp	r5, r4
 8001158:	f240 8101 	bls.w	800135e <__udivmoddi4+0x292>
 800115c:	4464      	add	r4, ip
 800115e:	3802      	subs	r0, #2
 8001160:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001164:	2100      	movs	r1, #0
 8001166:	1b64      	subs	r4, r4, r5
 8001168:	b11e      	cbz	r6, 8001172 <__udivmoddi4+0xa6>
 800116a:	40dc      	lsrs	r4, r3
 800116c:	2300      	movs	r3, #0
 800116e:	e9c6 4300 	strd	r4, r3, [r6]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0xc0>
 800117a:	2e00      	cmp	r6, #0
 800117c:	f000 80ea 	beq.w	8001354 <__udivmoddi4+0x288>
 8001180:	2100      	movs	r1, #0
 8001182:	e9c6 0500 	strd	r0, r5, [r6]
 8001186:	4608      	mov	r0, r1
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	fab3 f183 	clz	r1, r3
 8001190:	2900      	cmp	r1, #0
 8001192:	d148      	bne.n	8001226 <__udivmoddi4+0x15a>
 8001194:	42ab      	cmp	r3, r5
 8001196:	d302      	bcc.n	800119e <__udivmoddi4+0xd2>
 8001198:	4282      	cmp	r2, r0
 800119a:	f200 80f8 	bhi.w	800138e <__udivmoddi4+0x2c2>
 800119e:	1a84      	subs	r4, r0, r2
 80011a0:	eb65 0203 	sbc.w	r2, r5, r3
 80011a4:	2001      	movs	r0, #1
 80011a6:	4696      	mov	lr, r2
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d0e2      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80011b0:	e7df      	b.n	8001172 <__udivmoddi4+0xa6>
 80011b2:	b902      	cbnz	r2, 80011b6 <__udivmoddi4+0xea>
 80011b4:	deff      	udf	#255	; 0xff
 80011b6:	fab2 f382 	clz	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 808e 	bne.w	80012dc <__udivmoddi4+0x210>
 80011c0:	1a88      	subs	r0, r1, r2
 80011c2:	2101      	movs	r1, #1
 80011c4:	0c17      	lsrs	r7, r2, #16
 80011c6:	fa1f fe82 	uxth.w	lr, r2
 80011ca:	fbb0 f5f7 	udiv	r5, r0, r7
 80011ce:	fb07 0015 	mls	r0, r7, r5, r0
 80011d2:	0c22      	lsrs	r2, r4, #16
 80011d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011d8:	fb0e f005 	mul.w	r0, lr, r5
 80011dc:	4290      	cmp	r0, r2
 80011de:	d908      	bls.n	80011f2 <__udivmoddi4+0x126>
 80011e0:	eb1c 0202 	adds.w	r2, ip, r2
 80011e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011e8:	d202      	bcs.n	80011f0 <__udivmoddi4+0x124>
 80011ea:	4290      	cmp	r0, r2
 80011ec:	f200 80cc 	bhi.w	8001388 <__udivmoddi4+0x2bc>
 80011f0:	4645      	mov	r5, r8
 80011f2:	1a12      	subs	r2, r2, r0
 80011f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011f8:	fb07 2210 	mls	r2, r7, r0, r2
 80011fc:	fb0e fe00 	mul.w	lr, lr, r0
 8001200:	b2a4      	uxth	r4, r4
 8001202:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001206:	45a6      	cmp	lr, r4
 8001208:	d908      	bls.n	800121c <__udivmoddi4+0x150>
 800120a:	eb1c 0404 	adds.w	r4, ip, r4
 800120e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001212:	d202      	bcs.n	800121a <__udivmoddi4+0x14e>
 8001214:	45a6      	cmp	lr, r4
 8001216:	f200 80b4 	bhi.w	8001382 <__udivmoddi4+0x2b6>
 800121a:	4610      	mov	r0, r2
 800121c:	eba4 040e 	sub.w	r4, r4, lr
 8001220:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001224:	e7a0      	b.n	8001168 <__udivmoddi4+0x9c>
 8001226:	f1c1 0720 	rsb	r7, r1, #32
 800122a:	408b      	lsls	r3, r1
 800122c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001230:	ea4c 0c03 	orr.w	ip, ip, r3
 8001234:	fa25 fa07 	lsr.w	sl, r5, r7
 8001238:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800123c:	fbba f8f9 	udiv	r8, sl, r9
 8001240:	408d      	lsls	r5, r1
 8001242:	fa20 f307 	lsr.w	r3, r0, r7
 8001246:	fb09 aa18 	mls	sl, r9, r8, sl
 800124a:	fa1f fe8c 	uxth.w	lr, ip
 800124e:	432b      	orrs	r3, r5
 8001250:	fa00 f501 	lsl.w	r5, r0, r1
 8001254:	fb08 f00e 	mul.w	r0, r8, lr
 8001258:	0c1c      	lsrs	r4, r3, #16
 800125a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800125e:	42a0      	cmp	r0, r4
 8001260:	fa02 f201 	lsl.w	r2, r2, r1
 8001264:	d90b      	bls.n	800127e <__udivmoddi4+0x1b2>
 8001266:	eb1c 0404 	adds.w	r4, ip, r4
 800126a:	f108 3aff 	add.w	sl, r8, #4294967295
 800126e:	f080 8086 	bcs.w	800137e <__udivmoddi4+0x2b2>
 8001272:	42a0      	cmp	r0, r4
 8001274:	f240 8083 	bls.w	800137e <__udivmoddi4+0x2b2>
 8001278:	f1a8 0802 	sub.w	r8, r8, #2
 800127c:	4464      	add	r4, ip
 800127e:	1a24      	subs	r4, r4, r0
 8001280:	b298      	uxth	r0, r3
 8001282:	fbb4 f3f9 	udiv	r3, r4, r9
 8001286:	fb09 4413 	mls	r4, r9, r3, r4
 800128a:	fb03 fe0e 	mul.w	lr, r3, lr
 800128e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001292:	45a6      	cmp	lr, r4
 8001294:	d908      	bls.n	80012a8 <__udivmoddi4+0x1dc>
 8001296:	eb1c 0404 	adds.w	r4, ip, r4
 800129a:	f103 30ff 	add.w	r0, r3, #4294967295
 800129e:	d26a      	bcs.n	8001376 <__udivmoddi4+0x2aa>
 80012a0:	45a6      	cmp	lr, r4
 80012a2:	d968      	bls.n	8001376 <__udivmoddi4+0x2aa>
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4464      	add	r4, ip
 80012a8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012ac:	fba0 9302 	umull	r9, r3, r0, r2
 80012b0:	eba4 040e 	sub.w	r4, r4, lr
 80012b4:	429c      	cmp	r4, r3
 80012b6:	46c8      	mov	r8, r9
 80012b8:	469e      	mov	lr, r3
 80012ba:	d354      	bcc.n	8001366 <__udivmoddi4+0x29a>
 80012bc:	d051      	beq.n	8001362 <__udivmoddi4+0x296>
 80012be:	2e00      	cmp	r6, #0
 80012c0:	d067      	beq.n	8001392 <__udivmoddi4+0x2c6>
 80012c2:	ebb5 0308 	subs.w	r3, r5, r8
 80012c6:	eb64 040e 	sbc.w	r4, r4, lr
 80012ca:	40cb      	lsrs	r3, r1
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	431f      	orrs	r7, r3
 80012d2:	40cc      	lsrs	r4, r1
 80012d4:	e9c6 7400 	strd	r7, r4, [r6]
 80012d8:	2100      	movs	r1, #0
 80012da:	e74a      	b.n	8001172 <__udivmoddi4+0xa6>
 80012dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80012e0:	f1c3 0020 	rsb	r0, r3, #32
 80012e4:	40c1      	lsrs	r1, r0
 80012e6:	409d      	lsls	r5, r3
 80012e8:	fa24 f000 	lsr.w	r0, r4, r0
 80012ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f0:	4328      	orrs	r0, r5
 80012f2:	fbb1 f5f7 	udiv	r5, r1, r7
 80012f6:	fb07 1115 	mls	r1, r7, r5, r1
 80012fa:	fa1f fe8c 	uxth.w	lr, ip
 80012fe:	0c02      	lsrs	r2, r0, #16
 8001300:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001304:	fb05 f10e 	mul.w	r1, r5, lr
 8001308:	4291      	cmp	r1, r2
 800130a:	fa04 f403 	lsl.w	r4, r4, r3
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x256>
 8001310:	eb1c 0202 	adds.w	r2, ip, r2
 8001314:	f105 38ff 	add.w	r8, r5, #4294967295
 8001318:	d22f      	bcs.n	800137a <__udivmoddi4+0x2ae>
 800131a:	4291      	cmp	r1, r2
 800131c:	d92d      	bls.n	800137a <__udivmoddi4+0x2ae>
 800131e:	3d02      	subs	r5, #2
 8001320:	4462      	add	r2, ip
 8001322:	1a52      	subs	r2, r2, r1
 8001324:	fbb2 f1f7 	udiv	r1, r2, r7
 8001328:	fb07 2211 	mls	r2, r7, r1, r2
 800132c:	b280      	uxth	r0, r0
 800132e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001332:	fb01 f20e 	mul.w	r2, r1, lr
 8001336:	4282      	cmp	r2, r0
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x280>
 800133a:	eb1c 0000 	adds.w	r0, ip, r0
 800133e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001342:	d216      	bcs.n	8001372 <__udivmoddi4+0x2a6>
 8001344:	4282      	cmp	r2, r0
 8001346:	d914      	bls.n	8001372 <__udivmoddi4+0x2a6>
 8001348:	3902      	subs	r1, #2
 800134a:	4460      	add	r0, ip
 800134c:	1a80      	subs	r0, r0, r2
 800134e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001352:	e73a      	b.n	80011ca <__udivmoddi4+0xfe>
 8001354:	4631      	mov	r1, r6
 8001356:	4630      	mov	r0, r6
 8001358:	e70b      	b.n	8001172 <__udivmoddi4+0xa6>
 800135a:	4671      	mov	r1, lr
 800135c:	e6e9      	b.n	8001132 <__udivmoddi4+0x66>
 800135e:	4610      	mov	r0, r2
 8001360:	e6fe      	b.n	8001160 <__udivmoddi4+0x94>
 8001362:	454d      	cmp	r5, r9
 8001364:	d2ab      	bcs.n	80012be <__udivmoddi4+0x1f2>
 8001366:	ebb9 0802 	subs.w	r8, r9, r2
 800136a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800136e:	3801      	subs	r0, #1
 8001370:	e7a5      	b.n	80012be <__udivmoddi4+0x1f2>
 8001372:	4641      	mov	r1, r8
 8001374:	e7ea      	b.n	800134c <__udivmoddi4+0x280>
 8001376:	4603      	mov	r3, r0
 8001378:	e796      	b.n	80012a8 <__udivmoddi4+0x1dc>
 800137a:	4645      	mov	r5, r8
 800137c:	e7d1      	b.n	8001322 <__udivmoddi4+0x256>
 800137e:	46d0      	mov	r8, sl
 8001380:	e77d      	b.n	800127e <__udivmoddi4+0x1b2>
 8001382:	4464      	add	r4, ip
 8001384:	3802      	subs	r0, #2
 8001386:	e749      	b.n	800121c <__udivmoddi4+0x150>
 8001388:	3d02      	subs	r5, #2
 800138a:	4462      	add	r2, ip
 800138c:	e731      	b.n	80011f2 <__udivmoddi4+0x126>
 800138e:	4608      	mov	r0, r1
 8001390:	e70a      	b.n	80011a8 <__udivmoddi4+0xdc>
 8001392:	4631      	mov	r1, r6
 8001394:	e6ed      	b.n	8001172 <__udivmoddi4+0xa6>
 8001396:	bf00      	nop

08001398 <__aeabi_idiv0>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <Wakeup_Idle>:
#define LTC_SERIES_GROUPS_PER_RDCV 3 // Number of cell voltage groups per 8 byte register
#define LTC_SERIES_GROUPS_PER_RDAUX 3
#define NUM_AUX_SERIES_GROUPS 6 // Number of series groups

/* Wake LTC up from IDLE state into READY state */
void Wakeup_Idle(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 80013a2:	23ff      	movs	r3, #255	; 0xff
 80013a4:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e00c      	b.n	80013c6 <Wakeup_Idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 80013ac:	f001 fbe2 	bl	8002b74 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 80013b0:	1cf9      	adds	r1, r7, #3
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	2201      	movs	r2, #1
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <Wakeup_Idle+0x3c>)
 80013b8:	f004 fc5a 	bl	8005c70 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 80013bc:	f001 fbce 	bl	8002b5c <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	ddef      	ble.n	80013ac <Wakeup_Idle+0x10>
	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002e4 	.word	0x200002e4

080013dc <Wakeup_Sleep>:

// wake up sleep
void Wakeup_Sleep(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e00d      	b.n	8001404 <Wakeup_Sleep+0x28>
		LTC_nCS_Low();
 80013e8:	f001 fbc4 	bl	8002b74 <LTC_nCS_Low>
		HAL_Delay(300);
 80013ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013f0:	f001 fd48 	bl	8002e84 <HAL_Delay>
		LTC_nCS_High();
 80013f4:	f001 fbb2 	bl	8002b5c <LTC_nCS_High>
		HAL_Delay(10);
 80013f8:	200a      	movs	r0, #10
 80013fa:	f001 fd43 	bl	8002e84 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b07      	cmp	r3, #7
 8001408:	ddee      	ble.n	80013e8 <Wakeup_Sleep+0xc>
	}
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <Read_Cell_Volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef Read_Cell_Volt(uint16_t *read_voltages) {
 8001414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001418:	b089      	sub	sp, #36	; 0x24
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	466b      	mov	r3, sp
 8001420:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 8001426:	2340      	movs	r3, #64	; 0x40
 8001428:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800142a:	7f3b      	ldrb	r3, [r7, #28]
 800142c:	3b01      	subs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	7f3b      	ldrb	r3, [r7, #28]
 8001432:	2200      	movs	r2, #0
 8001434:	4698      	mov	r8, r3
 8001436:	4691      	mov	r9, r2
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001444:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001448:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144c:	7f3b      	ldrb	r3, [r7, #28]
 800144e:	2200      	movs	r2, #0
 8001450:	461c      	mov	r4, r3
 8001452:	4615      	mov	r5, r2
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	00eb      	lsls	r3, r5, #3
 800145e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001462:	00e2      	lsls	r2, r4, #3
 8001464:	7f3b      	ldrb	r3, [r7, #28]
 8001466:	3307      	adds	r3, #7
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	ebad 0d03 	sub.w	sp, sp, r3
 8001470:	466b      	mov	r3, sp
 8001472:	3300      	adds	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001476:	2300      	movs	r3, #0
 8001478:	77bb      	strb	r3, [r7, #30]
 800147a:	e074      	b.n	8001566 <Read_Cell_Volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 800147c:	7fbb      	ldrb	r3, [r7, #30]
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <Read_Cell_Volt+0x168>)
 8001480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 800148c:	7fbb      	ldrb	r3, [r7, #30]
 800148e:	4a3b      	ldr	r2, [pc, #236]	; (800157c <Read_Cell_Volt+0x168>)
 8001490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4619      	mov	r1, r3
 800149e:	2002      	movs	r0, #2
 80014a0:	f000 fab0 	bl	8001a04 <LTC_Pec15_Calc>
 80014a4:	4603      	mov	r3, r0
 80014a6:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80014b2:	8a7b      	ldrh	r3, [r7, #18]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80014b8:	f7ff ff70 	bl	800139c <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80014bc:	f001 fb5a 	bl	8002b74 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80014c0:	f107 0108 	add.w	r1, r7, #8
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	2204      	movs	r2, #4
 80014c8:	482d      	ldr	r0, [pc, #180]	; (8001580 <Read_Cell_Volt+0x16c>)
 80014ca:	f004 fbd1 	bl	8005c70 <HAL_SPI_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80014d2:	7c7b      	ldrb	r3, [r7, #17]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <Read_Cell_Volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80014d8:	7c7b      	ldrb	r3, [r7, #17]
 80014da:	2201      	movs	r2, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80014ec:	7f3b      	ldrb	r3, [r7, #28]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	6979      	ldr	r1, [r7, #20]
 80014f4:	4822      	ldr	r0, [pc, #136]	; (8001580 <Read_Cell_Volt+0x16c>)
 80014f6:	f004 fcfe 	bl	8005ef6 <HAL_SPI_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <Read_Cell_Volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001504:	7c7b      	ldrb	r3, [r7, #17]
 8001506:	3304      	adds	r3, #4
 8001508:	2201      	movs	r2, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	b25a      	sxtb	r2, r3
 8001510:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001514:	4313      	orrs	r3, r2
 8001516:	b25b      	sxtb	r3, r3
 8001518:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800151a:	2300      	movs	r3, #0
 800151c:	777b      	strb	r3, [r7, #29]
 800151e:	e01a      	b.n	8001556 <Read_Cell_Volt+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001520:	7f7b      	ldrb	r3, [r7, #29]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 800152a:	7f7a      	ldrb	r2, [r7, #29]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 8001536:	7fba      	ldrb	r2, [r7, #30]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
			memcpy(
 8001546:	2206      	movs	r2, #6
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	f008 fd14 	bl	8009f78 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	3301      	adds	r3, #1
 8001554:	777b      	strb	r3, [r7, #29]
 8001556:	7f7b      	ldrb	r3, [r7, #29]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d9e1      	bls.n	8001520 <Read_Cell_Volt+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 800155c:	f001 fafe 	bl	8002b5c <LTC_nCS_High>
			i++) {
 8001560:	7fbb      	ldrb	r3, [r7, #30]
 8001562:	3301      	adds	r3, #1
 8001564:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8001566:	7fbb      	ldrb	r3, [r7, #30]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d987      	bls.n	800147c <Read_Cell_Volt+0x68>
	}

	return ret;
 800156c:	7ffb      	ldrb	r3, [r7, #31]
 800156e:	46b5      	mov	sp, r6
}
 8001570:	4618      	mov	r0, r3
 8001572:	3724      	adds	r7, #36	; 0x24
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800157a:	bf00      	nop
 800157c:	0800a45c 	.word	0x0800a45c
 8001580:	200002e4 	.word	0x200002e4

08001584 <LTC_WRCOMM>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void LTC_WRCOMM(uint8_t total_ic, uint8_t comm[6]) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001590:	2306      	movs	r3, #6
 8001592:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3304      	adds	r3, #4
 800159c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800159e:	7cfb      	ldrb	r3, [r7, #19]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fbe9 	bl	8009d78 <malloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2207      	movs	r2, #7
 80015ae:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	2221      	movs	r2, #33	; 0x21
 80015b6:	701a      	strb	r2, [r3, #0]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	2002      	movs	r0, #2
 80015bc:	f000 fa22 	bl	8001a04 <LTC_Pec15_Calc>
 80015c0:	4603      	mov	r3, r0
 80015c2:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80015c4:	897b      	ldrh	r3, [r7, #10]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3302      	adds	r3, #2
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3303      	adds	r3, #3
 80015d6:	897a      	ldrh	r2, [r7, #10]
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	75bb      	strb	r3, [r7, #22]
 80015e4:	e030      	b.n	8001648 <LTC_WRCOMM+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80015e6:	2300      	movs	r3, #0
 80015e8:	757b      	strb	r3, [r7, #21]
 80015ea:	e00d      	b.n	8001608 <LTC_WRCOMM+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80015ec:	7d7b      	ldrb	r3, [r7, #21]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	441a      	add	r2, r3
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	440b      	add	r3, r1
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	3301      	adds	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 8001602:	7d7b      	ldrb	r3, [r7, #21]
 8001604:	3301      	adds	r3, #1
 8001606:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8001608:	7d7a      	ldrb	r2, [r7, #21]
 800160a:	7d3b      	ldrb	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3ed      	bcc.n	80015ec <LTC_WRCOMM+0x68>
		}
		comm_pec = (uint16_t) LTC_Pec15_Calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 8001610:	7d3b      	ldrb	r3, [r7, #20]
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f9f5 	bl	8001a04 <LTC_Pec15_Calc>
 800161a:	4603      	mov	r3, r0
 800161c:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 800161e:	893b      	ldrh	r3, [r7, #8]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b299      	uxth	r1, r3
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	3301      	adds	r3, #1
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	893a      	ldrh	r2, [r7, #8]
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	3302      	adds	r3, #2
 8001640:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	3b01      	subs	r3, #1
 8001646:	75bb      	strb	r3, [r7, #22]
 8001648:	7dbb      	ldrb	r3, [r7, #22]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1cb      	bne.n	80015e6 <LTC_WRCOMM+0x62>
	}

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800164e:	f7ff fea5 	bl	800139c <Wakeup_Idle>
	LTC_nCS_Low();
 8001652:	f001 fa8f 	bl	8002b74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 8001656:	7cfb      	ldrb	r3, [r7, #19]
 8001658:	b29a      	uxth	r2, r3
 800165a:	2364      	movs	r3, #100	; 0x64
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <LTC_WRCOMM+0xf4>)
 8001660:	f004 fb06 	bl	8005c70 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001664:	f001 fa7a 	bl	8002b5c <LTC_nCS_High>
	free(cmd);
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f008 fb8d 	bl	8009d88 <free>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002e4 	.word	0x200002e4

0800167c <LTC_STCOMM>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void LTC_STCOMM(uint8_t len) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001686:	2307      	movs	r3, #7
 8001688:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800168a:	2323      	movs	r3, #35	; 0x23
 800168c:	737b      	strb	r3, [r7, #13]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4619      	mov	r1, r3
 8001694:	2002      	movs	r0, #2
 8001696:	f000 f9b5 	bl	8001a04 <LTC_Pec15_Calc>
 800169a:	4603      	mov	r3, r0
 800169c:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800169e:	8a7b      	ldrh	r3, [r7, #18]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 80016a8:	8a7b      	ldrh	r3, [r7, #18]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	73fb      	strb	r3, [r7, #15]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80016ae:	f7ff fe75 	bl	800139c <Wakeup_Idle>
	LTC_nCS_Low();
 80016b2:	f001 fa5f 	bl	8002b74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80016b6:	f107 010c 	add.w	r1, r7, #12
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	2204      	movs	r2, #4
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <LTC_STCOMM+0x7c>)
 80016c0:	f004 fad6 	bl	8005c70 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e008      	b.n	80016dc <LTC_STCOMM+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 80016ca:	2364      	movs	r3, #100	; 0x64
 80016cc:	2201      	movs	r2, #1
 80016ce:	21ff      	movs	r1, #255	; 0xff
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <LTC_STCOMM+0x7c>)
 80016d2:	f004 facd 	bl	8005c70 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	dbef      	blt.n	80016ca <LTC_STCOMM+0x4e>
	}
	LTC_nCS_High();
 80016ea:	f001 fa37 	bl	8002b5c <LTC_nCS_High>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200002e4 	.word	0x200002e4

080016fc <Read_Cell_Temps>:

LTC_SPI_StatusTypeDef Read_Cell_Temps(uint16_t *read_auxiliary) {
 80016fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001700:	b089      	sub	sp, #36	; 0x24
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	466b      	mov	r3, sp
 8001708:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001712:	7f3b      	ldrb	r3, [r7, #28]
 8001714:	3b01      	subs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	7f3b      	ldrb	r3, [r7, #28]
 800171a:	2200      	movs	r2, #0
 800171c:	4698      	mov	r8, r3
 800171e:	4691      	mov	r9, r2
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800172c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001730:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001734:	7f3b      	ldrb	r3, [r7, #28]
 8001736:	2200      	movs	r2, #0
 8001738:	461c      	mov	r4, r3
 800173a:	4615      	mov	r5, r2
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	00eb      	lsls	r3, r5, #3
 8001746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174a:	00e2      	lsls	r2, r4, #3
 800174c:	7f3b      	ldrb	r3, [r7, #28]
 800174e:	3307      	adds	r3, #7
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	ebad 0d03 	sub.w	sp, sp, r3
 8001758:	466b      	mov	r3, sp
 800175a:	3300      	adds	r3, #0
 800175c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	77bb      	strb	r3, [r7, #30]
 8001762:	e074      	b.n	800184e <Read_Cell_Temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001764:	7fbb      	ldrb	r3, [r7, #30]
 8001766:	4a3f      	ldr	r2, [pc, #252]	; (8001864 <Read_Cell_Temps+0x168>)
 8001768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001774:	7fbb      	ldrb	r3, [r7, #30]
 8001776:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <Read_Cell_Temps+0x168>)
 8001778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4619      	mov	r1, r3
 8001786:	2002      	movs	r0, #2
 8001788:	f000 f93c 	bl	8001a04 <LTC_Pec15_Calc>
 800178c:	4603      	mov	r3, r0
 800178e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001790:	8a7b      	ldrh	r3, [r7, #18]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800179a:	8a7b      	ldrh	r3, [r7, #18]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	72fb      	strb	r3, [r7, #11]

		Wakeup_Idle(); // Wake LTC up
 80017a0:	f7ff fdfc 	bl	800139c <Wakeup_Idle>

		LTC_nCS_Low(); // Pull CS low
 80017a4:	f001 f9e6 	bl	8002b74 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80017a8:	f107 0108 	add.w	r1, r7, #8
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	2204      	movs	r2, #4
 80017b0:	482d      	ldr	r0, [pc, #180]	; (8001868 <Read_Cell_Temps+0x16c>)
 80017b2:	f004 fa5d 	bl	8005c70 <HAL_SPI_Transmit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 80017ba:	7c7b      	ldrb	r3, [r7, #17]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <Read_Cell_Temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 80017c0:	7c7b      	ldrb	r3, [r7, #17]
 80017c2:	2201      	movs	r2, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80017d4:	7f3b      	ldrb	r3, [r7, #28]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	6979      	ldr	r1, [r7, #20]
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <Read_Cell_Temps+0x16c>)
 80017de:	f004 fb8a 	bl	8005ef6 <HAL_SPI_Receive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 80017e6:	7c7b      	ldrb	r3, [r7, #17]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00a      	beq.n	8001802 <Read_Cell_Temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80017ec:	7c7b      	ldrb	r3, [r7, #17]
 80017ee:	3304      	adds	r3, #4
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	b25a      	sxtb	r2, r3
 80017f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001802:	2300      	movs	r3, #0
 8001804:	777b      	strb	r3, [r7, #29]
 8001806:	e01a      	b.n	800183e <Read_Cell_Temps+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 8001808:	7f7b      	ldrb	r3, [r7, #29]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 8001812:	7f7a      	ldrb	r2, [r7, #29]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 800181e:	7fba      	ldrb	r2, [r7, #30]
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
			memcpy(
 800182e:	2206      	movs	r2, #6
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	4618      	mov	r0, r3
 8001834:	f008 fba0 	bl	8009f78 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001838:	7f7b      	ldrb	r3, [r7, #29]
 800183a:	3301      	adds	r3, #1
 800183c:	777b      	strb	r3, [r7, #29]
 800183e:	7f7b      	ldrb	r3, [r7, #29]
 8001840:	2b07      	cmp	r3, #7
 8001842:	d9e1      	bls.n	8001808 <Read_Cell_Temps+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 8001844:	f001 f98a 	bl	8002b5c <LTC_nCS_High>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001848:	7fbb      	ldrb	r3, [r7, #30]
 800184a:	3301      	adds	r3, #1
 800184c:	77bb      	strb	r3, [r7, #30]
 800184e:	7fbb      	ldrb	r3, [r7, #30]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d987      	bls.n	8001764 <Read_Cell_Temps+0x68>
	}

	return ret;
 8001854:	7ffb      	ldrb	r3, [r7, #31]
 8001856:	46b5      	mov	sp, r6
}
 8001858:	4618      	mov	r0, r3
 800185a:	3724      	adds	r7, #36	; 0x24
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001862:	bf00      	nop
 8001864:	0800a464 	.word	0x0800a464
 8001868:	200002e4 	.word	0x200002e4

0800186c <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
 8001876:	460b      	mov	r3, r1
 8001878:	71bb      	strb	r3, [r7, #6]
 800187a:	4613      	mov	r3, r2
 800187c:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	105b      	asrs	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	3302      	adds	r3, #2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	01db      	lsls	r3, r3, #7
 8001896:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	b2da      	uxtb	r2, r3
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3360      	adds	r3, #96	; 0x60
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 80018b0:	f107 0308 	add.w	r3, r7, #8
 80018b4:	4619      	mov	r1, r3
 80018b6:	2002      	movs	r0, #2
 80018b8:	f000 f8a4 	bl	8001a04 <LTC_Pec15_Calc>
 80018bc:	4603      	mov	r3, r0
 80018be:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80018c0:	89bb      	ldrh	r3, [r7, #12]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80018ca:	89bb      	ldrh	r3, [r7, #12]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	72fb      	strb	r3, [r7, #11]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80018d0:	f7ff fd64 	bl	800139c <Wakeup_Idle>
	LTC_nCS_Low();
 80018d4:	f001 f94e 	bl	8002b74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80018d8:	f107 0108 	add.w	r1, r7, #8
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	2204      	movs	r2, #4
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <LTC_ADCV+0x88>)
 80018e2:	f004 f9c5 	bl	8005c70 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80018e6:	f001 f939 	bl	8002b5c <LTC_nCS_High>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002e4 	.word	0x200002e4

080018f8 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	105b      	asrs	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	3304      	adds	r3, #4
 8001918:	b2db      	uxtb	r3, r3
 800191a:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	01db      	lsls	r3, r3, #7
 8001920:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	b2db      	uxtb	r3, r3
 800192e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	2002      	movs	r0, #2
 8001938:	f000 f864 	bl	8001a04 <LTC_Pec15_Calc>
 800193c:	4603      	mov	r3, r0
 800193e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001940:	89bb      	ldrh	r3, [r7, #12]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	b29b      	uxth	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800194a:	89bb      	ldrh	r3, [r7, #12]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	72fb      	strb	r3, [r7, #11]
	 Wakeup_Idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001950:	f7ff fd24 	bl	800139c <Wakeup_Idle>
	LTC_nCS_Low();
 8001954:	f001 f90e 	bl	8002b74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001958:	f107 0108 	add.w	r1, r7, #8
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	2204      	movs	r2, #4
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <LTC_ADAX+0x7c>)
 8001962:	f004 f985 	bl	8005c70 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001966:	f001 f8f9 	bl	8002b5c <LTC_nCS_High>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002e4 	.word	0x200002e4

08001978 <LTC_POLLADC>:

int32_t LTC_POLLADC() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800198a:	2307      	movs	r3, #7
 800198c:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800198e:	2314      	movs	r3, #20
 8001990:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_Pec15_Calc(2, cmd);
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	4619      	mov	r1, r3
 8001996:	2002      	movs	r0, #2
 8001998:	f000 f834 	bl	8001a04 <LTC_Pec15_Calc>
 800199c:	4603      	mov	r3, r0
 800199e:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	71fb      	strb	r3, [r7, #7]

	Wakeup_Idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80019b0:	f7ff fcf4 	bl	800139c <Wakeup_Idle>

	LTC_nCS_Low();
 80019b4:	f001 f8de 	bl	8002b74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80019b8:	1d39      	adds	r1, r7, #4
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	2204      	movs	r2, #4
 80019be:	480f      	ldr	r0, [pc, #60]	; (80019fc <LTC_POLLADC+0x84>)
 80019c0:	f004 f956 	bl	8005c70 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 80019c4:	e00c      	b.n	80019e0 <LTC_POLLADC+0x68>
		current_time = HAL_GetTick();
 80019c6:	f001 fa53 	bl	8002e70 <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 80019ce:	7abb      	ldrb	r3, [r7, #10]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <LTC_POLLADC+0x62>
			finished = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	72fb      	strb	r3, [r7, #11]
 80019d8:	e002      	b.n	80019e0 <LTC_POLLADC+0x68>
		} else {
			counter = counter + 10;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	330a      	adds	r3, #10
 80019de:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <LTC_POLLADC+0x88>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d802      	bhi.n	80019ee <LTC_POLLADC+0x76>
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0eb      	beq.n	80019c6 <LTC_POLLADC+0x4e>
		}
	}
	LTC_nCS_High();
 80019ee:	f001 f8b5 	bl	8002b5c <LTC_nCS_High>
	return (counter);
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002e4 	.word	0x200002e4
 8001a00:	00030d3f 	.word	0x00030d3f

08001a04 <LTC_Pec15_Calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t LTC_Pec15_Calc(uint8_t len, uint8_t *data) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001a10:	2310      	movs	r3, #16
 8001a12:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a14:	2300      	movs	r3, #0
 8001a16:	737b      	strb	r3, [r7, #13]
 8001a18:	e018      	b.n	8001a4c <LTC_Pec15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	09db      	lsrs	r3, r3, #7
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	440b      	add	r3, r1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <LTC_Pec15_Calc+0x60>)
 8001a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4053      	eors	r3, r2
 8001a44:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001a46:	7b7b      	ldrb	r3, [r7, #13]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	737b      	strb	r3, [r7, #13]
 8001a4c:	7b7a      	ldrb	r2, [r7, #13]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3e2      	bcc.n	8001a1a <LTC_Pec15_Calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b29b      	uxth	r3, r3
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	0800a468 	.word	0x0800a468

08001a68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a7a:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <MX_ADC1_Init+0x78>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_ADC1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_ADC1_Init+0x74>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <MX_ADC1_Init+0x74>)
 8001aa6:	f001 fa11 	bl	8002ecc <HAL_ADC_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ab0:	f000 fdd4 	bl	800265c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ab4:	230e      	movs	r3, #14
 8001ab6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_ADC1_Init+0x74>)
 8001ac6:	f001 fad9 	bl	800307c <HAL_ADC_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001ad0:	f000 fdc4 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000254 	.word	0x20000254
 8001ae0:	40012400 	.word	0x40012400

08001ae4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001af6:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <MX_ADC2_Init+0x78>)
 8001af8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b0e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b22:	f001 f9d3 	bl	8002ecc <HAL_ADC_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 fd96 	bl	800265c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b30:	230a      	movs	r3, #10
 8001b32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_ADC2_Init+0x74>)
 8001b42:	f001 fa9b 	bl	800307c <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8001b4c:	f000 fd86 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000284 	.word	0x20000284
 8001b5c:	40012800 	.word	0x40012800

08001b60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <HAL_ADC_MspInit+0xbc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d122      	bne.n	8001bc6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bb0:	2330      	movs	r3, #48	; 0x30
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4819      	ldr	r0, [pc, #100]	; (8001c24 <HAL_ADC_MspInit+0xc4>)
 8001bc0:	f001 fed6 	bl	8003970 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001bc4:	e026      	b.n	8001c14 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_ADC_MspInit+0xc8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d121      	bne.n	8001c14 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_ADC_MspInit+0xc0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c00:	230f      	movs	r3, #15
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c04:	2303      	movs	r3, #3
 8001c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_ADC_MspInit+0xc4>)
 8001c10:	f001 feae 	bl	8003970 <HAL_GPIO_Init>
}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40012400 	.word	0x40012400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40012800 	.word	0x40012800

08001c2c <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c32:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <MX_CAN2_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c38:	2209      	movs	r2, #9
 8001c3a:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c4e:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c52:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001c56:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c58:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_CAN2_Init+0x64>)
 8001c7e:	f001 fb36 	bl	80032ee <HAL_CAN_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_CAN2_Init+0x60>
		Error_Handler();
 8001c88:	f000 fce8 	bl	800265c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200002b4 	.word	0x200002b4
 8001c94:	40006800 	.word	0x40006800

08001c98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_CAN_MspInit+0xa4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d13d      	bne.n	8001d34 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cc2:	61d3      	str	r3, [r2, #28]
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a1a      	ldr	r2, [pc, #104]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	61d3      	str	r3, [r2, #28]
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_CAN_MspInit+0xa8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d04:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 0318 	add.w	r3, r7, #24
 8001d12:	4619      	mov	r1, r3
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <HAL_CAN_MspInit+0xac>)
 8001d16:	f001 fe2b 	bl	8003970 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HAL_CAN_MspInit+0xac>)
 8001d30:	f001 fe1e 	bl	8003970 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40006800 	.word	0x40006800
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010c00 	.word	0x40010c00

08001d48 <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <CAN_Start+0x10>)
 8001d4e:	f001 fbc9 	bl	80034e4 <HAL_CAN_Start>
 8001d52:	4603      	mov	r3, r0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200002b4 	.word	0x200002b4

08001d5c <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d60:	2102      	movs	r1, #2
 8001d62:	4803      	ldr	r0, [pc, #12]	; (8001d70 <CAN_Activate+0x14>)
 8001d64:	f001 fcd1 	bl	800370a <HAL_CAN_ActivateNotification>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200002b4 	.word	0x200002b4

08001d74 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f103 021c 	add.w	r2, r3, #28
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3318      	adds	r3, #24
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <CAN_Send+0x24>)
 8001d8a:	f001 fbef 	bl	800356c <HAL_CAN_AddTxMessage>
 8001d8e:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200002b4 	.word	0x200002b4

08001d9c <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001da4:	f7ff ffd0 	bl	8001d48 <CAN_Start>
	CAN_Activate();
 8001da8:	f7ff ffd8 	bl	8001d5c <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <Set_CAN_Id>:

void Set_CAN_Id(struct CANMessage *ptr, uint32_t id) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001df0:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001df4:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffe6 	bl	8001dcc <Set_CAN_Id>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e074      	b.n	8001ef0 <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d156      	bne.n	8001ebe <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3301      	adds	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd0c      	ble.n	8001ede <CAN_Send_Voltage+0xf8>
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 8001ece:	8afb      	ldrh	r3, [r7, #22]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	82fb      	strh	r3, [r7, #22]
			Set_CAN_Id(ptr, CAN_ID);
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff77 	bl	8001dcc <Set_CAN_Id>
		}
		HAL_Delay(10);
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f000 ffd0 	bl	8002e84 <HAL_Delay>
		CAN_Send(ptr);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff45 	bl	8001d74 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	3301      	adds	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b5f      	cmp	r3, #95	; 0x5f
 8001ef4:	dd87      	ble.n	8001e06 <CAN_Send_Voltage+0x20>
	}

}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8001f0a:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8001f0e:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff59 	bl	8001dcc <Set_CAN_Id>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	737b      	strb	r3, [r7, #13]
 8001f1e:	e076      	b.n	800200e <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 8001f20:	7b7b      	ldrb	r3, [r7, #13]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d156      	bne.n	8001fda <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8001f2c:	7b7b      	ldrb	r3, [r7, #13]
 8001f2e:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 8001f30:	7b3b      	ldrb	r3, [r7, #12]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 8001f40:	7b3b      	ldrb	r3, [r7, #12]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	3301      	adds	r3, #1
 8001f58:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8001f5a:	7b3b      	ldrb	r3, [r7, #12]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001f6a:	7b3b      	ldrb	r3, [r7, #12]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8001f7e:	7b3b      	ldrb	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001f84:	7b3b      	ldrb	r3, [r7, #12]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001f96:	7b3b      	ldrb	r3, [r7, #12]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8001fac:	7b3b      	ldrb	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 8001fb2:	7b3b      	ldrb	r3, [r7, #12]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001fda:	7b7b      	ldrb	r3, [r7, #13]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <CAN_Send_Temperature+0xfc>
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	81fb      	strh	r3, [r7, #14]
			Set_CAN_Id(ptr, CAN_ID);
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fee8 	bl	8001dcc <Set_CAN_Id>
		}
		HAL_Delay(10);
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	f000 ff41 	bl	8002e84 <HAL_Delay>
		CAN_Send(ptr);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff feb6 	bl	8001d74 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8002008:	7b7b      	ldrb	r3, [r7, #13]
 800200a:	3301      	adds	r3, #1
 800200c:	737b      	strb	r3, [r7, #13]
 800200e:	7b7b      	ldrb	r3, [r7, #13]
 8002010:	2b5f      	cmp	r3, #95	; 0x5f
 8002012:	d985      	bls.n	8001f20 <CAN_Send_Temperature+0x20>
	}

}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr, struct batteryModule *batt) {
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002028:	f240 6322 	movw	r3, #1570	; 0x622
 800202c:	81fb      	strh	r3, [r7, #14]
	Set_CAN_Id(ptr, CAN_ID);
 800202e:	89fb      	ldrh	r3, [r7, #14]
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff feca 	bl	8001dcc <Set_CAN_Id>

	ptr->data[0] = batt->cell_volt_highest;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	89db      	ldrh	r3, [r3, #14]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	89db      	ldrh	r3, [r3, #14]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	b29b      	uxth	r3, r3
 800204a:	b2da      	uxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	899b      	ldrh	r3, [r3, #12]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	899b      	ldrh	r3, [r3, #12]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29b      	uxth	r3, r3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	8a5b      	ldrh	r3, [r3, #18]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	8a5b      	ldrh	r3, [r3, #18]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	8a1b      	ldrh	r3, [r3, #16]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	8a1b      	ldrh	r3, [r3, #16]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f000 feef 	bl	8002e84 <HAL_Delay>
	CAN_Send(ptr);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fe64 	bl	8001d74 <CAN_Send>
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, struct batteryModule *batt, uint8_t *faults,
		uint8_t *warnings, uint8_t *states) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
	uint16_t CAN_ID = 0x600;
 80020c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c6:	82fb      	strh	r3, [r7, #22]
	Set_CAN_Id(ptr, CAN_ID);
 80020c8:	8afb      	ldrh	r3, [r7, #22]
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fe7d 	bl	8001dcc <Set_CAN_Id>
	ptr->data[0] = *faults;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = *states;
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = batt->pack_voltage;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = (batt->pack_voltage) >> 8;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->pack_voltage) >> 16;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = (batt->pack_voltage) >> 24;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	0e1b      	lsrs	r3, r3, #24
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	HAL_Delay(10);
 800211e:	200a      	movs	r0, #10
 8002120:	f000 feb0 	bl	8002e84 <HAL_Delay>
	CAN_Send(ptr);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff fe25 	bl	8001d74 <CAN_Send>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <MX_GPIO_Init+0x160>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a51      	ldr	r2, [pc, #324]	; (8002294 <MX_GPIO_Init+0x160>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <MX_GPIO_Init+0x160>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <MX_GPIO_Init+0x160>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <MX_GPIO_Init+0x160>)
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <MX_GPIO_Init+0x160>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <MX_GPIO_Init+0x160>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a45      	ldr	r2, [pc, #276]	; (8002294 <MX_GPIO_Init+0x160>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <MX_GPIO_Init+0x160>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	4b40      	ldr	r3, [pc, #256]	; (8002294 <MX_GPIO_Init+0x160>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a3f      	ldr	r2, [pc, #252]	; (8002294 <MX_GPIO_Init+0x160>)
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <MX_GPIO_Init+0x160>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2110      	movs	r1, #16
 80021ac:	483a      	ldr	r0, [pc, #232]	; (8002298 <MX_GPIO_Init+0x164>)
 80021ae:	f001 fd63 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2102      	movs	r1, #2
 80021b6:	4839      	ldr	r0, [pc, #228]	; (800229c <MX_GPIO_Init+0x168>)
 80021b8:	f001 fd5e 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	4837      	ldr	r0, [pc, #220]	; (80022a0 <MX_GPIO_Init+0x16c>)
 80021c2:	f001 fd59 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80021c6:	2310      	movs	r3, #16
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	482e      	ldr	r0, [pc, #184]	; (8002298 <MX_GPIO_Init+0x164>)
 80021de:	f001 fbc7 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e2:	2302      	movs	r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2302      	movs	r3, #2
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4828      	ldr	r0, [pc, #160]	; (800229c <MX_GPIO_Init+0x168>)
 80021fa:	f001 fbb9 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80021fe:	2340      	movs	r3, #64	; 0x40
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2302      	movs	r3, #2
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4822      	ldr	r0, [pc, #136]	; (80022a0 <MX_GPIO_Init+0x16c>)
 8002216:	f001 fbab 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	481c      	ldr	r0, [pc, #112]	; (80022a0 <MX_GPIO_Init+0x16c>)
 8002230:	f001 fb9e 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4814      	ldr	r0, [pc, #80]	; (800229c <MX_GPIO_Init+0x168>)
 800224a:	f001 fb91 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_GPIO_Init+0x168>)
 8002264:	f001 fb84 	bl	8003970 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_GPIO_Init+0x170>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <MX_GPIO_Init+0x170>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	6053      	str	r3, [r2, #4]

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40010000 	.word	0x40010000

080022a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b09d      	sub	sp, #116	; 0x74
 80022ac:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	struct batteryModule modPackInfo = { .cell_volt = (uint16_t*) malloc(
 80022ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	619a      	str	r2, [r3, #24]
 80022c2:	20c0      	movs	r0, #192	; 0xc0
 80022c4:	f007 fd58 	bl	8009d78 <malloc>
 80022c8:	4603      	mov	r3, r0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 80022cc:	20c0      	movs	r0, #192	; 0xc0
 80022ce:	f007 fd53 	bl	8009d78 <malloc>
 80022d2:	4603      	mov	r3, r0
	struct batteryModule modPackInfo = { .cell_volt = (uint16_t*) malloc(
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
	NUM_AUXES * sizeof(uint16_t)), .module_averages = (uint16_t*) malloc(
 80022d6:	2010      	movs	r0, #16
 80022d8:	f007 fd4e 	bl	8009d78 <malloc>
 80022dc:	4603      	mov	r3, r0
	struct batteryModule modPackInfo = { .cell_volt = (uint16_t*) malloc(
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 80022e0:	2060      	movs	r0, #96	; 0x60
 80022e2:	f007 fd49 	bl	8009d78 <malloc>
 80022e6:	4603      	mov	r3, r0
	struct batteryModule modPackInfo = { .cell_volt = (uint16_t*) malloc(
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
			(NUM_DEVICES) * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	71fb      	strb	r3, [r7, #7]
	uint8_t safetyWarnings = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	71bb      	strb	r3, [r7, #6]
	uint8_t safetyStates = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	717b      	strb	r3, [r7, #5]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022f6:	f000 fd63 	bl	8002dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022fa:	f000 f8d3 	bl	80024a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022fe:	f7ff ff19 	bl	8002134 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002302:	f7ff fbb1 	bl	8001a68 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002306:	f7ff fbed 	bl	8001ae4 <MX_ADC2_Init>
	MX_TIM7_Init();
 800230a:	f000 fcdf 	bl	8002ccc <MX_TIM7_Init>
	MX_SPI1_Init();
 800230e:	f000 fba5 	bl	8002a5c <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8002312:	f007 f86f 	bl	80093f4 <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 8002316:	f7ff fc89 	bl	8001c2c <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fd3c 	bl	8001d9c <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8002324:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	495a      	ldr	r1, [pc, #360]	; (8002494 <main+0x1ec>)
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f925 	bl	800257c <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8002332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002336:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f95e 	bl	80025fc <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8002340:	f000 fc0c 	bl	8002b5c <LTC_nCS_High>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t indexpause = 8;
 800234a:	2308      	movs	r3, #8
 800234c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t loop_count = 4;
 8002350:	2304      	movs	r3, #4
 8002352:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800235a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f929 	bl	80025b6 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8002364:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f95a 	bl	8002622 <TimerPacket_FixedPulse>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <main+0xae>
			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &modPackInfo, &safetyFaults,
 8002374:	1dbc      	adds	r4, r7, #6
 8002376:	1dfa      	adds	r2, r7, #7
 8002378:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800237c:	f107 0008 	add.w	r0, r7, #8
 8002380:	1d7b      	adds	r3, r7, #5
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4623      	mov	r3, r4
 8002386:	f7ff fe95 	bl	80020b4 <CAN_Send_Safety_Checker>
					&safetyWarnings, &safetyStates);
			CAN_Send_Cell_Summary(&msg, &modPackInfo);
 800238a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fe42 	bl	800201e <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modPackInfo.cell_volt);
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fd1f 	bl	8001de6 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modPackInfo.cell_temp);
 80023a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fda5 	bl	8001f00 <CAN_Send_Temperature>

			//reading cell voltages
			Wakeup_Sleep();
 80023b6:	f7ff f811 	bl	80013dc <Wakeup_Sleep>
			Read_Volt(modPackInfo.cell_volt);
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f9e7 	bl	8002790 <Read_Volt>
			//print(NUM_CELLS, (uint16_t*) modPackInfo.cell_volt);

			//reading cell temperatures
			Wakeup_Sleep();
 80023c2:	f7ff f80b 	bl	80013dc <Wakeup_Sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80023c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023ca:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80023ce:	e010      	b.n	80023f2 <main+0x14a>
				Wakeup_Idle();
 80023d0:	f7fe ffe4 	bl	800139c <Wakeup_Idle>
				Read_Temp(i, modPackInfo.cell_temp, modPackInfo.read_auxreg);
 80023d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023d8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f9eb 	bl	80027b8 <Read_Temp>
				HAL_Delay(100);
 80023e2:	2064      	movs	r0, #100	; 0x64
 80023e4:	f000 fd4e 	bl	8002e84 <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80023e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80023ec:	3301      	adds	r3, #1
 80023ee:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80023f2:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80023f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3e8      	bcc.n	80023d0 <main+0x128>
			}
			if (indexpause == 8) {
 80023fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002402:	2b08      	cmp	r3, #8
 8002404:	d111      	bne.n	800242a <main+0x182>
				tempindex = 8;
 8002406:	2308      	movs	r3, #8
 8002408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				indexpause = NUM_THERM_PER_MOD;
 800240c:	230c      	movs	r3, #12
 800240e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				Wakeup_Idle();
 8002412:	f7fe ffc3 	bl	800139c <Wakeup_Idle>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[0]);
 8002416:	4920      	ldr	r1, [pc, #128]	; (8002498 <main+0x1f0>)
 8002418:	2008      	movs	r0, #8
 800241a:	f7ff f8b3 	bl	8001584 <LTC_WRCOMM>
				Wakeup_Idle();
 800241e:	f7fe ffbd 	bl	800139c <Wakeup_Idle>
				LTC_STCOMM(2);
 8002422:	2002      	movs	r0, #2
 8002424:	f7ff f92a 	bl	800167c <LTC_STCOMM>
 8002428:	e014      	b.n	8002454 <main+0x1ac>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 800242a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d110      	bne.n	8002454 <main+0x1ac>
				Wakeup_Idle();
 8002432:	f7fe ffb3 	bl	800139c <Wakeup_Idle>
				LTC_WRCOMM(NUM_DEVICES, BMS_MUX_PAUSE[1]);
 8002436:	4919      	ldr	r1, [pc, #100]	; (800249c <main+0x1f4>)
 8002438:	2008      	movs	r0, #8
 800243a:	f7ff f8a3 	bl	8001584 <LTC_WRCOMM>
				Wakeup_Idle();
 800243e:	f7fe ffad 	bl	800139c <Wakeup_Idle>
				LTC_STCOMM(2);
 8002442:	2002      	movs	r0, #2
 8002444:	f7ff f91a 	bl	800167c <LTC_STCOMM>
				indexpause = 8;
 8002448:	2308      	movs	r3, #8
 800244a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				tempindex = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			//print(NUM_THERM_TOTAL, (uint16_t*) modPackInfo.cell_temp);

			//getting the summary of all cells in the pack
			Cell_Summary(&modPackInfo);
 8002454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f9f3 	bl	8002844 <Cell_Summary>

			//waiting for 3 loops of the while look to occur before checking for faults
			if (loop_count == 0) {
 800245e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002462:	2b00      	cmp	r3, #0
 8002464:	d110      	bne.n	8002488 <main+0x1e0>
				Fault_Warning_State(&modPackInfo, &safetyFaults,
 8002466:	1d7b      	adds	r3, r7, #5
 8002468:	1dba      	adds	r2, r7, #6
 800246a:	1df9      	adds	r1, r7, #7
 800246c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002470:	f000 fa71 	bl	8002956 <Fault_Warning_State>
						&safetyWarnings, &safetyStates);
				if (safetyFaults != 0) {
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f43f af6d 	beq.w	8002356 <main+0xae>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	2102      	movs	r1, #2
 8002480:	4807      	ldr	r0, [pc, #28]	; (80024a0 <main+0x1f8>)
 8002482:	f001 fbf9 	bl	8003c78 <HAL_GPIO_WritePin>
 8002486:	e766      	b.n	8002356 <main+0xae>
				} else if (BALANCE) {
					End_Balance(&safetyFaults);
				}

			} else {
				loop_count--;
 8002488:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800248c:	3b01      	subs	r3, #1
 800248e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002492:	e760      	b.n	8002356 <main+0xae>
 8002494:	40011000 	.word	0x40011000
 8002498:	20000000 	.word	0x20000000
 800249c:	20000006 	.word	0x20000006
 80024a0:	40010c00 	.word	0x40010c00

080024a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09c      	sub	sp, #112	; 0x70
 80024a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80024aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ae:	2238      	movs	r2, #56	; 0x38
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f007 fd1c 	bl	8009ef0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2220      	movs	r2, #32
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 fd0e 	bl	8009ef0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024dc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80024de:	2304      	movs	r3, #4
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e2:	2301      	movs	r3, #1
 80024e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80024e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ec:	2302      	movs	r3, #2
 80024ee:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024fa:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80024fc:	2302      	movs	r3, #2
 80024fe:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002500:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002504:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800250a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fd14 	bl	8004f3c <HAL_RCC_OscConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0x7a>
		Error_Handler();
 800251a:	f000 f89f 	bl	800265c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800251e:	230f      	movs	r3, #15
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002522:	2302      	movs	r3, #2
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	2102      	movs	r1, #2
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f814 	bl	8005568 <HAL_RCC_ClockConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0xa6>
		Error_Handler();
 8002546:	f000 f889 	bl	800265c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800254a:	2312      	movs	r3, #18
 800254c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800254e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002552:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f003 f9d2 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SystemClock_Config+0xc6>
		Error_Handler();
 8002566:	f000 f879 	bl	800265c <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800256a:	4b03      	ldr	r3, [pc, #12]	; (8002578 <SystemClock_Config+0xd4>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	bf00      	nop
 8002572:	3770      	adds	r7, #112	; 0x70
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	42420070 	.word	0x42420070

0800257c <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2200      	movs	r2, #0
 800258e:	4619      	mov	r1, r3
 8002590:	68b8      	ldr	r0, [r7, #8]
 8002592:	f001 fb71 	bl	8003c78 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80025c2:	f000 fc55 	bl	8002e70 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	1ad2      	subs	r2, r2, r3
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d90b      	bls.n	80025f4 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f001 fb5e 	bl	8003ca8 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
	}
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800262a:	f000 fc21 	bl	8002e70 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	d905      	bls.n	8002652 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002664:	e7fe      	b.n	8002664 <Error_Handler+0x8>
	...

08002668 <Get_Actual_Temps>:
		{ 0x69, 0x08, 0x0F, 0xB9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xA9, 0x7F,
				0xF9 }, { 0x69, 0x08, 0x0F, 0x99, 0x7F, 0xF9 }, { 0x69, 0x08,
				0x0F, 0x89, 0x7F, 0xF9 } };

void Get_Actual_Temps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	603a      	str	r2, [r7, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	460b      	mov	r3, r1
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	4613      	mov	r3, r2
 800267c:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fb43 	bl	8000d0c <__aeabi_ui2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	483a      	ldr	r0, [pc, #232]	; (8002774 <Get_Actual_Temps+0x10c>)
 800268c:	f7fe fc4a 	bl	8000f24 <__aeabi_fdiv>
 8002690:	4603      	mov	r3, r0
 8002692:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fa86 	bl	8000ba8 <__aeabi_fsub>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	4b35      	ldr	r3, [pc, #212]	; (8002778 <Get_Actual_Temps+0x110>)
 80026a2:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <Get_Actual_Temps+0x110>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4834      	ldr	r0, [pc, #208]	; (800277c <Get_Actual_Temps+0x114>)
 80026ac:	f7fe fc3a 	bl	8000f24 <__aeabi_fdiv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <Get_Actual_Temps+0x110>)
 80026b6:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <Get_Actual_Temps+0x110>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	492f      	ldr	r1, [pc, #188]	; (800277c <Get_Actual_Temps+0x114>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fc30 	bl	8000f24 <__aeabi_fdiv>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <Get_Actual_Temps+0x118>)
 80026ca:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <Get_Actual_Temps+0x118>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff0d 	bl	80004f0 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f007 fca1 	bl	800a024 <log>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe fa09 	bl	8000b00 <__aeabi_d2f>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <Get_Actual_Temps+0x118>)
 80026f2:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <Get_Actual_Temps+0x118>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4922      	ldr	r1, [pc, #136]	; (8002784 <Get_Actual_Temps+0x11c>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fc12 	bl	8000f24 <__aeabi_fdiv>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <Get_Actual_Temps+0x118>)
 8002706:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <Get_Actual_Temps+0x118>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	491e      	ldr	r1, [pc, #120]	; (8002788 <Get_Actual_Temps+0x120>)
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fa4c 	bl	8000bac <__addsf3>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <Get_Actual_Temps+0x118>)
 800271a:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <Get_Actual_Temps+0x118>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002726:	f7fe fbfd 	bl	8000f24 <__aeabi_fdiv>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <Get_Actual_Temps+0x118>)
 8002730:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <Get_Actual_Temps+0x118>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4915      	ldr	r1, [pc, #84]	; (800278c <Get_Actual_Temps+0x124>)
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fa35 	bl	8000ba8 <__aeabi_fsub>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <Get_Actual_Temps+0x118>)
 8002744:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <Get_Actual_Temps+0x118>)
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	79fa      	ldrb	r2, [r7, #7]
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	461a      	mov	r2, r3
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	18d4      	adds	r4, r2, r3
 8002760:	4608      	mov	r0, r1
 8002762:	f7fe fc7b 	bl	800105c <__aeabi_f2uiz>
 8002766:	4603      	mov	r3, r0
 8002768:	b29b      	uxth	r3, r3
 800276a:	8023      	strh	r3, [r4, #0]

}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	46ea6000 	.word	0x46ea6000
 8002778:	200002dc 	.word	0x200002dc
 800277c:	461c4000 	.word	0x461c4000
 8002780:	200002e0 	.word	0x200002e0
 8002784:	4556b000 	.word	0x4556b000
 8002788:	3b5bcf0f 	.word	0x3b5bcf0f
 800278c:	43889333 	.word	0x43889333

08002790 <Read_Volt>:

void Read_Volt(uint16_t *read_volt) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	LTC_ADCV(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 8002798:	2200      	movs	r2, #0
 800279a:	2100      	movs	r1, #0
 800279c:	2002      	movs	r0, #2
 800279e:	f7ff f865 	bl	800186c <LTC_ADCV>
	LTC_POLLADC();
 80027a2:	f7ff f8e9 	bl	8001978 <LTC_POLLADC>
	Wakeup_Idle();
 80027a6:	f7fe fdf9 	bl	800139c <Wakeup_Idle>
	Read_Cell_Volt((uint16_t*) read_volt);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fe32 	bl	8001414 <Read_Cell_Volt>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <Read_Temp>:

void Read_Temp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	73fb      	strb	r3, [r7, #15]
	LTC_WRCOMM(NUM_DEVICES, BMS_THERM[tempindex]);
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <Read_Temp+0x88>)
 80027d2:	4413      	add	r3, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	2008      	movs	r0, #8
 80027d8:	f7fe fed4 	bl	8001584 <LTC_WRCOMM>
	Wakeup_Idle();
 80027dc:	f7fe fdde 	bl	800139c <Wakeup_Idle>
	LTC_STCOMM(2);
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7fe ff4b 	bl	800167c <LTC_STCOMM>
	//end sending to mux to read temperatures

	Wakeup_Idle();
 80027e6:	f7fe fdd9 	bl	800139c <Wakeup_Idle>
	LTC_ADAX(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 80027ea:	2101      	movs	r1, #1
 80027ec:	2002      	movs	r0, #2
 80027ee:	f7ff f883 	bl	80018f8 <LTC_ADAX>
	LTC_POLLADC();
 80027f2:	f7ff f8c1 	bl	8001978 <LTC_POLLADC>
	if (!Read_Cell_Temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe ff80 	bl	80016fc <Read_Cell_Temps>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11a      	bne.n	8002838 <Read_Temp+0x80>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
 8002806:	e014      	b.n	8002832 <Read_Temp+0x7a>
			Wakeup_Idle();
 8002808:	f7fe fdc8 	bl	800139c <Wakeup_Idle>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 800280c:	7dfa      	ldrb	r2, [r7, #23]
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			Get_Actual_Temps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 8002820:	8abb      	ldrh	r3, [r7, #20]
 8002822:	7bf9      	ldrb	r1, [r7, #15]
 8002824:	7df8      	ldrb	r0, [r7, #23]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f7ff ff1e 	bl	8002668 <Get_Actual_Temps>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	3301      	adds	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b07      	cmp	r3, #7
 8002836:	d9e7      	bls.n	8002808 <Read_Temp+0x50>

		}
	}
}
 8002838:	bf00      	nop
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000000c 	.word	0x2000000c

08002844 <Cell_Summary>:
#define CELL_LOW_TEMP_WARNING		0

#define CELL_VOLT_IMBALANCE_FAULT   5000 //0.5 V
#define CELL_VOLT_IMBALANCE_WARNING	1000 //0.1 V

void Cell_Summary(struct batteryModule *batt) {
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	81da      	strh	r2, [r3, #14]
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	881a      	ldrh	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	819a      	strh	r2, [r3, #12]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	881a      	ldrh	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	825a      	strh	r2, [r3, #18]
	batt->cell_temp_lowest = batt->cell_temp[0];
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	821a      	strh	r2, [r3, #16]
	batt->pack_voltage = (uint32_t) batt->cell_volt[0];
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	615a      	str	r2, [r3, #20]

	for (int i = 1; i < NUM_CELLS; i++) {
 8002880:	2301      	movs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e031      	b.n	80028ea <Cell_Summary+0xa6>

		if (batt->cell_volt[i] > batt->cell_volt_highest) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	89db      	ldrh	r3, [r3, #14]
 8002896:	429a      	cmp	r2, r3
 8002898:	d907      	bls.n	80028aa <Cell_Summary+0x66>
			batt->cell_volt_highest = batt->cell_volt[i];
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	81da      	strh	r2, [r3, #14]
		}

		if (batt->cell_volt[i] < batt->cell_volt_lowest) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	899b      	ldrh	r3, [r3, #12]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d207      	bcs.n	80028ce <Cell_Summary+0x8a>
			batt->cell_volt_lowest = batt->cell_volt[i];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	819a      	strh	r2, [r3, #12]
		}

		batt->pack_voltage += (uint32_t) batt->cell_volt[i];
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6811      	ldr	r1, [r2, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	0052      	lsls	r2, r2, #1
 80028da:	440a      	add	r2, r1
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < NUM_CELLS; i++) {
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b5f      	cmp	r3, #95	; 0x5f
 80028ee:	ddca      	ble.n	8002886 <Cell_Summary+0x42>
	}

	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	e026      	b.n	8002944 <Cell_Summary+0x100>
		if (batt->cell_temp_highest < batt->cell_temp[i]) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8a5a      	ldrh	r2, [r3, #18]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d207      	bcs.n	800291a <Cell_Summary+0xd6>
			batt->cell_temp_highest = batt->cell_temp[i];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	881a      	ldrh	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	825a      	strh	r2, [r3, #18]
		}

		if (batt->cell_temp_lowest > batt->cell_temp[i]) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8a1a      	ldrh	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	440b      	add	r3, r1
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d907      	bls.n	800293e <Cell_Summary+0xfa>
			batt->cell_temp_lowest = batt->cell_temp[i];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	821a      	strh	r2, [r3, #16]
	for (int i = 0; i < NUM_THERM_TOTAL; i++) {
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3301      	adds	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b5f      	cmp	r3, #95	; 0x5f
 8002948:	ddd5      	ble.n	80028f6 <Cell_Summary+0xb2>
		}
	}

}
 800294a:	bf00      	nop
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <Fault_Warning_State>:

void Fault_Warning_State(struct batteryModule *batt, uint8_t *fault,
		uint8_t *warnings, uint8_t *states) {
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
//
//	if (batt->pack_voltage <= PACK_LOW_VOLT_FAULT) {
//		*fault |= 0b01000000;
//	}

	if (batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT) {
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	899b      	ldrh	r3, [r3, #12]
 8002968:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800296c:	4293      	cmp	r3, r2
 800296e:	d806      	bhi.n	800297e <Fault_Warning_State+0x28>
		*fault |= 0b00100000;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	701a      	strb	r2, [r3, #0]
	}

	if (batt->cell_volt_highest >= CELL_HIGH_VOLT_FAULT) {
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	89db      	ldrh	r3, [r3, #14]
 8002982:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002986:	4293      	cmp	r3, r2
 8002988:	d906      	bls.n	8002998 <Fault_Warning_State+0x42>
		*fault |= 0b00010000;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	701a      	strb	r2, [r3, #0]
	}

	if (batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT) {
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8a5b      	ldrh	r3, [r3, #18]
 800299c:	2b3b      	cmp	r3, #59	; 0x3b
 800299e:	d906      	bls.n	80029ae <Fault_Warning_State+0x58>
		*fault |= 0b00001000;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	701a      	strb	r2, [r3, #0]
	}

	if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	89db      	ldrh	r3, [r3, #14]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	899b      	ldrh	r3, [r3, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80029be:	4293      	cmp	r3, r2
 80029c0:	dd06      	ble.n	80029d0 <Fault_Warning_State+0x7a>
			>= CELL_VOLT_IMBALANCE_FAULT) {
		*fault |= 0b00000100;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	701a      	strb	r2, [r3, #0]
//
//	if (batt->pack_voltage <= PACK_LOW_VOLT_WARNING) {
//		*warnings |= 0b01000000;
//	}

	if (batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING) {
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	899b      	ldrh	r3, [r3, #12]
 80029d4:	f646 1278 	movw	r2, #27000	; 0x6978
 80029d8:	4293      	cmp	r3, r2
 80029da:	d806      	bhi.n	80029ea <Fault_Warning_State+0x94>
		*warnings |= 0b00100000;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f043 0320 	orr.w	r3, r3, #32
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	701a      	strb	r2, [r3, #0]
	}

	if (batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	89db      	ldrh	r3, [r3, #14]
 80029ee:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d906      	bls.n	8002a04 <Fault_Warning_State+0xae>
		*warnings |= 0b00010000;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	701a      	strb	r2, [r3, #0]
	}

	if (batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING) {
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8a5b      	ldrh	r3, [r3, #18]
 8002a08:	2b36      	cmp	r3, #54	; 0x36
 8002a0a:	d906      	bls.n	8002a1a <Fault_Warning_State+0xc4>
		*warnings |= 0b00001000;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	701a      	strb	r2, [r3, #0]
	}

	if (batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING) {
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8a1b      	ldrh	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <Fault_Warning_State+0xda>
		*warnings |= 0b00000100;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	701a      	strb	r2, [r3, #0]
	}

	if ((batt->cell_volt_highest - batt->cell_volt_lowest)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	89db      	ldrh	r3, [r3, #14]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	899b      	ldrh	r3, [r3, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a40:	db06      	blt.n	8002a50 <Fault_Warning_State+0xfa>
			>= CELL_VOLT_IMBALANCE_WARNING) {
		*warnings |= 0b00000010;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	701a      	strb	r2, [r3, #0]
	}

	if (BALANCE) {
		*states |= 0b10000000;
	}
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
	...

08002a5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <MX_SPI1_Init+0x68>)
 8002a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a90:	2228      	movs	r2, #40	; 0x28
 8002a92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002aa8:	220a      	movs	r2, #10
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <MX_SPI1_Init+0x64>)
 8002aae:	f003 f85b 	bl	8005b68 <HAL_SPI_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8002ab8:	f7ff fdd0 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200002e4 	.word	0x200002e4
 8002ac4:	40013000 	.word	0x40013000

08002ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_SPI_MspInit+0x88>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d12f      	bne.n	8002b48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002aee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af2:	6193      	str	r3, [r2, #24]
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b00:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6193      	str	r3, [r2, #24]
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <HAL_SPI_MspInit+0x8c>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b18:	23a0      	movs	r3, #160	; 0xa0
 8002b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <HAL_SPI_MspInit+0x90>)
 8002b2c:	f000 ff20 	bl	8003970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b30:	2340      	movs	r3, #64	; 0x40
 8002b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	4619      	mov	r1, r3
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <HAL_SPI_MspInit+0x90>)
 8002b44:	f000 ff14 	bl	8003970 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40013000 	.word	0x40013000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010800 	.word	0x40010800

08002b5c <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002b60:	2201      	movs	r2, #1
 8002b62:	2110      	movs	r1, #16
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <LTC_nCS_High+0x14>)
 8002b66:	f001 f887 	bl	8003c78 <HAL_GPIO_WritePin>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40010800 	.word	0x40010800

08002b74 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <LTC_nCS_Low+0x14>)
 8002b7e:	f001 f87b 	bl	8003c78 <HAL_GPIO_WritePin>
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010800 	.word	0x40010800

08002b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_MspInit+0x5c>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <HAL_MspInit+0x5c>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6193      	str	r3, [r2, #24]
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_MspInit+0x5c>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_MspInit+0x5c>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_MspInit+0x5c>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <HAL_MspInit+0x5c>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_MspInit+0x60>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_MspInit+0x60>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010000 	.word	0x40010000

08002bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <NMI_Handler+0x4>

08002bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <HardFault_Handler+0x4>

08002bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <MemManage_Handler+0x4>

08002c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c06:	e7fe      	b.n	8002c06 <BusFault_Handler+0x4>

08002c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <UsageFault_Handler+0x4>

08002c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c36:	f000 f909 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <OTG_FS_IRQHandler+0x10>)
 8002c46:	f001 f987 	bl	8003f58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20001054 	.word	0x20001054

08002c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <_sbrk+0x5c>)
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <_sbrk+0x60>)
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <_sbrk+0x64>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <_sbrk+0x68>)
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c84:	f007 f94c 	bl	8009f20 <__errno>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	e009      	b.n	8002ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <_sbrk+0x64>)
 8002ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20010000 	.word	0x20010000
 8002cb4:	00000400 	.word	0x00000400
 8002cb8:	2000033c 	.word	0x2000033c
 8002cbc:	200018c0 	.word	0x200018c0

08002cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002cdc:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <MX_TIM7_Init+0x68>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cfa:	480d      	ldr	r0, [pc, #52]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002cfc:	f003 fcbc 	bl	8006678 <HAL_TIM_Base_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002d06:	f7ff fca9 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <MX_TIM7_Init+0x64>)
 8002d18:	f003 fd6a 	bl	80067f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002d22:	f7ff fc9b 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000340 	.word	0x20000340
 8002d34:	40001400 	.word	0x40001400

08002d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_TIM_Base_MspInit+0x34>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10b      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_TIM_Base_MspInit+0x38>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <HAL_TIM_Base_MspInit+0x38>)
 8002d50:	f043 0320 	orr.w	r3, r3, #32
 8002d54:	61d3      	str	r3, [r2, #28]
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_TIM_Base_MspInit+0x38>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40001400 	.word	0x40001400
 8002d70:	40021000 	.word	0x40021000

08002d74 <Reset_Handler>:
 8002d74:	f7ff ffa4 	bl	8002cc0 <SystemInit>
 8002d78:	480b      	ldr	r0, [pc, #44]	; (8002da8 <LoopFillZerobss+0xe>)
 8002d7a:	490c      	ldr	r1, [pc, #48]	; (8002dac <LoopFillZerobss+0x12>)
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <LoopFillZerobss+0x16>)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:
 8002d82:	58d4      	ldr	r4, [r2, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:
 8002d88:	18c4      	adds	r4, r0, r3
 8002d8a:	428c      	cmp	r4, r1
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <LoopFillZerobss+0x1a>)
 8002d90:	4c09      	ldr	r4, [pc, #36]	; (8002db8 <LoopFillZerobss+0x1e>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:
 8002d9a:	42a2      	cmp	r2, r4
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>
 8002d9e:	f007 f8c5 	bl	8009f2c <__libc_init_array>
 8002da2:	f7ff fa81 	bl	80022a8 <main>
 8002da6:	4770      	bx	lr
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000238 	.word	0x20000238
 8002db0:	0800a8ac 	.word	0x0800a8ac
 8002db4:	20000238 	.word	0x20000238
 8002db8:	200018c0 	.word	0x200018c0

08002dbc <ADC1_2_IRQHandler>:
 8002dbc:	e7fe      	b.n	8002dbc <ADC1_2_IRQHandler>
	...

08002dc0 <HAL_Init>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_Init+0x28>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_Init+0x28>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f000 fd8b 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>
 8002dd6:	200f      	movs	r0, #15
 8002dd8:	f000 f808 	bl	8002dec <HAL_InitTick>
 8002ddc:	f7ff fed6 	bl	8002b8c <HAL_MspInit>
 8002de0:	2300      	movs	r3, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000

08002dec <HAL_InitTick>:
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_InitTick+0x54>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_InitTick+0x58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fda3 	bl	8003956 <HAL_SYSTICK_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_InitTick+0x2e>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00e      	b.n	8002e38 <HAL_InitTick+0x4c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d80a      	bhi.n	8002e36 <HAL_InitTick+0x4a>
 8002e20:	2200      	movs	r2, #0
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f000 fd6b 	bl	8003902 <HAL_NVIC_SetPriority>
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <HAL_InitTick+0x5c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x4c>
 8002e36:	2301      	movs	r3, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000006c 	.word	0x2000006c
 8002e44:	20000074 	.word	0x20000074
 8002e48:	20000070 	.word	0x20000070

08002e4c <HAL_IncTick>:
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_IncTick+0x1c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_IncTick+0x20>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <HAL_IncTick+0x20>)
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	20000074 	.word	0x20000074
 8002e6c:	20000388 	.word	0x20000388

08002e70 <HAL_GetTick>:
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <HAL_GetTick+0x10>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	20000388 	.word	0x20000388

08002e84 <HAL_Delay>:
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d005      	beq.n	8002eaa <HAL_Delay+0x26>
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_Delay+0x44>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	bf00      	nop
 8002eac:	f7ff ffe0 	bl	8002e70 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8f7      	bhi.n	8002eac <HAL_Delay+0x28>
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000074 	.word	0x20000074

08002ecc <HAL_ADC_Init>:
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x22>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0be      	b.n	800306c <HAL_ADC_Init+0x1a0>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_Init+0x44>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fe28 	bl	8001b60 <HAL_ADC_MspInit>
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f9ab 	bl	800326c <ADC_ConversionStop_Disable>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8099 	bne.w	800305a <HAL_ADC_Init+0x18e>
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 8095 	bne.w	800305a <HAL_ADC_Init+0x18e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	f043 0202 	orr.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7b1b      	ldrb	r3, [r3, #12]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f64:	d003      	beq.n	8002f6e <HAL_ADC_Init+0xa2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_ADC_Init+0xa8>
 8002f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f72:	e000      	b.n	8002f76 <HAL_ADC_Init+0xaa>
 8002f74:	2300      	movs	r3, #0
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7d1b      	ldrb	r3, [r3, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d119      	bne.n	8002fb8 <HAL_ADC_Init+0xec>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7b1b      	ldrb	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_Init+0xd4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	035a      	lsls	r2, r3, #13
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_ADC_Init+0xec>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_ADC_Init+0x1a8>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d003      	beq.n	8002ff2 <HAL_ADC_Init+0x126>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d104      	bne.n	8002ffc <HAL_ADC_Init+0x130>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	430a      	orrs	r2, r1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_ADC_Init+0x1ac>)
 8003018:	4013      	ands	r3, r2
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d10b      	bne.n	8003038 <HAL_ADC_Init+0x16c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
 8003036:	e018      	b.n	800306a <HAL_ADC_Init+0x19e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f023 0312 	bic.w	r3, r3, #18
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
 8003058:	e007      	b.n	800306a <HAL_ADC_Init+0x19e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	ffe1f7fd 	.word	0xffe1f7fd
 8003078:	ff1f0efe 	.word	0xff1f0efe

0800307c <HAL_ADC_ConfigChannel>:
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x20>
 8003098:	2302      	movs	r3, #2
 800309a:	e0dc      	b.n	8003256 <HAL_ADC_ConfigChannel+0x1da>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d81c      	bhi.n	80030e6 <HAL_ADC_ConfigChannel+0x6a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b05      	subs	r3, #5
 80030be:	221f      	movs	r2, #31
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4019      	ands	r1, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b05      	subs	r3, #5
 80030d8:	fa00 f203 	lsl.w	r2, r0, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34
 80030e4:	e03c      	b.n	8003160 <HAL_ADC_ConfigChannel+0xe4>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d81c      	bhi.n	8003128 <HAL_ADC_ConfigChannel+0xac>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	3b23      	subs	r3, #35	; 0x23
 8003100:	221f      	movs	r2, #31
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	4019      	ands	r1, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b23      	subs	r3, #35	; 0x23
 800311a:	fa00 f203 	lsl.w	r2, r0, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
 8003126:	e01b      	b.n	8003160 <HAL_ADC_ConfigChannel+0xe4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b41      	subs	r3, #65	; 0x41
 800313a:	221f      	movs	r2, #31
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	4019      	ands	r1, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b41      	subs	r3, #65	; 0x41
 8003154:	fa00 f203 	lsl.w	r2, r0, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d91c      	bls.n	80031a2 <HAL_ADC_ConfigChannel+0x126>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	3b1e      	subs	r3, #30
 800317a:	2207      	movs	r2, #7
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	4019      	ands	r1, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6898      	ldr	r0, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	3b1e      	subs	r3, #30
 8003194:	fa00 f203 	lsl.w	r2, r0, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	e019      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x15a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6919      	ldr	r1, [r3, #16]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	2207      	movs	r2, #7
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4019      	ands	r1, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6898      	ldr	r0, [r3, #8]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	fa00 f203 	lsl.w	r2, r0, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d003      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x16a>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b11      	cmp	r3, #17
 80031e4:	d132      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1d0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_ADC_ConfigChannel+0x1e4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d125      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1c0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d126      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1d0>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b10      	cmp	r3, #16
 8003214:	d11a      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1d0>
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_ADC_ConfigChannel+0x1e8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a13      	ldr	r2, [pc, #76]	; (8003268 <HAL_ADC_ConfigChannel+0x1ec>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	0c9a      	lsrs	r2, r3, #18
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	e002      	b.n	8003234 <HAL_ADC_ConfigChannel+0x1b8>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3b01      	subs	r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f9      	bne.n	800322e <HAL_ADC_ConfigChannel+0x1b2>
 800323a:	e007      	b.n	800324c <HAL_ADC_ConfigChannel+0x1d0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40012400 	.word	0x40012400
 8003264:	2000006c 	.word	0x2000006c
 8003268:	431bde83 	.word	0x431bde83

0800326c <ADC_ConversionStop_Disable>:
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d12e      	bne.n	80032e4 <ADC_ConversionStop_Disable+0x78>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	f7ff fdeb 	bl	8002e70 <HAL_GetTick>
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	e01b      	b.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
 800329e:	f7ff fde7 	bl	8002e70 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d914      	bls.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10d      	bne.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <ADC_ConversionStop_Disable+0x7a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d0dc      	beq.n	800329e <ADC_ConversionStop_Disable+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_CAN_Init>:
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_CAN_Init+0x12>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0ed      	b.n	80034dc <HAL_CAN_Init+0x1ee>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_CAN_Init+0x24>
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fe fcc3 	bl	8001c98 <HAL_CAN_MspInit>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f7ff fda5 	bl	8002e70 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	e012      	b.n	8003350 <HAL_CAN_Init+0x62>
 800332a:	f7ff fda1 	bl	8002e70 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b0a      	cmp	r3, #10
 8003336:	d90b      	bls.n	8003350 <HAL_CAN_Init+0x62>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2205      	movs	r2, #5
 8003348:	f883 2020 	strb.w	r2, [r3, #32]
 800334c:	2301      	movs	r3, #1
 800334e:	e0c5      	b.n	80034dc <HAL_CAN_Init+0x1ee>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0e5      	beq.n	800332a <HAL_CAN_Init+0x3c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0202 	bic.w	r2, r2, #2
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f7ff fd7f 	bl	8002e70 <HAL_GetTick>
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	e012      	b.n	800339c <HAL_CAN_Init+0xae>
 8003376:	f7ff fd7b 	bl	8002e70 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b0a      	cmp	r3, #10
 8003382:	d90b      	bls.n	800339c <HAL_CAN_Init+0xae>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2205      	movs	r2, #5
 8003394:	f883 2020 	strb.w	r2, [r3, #32]
 8003398:	2301      	movs	r3, #1
 800339a:	e09f      	b.n	80034dc <HAL_CAN_Init+0x1ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <HAL_CAN_Init+0x88>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7e1b      	ldrb	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_CAN_Init+0xd6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_CAN_Init+0xe6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7e5b      	ldrb	r3, [r3, #25]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d108      	bne.n	80033ee <HAL_CAN_Init+0x100>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e007      	b.n	80033fe <HAL_CAN_Init+0x110>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	7e9b      	ldrb	r3, [r3, #26]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_CAN_Init+0x12a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e007      	b.n	8003428 <HAL_CAN_Init+0x13a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0220 	bic.w	r2, r2, #32
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7edb      	ldrb	r3, [r3, #27]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d108      	bne.n	8003442 <HAL_CAN_Init+0x154>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0210 	bic.w	r2, r2, #16
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e007      	b.n	8003452 <HAL_CAN_Init+0x164>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0210 	orr.w	r2, r2, #16
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7f1b      	ldrb	r3, [r3, #28]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_CAN_Init+0x17e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0208 	orr.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e007      	b.n	800347c <HAL_CAN_Init+0x18e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0208 	bic.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7f5b      	ldrb	r3, [r3, #29]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d108      	bne.n	8003496 <HAL_CAN_Init+0x1a8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0204 	orr.w	r2, r2, #4
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e007      	b.n	80034a6 <HAL_CAN_Init+0x1b8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0204 	bic.w	r2, r2, #4
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	ea42 0103 	orr.w	r1, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2020 	strb.w	r2, [r3, #32]
 80034da:	2300      	movs	r3, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_CAN_Start>:
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d12e      	bne.n	8003556 <HAL_CAN_Start+0x72>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f7ff fcae 	bl	8002e70 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	e012      	b.n	800353e <HAL_CAN_Start+0x5a>
 8003518:	f7ff fcaa 	bl	8002e70 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d90b      	bls.n	800353e <HAL_CAN_Start+0x5a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2205      	movs	r2, #5
 8003536:	f883 2020 	strb.w	r2, [r3, #32]
 800353a:	2301      	movs	r3, #1
 800353c:	e012      	b.n	8003564 <HAL_CAN_Start+0x80>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e5      	bne.n	8003518 <HAL_CAN_Start+0x34>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
 8003552:	2300      	movs	r3, #0
 8003554:	e006      	b.n	8003564 <HAL_CAN_Start+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
 8003562:	2301      	movs	r3, #1
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_CAN_AddTxMessage>:
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	7ffb      	ldrb	r3, [r7, #31]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d003      	beq.n	8003598 <HAL_CAN_AddTxMessage+0x2c>
 8003590:	7ffb      	ldrb	r3, [r7, #31]
 8003592:	2b02      	cmp	r3, #2
 8003594:	f040 80ad 	bne.w	80036f2 <HAL_CAN_AddTxMessage+0x186>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_CAN_AddTxMessage+0x4c>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_CAN_AddTxMessage+0x4c>
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8095 	beq.w	80036e2 <HAL_CAN_AddTxMessage+0x176>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	0e1b      	lsrs	r3, r3, #24
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	2201      	movs	r2, #1
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_CAN_AddTxMessage+0x84>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	055a      	lsls	r2, r3, #21
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6809      	ldr	r1, [r1, #0]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3318      	adds	r3, #24
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	440b      	add	r3, r1
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e00f      	b.n	8003610 <HAL_CAN_AddTxMessage+0xa4>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	00da      	lsls	r2, r3, #3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3318      	adds	r3, #24
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	440b      	add	r3, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3318      	adds	r3, #24
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	440b      	add	r3, r1
 8003620:	3304      	adds	r3, #4
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	7d1b      	ldrb	r3, [r3, #20]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d111      	bne.n	8003650 <HAL_CAN_AddTxMessage+0xe4>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3318      	adds	r3, #24
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4413      	add	r3, r2
 8003638:	3304      	adds	r3, #4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	6811      	ldr	r1, [r2, #0]
 8003640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3318      	adds	r3, #24
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	440b      	add	r3, r1
 800364c:	3304      	adds	r3, #4
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3307      	adds	r3, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	061a      	lsls	r2, r3, #24
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3306      	adds	r3, #6
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3305      	adds	r3, #5
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4313      	orrs	r3, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	3204      	adds	r2, #4
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	4610      	mov	r0, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	6811      	ldr	r1, [r2, #0]
 8003678:	ea43 0200 	orr.w	r2, r3, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	440b      	add	r3, r1
 8003682:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3303      	adds	r3, #3
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	061a      	lsls	r2, r3, #24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3302      	adds	r3, #2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3301      	adds	r3, #1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	4610      	mov	r0, r2
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6811      	ldr	r1, [r2, #0]
 80036ae:	ea43 0200 	orr.w	r2, r3, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3318      	adds	r3, #24
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4413      	add	r3, r2
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6811      	ldr	r1, [r2, #0]
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3318      	adds	r3, #24
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	440b      	add	r3, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	e00e      	b.n	8003700 <HAL_CAN_AddTxMessage+0x194>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
 80036ee:	2301      	movs	r3, #1
 80036f0:	e006      	b.n	8003700 <HAL_CAN_AddTxMessage+0x194>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
 80036fe:	2301      	movs	r3, #1
 8003700:	4618      	mov	r0, r3
 8003702:	3724      	adds	r7, #36	; 0x24
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_CAN_ActivateNotification>:
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d002      	beq.n	8003728 <HAL_CAN_ActivateNotification+0x1e>
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d109      	bne.n	800373c <HAL_CAN_ActivateNotification+0x32>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6959      	ldr	r1, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	615a      	str	r2, [r3, #20]
 8003738:	2300      	movs	r3, #0
 800373a:	e006      	b.n	800374a <HAL_CAN_ActivateNotification+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24
 8003748:	2301      	movs	r3, #1
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <__NVIC_SetPriorityGrouping>:
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4906      	ldr	r1, [pc, #24]	; (80037ec <__NVIC_EnableIRQ+0x34>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <SysTick_Config>:
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b8:	d301      	bcc.n	80038be <SysTick_Config+0x16>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <SysTick_Config+0x36>
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <SysTick_Config+0x40>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
 80038c6:	210f      	movs	r1, #15
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	f7ff ff90 	bl	80037f0 <__NVIC_SetPriority>
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Config+0x40>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SysTick_Config+0x40>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <HAL_NVIC_SetPriorityGrouping>:
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff2d 	bl	8003754 <__NVIC_SetPriorityGrouping>
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_SetPriority>:
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	f7ff ff42 	bl	800379c <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff90 	bl	8003844 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5f 	bl	80037f0 <__NVIC_SetPriority>
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff35 	bl	80037b8 <__NVIC_EnableIRQ>
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa2 	bl	80038a8 <SysTick_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_GPIO_Init>:
 8003970:	b480      	push	{r7}
 8003972:	b08b      	sub	sp, #44	; 0x2c
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e169      	b.n	8003c58 <HAL_GPIO_Init+0x2e8>
 8003984:	2201      	movs	r2, #1
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	429a      	cmp	r2, r3
 800399e:	f040 8158 	bne.w	8003c52 <HAL_GPIO_Init+0x2e2>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4a9a      	ldr	r2, [pc, #616]	; (8003c10 <HAL_GPIO_Init+0x2a0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d05e      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 80039ac:	4a98      	ldr	r2, [pc, #608]	; (8003c10 <HAL_GPIO_Init+0x2a0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d875      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039b2:	4a98      	ldr	r2, [pc, #608]	; (8003c14 <HAL_GPIO_Init+0x2a4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d058      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 80039b8:	4a96      	ldr	r2, [pc, #600]	; (8003c14 <HAL_GPIO_Init+0x2a4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d86f      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039be:	4a96      	ldr	r2, [pc, #600]	; (8003c18 <HAL_GPIO_Init+0x2a8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d052      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 80039c4:	4a94      	ldr	r2, [pc, #592]	; (8003c18 <HAL_GPIO_Init+0x2a8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d869      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039ca:	4a94      	ldr	r2, [pc, #592]	; (8003c1c <HAL_GPIO_Init+0x2ac>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04c      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 80039d0:	4a92      	ldr	r2, [pc, #584]	; (8003c1c <HAL_GPIO_Init+0x2ac>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d863      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039d6:	4a92      	ldr	r2, [pc, #584]	; (8003c20 <HAL_GPIO_Init+0x2b0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d046      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 80039dc:	4a90      	ldr	r2, [pc, #576]	; (8003c20 <HAL_GPIO_Init+0x2b0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d85d      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039e2:	2b12      	cmp	r3, #18
 80039e4:	d82a      	bhi.n	8003a3c <HAL_GPIO_Init+0xcc>
 80039e6:	2b12      	cmp	r3, #18
 80039e8:	d859      	bhi.n	8003a9e <HAL_GPIO_Init+0x12e>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_GPIO_Init+0x80>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a6b 	.word	0x08003a6b
 80039f4:	08003a45 	.word	0x08003a45
 80039f8:	08003a57 	.word	0x08003a57
 80039fc:	08003a99 	.word	0x08003a99
 8003a00:	08003a9f 	.word	0x08003a9f
 8003a04:	08003a9f 	.word	0x08003a9f
 8003a08:	08003a9f 	.word	0x08003a9f
 8003a0c:	08003a9f 	.word	0x08003a9f
 8003a10:	08003a9f 	.word	0x08003a9f
 8003a14:	08003a9f 	.word	0x08003a9f
 8003a18:	08003a9f 	.word	0x08003a9f
 8003a1c:	08003a9f 	.word	0x08003a9f
 8003a20:	08003a9f 	.word	0x08003a9f
 8003a24:	08003a9f 	.word	0x08003a9f
 8003a28:	08003a9f 	.word	0x08003a9f
 8003a2c:	08003a9f 	.word	0x08003a9f
 8003a30:	08003a9f 	.word	0x08003a9f
 8003a34:	08003a4d 	.word	0x08003a4d
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	4a79      	ldr	r2, [pc, #484]	; (8003c24 <HAL_GPIO_Init+0x2b4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_GPIO_Init+0xfa>
 8003a42:	e02c      	b.n	8003a9e <HAL_GPIO_Init+0x12e>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	623b      	str	r3, [r7, #32]
 8003a4a:	e029      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	3304      	adds	r3, #4
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	e024      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	623b      	str	r3, [r7, #32]
 8003a5e:	e01f      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	330c      	adds	r3, #12
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	e01a      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_GPIO_Init+0x108>
 8003a72:	2304      	movs	r3, #4
 8003a74:	623b      	str	r3, [r7, #32]
 8003a76:	e013      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_GPIO_Init+0x11c>
 8003a80:	2308      	movs	r3, #8
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e009      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	615a      	str	r2, [r3, #20]
 8003a96:	e003      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_Init+0x130>
 8003a9e:	bf00      	nop
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2bff      	cmp	r3, #255	; 0xff
 8003aa4:	d801      	bhi.n	8003aaa <HAL_GPIO_Init+0x13a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	e001      	b.n	8003aae <HAL_GPIO_Init+0x13e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	d802      	bhi.n	8003abc <HAL_GPIO_Init+0x14c>
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	e002      	b.n	8003ac2 <HAL_GPIO_Init+0x152>
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	3b08      	subs	r3, #8
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	210f      	movs	r1, #15
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	431a      	orrs	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80b1 	beq.w	8003c52 <HAL_GPIO_Init+0x2e2>
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_GPIO_Init+0x2b8>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_GPIO_Init+0x2b8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <HAL_GPIO_Init+0x2b8>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_GPIO_Init+0x2bc>)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a40      	ldr	r2, [pc, #256]	; (8003c30 <HAL_GPIO_Init+0x2c0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_GPIO_Init+0x1ec>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a3f      	ldr	r2, [pc, #252]	; (8003c34 <HAL_GPIO_Init+0x2c4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00d      	beq.n	8003b58 <HAL_GPIO_Init+0x1e8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <HAL_GPIO_Init+0x2c8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <HAL_GPIO_Init+0x1e4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_GPIO_Init+0x2cc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_GPIO_Init+0x1e0>
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e006      	b.n	8003b5e <HAL_GPIO_Init+0x1ee>
 8003b50:	2304      	movs	r3, #4
 8003b52:	e004      	b.n	8003b5e <HAL_GPIO_Init+0x1ee>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e002      	b.n	8003b5e <HAL_GPIO_Init+0x1ee>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_GPIO_Init+0x1ee>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	f002 0203 	and.w	r2, r2, #3
 8003b64:	0092      	lsls	r2, r2, #2
 8003b66:	4093      	lsls	r3, r2
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	492f      	ldr	r1, [pc, #188]	; (8003c2c <HAL_GPIO_Init+0x2bc>)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	089b      	lsrs	r3, r3, #2
 8003b74:	3302      	adds	r3, #2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_GPIO_Init+0x226>
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	492c      	ldr	r1, [pc, #176]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]
 8003b94:	e006      	b.n	8003ba4 <HAL_GPIO_Init+0x234>
 8003b96:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	4928      	ldr	r1, [pc, #160]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_GPIO_Init+0x24e>
 8003bb0:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	4922      	ldr	r1, [pc, #136]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60cb      	str	r3, [r1, #12]
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x25c>
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	491e      	ldr	r1, [pc, #120]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <HAL_GPIO_Init+0x276>
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	4918      	ldr	r1, [pc, #96]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x284>
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	4914      	ldr	r1, [pc, #80]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d021      	beq.n	8003c44 <HAL_GPIO_Init+0x2d4>
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <HAL_GPIO_Init+0x2d0>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
 8003c0c:	e021      	b.n	8003c52 <HAL_GPIO_Init+0x2e2>
 8003c0e:	bf00      	nop
 8003c10:	10320000 	.word	0x10320000
 8003c14:	10310000 	.word	0x10310000
 8003c18:	10220000 	.word	0x10220000
 8003c1c:	10210000 	.word	0x10210000
 8003c20:	10120000 	.word	0x10120000
 8003c24:	10110000 	.word	0x10110000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40010800 	.word	0x40010800
 8003c34:	40010c00 	.word	0x40010c00
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	40010400 	.word	0x40010400
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_GPIO_Init+0x304>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	4909      	ldr	r1, [pc, #36]	; (8003c74 <HAL_GPIO_Init+0x304>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	3301      	adds	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f ae8e 	bne.w	8003984 <HAL_GPIO_Init+0x14>
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	372c      	adds	r7, #44	; 0x2c
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_GPIO_WritePin>:
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_GPIO_TogglePin>:
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	041a      	lsls	r2, r3, #16
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43d9      	mvns	r1, r3
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	400b      	ands	r3, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	611a      	str	r2, [r3, #16]
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_PCD_Init>:
 8003cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cdc:	b08f      	sub	sp, #60	; 0x3c
 8003cde:	af0a      	add	r7, sp, #40	; 0x28
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_PCD_Init+0x12>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e10f      	b.n	8003f0c <HAL_PCD_Init+0x232>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_PCD_Init+0x32>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f005 fd40 	bl	800978c <HAL_PCD_MspInit>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <HAL_PCD_Init+0x4c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 fe94 	bl	8006a58 <USB_DisableGlobalInt>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	687e      	ldr	r6, [r7, #4]
 8003d38:	466d      	mov	r5, sp
 8003d3a:	f106 0410 	add.w	r4, r6, #16
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4e:	1d33      	adds	r3, r6, #4
 8003d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d52:	6838      	ldr	r0, [r7, #0]
 8003d54:	f002 fdb2 	bl	80068bc <USB_CoreInit>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_PCD_Init+0x90>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0d0      	b.n	8003f0c <HAL_PCD_Init+0x232>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 fe81 	bl	8006a78 <USB_SetCurrentMode>
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e04a      	b.n	8003e12 <HAL_PCD_Init+0x138>
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	333d      	adds	r3, #61	; 0x3d
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	333c      	adds	r3, #60	; 0x3c
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	b298      	uxth	r0, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3356      	adds	r3, #86	; 0x56
 8003db8:	4602      	mov	r2, r0
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3340      	adds	r3, #64	; 0x40
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	3344      	adds	r3, #68	; 0x44
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3348      	adds	r3, #72	; 0x48
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334c      	adds	r3, #76	; 0x4c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3af      	bcc.n	8003d7c <HAL_PCD_Init+0xa2>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e044      	b.n	8003eac <HAL_PCD_Init+0x1d2>
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3b5      	bcc.n	8003e22 <HAL_PCD_Init+0x148>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	687e      	ldr	r6, [r7, #4]
 8003ebe:	466d      	mov	r5, sp
 8003ec0:	f106 0410 	add.w	r4, r6, #16
 8003ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ecc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ed0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ed4:	1d33      	adds	r3, r6, #4
 8003ed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed8:	6838      	ldr	r0, [r7, #0]
 8003eda:	f002 fe19 	bl	8006b10 <USB_DevInit>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_PCD_Init+0x216>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8003eec:	2301      	movs	r3, #1
 8003eee:	e00d      	b.n	8003f0c <HAL_PCD_Init+0x232>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 fda3 	bl	8007a50 <USB_DevDisconnect>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f14 <HAL_PCD_Start>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_PCD_Start+0x16>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e012      	b.n	8003f50 <HAL_PCD_Start+0x3c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fd7e 	bl	8006a38 <USB_EnableGlobalInt>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fd65 	bl	8007a10 <USB_DevConnect>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_IRQHandler>:
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b08d      	sub	sp, #52	; 0x34
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fe1c 	bl	8007bac <USB_GetMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8443 	bne.w	8004802 <HAL_PCD_IRQHandler+0x8aa>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fd85 	bl	8007a90 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8439 	beq.w	8004800 <HAL_PCD_IRQHandler+0x8a8>
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f003 fd72 	bl	8007a90 <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d107      	bne.n	8003fc6 <HAL_PCD_IRQHandler+0x6e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f002 0202 	and.w	r2, r2, #2
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fd60 	bl	8007a90 <USB_ReadInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d161      	bne.n	800409e <HAL_PCD_IRQHandler+0x146>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0210 	bic.w	r2, r2, #16
 8003fe8:	619a      	str	r2, [r3, #24]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	0c5b      	lsrs	r3, r3, #17
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	2b02      	cmp	r3, #2
 8004014:	d124      	bne.n	8004060 <HAL_PCD_IRQHandler+0x108>
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d035      	beq.n	800408e <HAL_PCD_IRQHandler+0x136>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	b29b      	uxth	r3, r3
 800402c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6a38      	ldr	r0, [r7, #32]
 8004036:	f003 fb9d 	bl	8007774 <USB_ReadPacket>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004046:	441a      	add	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004058:	441a      	add	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	615a      	str	r2, [r3, #20]
 800405e:	e016      	b.n	800408e <HAL_PCD_IRQHandler+0x136>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	0c5b      	lsrs	r3, r3, #17
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	2b06      	cmp	r3, #6
 800406a:	d110      	bne.n	800408e <HAL_PCD_IRQHandler+0x136>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004072:	2208      	movs	r2, #8
 8004074:	4619      	mov	r1, r3
 8004076:	6a38      	ldr	r0, [r7, #32]
 8004078:	f003 fb7c 	bl	8007774 <USB_ReadPacket>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004088:	441a      	add	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	615a      	str	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0210 	orr.w	r2, r2, #16
 800409c:	619a      	str	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 fcf4 	bl	8007a90 <USB_ReadInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040b2:	f040 80a7 	bne.w	8004204 <HAL_PCD_IRQHandler+0x2ac>
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fcf8 	bl	8007ab4 <USB_ReadDevAllOutEpInterrupt>
 80040c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80040c6:	e099      	b.n	80041fc <HAL_PCD_IRQHandler+0x2a4>
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 808e 	beq.w	80041f0 <HAL_PCD_IRQHandler+0x298>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fd1a 	bl	8007b18 <USB_ReadDevOutEPInterrupt>
 80040e4:	6138      	str	r0, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <HAL_PCD_IRQHandler+0x1b2>
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	461a      	mov	r2, r3
 80040fe:	2301      	movs	r3, #1
 8004100:	6093      	str	r3, [r2, #8]
 8004102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fe41 	bl	8004d8c <PCD_EP_OutXfrComplete_int>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00c      	beq.n	800412e <HAL_PCD_IRQHandler+0x1d6>
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	461a      	mov	r2, r3
 8004122:	2308      	movs	r3, #8
 8004124:	6093      	str	r3, [r2, #8]
 8004126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fe7d 	bl	8004e28 <PCD_EP_OutSetupPacket_int>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_PCD_IRQHandler+0x1f2>
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	461a      	mov	r2, r3
 8004146:	2310      	movs	r3, #16
 8004148:	6093      	str	r3, [r2, #8]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d030      	beq.n	80041b6 <HAL_PCD_IRQHandler+0x25e>
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d109      	bne.n	8004174 <HAL_PCD_IRQHandler+0x21c>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004172:	6053      	str	r3, [r2, #4]
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	3304      	adds	r3, #4
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	78db      	ldrb	r3, [r3, #3]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <HAL_PCD_IRQHandler+0x24c>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	70da      	strb	r2, [r3, #3]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f005 fbe2 	bl	8009968 <HAL_PCD_ISOOUTIncompleteCallback>
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b0:	461a      	mov	r2, r3
 80041b2:	2302      	movs	r3, #2
 80041b4:	6093      	str	r3, [r2, #8]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_PCD_IRQHandler+0x27a>
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	2320      	movs	r3, #32
 80041d0:	6093      	str	r3, [r2, #8]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_PCD_IRQHandler+0x298>
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	461a      	mov	r2, r3
 80041ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041ee:	6093      	str	r3, [r2, #8]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	3301      	adds	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f af62 	bne.w	80040c8 <HAL_PCD_IRQHandler+0x170>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f003 fc41 	bl	8007a90 <USB_ReadInterrupts>
 800420e:	4603      	mov	r3, r0
 8004210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004218:	f040 80a4 	bne.w	8004364 <HAL_PCD_IRQHandler+0x40c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f003 fc60 	bl	8007ae6 <USB_ReadDevAllInEpInterrupt>
 8004226:	62b8      	str	r0, [r7, #40]	; 0x28
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	e096      	b.n	800435c <HAL_PCD_IRQHandler+0x404>
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 808b 	beq.w	8004350 <HAL_PCD_IRQHandler+0x3f8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f003 fc84 	bl	8007b52 <USB_ReadDevInEPInterrupt>
 800424a:	6138      	str	r0, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d020      	beq.n	8004298 <HAL_PCD_IRQHandler+0x340>
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	2201      	movs	r2, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004276:	4013      	ands	r3, r2
 8004278:	634b      	str	r3, [r1, #52]	; 0x34
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	461a      	mov	r2, r3
 8004288:	2301      	movs	r3, #1
 800428a:	6093      	str	r3, [r2, #8]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f005 faed 	bl	8009872 <HAL_PCD_DataInStageCallback>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_PCD_IRQHandler+0x35c>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	2308      	movs	r3, #8
 80042b2:	6093      	str	r3, [r2, #8]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_PCD_IRQHandler+0x378>
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	461a      	mov	r2, r3
 80042cc:	2310      	movs	r3, #16
 80042ce:	6093      	str	r3, [r2, #8]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_PCD_IRQHandler+0x394>
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	461a      	mov	r2, r3
 80042e8:	2340      	movs	r3, #64	; 0x40
 80042ea:	6093      	str	r3, [r2, #8]
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d023      	beq.n	800433e <HAL_PCD_IRQHandler+0x3e6>
 80042f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f8:	6a38      	ldr	r0, [r7, #32]
 80042fa:	f002 fd2b 	bl	8006d54 <USB_FlushTxFifo>
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	3338      	adds	r3, #56	; 0x38
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d108      	bne.n	800432c <HAL_PCD_IRQHandler+0x3d4>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	70da      	strb	r2, [r3, #3]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	b2db      	uxtb	r3, r3
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f005 fb30 	bl	800998c <HAL_PCD_ISOINIncompleteCallback>
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	461a      	mov	r2, r3
 800433a:	2302      	movs	r3, #2
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_PCD_IRQHandler+0x3f8>
 8004348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fc96 	bl	8004c7c <PCD_WriteEmptyTxFifo>
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	3301      	adds	r3, #1
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	f47f af65 	bne.w	800422e <HAL_PCD_IRQHandler+0x2d6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f003 fb91 	bl	8007a90 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004378:	d114      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x44c>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6053      	str	r3, [r2, #4]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f005 fadc 	bl	800994c <HAL_PCD_ResumeCallback>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043a2:	615a      	str	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 fb71 	bl	8007a90 <USB_ReadInterrupts>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d112      	bne.n	80043e0 <HAL_PCD_IRQHandler+0x488>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_PCD_IRQHandler+0x478>
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f005 fa98 	bl	8009900 <HAL_PCD_SuspendCallback>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043de:	615a      	str	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f003 fb53 	bl	8007a90 <USB_ReadInterrupts>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	f040 80b5 	bne.w	8004562 <HAL_PCD_IRQHandler+0x60a>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6053      	str	r3, [r2, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2110      	movs	r1, #16
 8004412:	4618      	mov	r0, r3
 8004414:	f002 fc9e 	bl	8006d54 <USB_FlushTxFifo>
 8004418:	2300      	movs	r3, #0
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	e046      	b.n	80044ac <HAL_PCD_IRQHandler+0x554>
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	461a      	mov	r2, r3
 800442c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004430:	6093      	str	r3, [r2, #8]
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	461a      	mov	r2, r3
 8004460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	3301      	adds	r3, #1
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d3b3      	bcc.n	800441e <HAL_PCD_IRQHandler+0x4c6>
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_PCD_IRQHandler+0x5a8>
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044e2:	f043 030b 	orr.w	r3, r3, #11
 80044e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f8:	f043 030b 	orr.w	r3, r3, #11
 80044fc:	6453      	str	r3, [r2, #68]	; 0x44
 80044fe:	e015      	b.n	800452c <HAL_PCD_IRQHandler+0x5d4>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004512:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004516:	6153      	str	r3, [r2, #20]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f043 030b 	orr.w	r3, r3, #11
 800452a:	6113      	str	r3, [r2, #16]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f003 fb5d 	bl	8007c0c <USB_EP0_OutStart>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004560:	615a      	str	r2, [r3, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f003 fa92 	bl	8007a90 <USB_ReadInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004576:	d124      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x66a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f003 fb22 	bl	8007bc6 <USB_ActivateSetup>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f002 fc60 	bl	8006e4c <USB_GetDevSpeed>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681c      	ldr	r4, [r3, #0]
 8004598:	f001 f98c 	bl	80058b4 <HAL_RCC_GetHCLKFreq>
 800459c:	4601      	mov	r1, r0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4620      	mov	r0, r4
 80045a8:	f002 f9aa 	bl	8006900 <USB_SetTurnaroundTime>
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f005 f988 	bl	80098c2 <HAL_PCD_ResetCallback>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045c0:	615a      	str	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 fa62 	bl	8007a90 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10a      	bne.n	80045ec <HAL_PCD_IRQHandler+0x694>
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f005 f965 	bl	80098a6 <HAL_PCD_SOFCallback>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f002 0208 	and.w	r2, r2, #8
 80045ea:	615a      	str	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 fa4d 	bl	8007a90 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d122      	bne.n	8004646 <HAL_PCD_IRQHandler+0x6ee>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	2301      	movs	r3, #1
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
 8004610:	e014      	b.n	800463c <HAL_PCD_IRQHandler+0x6e4>
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_PCD_IRQHandler+0x6de>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 faf2 	bl	8004c1a <HAL_PCD_EP_Abort>
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	3301      	adds	r3, #1
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	429a      	cmp	r2, r3
 8004644:	d3e5      	bcc.n	8004612 <HAL_PCD_IRQHandler+0x6ba>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fa20 	bl	8007a90 <USB_ReadInterrupts>
 8004650:	4603      	mov	r3, r0
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465a:	d13b      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x77c>
 800465c:	2301      	movs	r3, #1
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e02b      	b.n	80046ba <HAL_PCD_IRQHandler+0x762>
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	4613      	mov	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d115      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x75c>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da12      	bge.n	80046b4 <HAL_PCD_IRQHandler+0x75c>
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	333f      	adds	r3, #63	; 0x3f
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fab3 	bl	8004c1a <HAL_PCD_EP_Abort>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	3301      	adds	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3ce      	bcc.n	8004662 <HAL_PCD_IRQHandler+0x70a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046d2:	615a      	str	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 f9d9 	bl	8007a90 <USB_ReadInterrupts>
 80046de:	4603      	mov	r3, r0
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e8:	d155      	bne.n	8004796 <HAL_PCD_IRQHandler+0x83e>
 80046ea:	2301      	movs	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e045      	b.n	800477c <HAL_PCD_IRQHandler+0x824>
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d12e      	bne.n	8004776 <HAL_PCD_IRQHandler+0x81e>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	da2b      	bge.n	8004776 <HAL_PCD_IRQHandler+0x81e>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	429a      	cmp	r2, r3
 8004730:	d121      	bne.n	8004776 <HAL_PCD_IRQHandler+0x81e>
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	619a      	str	r2, [r3, #24]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_PCD_IRQHandler+0x81e>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004772:	6053      	str	r3, [r2, #4]
 8004774:	e007      	b.n	8004786 <HAL_PCD_IRQHandler+0x82e>
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	3301      	adds	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004782:	429a      	cmp	r2, r3
 8004784:	d3b4      	bcc.n	80046f0 <HAL_PCD_IRQHandler+0x798>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004794:	615a      	str	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f003 f978 	bl	8007a90 <USB_ReadInterrupts>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d10a      	bne.n	80047c2 <HAL_PCD_IRQHandler+0x86a>
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f005 f8ff 	bl	80099b0 <HAL_PCD_ConnectCallback>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047c0:	615a      	str	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f003 f962 	bl	8007a90 <USB_ReadInterrupts>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d115      	bne.n	8004802 <HAL_PCD_IRQHandler+0x8aa>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_PCD_IRQHandler+0x896>
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f005 f8ef 	bl	80099cc <HAL_PCD_DisconnectCallback>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	e000      	b.n	8004802 <HAL_PCD_IRQHandler+0x8aa>
 8004800:	bf00      	nop
 8004802:	3734      	adds	r7, #52	; 0x34
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}

08004808 <HAL_PCD_SetAddress>:
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_PCD_SetAddress+0x1a>
 800481e:	2302      	movs	r3, #2
 8004820:	e013      	b.n	800484a <HAL_PCD_SetAddress+0x42>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f003 f8c3 	bl	80079c6 <USB_SetDevAddress>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004848:	2300      	movs	r3, #0
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_PCD_EP_Open>:
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	4608      	mov	r0, r1
 800485c:	4611      	mov	r1, r2
 800485e:	461a      	mov	r2, r3
 8004860:	4603      	mov	r3, r0
 8004862:	70fb      	strb	r3, [r7, #3]
 8004864:	460b      	mov	r3, r1
 8004866:	803b      	strh	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	70bb      	strb	r3, [r7, #2]
 800486c:	2300      	movs	r3, #0
 800486e:	72fb      	strb	r3, [r7, #11]
 8004870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da0f      	bge.n	8004898 <HAL_PCD_EP_Open+0x46>
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3338      	adds	r3, #56	; 0x38
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	705a      	strb	r2, [r3, #1]
 8004896:	e00f      	b.n	80048b8 <HAL_PCD_EP_Open+0x66>
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	883a      	ldrh	r2, [r7, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	78ba      	ldrb	r2, [r7, #2]
 80048ce:	711a      	strb	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <HAL_PCD_EP_Open+0x90>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	835a      	strh	r2, [r3, #26]
 80048e2:	78bb      	ldrb	r3, [r7, #2]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d102      	bne.n	80048ee <HAL_PCD_EP_Open+0x9c>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	715a      	strb	r2, [r3, #5]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_PCD_EP_Open+0xaa>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e00e      	b.n	800491a <HAL_PCD_EP_Open+0xc8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	4618      	mov	r0, r3
 800490c:	f002 fabc 	bl	8006e88 <USB_ActivateEndpoint>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_PCD_EP_Close>:
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	70fb      	strb	r3, [r7, #3]
 800492e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004932:	2b00      	cmp	r3, #0
 8004934:	da0f      	bge.n	8004956 <HAL_PCD_EP_Close+0x34>
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3338      	adds	r3, #56	; 0x38
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	3304      	adds	r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	705a      	strb	r2, [r3, #1]
 8004954:	e00f      	b.n	8004976 <HAL_PCD_EP_Close+0x54>
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	f003 020f 	and.w	r2, r3, #15
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	705a      	strb	r2, [r3, #1]
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_PCD_EP_Close+0x6e>
 800498c:	2302      	movs	r3, #2
 800498e:	e00e      	b.n	80049ae <HAL_PCD_EP_Close+0x8c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68f9      	ldr	r1, [r7, #12]
 800499e:	4618      	mov	r0, r3
 80049a0:	f002 faf8 	bl	8006f94 <USB_DeactivateEndpoint>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80049ac:	2300      	movs	r3, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_PCD_EP_Receive>:
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	460b      	mov	r3, r1
 80049c4:	72fb      	strb	r3, [r7, #11]
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	4613      	mov	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	611a      	str	r2, [r3, #16]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6979      	ldr	r1, [r7, #20]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f002 fb9e 	bl	800714c <USB_EPStartXfer>
 8004a10:	2300      	movs	r3, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_EP_GetRxCount>:
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_PCD_EP_Transmit>:
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607a      	str	r2, [r7, #4]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	460b      	mov	r3, r1
 8004a56:	72fb      	strb	r3, [r7, #11]
 8004a58:	7afb      	ldrb	r3, [r7, #11]
 8004a5a:	f003 020f 	and.w	r2, r3, #15
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	3338      	adds	r3, #56	; 0x38
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	611a      	str	r2, [r3, #16]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	615a      	str	r2, [r3, #20]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2201      	movs	r2, #1
 8004a86:	705a      	strb	r2, [r3, #1]
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6979      	ldr	r1, [r7, #20]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f002 fb56 	bl	800714c <USB_EPStartXfer>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_PCD_EP_SetStall>:
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70fb      	strb	r3, [r7, #3]
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	f003 020f 	and.w	r2, r3, #15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d901      	bls.n	8004ac8 <HAL_PCD_EP_SetStall+0x1e>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e04e      	b.n	8004b66 <HAL_PCD_EP_SetStall+0xbc>
 8004ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da0f      	bge.n	8004af0 <HAL_PCD_EP_SetStall+0x46>
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 020f 	and.w	r2, r3, #15
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	3338      	adds	r3, #56	; 0x38
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	705a      	strb	r2, [r3, #1]
 8004aee:	e00d      	b.n	8004b0c <HAL_PCD_EP_SetStall+0x62>
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	3304      	adds	r3, #4
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	705a      	strb	r2, [r3, #1]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	709a      	strb	r2, [r3, #2]
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_PCD_EP_SetStall+0x82>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e01c      	b.n	8004b66 <HAL_PCD_EP_SetStall+0xbc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 fe71 	bl	8007822 <USB_EPSetStall>
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_PCD_EP_SetStall+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f003 f858 	bl	8007c0c <USB_EP0_OutStart>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004b64:	2300      	movs	r3, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_PCD_EP_ClrStall>:
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	f003 020f 	and.w	r2, r3, #15
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d901      	bls.n	8004b8c <HAL_PCD_EP_ClrStall+0x1e>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e042      	b.n	8004c12 <HAL_PCD_EP_ClrStall+0xa4>
 8004b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da0f      	bge.n	8004bb4 <HAL_PCD_EP_ClrStall+0x46>
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3338      	adds	r3, #56	; 0x38
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00f      	b.n	8004bd4 <HAL_PCD_EP_ClrStall+0x66>
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	705a      	strb	r2, [r3, #1]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	709a      	strb	r2, [r3, #2]
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_PCD_EP_ClrStall+0x86>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e00e      	b.n	8004c12 <HAL_PCD_EP_ClrStall+0xa4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fe7a 	bl	80078fc <USB_EPClearStall>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8004c10:	2300      	movs	r3, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_PCD_EP_Abort>:
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
 8004c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da0c      	bge.n	8004c48 <HAL_PCD_EP_Abort+0x2e>
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3338      	adds	r3, #56	; 0x38
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	3304      	adds	r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e00c      	b.n	8004c62 <HAL_PCD_EP_Abort+0x48>
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3304      	adds	r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f002 fca1 	bl	80075b0 <USB_EPStopXfer>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	72fb      	strb	r3, [r7, #11]
 8004c72:	7afb      	ldrb	r3, [r7, #11]
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <PCD_WriteEmptyTxFifo>:
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	3338      	adds	r3, #56	; 0x38
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d901      	bls.n	8004cb4 <PCD_WriteEmptyTxFifo+0x38>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e067      	b.n	8004d84 <PCD_WriteEmptyTxFifo+0x108>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d902      	bls.n	8004cd0 <PCD_WriteEmptyTxFifo+0x54>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	e026      	b.n	8004d28 <PCD_WriteEmptyTxFifo+0xac>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d902      	bls.n	8004cf6 <PCD_WriteEmptyTxFifo+0x7a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	3303      	adds	r3, #3
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	f002 fcf9 	bl	8007702 <USB_WritePacket>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	441a      	add	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	60da      	str	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	615a      	str	r2, [r3, #20]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d809      	bhi.n	8004d52 <PCD_WriteEmptyTxFifo+0xd6>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <PCD_WriteEmptyTxFifo+0xd6>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1c3      	bne.n	8004cda <PCD_WriteEmptyTxFifo+0x5e>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d811      	bhi.n	8004d82 <PCD_WriteEmptyTxFifo+0x106>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	2201      	movs	r2, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	6939      	ldr	r1, [r7, #16]
 8004d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7e:	4013      	ands	r3, r2
 8004d80:	634b      	str	r3, [r1, #52]	; 0x34
 8004d82:	2300      	movs	r3, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <PCD_EP_OutXfrComplete_int>:
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	333c      	adds	r3, #60	; 0x3c
 8004da4:	3304      	adds	r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <PCD_EP_OutXfrComplete_int+0x98>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d124      	bne.n	8004e0c <PCD_EP_OutXfrComplete_int+0x80>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <PCD_EP_OutXfrComplete_int+0x56>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dde:	6093      	str	r3, [r2, #8]
 8004de0:	e01a      	b.n	8004e18 <PCD_EP_OutXfrComplete_int+0x8c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <PCD_EP_OutXfrComplete_int+0x72>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	6093      	str	r3, [r2, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f004 fd19 	bl	800983c <HAL_PCD_DataOutStageCallback>
 8004e0a:	e005      	b.n	8004e18 <PCD_EP_OutXfrComplete_int+0x8c>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f004 fd12 	bl	800983c <HAL_PCD_DataOutStageCallback>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	4f54310a 	.word	0x4f54310a

08004e28 <PCD_EP_OutSetupPacket_int>:
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	333c      	adds	r3, #60	; 0x3c
 8004e40:	3304      	adds	r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <PCD_EP_OutSetupPacket_int+0x64>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d90e      	bls.n	8004e7c <PCD_EP_OutSetupPacket_int+0x54>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <PCD_EP_OutSetupPacket_int+0x54>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	6093      	str	r3, [r2, #8]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f004 fccb 	bl	8009818 <HAL_PCD_SetupStageCallback>
 8004e82:	2300      	movs	r3, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	4f54300a 	.word	0x4f54300a

08004e90 <HAL_PCDEx_SetTxFiFo>:
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	803b      	strh	r3, [r7, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	60bb      	str	r3, [r7, #8]
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d107      	bne.n	8004ebe <HAL_PCDEx_SetTxFiFo+0x2e>
 8004eae:	883b      	ldrh	r3, [r7, #0]
 8004eb0:	0419      	lsls	r1, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
 8004ebc:	e028      	b.n	8004f10 <HAL_PCDEx_SetTxFiFo+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e00d      	b.n	8004eee <HAL_PCDEx_SetTxFiFo+0x5e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	3340      	adds	r3, #64	; 0x40
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	3301      	adds	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d3ec      	bcc.n	8004ed2 <HAL_PCDEx_SetTxFiFo+0x42>
 8004ef8:	883b      	ldrh	r3, [r7, #0]
 8004efa:	0418      	lsls	r0, r3, #16
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	4302      	orrs	r2, r0
 8004f08:	3340      	adds	r3, #64	; 0x40
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	2300      	movs	r3, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <HAL_PCDEx_SetRxFiFo>:
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	887a      	ldrh	r2, [r7, #2]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f30:	2300      	movs	r3, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_RCC_OscConfig>:
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCC_OscConfig+0x12>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e304      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8087 	beq.w	800506a <HAL_RCC_OscConfig+0x12e>
 8004f5c:	4b92      	ldr	r3, [pc, #584]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d00c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x46>
 8004f68:	4b8f      	ldr	r3, [pc, #572]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d112      	bne.n	8004f9a <HAL_RCC_OscConfig+0x5e>
 8004f74:	4b8c      	ldr	r3, [pc, #560]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d10b      	bne.n	8004f9a <HAL_RCC_OscConfig+0x5e>
 8004f82:	4b89      	ldr	r3, [pc, #548]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d06c      	beq.n	8005068 <HAL_RCC_OscConfig+0x12c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d168      	bne.n	8005068 <HAL_RCC_OscConfig+0x12c>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e2de      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x76>
 8004fa4:	4b80      	ldr	r3, [pc, #512]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7f      	ldr	r2, [pc, #508]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e02e      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x98>
 8004fba:	4b7b      	ldr	r3, [pc, #492]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7a      	ldr	r2, [pc, #488]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b78      	ldr	r3, [pc, #480]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a77      	ldr	r2, [pc, #476]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e01d      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xbc>
 8004fde:	4b72      	ldr	r3, [pc, #456]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a71      	ldr	r2, [pc, #452]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b6f      	ldr	r3, [pc, #444]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6e      	ldr	r2, [pc, #440]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0xd4>
 8004ff8:	4b6b      	ldr	r3, [pc, #428]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a67      	ldr	r2, [pc, #412]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0x104>
 8005018:	f7fd ff2a 	bl	8002e70 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xf6>
 8005020:	f7fd ff26 	bl	8002e70 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	; 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xf6>
 800502e:	2303      	movs	r3, #3
 8005030:	e292      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005032:	4b5d      	ldr	r3, [pc, #372]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xe4>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x12e>
 8005040:	f7fd ff16 	bl	8002e70 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x11e>
 8005048:	f7fd ff12 	bl	8002e70 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x11e>
 8005056:	2303      	movs	r3, #3
 8005058:	e27e      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 800505a:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x10c>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x12e>
 8005068:	bf00      	nop
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d063      	beq.n	800513e <HAL_RCC_OscConfig+0x202>
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_RCC_OscConfig+0x15e>
 8005082:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b08      	cmp	r3, #8
 800508c:	d11c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x18c>
 800508e:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x18c>
 800509a:	4b43      	ldr	r3, [pc, #268]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x176>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x176>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e252      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4939      	ldr	r1, [pc, #228]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
 80050c6:	e03a      	b.n	800513e <HAL_RCC_OscConfig+0x202>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_OscConfig+0x1d6>
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <HAL_RCC_OscConfig+0x270>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f7fd fecb 	bl	8002e70 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x1b4>
 80050de:	f7fd fec7 	bl	8002e70 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x1b4>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e233      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x1a2>
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4927      	ldr	r1, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	e015      	b.n	800513e <HAL_RCC_OscConfig+0x202>
 8005112:	4b26      	ldr	r3, [pc, #152]	; (80051ac <HAL_RCC_OscConfig+0x270>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f7fd feaa 	bl	8002e70 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1f6>
 8005120:	f7fd fea6 	bl	8002e70 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1f6>
 800512e:	2303      	movs	r3, #3
 8005130:	e212      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1e4>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d03a      	beq.n	80051c0 <HAL_RCC_OscConfig+0x284>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <HAL_RCC_OscConfig+0x24a>
 8005152:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <HAL_RCC_OscConfig+0x274>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f7fd fe8a 	bl	8002e70 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x236>
 8005160:	f7fd fe86 	bl	8002e70 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x236>
 800516e:	2303      	movs	r3, #3
 8005170:	e1f2      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005172:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_RCC_OscConfig+0x26c>)
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x224>
 800517e:	2001      	movs	r0, #1
 8005180:	f000 fba2 	bl	80058c8 <RCC_Delay>
 8005184:	e01c      	b.n	80051c0 <HAL_RCC_OscConfig+0x284>
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_RCC_OscConfig+0x274>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f7fd fe70 	bl	8002e70 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]
 8005192:	e00f      	b.n	80051b4 <HAL_RCC_OscConfig+0x278>
 8005194:	f7fd fe6c 	bl	8002e70 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d908      	bls.n	80051b4 <HAL_RCC_OscConfig+0x278>
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1d8      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	42420000 	.word	0x42420000
 80051b0:	42420480 	.word	0x42420480
 80051b4:	4b9b      	ldr	r3, [pc, #620]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e9      	bne.n	8005194 <HAL_RCC_OscConfig+0x258>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a6 	beq.w	800531a <HAL_RCC_OscConfig+0x3de>
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]
 80051d2:	4b94      	ldr	r3, [pc, #592]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10d      	bne.n	80051fa <HAL_RCC_OscConfig+0x2be>
 80051de:	4b91      	ldr	r3, [pc, #580]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4a90      	ldr	r2, [pc, #576]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e8:	61d3      	str	r3, [r2, #28]
 80051ea:	4b8e      	ldr	r3, [pc, #568]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
 80051fa:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCC_OscConfig+0x4ec>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_RCC_OscConfig+0x2fc>
 8005206:	4b88      	ldr	r3, [pc, #544]	; (8005428 <HAL_RCC_OscConfig+0x4ec>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a87      	ldr	r2, [pc, #540]	; (8005428 <HAL_RCC_OscConfig+0x4ec>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	f7fd fe2d 	bl	8002e70 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x2f0>
 800521a:	f7fd fe29 	bl	8002e70 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b64      	cmp	r3, #100	; 0x64
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x2f0>
 8005228:	2303      	movs	r3, #3
 800522a:	e195      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCC_OscConfig+0x4ec>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x2de>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d106      	bne.n	800524e <HAL_RCC_OscConfig+0x312>
 8005240:	4b78      	ldr	r3, [pc, #480]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	4a77      	ldr	r2, [pc, #476]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6213      	str	r3, [r2, #32]
 800524c:	e02d      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x334>
 8005256:	4b73      	ldr	r3, [pc, #460]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a72      	ldr	r2, [pc, #456]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6213      	str	r3, [r2, #32]
 8005262:	4b70      	ldr	r3, [pc, #448]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4a6f      	ldr	r2, [pc, #444]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6213      	str	r3, [r2, #32]
 800526e:	e01c      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	2b05      	cmp	r3, #5
 8005276:	d10c      	bne.n	8005292 <HAL_RCC_OscConfig+0x356>
 8005278:	4b6a      	ldr	r3, [pc, #424]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4a69      	ldr	r2, [pc, #420]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	6213      	str	r3, [r2, #32]
 8005284:	4b67      	ldr	r3, [pc, #412]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4a66      	ldr	r2, [pc, #408]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	e00b      	b.n	80052aa <HAL_RCC_OscConfig+0x36e>
 8005292:	4b64      	ldr	r3, [pc, #400]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	4a63      	ldr	r2, [pc, #396]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	6213      	str	r3, [r2, #32]
 800529e:	4b61      	ldr	r3, [pc, #388]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4a60      	ldr	r2, [pc, #384]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	6213      	str	r3, [r2, #32]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d015      	beq.n	80052de <HAL_RCC_OscConfig+0x3a2>
 80052b2:	f7fd fddd 	bl	8002e70 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]
 80052b8:	e00a      	b.n	80052d0 <HAL_RCC_OscConfig+0x394>
 80052ba:	f7fd fdd9 	bl	8002e70 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x394>
 80052cc:	2303      	movs	r3, #3
 80052ce:	e143      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80052d0:	4b54      	ldr	r3, [pc, #336]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ee      	beq.n	80052ba <HAL_RCC_OscConfig+0x37e>
 80052dc:	e014      	b.n	8005308 <HAL_RCC_OscConfig+0x3cc>
 80052de:	f7fd fdc7 	bl	8002e70 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x3c0>
 80052e6:	f7fd fdc3 	bl	8002e70 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x3c0>
 80052f8:	2303      	movs	r3, #3
 80052fa:	e12d      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80052fc:	4b49      	ldr	r3, [pc, #292]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ee      	bne.n	80052e6 <HAL_RCC_OscConfig+0x3aa>
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <HAL_RCC_OscConfig+0x3de>
 800530e:	4b45      	ldr	r3, [pc, #276]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	4a44      	ldr	r2, [pc, #272]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005318:	61d3      	str	r3, [r2, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 808c 	beq.w	800543c <HAL_RCC_OscConfig+0x500>
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005330:	d10e      	bne.n	8005350 <HAL_RCC_OscConfig+0x414>
 8005332:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b08      	cmp	r3, #8
 800533c:	d108      	bne.n	8005350 <HAL_RCC_OscConfig+0x414>
 800533e:	4b39      	ldr	r3, [pc, #228]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534a:	d101      	bne.n	8005350 <HAL_RCC_OscConfig+0x414>
 800534c:	2301      	movs	r3, #1
 800534e:	e103      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	2b02      	cmp	r3, #2
 8005356:	d14e      	bne.n	80053f6 <HAL_RCC_OscConfig+0x4ba>
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <HAL_RCC_OscConfig+0x43c>
 8005364:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_OscConfig+0x43c>
 8005374:	2301      	movs	r3, #1
 8005376:	e0ef      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005378:	4b2c      	ldr	r3, [pc, #176]	; (800542c <HAL_RCC_OscConfig+0x4f0>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f7fd fd77 	bl	8002e70 <HAL_GetTick>
 8005382:	6138      	str	r0, [r7, #16]
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x45c>
 8005386:	f7fd fd73 	bl	8002e70 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b64      	cmp	r3, #100	; 0x64
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x45c>
 8005394:	2303      	movs	r3, #3
 8005396:	e0df      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005398:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f0      	bne.n	8005386 <HAL_RCC_OscConfig+0x44a>
 80053a4:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	491c      	ldr	r1, [pc, #112]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4918      	ldr	r1, [pc, #96]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80053c8:	4b18      	ldr	r3, [pc, #96]	; (800542c <HAL_RCC_OscConfig+0x4f0>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	f7fd fd4f 	bl	8002e70 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x4ac>
 80053d6:	f7fd fd4b 	bl	8002e70 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x4ac>
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0b7      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80053e8:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x49a>
 80053f4:	e022      	b.n	800543c <HAL_RCC_OscConfig+0x500>
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <HAL_RCC_OscConfig+0x4e8>)
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005400:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <HAL_RCC_OscConfig+0x4f0>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	f7fd fd32 	bl	8002e70 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]
 800540e:	e00f      	b.n	8005430 <HAL_RCC_OscConfig+0x4f4>
 8005410:	f7fd fd2e 	bl	8002e70 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d908      	bls.n	8005430 <HAL_RCC_OscConfig+0x4f4>
 800541e:	2303      	movs	r3, #3
 8005420:	e09a      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	40007000 	.word	0x40007000
 800542c:	42420068 	.word	0x42420068
 8005430:	4b4b      	ldr	r3, [pc, #300]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e9      	bne.n	8005410 <HAL_RCC_OscConfig+0x4d4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8088 	beq.w	8005556 <HAL_RCC_OscConfig+0x61a>
 8005446:	4b46      	ldr	r3, [pc, #280]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b08      	cmp	r3, #8
 8005450:	d068      	beq.n	8005524 <HAL_RCC_OscConfig+0x5e8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d14d      	bne.n	80054f6 <HAL_RCC_OscConfig+0x5ba>
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <HAL_RCC_OscConfig+0x628>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f7fd fd06 	bl	8002e70 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x53e>
 8005468:	f7fd fd02 	bl	8002e70 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x53e>
 8005476:	2303      	movs	r3, #3
 8005478:	e06e      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 800547a:	4b39      	ldr	r3, [pc, #228]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x52c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548e:	d10f      	bne.n	80054b0 <HAL_RCC_OscConfig+0x574>
 8005490:	4b33      	ldr	r3, [pc, #204]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4931      	ldr	r1, [pc, #196]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 800549a:	4313      	orrs	r3, r2
 800549c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800549e:	4b30      	ldr	r3, [pc, #192]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f023 020f 	bic.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	492d      	ldr	r1, [pc, #180]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 80054b0:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	430b      	orrs	r3, r1
 80054c2:	4927      	ldr	r1, [pc, #156]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCC_OscConfig+0x628>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	f7fd fccf 	bl	8002e70 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x5ac>
 80054d6:	f7fd fccb 	bl	8002e70 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x5ac>
 80054e4:	2303      	movs	r3, #3
 80054e6:	e037      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x59a>
 80054f4:	e02f      	b.n	8005556 <HAL_RCC_OscConfig+0x61a>
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_RCC_OscConfig+0x628>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f7fd fcb8 	bl	8002e70 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x5da>
 8005504:	f7fd fcb4 	bl	8002e70 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x5da>
 8005512:	2303      	movs	r3, #3
 8005514:	e020      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x5c8>
 8005522:	e018      	b.n	8005556 <HAL_RCC_OscConfig+0x61a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_RCC_OscConfig+0x5f4>
 800552c:	2301      	movs	r3, #1
 800552e:	e013      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_OscConfig+0x624>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	429a      	cmp	r2, r3
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x616>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x61a>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_RCC_OscConfig+0x61c>
 8005556:	2300      	movs	r3, #0
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	42420060 	.word	0x42420060

08005568 <HAL_RCC_ClockConfig>:
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
 8005578:	2301      	movs	r3, #1
 800557a:	e0d0      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 800557c:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d910      	bls.n	80055ac <HAL_RCC_ClockConfig+0x44>
 800558a:	4b67      	ldr	r3, [pc, #412]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 0207 	bic.w	r2, r3, #7
 8005592:	4965      	ldr	r1, [pc, #404]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
 800559a:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_ClockConfig+0x44>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0b8      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d020      	beq.n	80055fa <HAL_RCC_ClockConfig+0x92>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x68>
 80055c4:	4b59      	ldr	r3, [pc, #356]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a58      	ldr	r2, [pc, #352]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055ce:	6053      	str	r3, [r2, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x80>
 80055dc:	4b53      	ldr	r3, [pc, #332]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	4a52      	ldr	r2, [pc, #328]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055e6:	6053      	str	r3, [r2, #4]
 80055e8:	4b50      	ldr	r3, [pc, #320]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	494d      	ldr	r1, [pc, #308]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d040      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xb6>
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d115      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
 800561a:	2301      	movs	r3, #1
 800561c:	e07f      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
 8005626:	4b41      	ldr	r3, [pc, #260]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
 8005632:	2301      	movs	r3, #1
 8005634:	e073      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 8005636:	4b3d      	ldr	r3, [pc, #244]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
 8005642:	2301      	movs	r3, #1
 8005644:	e06b      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 8005646:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4936      	ldr	r1, [pc, #216]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
 8005658:	f7fd fc0a 	bl	8002e70 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
 8005660:	f7fd fc06 	bl	8002e70 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
 8005672:	2303      	movs	r3, #3
 8005674:	e053      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 8005676:	4b2d      	ldr	r3, [pc, #180]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
 8005688:	4b27      	ldr	r3, [pc, #156]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d210      	bcs.n	80056b8 <HAL_RCC_ClockConfig+0x150>
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 0207 	bic.w	r2, r3, #7
 800569e:	4922      	ldr	r1, [pc, #136]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]
 80056a6:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_ClockConfig+0x150>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e032      	b.n	800571e <HAL_RCC_ClockConfig+0x1b6>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x16e>
 80056c4:	4b19      	ldr	r3, [pc, #100]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	4916      	ldr	r1, [pc, #88]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x18e>
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	490e      	ldr	r1, [pc, #56]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]
 80056f6:	f000 f821 	bl	800573c <HAL_RCC_GetSysClockFreq>
 80056fa:	4602      	mov	r2, r0
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	091b      	lsrs	r3, r3, #4
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	490a      	ldr	r1, [pc, #40]	; (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 8005708:	5ccb      	ldrb	r3, [r1, r3]
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	4a09      	ldr	r2, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x1cc>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1d0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fb68 	bl	8002dec <HAL_InitTick>
 800571c:	2300      	movs	r3, #0
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40022000 	.word	0x40022000
 800572c:	40021000 	.word	0x40021000
 8005730:	0800a868 	.word	0x0800a868
 8005734:	2000006c 	.word	0x2000006c
 8005738:	20000070 	.word	0x20000070

0800573c <HAL_RCC_GetSysClockFreq>:
 800573c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005740:	b08e      	sub	sp, #56	; 0x38
 8005742:	af00      	add	r7, sp, #0
 8005744:	2300      	movs	r3, #0
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005748:	2300      	movs	r3, #0
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
 800574c:	2300      	movs	r3, #0
 800574e:	637b      	str	r3, [r7, #52]	; 0x34
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
 8005754:	2300      	movs	r3, #0
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	4b4e      	ldr	r3, [pc, #312]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b04      	cmp	r3, #4
 800576e:	d002      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x3a>
 8005770:	2b08      	cmp	r3, #8
 8005772:	d003      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x40>
 8005774:	e089      	b.n	800588a <HAL_RCC_GetSysClockFreq+0x14e>
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005778:	633b      	str	r3, [r7, #48]	; 0x30
 800577a:	e089      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x154>
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	0c9b      	lsrs	r3, r3, #18
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005786:	5c9b      	ldrb	r3, [r3, r2]
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d072      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0x13e>
 8005794:	4b41      	ldr	r3, [pc, #260]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x16c>)
 800579e:	5c9b      	ldrb	r3, [r3, r2]
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a2:	4b3e      	ldr	r3, [pc, #248]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d053      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0x11a>
 80057ae:	4b3b      	ldr	r3, [pc, #236]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	3301      	adds	r3, #1
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	4b37      	ldr	r3, [pc, #220]	; (800589c <HAL_RCC_GetSysClockFreq+0x160>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	3302      	adds	r3, #2
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2200      	movs	r2, #0
 80057ce:	469a      	mov	sl, r3
 80057d0:	4693      	mov	fp, r2
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2200      	movs	r2, #0
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	617a      	str	r2, [r7, #20]
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	fb03 f20b 	mul.w	r2, r3, fp
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fb0a f303 	mul.w	r3, sl, r3
 80057e6:	4413      	add	r3, r2
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	fbaa 0102 	umull	r0, r1, sl, r2
 80057ee:	440b      	add	r3, r1
 80057f0:	4619      	mov	r1, r3
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 80057f4:	fb03 f201 	mul.w	r2, r3, r1
 80057f8:	2300      	movs	r3, #0
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	4413      	add	r3, r2
 8005800:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005802:	fba0 4502 	umull	r4, r5, r0, r2
 8005806:	442b      	add	r3, r5
 8005808:	461d      	mov	r5, r3
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2200      	movs	r2, #0
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	60fa      	str	r2, [r7, #12]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	2200      	movs	r2, #0
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800581e:	460b      	mov	r3, r1
 8005820:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005824:	4652      	mov	r2, sl
 8005826:	fb02 f203 	mul.w	r2, r2, r3
 800582a:	465b      	mov	r3, fp
 800582c:	4684      	mov	ip, r0
 800582e:	fb0c f303 	mul.w	r3, ip, r3
 8005832:	4413      	add	r3, r2
 8005834:	4602      	mov	r2, r0
 8005836:	4651      	mov	r1, sl
 8005838:	fba2 8901 	umull	r8, r9, r2, r1
 800583c:	444b      	add	r3, r9
 800583e:	4699      	mov	r9, r3
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fb fc28 	bl	800109c <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4613      	mov	r3, r2
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
 8005854:	e007      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x12a>
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005868:	7b5b      	ldrb	r3, [r3, #13]
 800586a:	461a      	mov	r2, r3
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <HAL_RCC_GetSysClockFreq+0x148>
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	e004      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x148>
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	4a0b      	ldr	r2, [pc, #44]	; (80058ac <HAL_RCC_GetSysClockFreq+0x170>)
 800587e:	fb02 f303 	mul.w	r3, r2, r3
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
 8005888:	e002      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x154>
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x174>)
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
 800588e:	bf00      	nop
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	4618      	mov	r0, r3
 8005894:	3738      	adds	r7, #56	; 0x38
 8005896:	46bd      	mov	sp, r7
 8005898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589c:	40021000 	.word	0x40021000
 80058a0:	017d7840 	.word	0x017d7840
 80058a4:	0800a878 	.word	0x0800a878
 80058a8:	0800a888 	.word	0x0800a888
 80058ac:	003d0900 	.word	0x003d0900
 80058b0:	007a1200 	.word	0x007a1200

080058b4 <HAL_RCC_GetHCLKFreq>:
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	2000006c 	.word	0x2000006c

080058c8 <RCC_Delay>:
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <RCC_Delay+0x34>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <RCC_Delay+0x38>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	0a5b      	lsrs	r3, r3, #9
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	bf00      	nop
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1e5a      	subs	r2, r3, #1
 80058ea:	60fa      	str	r2, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f9      	bne.n	80058e4 <RCC_Delay+0x1c>
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	2000006c 	.word	0x2000006c
 8005900:	10624dd3 	.word	0x10624dd3

08005904 <HAL_RCCEx_PeriphCLKConfig>:
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d07d      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005924:	2300      	movs	r3, #0
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	4b8b      	ldr	r3, [pc, #556]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10d      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005934:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	4a87      	ldr	r2, [pc, #540]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800593a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593e:	61d3      	str	r3, [r2, #28]
 8005940:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2301      	movs	r3, #1
 800594e:	76fb      	strb	r3, [r7, #27]
 8005950:	4b82      	ldr	r3, [pc, #520]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d118      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800595c:	4b7f      	ldr	r3, [pc, #508]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a7e      	ldr	r2, [pc, #504]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	f7fd fa82 	bl	8002e70 <HAL_GetTick>
 800596c:	6178      	str	r0, [r7, #20]
 800596e:	e008      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8005970:	f7fd fa7e 	bl	8002e70 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800597e:	2303      	movs	r3, #3
 8005980:	e0e5      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005982:	4b76      	ldr	r3, [pc, #472]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800598e:	4b72      	ldr	r3, [pc, #456]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02e      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d027      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80059ac:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	4b6a      	ldr	r3, [pc, #424]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	4b68      	ldr	r3, [pc, #416]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4a65      	ldr	r2, [pc, #404]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d014      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80059d2:	f7fd fa4d 	bl	8002e70 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]
 80059d8:	e00a      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80059da:	f7fd fa49 	bl	8002e70 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0ae      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ee      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80059fc:	4b56      	ldr	r3, [pc, #344]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4953      	ldr	r1, [pc, #332]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	620b      	str	r3, [r1, #32]
 8005a0e:	7efb      	ldrb	r3, [r7, #27]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8005a14:	4b50      	ldr	r3, [pc, #320]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4a4f      	ldr	r2, [pc, #316]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	61d3      	str	r3, [r2, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005a2c:	4b4a      	ldr	r3, [pc, #296]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4947      	ldr	r1, [pc, #284]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8005a4a:	4b43      	ldr	r3, [pc, #268]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4940      	ldr	r1, [pc, #256]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x176>
 8005a68:	4b3b      	ldr	r3, [pc, #236]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	4938      	ldr	r1, [pc, #224]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005a86:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a92:	2301      	movs	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d148      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a9c:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d138      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x216>
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005ab4:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e042      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	4920      	ldr	r1, [pc, #128]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005ada:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	491c      	ldr	r1, [pc, #112]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	f7fd f9bd 	bl	8002e70 <HAL_GetTick>
 8005af6:	6178      	str	r0, [r7, #20]
 8005af8:	e008      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005afa:	f7fd f9b9 	bl	8002e70 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	; 0x64
 8005b06:	d901      	bls.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e020      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005b18:	e009      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d001      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00f      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x248>
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	4904      	ldr	r1, [pc, #16]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40007000 	.word	0x40007000
 8005b60:	42420440 	.word	0x42420440
 8005b64:	42420070 	.word	0x42420070

08005b68 <HAL_SPI_Init>:
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Init+0x12>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e076      	b.n	8005c68 <HAL_SPI_Init+0x100>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d108      	bne.n	8005b94 <HAL_SPI_Init+0x2c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8a:	d009      	beq.n	8005ba0 <HAL_SPI_Init+0x38>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	61da      	str	r2, [r3, #28]
 8005b92:	e005      	b.n	8005ba0 <HAL_SPI_Init+0x38>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	615a      	str	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <HAL_SPI_Init+0x58>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc ff84 	bl	8002ac8 <HAL_SPI_MspInit>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c24:	ea42 0103 	orr.w	r1, r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	0c1a      	lsrs	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f002 0204 	and.w	r2, r2, #4
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c56:	61da      	str	r2, [r3, #28]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005c66:	2300      	movs	r3, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_SPI_Transmit>:
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	80fb      	strh	r3, [r7, #6]
 8005c80:	2300      	movs	r3, #0
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_SPI_Transmit+0x22>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e12d      	b.n	8005eee <HAL_SPI_Transmit+0x27e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005c9a:	f7fd f8e9 	bl	8002e70 <HAL_GetTick>
 8005c9e:	61b8      	str	r0, [r7, #24]
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	82fb      	strh	r3, [r7, #22]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d002      	beq.n	8005cb6 <HAL_SPI_Transmit+0x46>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e116      	b.n	8005ee4 <HAL_SPI_Transmit+0x274>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_SPI_Transmit+0x52>
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <HAL_SPI_Transmit+0x58>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e10d      	b.n	8005ee4 <HAL_SPI_Transmit+0x274>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2203      	movs	r2, #3
 8005ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	869a      	strh	r2, [r3, #52]	; 0x34
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0e:	d10f      	bne.n	8005d30 <HAL_SPI_Transmit+0xc0>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d007      	beq.n	8005d4e <HAL_SPI_Transmit+0xde>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d56:	d14f      	bne.n	8005df8 <HAL_SPI_Transmit+0x188>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Transmit+0xf6>
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d142      	bne.n	8005dec <HAL_SPI_Transmit+0x17c>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	881a      	ldrh	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d8a:	e02f      	b.n	8005dec <HAL_SPI_Transmit+0x17c>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d112      	bne.n	8005dc0 <HAL_SPI_Transmit+0x150>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	1c9a      	adds	r2, r3, #2
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dbe:	e015      	b.n	8005dec <HAL_SPI_Transmit+0x17c>
 8005dc0:	f7fd f856 	bl	8002e70 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d803      	bhi.n	8005dd8 <HAL_SPI_Transmit+0x168>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d102      	bne.n	8005dde <HAL_SPI_Transmit+0x16e>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_SPI_Transmit+0x17c>
 8005dde:	2303      	movs	r3, #3
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005dea:	e07b      	b.n	8005ee4 <HAL_SPI_Transmit+0x274>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ca      	bne.n	8005d8c <HAL_SPI_Transmit+0x11c>
 8005df6:	e050      	b.n	8005e9a <HAL_SPI_Transmit+0x22a>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_Transmit+0x196>
 8005e00:	8afb      	ldrh	r3, [r7, #22]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d144      	bne.n	8005e90 <HAL_SPI_Transmit+0x220>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e2c:	e030      	b.n	8005e90 <HAL_SPI_Transmit+0x220>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d113      	bne.n	8005e64 <HAL_SPI_Transmit+0x1f4>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e62:	e015      	b.n	8005e90 <HAL_SPI_Transmit+0x220>
 8005e64:	f7fd f804 	bl	8002e70 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d803      	bhi.n	8005e7c <HAL_SPI_Transmit+0x20c>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d102      	bne.n	8005e82 <HAL_SPI_Transmit+0x212>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_SPI_Transmit+0x220>
 8005e82:	2303      	movs	r3, #3
 8005e84:	77fb      	strb	r3, [r7, #31]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005e8e:	e029      	b.n	8005ee4 <HAL_SPI_Transmit+0x274>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1c9      	bne.n	8005e2e <HAL_SPI_Transmit+0x1be>
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fbcc 	bl	800663c <SPI_EndRxTxTransaction>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0x240>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_SPI_Transmit+0x25e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Transmit+0x26c>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e003      	b.n	8005ee4 <HAL_SPI_Transmit+0x274>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_SPI_Receive>:
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af02      	add	r7, sp, #8
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d002      	beq.n	8005f1c <HAL_SPI_Receive+0x26>
 8005f16:	2302      	movs	r3, #2
 8005f18:	75fb      	strb	r3, [r7, #23]
 8005f1a:	e0fb      	b.n	8006114 <HAL_SPI_Receive+0x21e>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f24:	d112      	bne.n	8005f4c <HAL_SPI_Receive+0x56>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10e      	bne.n	8005f4c <HAL_SPI_Receive+0x56>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2204      	movs	r2, #4
 8005f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005f36:	88fa      	ldrh	r2, [r7, #6]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f8ef 	bl	8006126 <HAL_SPI_TransmitReceive>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	e0e8      	b.n	800611e <HAL_SPI_Receive+0x228>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_SPI_Receive+0x64>
 8005f56:	2302      	movs	r3, #2
 8005f58:	e0e1      	b.n	800611e <HAL_SPI_Receive+0x228>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005f62:	f7fc ff85 	bl	8002e70 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Receive+0x7e>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Receive+0x84>
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
 8005f78:	e0cc      	b.n	8006114 <HAL_SPI_Receive+0x21e>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	869a      	strh	r2, [r3, #52]	; 0x34
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	; 0x44
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_SPI_Receive+0xec>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_SPI_Receive+0x10a>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d16a      	bne.n	80060de <HAL_SPI_Receive+0x1e8>
 8006008:	e032      	b.n	8006070 <HAL_SPI_Receive+0x17a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d115      	bne.n	8006044 <HAL_SPI_Receive+0x14e>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f103 020c 	add.w	r2, r3, #12
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006042:	e015      	b.n	8006070 <HAL_SPI_Receive+0x17a>
 8006044:	f7fc ff14 	bl	8002e70 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d803      	bhi.n	800605c <HAL_SPI_Receive+0x166>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d102      	bne.n	8006062 <HAL_SPI_Receive+0x16c>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_SPI_Receive+0x17a>
 8006062:	2303      	movs	r3, #3
 8006064:	75fb      	strb	r3, [r7, #23]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800606e:	e051      	b.n	8006114 <HAL_SPI_Receive+0x21e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1c7      	bne.n	800600a <HAL_SPI_Receive+0x114>
 800607a:	e035      	b.n	80060e8 <HAL_SPI_Receive+0x1f2>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d113      	bne.n	80060b2 <HAL_SPI_Receive+0x1bc>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	b292      	uxth	r2, r2
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b0:	e015      	b.n	80060de <HAL_SPI_Receive+0x1e8>
 80060b2:	f7fc fedd 	bl	8002e70 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d803      	bhi.n	80060ca <HAL_SPI_Receive+0x1d4>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d102      	bne.n	80060d0 <HAL_SPI_Receive+0x1da>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_SPI_Receive+0x1e8>
 80060d0:	2303      	movs	r3, #3
 80060d2:	75fb      	strb	r3, [r7, #23]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80060dc:	e01a      	b.n	8006114 <HAL_SPI_Receive+0x21e>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1c9      	bne.n	800607c <HAL_SPI_Receive+0x186>
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fa53 	bl	8006598 <SPI_EndRxTransaction>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_Receive+0x208>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_SPI_Receive+0x216>
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
 800610a:	e003      	b.n	8006114 <HAL_SPI_Receive+0x21e>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_SPI_TransmitReceive>:
 8006126:	b580      	push	{r7, lr}
 8006128:	b08c      	sub	sp, #48	; 0x30
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	807b      	strh	r3, [r7, #2]
 8006134:	2301      	movs	r3, #1
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006138:	2300      	movs	r3, #0
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_SPI_TransmitReceive+0x26>
 8006148:	2302      	movs	r3, #2
 800614a:	e198      	b.n	800647e <HAL_SPI_TransmitReceive+0x358>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006154:	f7fc fe8c 	bl	8002e70 <HAL_GetTick>
 8006158:	6278      	str	r0, [r7, #36]	; 0x24
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	837b      	strh	r3, [r7, #26]
 800616e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006172:	2b01      	cmp	r3, #1
 8006174:	d00f      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x70>
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617c:	d107      	bne.n	800618e <HAL_SPI_TransmitReceive+0x68>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <HAL_SPI_TransmitReceive+0x68>
 8006186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800618a:	2b04      	cmp	r3, #4
 800618c:	d003      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x70>
 800618e:	2302      	movs	r3, #2
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006194:	e16d      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x82>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x82>
 80061a2:	887b      	ldrh	r3, [r7, #2]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x8a>
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e160      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d003      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x9e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2205      	movs	r2, #5
 80061c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	887a      	ldrh	r2, [r7, #2]
 80061da:	879a      	strh	r2, [r3, #60]	; 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	887a      	ldrh	r2, [r7, #2]
 80061e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	887a      	ldrh	r2, [r7, #2]
 80061ec:	869a      	strh	r2, [r3, #52]	; 0x34
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	641a      	str	r2, [r3, #64]	; 0x40
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d007      	beq.n	8006218 <HAL_SPI_TransmitReceive+0xf2>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d17c      	bne.n	800631c <HAL_SPI_TransmitReceive+0x1f6>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x10a>
 800622a:	8b7b      	ldrh	r3, [r7, #26]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d16a      	bne.n	8006306 <HAL_SPI_TransmitReceive+0x1e0>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	881a      	ldrh	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	631a      	str	r2, [r3, #48]	; 0x30
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	86da      	strh	r2, [r3, #54]	; 0x36
 8006254:	e057      	b.n	8006306 <HAL_SPI_TransmitReceive+0x1e0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b02      	cmp	r3, #2
 8006262:	d11b      	bne.n	800629c <HAL_SPI_TransmitReceive+0x176>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <HAL_SPI_TransmitReceive+0x176>
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d113      	bne.n	800629c <HAL_SPI_TransmitReceive+0x176>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	881a      	ldrh	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60da      	str	r2, [r3, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	1c9a      	adds	r2, r3, #2
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	86da      	strh	r2, [r3, #54]	; 0x36
 8006298:	2300      	movs	r3, #0
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d119      	bne.n	80062de <HAL_SPI_TransmitReceive+0x1b8>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d014      	beq.n	80062de <HAL_SPI_TransmitReceive+0x1b8>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	b292      	uxth	r2, r2
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062da:	2301      	movs	r3, #1
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062de:	f7fc fdc7 	bl	8002e70 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d80b      	bhi.n	8006306 <HAL_SPI_TransmitReceive+0x1e0>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d007      	beq.n	8006306 <HAL_SPI_TransmitReceive+0x1e0>
 80062f6:	2303      	movs	r3, #3
 80062f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006304:	e0b5      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1a2      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x130>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d19d      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x130>
 800631a:	e080      	b.n	800641e <HAL_SPI_TransmitReceive+0x2f8>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HAL_SPI_TransmitReceive+0x204>
 8006324:	8b7b      	ldrh	r3, [r7, #26]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d16f      	bne.n	800640a <HAL_SPI_TransmitReceive+0x2e4>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	7812      	ldrb	r2, [r2, #0]
 8006336:	701a      	strb	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006350:	e05b      	b.n	800640a <HAL_SPI_TransmitReceive+0x2e4>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d11c      	bne.n	800639a <HAL_SPI_TransmitReceive+0x274>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <HAL_SPI_TransmitReceive+0x274>
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d114      	bne.n	800639a <HAL_SPI_TransmitReceive+0x274>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	86da      	strh	r2, [r3, #54]	; 0x36
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d119      	bne.n	80063dc <HAL_SPI_TransmitReceive+0x2b6>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d014      	beq.n	80063dc <HAL_SPI_TransmitReceive+0x2b6>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d8:	2301      	movs	r3, #1
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063dc:	f7fc fd48 	bl	8002e70 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d803      	bhi.n	80063f4 <HAL_SPI_TransmitReceive+0x2ce>
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x2d4>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <HAL_SPI_TransmitReceive+0x2e4>
 80063fa:	2303      	movs	r3, #3
 80063fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006408:	e033      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d19e      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x22c>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d199      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x22c>
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f90a 	bl	800663c <SPI_EndRxTxTransaction>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <HAL_SPI_TransmitReceive+0x316>
 800642e:	2301      	movs	r3, #1
 8006430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	655a      	str	r2, [r3, #84]	; 0x54
 800643a:	e01a      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <HAL_SPI_TransmitReceive+0x334>
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_SPI_TransmitReceive+0x344>
 8006462:	2301      	movs	r3, #1
 8006464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006468:	e003      	b.n	8006472 <HAL_SPI_TransmitReceive+0x34c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800647a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800647e:	4618      	mov	r0, r3
 8006480:	3730      	adds	r7, #48	; 0x30
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <SPI_WaitFlagStateUntilTimeout>:
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	71fb      	strb	r3, [r7, #7]
 8006498:	f7fc fcea 	bl	8002e70 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	f7fc fce2 	bl	8002e70 <HAL_GetTick>
 80064ac:	61b8      	str	r0, [r7, #24]
 80064ae:	4b39      	ldr	r3, [pc, #228]	; (8006594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	015b      	lsls	r3, r3, #5
 80064b4:	0d1b      	lsrs	r3, r3, #20
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	fb02 f303 	mul.w	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e054      	b.n	800656a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d050      	beq.n	800656a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80064c8:	f7fc fcd2 	bl	8002e70 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d902      	bls.n	80064de <SPI_WaitFlagStateUntilTimeout+0x56>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d13d      	bne.n	800655a <SPI_WaitFlagStateUntilTimeout+0xd2>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f6:	d111      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0x94>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006500:	d004      	beq.n	800650c <SPI_WaitFlagStateUntilTimeout+0x84>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650a:	d107      	bne.n	800651c <SPI_WaitFlagStateUntilTimeout+0x94>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006524:	d10f      	bne.n	8006546 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006556:	2303      	movs	r3, #3
 8006558:	e017      	b.n	800658a <SPI_WaitFlagStateUntilTimeout+0x102>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3b01      	subs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	bf0c      	ite	eq
 800657a:	2301      	moveq	r3, #1
 800657c:	2300      	movne	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	429a      	cmp	r2, r3
 8006586:	d19b      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006588:	2300      	movs	r3, #0
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	2000006c 	.word	0x2000006c

08006598 <SPI_EndRxTransaction>:
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ac:	d111      	bne.n	80065d2 <SPI_EndRxTransaction+0x3a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b6:	d004      	beq.n	80065c2 <SPI_EndRxTransaction+0x2a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d107      	bne.n	80065d2 <SPI_EndRxTransaction+0x3a>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d117      	bne.n	800660c <SPI_EndRxTransaction+0x74>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e4:	d112      	bne.n	800660c <SPI_EndRxTransaction+0x74>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2200      	movs	r2, #0
 80065ee:	2101      	movs	r1, #1
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff ff49 	bl	8006488 <SPI_WaitFlagStateUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01a      	beq.n	8006632 <SPI_EndRxTransaction+0x9a>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
 8006608:	2303      	movs	r3, #3
 800660a:	e013      	b.n	8006634 <SPI_EndRxTransaction+0x9c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	2180      	movs	r1, #128	; 0x80
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7ff ff36 	bl	8006488 <SPI_WaitFlagStateUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <SPI_EndRxTransaction+0x9a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	f043 0220 	orr.w	r2, r3, #32
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	655a      	str	r2, [r3, #84]	; 0x54
 800662e:	2303      	movs	r3, #3
 8006630:	e000      	b.n	8006634 <SPI_EndRxTransaction+0x9c>
 8006632:	2300      	movs	r3, #0
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <SPI_EndRxTxTransaction>:
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f7ff ff18 	bl	8006488 <SPI_WaitFlagStateUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <SPI_EndRxTxTransaction+0x32>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
 800666a:	2303      	movs	r3, #3
 800666c:	e000      	b.n	8006670 <SPI_EndRxTxTransaction+0x34>
 800666e:	2300      	movs	r3, #0
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_Base_Init>:
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_TIM_Base_Init+0x12>
 8006686:	2301      	movs	r3, #1
 8006688:	e041      	b.n	800670e <HAL_TIM_Base_Init+0x96>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_TIM_Base_Init+0x2c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fc fb4a 	bl	8002d38 <HAL_TIM_Base_MspInit>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 f82e 	bl	8006718 <TIM_Base_SetConfig>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800670c:	2300      	movs	r3, #0
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <TIM_Base_SetConfig>:
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2d      	ldr	r2, [pc, #180]	; (80067e0 <TIM_Base_SetConfig+0xc8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00f      	beq.n	8006750 <TIM_Base_SetConfig+0x38>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006736:	d00b      	beq.n	8006750 <TIM_Base_SetConfig+0x38>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2a      	ldr	r2, [pc, #168]	; (80067e4 <TIM_Base_SetConfig+0xcc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_Base_SetConfig+0x38>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a29      	ldr	r2, [pc, #164]	; (80067e8 <TIM_Base_SetConfig+0xd0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0x38>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a28      	ldr	r2, [pc, #160]	; (80067ec <TIM_Base_SetConfig+0xd4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d108      	bne.n	8006762 <TIM_Base_SetConfig+0x4a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <TIM_Base_SetConfig+0xc8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0x72>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0x72>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1b      	ldr	r2, [pc, #108]	; (80067e4 <TIM_Base_SetConfig+0xcc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0x72>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1a      	ldr	r2, [pc, #104]	; (80067e8 <TIM_Base_SetConfig+0xd0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0x72>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a19      	ldr	r2, [pc, #100]	; (80067ec <TIM_Base_SetConfig+0xd4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0x84>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a07      	ldr	r2, [pc, #28]	; (80067e0 <TIM_Base_SetConfig+0xc8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0xb8>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800
 80067ec:	40000c00 	.word	0x40000c00

080067f0 <HAL_TIMEx_MasterConfigSynchronization>:
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006804:	2302      	movs	r3, #2
 8006806:	e04b      	b.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a19      	ldr	r2, [pc, #100]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d00e      	beq.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a15      	ldr	r2, [pc, #84]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a13      	ldr	r2, [pc, #76]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a12      	ldr	r2, [pc, #72]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10c      	bne.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	60bb      	str	r3, [r7, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	609a      	str	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800689e:	2300      	movs	r3, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00

080068bc <USB_CoreInit>:
 80068bc:	b084      	sub	sp, #16
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	f107 001c 	add.w	r0, r7, #28
 80068ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 f9de 	bl	8007c9c <USB_CoreReset>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068fc:	b004      	add	sp, #16
 80068fe:	4770      	bx	lr

08006900 <USB_SetTurnaroundTime>:
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
 800690e:	79fb      	ldrb	r3, [r7, #7]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d165      	bne.n	80069e0 <USB_SetTurnaroundTime+0xe0>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a3e      	ldr	r2, [pc, #248]	; (8006a10 <USB_SetTurnaroundTime+0x110>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d906      	bls.n	800692a <USB_SetTurnaroundTime+0x2a>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a3d      	ldr	r2, [pc, #244]	; (8006a14 <USB_SetTurnaroundTime+0x114>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d202      	bcs.n	800692a <USB_SetTurnaroundTime+0x2a>
 8006924:	230f      	movs	r3, #15
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e05c      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4a39      	ldr	r2, [pc, #228]	; (8006a14 <USB_SetTurnaroundTime+0x114>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d306      	bcc.n	8006940 <USB_SetTurnaroundTime+0x40>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a38      	ldr	r2, [pc, #224]	; (8006a18 <USB_SetTurnaroundTime+0x118>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d202      	bcs.n	8006940 <USB_SetTurnaroundTime+0x40>
 800693a:	230e      	movs	r3, #14
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e051      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a35      	ldr	r2, [pc, #212]	; (8006a18 <USB_SetTurnaroundTime+0x118>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d306      	bcc.n	8006956 <USB_SetTurnaroundTime+0x56>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4a34      	ldr	r2, [pc, #208]	; (8006a1c <USB_SetTurnaroundTime+0x11c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d202      	bcs.n	8006956 <USB_SetTurnaroundTime+0x56>
 8006950:	230d      	movs	r3, #13
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e046      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <USB_SetTurnaroundTime+0x11c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d306      	bcc.n	800696c <USB_SetTurnaroundTime+0x6c>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <USB_SetTurnaroundTime+0x120>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d802      	bhi.n	800696c <USB_SetTurnaroundTime+0x6c>
 8006966:	230c      	movs	r3, #12
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e03b      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a2c      	ldr	r2, [pc, #176]	; (8006a20 <USB_SetTurnaroundTime+0x120>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d906      	bls.n	8006982 <USB_SetTurnaroundTime+0x82>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <USB_SetTurnaroundTime+0x124>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d802      	bhi.n	8006982 <USB_SetTurnaroundTime+0x82>
 800697c:	230b      	movs	r3, #11
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e030      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a27      	ldr	r2, [pc, #156]	; (8006a24 <USB_SetTurnaroundTime+0x124>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d906      	bls.n	8006998 <USB_SetTurnaroundTime+0x98>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4a26      	ldr	r2, [pc, #152]	; (8006a28 <USB_SetTurnaroundTime+0x128>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d802      	bhi.n	8006998 <USB_SetTurnaroundTime+0x98>
 8006992:	230a      	movs	r3, #10
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	e025      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a23      	ldr	r2, [pc, #140]	; (8006a28 <USB_SetTurnaroundTime+0x128>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0xae>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a22      	ldr	r2, [pc, #136]	; (8006a2c <USB_SetTurnaroundTime+0x12c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d202      	bcs.n	80069ae <USB_SetTurnaroundTime+0xae>
 80069a8:	2309      	movs	r3, #9
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e01a      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a1e      	ldr	r2, [pc, #120]	; (8006a2c <USB_SetTurnaroundTime+0x12c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d306      	bcc.n	80069c4 <USB_SetTurnaroundTime+0xc4>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a1d      	ldr	r2, [pc, #116]	; (8006a30 <USB_SetTurnaroundTime+0x130>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d802      	bhi.n	80069c4 <USB_SetTurnaroundTime+0xc4>
 80069be:	2308      	movs	r3, #8
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e00f      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <USB_SetTurnaroundTime+0x130>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d906      	bls.n	80069da <USB_SetTurnaroundTime+0xda>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <USB_SetTurnaroundTime+0x134>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d202      	bcs.n	80069da <USB_SetTurnaroundTime+0xda>
 80069d4:	2307      	movs	r3, #7
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e004      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 80069da:	2306      	movs	r3, #6
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	e001      	b.n	80069e4 <USB_SetTurnaroundTime+0xe4>
 80069e0:	2309      	movs	r3, #9
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	60da      	str	r2, [r3, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069fc:	431a      	orrs	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	2300      	movs	r3, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	00d8acbf 	.word	0x00d8acbf
 8006a14:	00e4e1c0 	.word	0x00e4e1c0
 8006a18:	00f42400 	.word	0x00f42400
 8006a1c:	01067380 	.word	0x01067380
 8006a20:	011a499f 	.word	0x011a499f
 8006a24:	01312cff 	.word	0x01312cff
 8006a28:	014ca43f 	.word	0x014ca43f
 8006a2c:	016e3600 	.word	0x016e3600
 8006a30:	01a6ab1f 	.word	0x01a6ab1f
 8006a34:	01e84800 	.word	0x01e84800

08006a38 <USB_EnableGlobalInt>:
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f043 0201 	orr.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <USB_DisableGlobalInt>:
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f023 0201 	bic.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USB_SetCurrentMode>:
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d115      	bne.n	8006ac6 <USB_SetCurrentMode+0x4e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60da      	str	r2, [r3, #12]
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	f7fc f9ec 	bl	8002e84 <HAL_Delay>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f87a 	bl	8007bac <USB_GetMode>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d01e      	beq.n	8006afc <USB_SetCurrentMode+0x84>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b31      	cmp	r3, #49	; 0x31
 8006ac2:	d9f0      	bls.n	8006aa6 <USB_SetCurrentMode+0x2e>
 8006ac4:	e01a      	b.n	8006afc <USB_SetCurrentMode+0x84>
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d115      	bne.n	8006af8 <USB_SetCurrentMode+0x80>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7fc f9d3 	bl	8002e84 <HAL_Delay>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f861 	bl	8007bac <USB_GetMode>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USB_SetCurrentMode+0x84>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b31      	cmp	r3, #49	; 0x31
 8006af4:	d9f0      	bls.n	8006ad8 <USB_SetCurrentMode+0x60>
 8006af6:	e001      	b.n	8006afc <USB_SetCurrentMode+0x84>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e005      	b.n	8006b08 <USB_SetCurrentMode+0x90>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b32      	cmp	r3, #50	; 0x32
 8006b00:	d101      	bne.n	8006b06 <USB_SetCurrentMode+0x8e>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <USB_SetCurrentMode+0x90>
 8006b06:	2300      	movs	r3, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USB_DevInit>:
 8006b10:	b084      	sub	sp, #16
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	e009      	b.n	8006b44 <USB_DevInit+0x34>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	3340      	adds	r3, #64	; 0x40
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b0e      	cmp	r3, #14
 8006b48:	d9f2      	bls.n	8006b30 <USB_DevInit+0x20>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	2300      	movs	r3, #0
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	2103      	movs	r1, #3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f959 	bl	8006e1c <USB_SetDevSpeed>
 8006b6a:	2110      	movs	r1, #16
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8f1 	bl	8006d54 <USB_FlushTxFifo>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <USB_DevInit+0x6c>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f91d 	bl	8006dbc <USB_FlushRxFifo>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USB_DevInit+0x7c>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	461a      	mov	r2, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	6113      	str	r3, [r2, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6153      	str	r3, [r2, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006baa:	461a      	mov	r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	61d3      	str	r3, [r2, #28]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	e043      	b.n	8006c3e <USB_DevInit+0x12e>
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bcc:	d118      	bne.n	8006c00 <USB_DevInit+0xf0>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <USB_DevInit+0xda>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	461a      	mov	r2, r3
 8006be2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	e013      	b.n	8006c12 <USB_DevInit+0x102>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	e008      	b.n	8006c12 <USB_DevInit+0x102>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	6113      	str	r3, [r2, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	461a      	mov	r2, r3
 8006c32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c36:	6093      	str	r3, [r2, #8]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d3b7      	bcc.n	8006bb6 <USB_DevInit+0xa6>
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e043      	b.n	8006cd4 <USB_DevInit+0x1c4>
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c62:	d118      	bne.n	8006c96 <USB_DevInit+0x186>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <USB_DevInit+0x170>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e013      	b.n	8006ca8 <USB_DevInit+0x198>
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	e008      	b.n	8006ca8 <USB_DevInit+0x198>
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6113      	str	r3, [r2, #16]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ccc:	6093      	str	r3, [r2, #8]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3b7      	bcc.n	8006c4c <USB_DevInit+0x13c>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cee:	6113      	str	r3, [r2, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	619a      	str	r2, [r3, #24]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cfc:	615a      	str	r2, [r3, #20]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f043 0210 	orr.w	r2, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	619a      	str	r2, [r3, #24]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <USB_DevInit+0x240>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6193      	str	r3, [r2, #24]
 8006d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <USB_DevInit+0x218>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f043 0208 	orr.w	r2, r3, #8
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	619a      	str	r2, [r3, #24]
 8006d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d107      	bne.n	8006d3e <USB_DevInit+0x22e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d36:	f043 0304 	orr.w	r3, r3, #4
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6193      	str	r3, [r2, #24]
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4a:	b004      	add	sp, #16
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	803c3800 	.word	0x803c3800

08006d54 <USB_FlushTxFifo>:
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3301      	adds	r3, #1
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <USB_FlushTxFifo+0x64>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d901      	bls.n	8006d74 <USB_FlushTxFifo+0x20>
 8006d70:	2303      	movs	r3, #3
 8006d72:	e01b      	b.n	8006dac <USB_FlushTxFifo+0x58>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	daf2      	bge.n	8006d62 <USB_FlushTxFifo+0xe>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	019b      	lsls	r3, r3, #6
 8006d84:	f043 0220 	orr.w	r2, r3, #32
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	611a      	str	r2, [r3, #16]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a08      	ldr	r2, [pc, #32]	; (8006db8 <USB_FlushTxFifo+0x64>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <USB_FlushTxFifo+0x4a>
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e006      	b.n	8006dac <USB_FlushTxFifo+0x58>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d0f0      	beq.n	8006d8c <USB_FlushTxFifo+0x38>
 8006daa:	2300      	movs	r3, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	00030d40 	.word	0x00030d40

08006dbc <USB_FlushRxFifo>:
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a11      	ldr	r2, [pc, #68]	; (8006e18 <USB_FlushRxFifo+0x5c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <USB_FlushRxFifo+0x1e>
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e018      	b.n	8006e0c <USB_FlushRxFifo+0x50>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	daf2      	bge.n	8006dc8 <USB_FlushRxFifo+0xc>
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2210      	movs	r2, #16
 8006dea:	611a      	str	r2, [r3, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a08      	ldr	r2, [pc, #32]	; (8006e18 <USB_FlushRxFifo+0x5c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <USB_FlushRxFifo+0x42>
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <USB_FlushRxFifo+0x50>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b10      	cmp	r3, #16
 8006e08:	d0f0      	beq.n	8006dec <USB_FlushRxFifo+0x30>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	00030d40 	.word	0x00030d40

08006e1c <USB_SetDevSpeed>:
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	600b      	str	r3, [r1, #0]
 8006e40:	2300      	movs	r3, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <USB_GetDevSpeed>:
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d002      	beq.n	8006e72 <USB_GetDevSpeed+0x26>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d102      	bne.n	8006e78 <USB_GetDevSpeed+0x2c>
 8006e72:	2302      	movs	r3, #2
 8006e74:	75fb      	strb	r3, [r7, #23]
 8006e76:	e001      	b.n	8006e7c <USB_GetDevSpeed+0x30>
 8006e78:	230f      	movs	r3, #15
 8006e7a:	75fb      	strb	r3, [r7, #23]
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <USB_ActivateEndpoint>:
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d13a      	bne.n	8006f1a <USB_ActivateEndpoint+0x92>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61cb      	str	r3, [r1, #28]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d155      	bne.n	8006f88 <USB_ActivateEndpoint+0x100>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	791b      	ldrb	r3, [r3, #4]
 8006ef6:	049b      	lsls	r3, r3, #18
 8006ef8:	4319      	orrs	r1, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	430b      	orrs	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e036      	b.n	8006f88 <USB_ActivateEndpoint+0x100>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61cb      	str	r3, [r1, #28]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d11a      	bne.n	8006f88 <USB_ActivateEndpoint+0x100>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	049b      	lsls	r3, r3, #18
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <USB_DeactivateEndpoint>:
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d161      	bne.n	8007074 <USB_DeactivateEndpoint+0xe0>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc6:	d11f      	bne.n	8007008 <USB_DeactivateEndpoint+0x74>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	b29b      	uxth	r3, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4013      	ands	r3, r2
 800702a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f303 	lsl.w	r3, r1, r3
 8007042:	b29b      	uxth	r3, r3
 8007044:	43db      	mvns	r3, r3
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4013      	ands	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	0159      	lsls	r1, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	440b      	add	r3, r1
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	4619      	mov	r1, r3
 800706c:	4b35      	ldr	r3, [pc, #212]	; (8007144 <USB_DeactivateEndpoint+0x1b0>)
 800706e:	4013      	ands	r3, r2
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	e060      	b.n	8007136 <USB_DeactivateEndpoint+0x1a2>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708a:	d11f      	bne.n	80070cc <USB_DeactivateEndpoint+0x138>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	43db      	mvns	r3, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4013      	ands	r3, r2
 80070ee:	63cb      	str	r3, [r1, #60]	; 0x3c
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	2101      	movs	r1, #1
 8007102:	fa01 f303 	lsl.w	r3, r1, r3
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	43db      	mvns	r3, r3
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007110:	4013      	ands	r3, r2
 8007112:	61cb      	str	r3, [r1, #28]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	0159      	lsls	r1, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	440b      	add	r3, r1
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	4619      	mov	r1, r3
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <USB_DeactivateEndpoint+0x1b4>)
 8007132:	4013      	ands	r3, r2
 8007134:	600b      	str	r3, [r1, #0]
 8007136:	2300      	movs	r3, #0
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	ec337800 	.word	0xec337800
 8007148:	eff37800 	.word	0xeff37800

0800714c <USB_EPStartXfer>:
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 8128 	bne.w	80073ba <USB_EPStartXfer+0x26e>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d132      	bne.n	80071d8 <USB_EPStartXfer+0x8c>
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007194:	6113      	str	r3, [r2, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071b4:	6113      	str	r3, [r2, #16]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d0:	0cdb      	lsrs	r3, r3, #19
 80071d2:	04db      	lsls	r3, r3, #19
 80071d4:	6113      	str	r3, [r2, #16]
 80071d6:	e092      	b.n	80072fe <USB_EPStartXfer+0x1b2>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	0cdb      	lsrs	r3, r3, #19
 80071f4:	04db      	lsls	r3, r3, #19
 80071f6:	6113      	str	r3, [r2, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007212:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007216:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800721a:	6113      	str	r3, [r2, #16]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d11a      	bne.n	8007258 <USB_EPStartXfer+0x10c>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	d903      	bls.n	8007236 <USB_EPStartXfer+0xea>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	611a      	str	r2, [r3, #16]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	0151      	lsls	r1, r2, #5
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	440a      	add	r2, r1
 800724c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007254:	6113      	str	r3, [r2, #16]
 8007256:	e01b      	b.n	8007290 <USB_EPStartXfer+0x144>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6919      	ldr	r1, [r3, #16]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	440b      	add	r3, r1
 8007270:	1e59      	subs	r1, r3, #1
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	fbb1 f3f3 	udiv	r3, r1, r3
 800727a:	04d9      	lsls	r1, r3, #19
 800727c:	4b8d      	ldr	r3, [pc, #564]	; (80074b4 <USB_EPStartXfer+0x368>)
 800727e:	400b      	ands	r3, r1
 8007280:	6939      	ldr	r1, [r7, #16]
 8007282:	0148      	lsls	r0, r1, #5
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	4401      	add	r1, r0
 8007288:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800728c:	4313      	orrs	r3, r2
 800728e:	610b      	str	r3, [r1, #16]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a6:	6939      	ldr	r1, [r7, #16]
 80072a8:	0148      	lsls	r0, r1, #5
 80072aa:	6979      	ldr	r1, [r7, #20]
 80072ac:	4401      	add	r1, r0
 80072ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072b2:	4313      	orrs	r3, r2
 80072b4:	610b      	str	r3, [r1, #16]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d11f      	bne.n	80072fe <USB_EPStartXfer+0x1b2>
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	0151      	lsls	r1, r2, #5
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	440a      	add	r2, r1
 80072d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072dc:	6113      	str	r3, [r2, #16]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072fc:	6113      	str	r3, [r2, #16]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d015      	beq.n	8007352 <USB_EPStartXfer+0x206>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8139 	beq.w	80075a2 <USB_EPStartXfer+0x456>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	6979      	ldr	r1, [r7, #20]
 8007348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800734c:	4313      	orrs	r3, r2
 800734e:	634b      	str	r3, [r1, #52]	; 0x34
 8007350:	e127      	b.n	80075a2 <USB_EPStartXfer+0x456>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d110      	bne.n	8007384 <USB_EPStartXfer+0x238>
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	0151      	lsls	r1, r2, #5
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	440a      	add	r2, r1
 8007378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e00f      	b.n	80073a4 <USB_EPStartXfer+0x258>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68d9      	ldr	r1, [r3, #12]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9a5 	bl	8007702 <USB_WritePacket>
 80073b8:	e0f3      	b.n	80075a2 <USB_EPStartXfer+0x456>
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	0cdb      	lsrs	r3, r3, #19
 80073d6:	04db      	lsls	r3, r3, #19
 80073d8:	6113      	str	r3, [r2, #16]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073fc:	6113      	str	r3, [r2, #16]
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d12f      	bne.n	8007464 <USB_EPStartXfer+0x318>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <USB_EPStartXfer+0x2c8>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	611a      	str	r2, [r3, #16]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	621a      	str	r2, [r3, #32]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	691a      	ldr	r2, [r3, #16]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007432:	6939      	ldr	r1, [r7, #16]
 8007434:	0148      	lsls	r0, r1, #5
 8007436:	6979      	ldr	r1, [r7, #20]
 8007438:	4401      	add	r1, r0
 800743a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800743e:	4313      	orrs	r3, r2
 8007440:	610b      	str	r3, [r1, #16]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007460:	6113      	str	r3, [r2, #16]
 8007462:	e061      	b.n	8007528 <USB_EPStartXfer+0x3dc>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d125      	bne.n	80074b8 <USB_EPStartXfer+0x36c>
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007482:	6939      	ldr	r1, [r7, #16]
 8007484:	0148      	lsls	r0, r1, #5
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	4401      	add	r1, r0
 800748a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800748e:	4313      	orrs	r3, r2
 8007490:	610b      	str	r3, [r1, #16]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074b0:	6113      	str	r3, [r2, #16]
 80074b2:	e039      	b.n	8007528 <USB_EPStartXfer+0x3dc>
 80074b4:	1ff80000 	.word	0x1ff80000
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	1e5a      	subs	r2, r3, #1
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	81fb      	strh	r3, [r7, #14]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	89fa      	ldrh	r2, [r7, #14]
 80074d4:	fb03 f202 	mul.w	r2, r3, r2
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	621a      	str	r2, [r3, #32]
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	89fb      	ldrh	r3, [r7, #14]
 80074ec:	04d9      	lsls	r1, r3, #19
 80074ee:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <USB_EPStartXfer+0x460>)
 80074f0:	400b      	ands	r3, r1
 80074f2:	6939      	ldr	r1, [r7, #16]
 80074f4:	0148      	lsls	r0, r1, #5
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	4401      	add	r1, r0
 80074fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074fe:	4313      	orrs	r3, r2
 8007500:	610b      	str	r3, [r1, #16]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007518:	6939      	ldr	r1, [r7, #16]
 800751a:	0148      	lsls	r0, r1, #5
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	4401      	add	r1, r0
 8007520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007524:	4313      	orrs	r3, r2
 8007526:	610b      	str	r3, [r1, #16]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	791b      	ldrb	r3, [r3, #4]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d128      	bne.n	8007582 <USB_EPStartXfer+0x436>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d110      	bne.n	8007562 <USB_EPStartXfer+0x416>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	440a      	add	r2, r1
 8007556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800755e:	6013      	str	r3, [r2, #0]
 8007560:	e00f      	b.n	8007582 <USB_EPStartXfer+0x436>
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800759c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	1ff80000 	.word	0x1ff80000

080075b0 <USB_EPStopXfer>:
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d14a      	bne.n	8007664 <USB_EPStopXfer+0xb4>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e6:	f040 8086 	bne.w	80076f6 <USB_EPStopXfer+0x146>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f242 7210 	movw	r2, #10000	; 0x2710
 800763e:	4293      	cmp	r3, r2
 8007640:	d902      	bls.n	8007648 <USB_EPStopXfer+0x98>
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
 8007646:	e056      	b.n	80076f6 <USB_EPStopXfer+0x146>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800765c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007660:	d0e7      	beq.n	8007632 <USB_EPStopXfer+0x82>
 8007662:	e048      	b.n	80076f6 <USB_EPStopXfer+0x146>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800767c:	d13b      	bne.n	80076f6 <USB_EPStopXfer+0x146>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	0151      	lsls	r1, r2, #5
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	440a      	add	r2, r1
 80076bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d902      	bls.n	80076dc <USB_EPStopXfer+0x12c>
 80076d6:	2301      	movs	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e00c      	b.n	80076f6 <USB_EPStopXfer+0x146>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076f4:	d0e7      	beq.n	80076c6 <USB_EPStopXfer+0x116>
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr

08007702 <USB_WritePacket>:
 8007702:	b480      	push	{r7}
 8007704:	b089      	sub	sp, #36	; 0x24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4611      	mov	r1, r2
 800770e:	461a      	mov	r2, r3
 8007710:	460b      	mov	r3, r1
 8007712:	71fb      	strb	r3, [r7, #7]
 8007714:	4613      	mov	r3, r2
 8007716:	80bb      	strh	r3, [r7, #4]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	61fb      	str	r3, [r7, #28]
 8007720:	88bb      	ldrh	r3, [r7, #4]
 8007722:	3303      	adds	r3, #3
 8007724:	089b      	lsrs	r3, r3, #2
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	e018      	b.n	8007760 <USB_WritePacket+0x5e>
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	031a      	lsls	r2, r3, #12
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	4413      	add	r3, r2
 8007736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773a:	461a      	mov	r2, r3
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	3301      	adds	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	3301      	adds	r3, #1
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3301      	adds	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3301      	adds	r3, #1
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	3301      	adds	r3, #1
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	429a      	cmp	r2, r3
 8007766:	d3e2      	bcc.n	800772e <USB_WritePacket+0x2c>
 8007768:	2300      	movs	r3, #0
 800776a:	4618      	mov	r0, r3
 800776c:	3724      	adds	r7, #36	; 0x24
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr

08007774 <USB_ReadPacket>:
 8007774:	b480      	push	{r7}
 8007776:	b08b      	sub	sp, #44	; 0x2c
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	b29b      	uxth	r3, r3
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	83fb      	strh	r3, [r7, #30]
 800779a:	2300      	movs	r3, #0
 800779c:	623b      	str	r3, [r7, #32]
 800779e:	e014      	b.n	80077ca <USB_ReadPacket+0x56>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	3301      	adds	r3, #1
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	3301      	adds	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	3301      	adds	r3, #1
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	3301      	adds	r3, #1
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	3301      	adds	r3, #1
 80077c8:	623b      	str	r3, [r7, #32]
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3e6      	bcc.n	80077a0 <USB_ReadPacket+0x2c>
 80077d2:	8bfb      	ldrh	r3, [r7, #30]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01e      	beq.n	8007816 <USB_ReadPacket+0xa2>
 80077d8:	2300      	movs	r3, #0
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e2:	461a      	mov	r2, r3
 80077e4:	f107 0310 	add.w	r3, r7, #16
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	3301      	adds	r3, #1
 8007802:	623b      	str	r3, [r7, #32]
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	3301      	adds	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	3b01      	subs	r3, #1
 800780e:	83fb      	strh	r3, [r7, #30]
 8007810:	8bfb      	ldrh	r3, [r7, #30]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ea      	bne.n	80077ec <USB_ReadPacket+0x78>
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	4618      	mov	r0, r3
 800781a:	372c      	adds	r7, #44	; 0x2c
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <USB_EPSetStall>:
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d12c      	bne.n	8007898 <USB_EPSetStall+0x76>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	db12      	blt.n	8007876 <USB_EPSetStall+0x54>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00f      	beq.n	8007876 <USB_EPSetStall+0x54>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	440a      	add	r2, r1
 800786c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	0151      	lsls	r1, r2, #5
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	440a      	add	r2, r1
 800788c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e02b      	b.n	80078f0 <USB_EPSetStall+0xce>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	db12      	blt.n	80078d0 <USB_EPSetStall+0xae>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00f      	beq.n	80078d0 <USB_EPSetStall+0xae>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	0151      	lsls	r1, r2, #5
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	440a      	add	r2, r1
 80078c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	0151      	lsls	r1, r2, #5
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	440a      	add	r2, r1
 80078e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	2300      	movs	r3, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <USB_EPClearStall>:
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	60bb      	str	r3, [r7, #8]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d128      	bne.n	800796a <USB_EPClearStall+0x6e>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	791b      	ldrb	r3, [r3, #4]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d003      	beq.n	8007948 <USB_EPClearStall+0x4c>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d138      	bne.n	80079ba <USB_EPClearStall+0xbe>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e027      	b.n	80079ba <USB_EPClearStall+0xbe>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	2b03      	cmp	r3, #3
 8007990:	d003      	beq.n	800799a <USB_EPClearStall+0x9e>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d10f      	bne.n	80079ba <USB_EPClearStall+0xbe>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr

080079c6 <USB_SetDevAddress>:
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079fa:	68f9      	ldr	r1, [r7, #12]
 80079fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a00:	4313      	orrs	r3, r2
 8007a02:	600b      	str	r3, [r1, #0]
 8007a04:	2300      	movs	r3, #0
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <USB_DevConnect>:
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a3e:	f023 0302 	bic.w	r3, r3, #2
 8007a42:	6053      	str	r3, [r2, #4]
 8007a44:	2300      	movs	r3, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <USB_DevDisconnect>:
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7e:	f043 0302 	orr.w	r3, r3, #2
 8007a82:	6053      	str	r3, [r2, #4]
 8007a84:	2300      	movs	r3, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr

08007a90 <USB_ReadInterrupts>:
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <USB_ReadDevAllOutEpInterrupt>:
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	60bb      	str	r3, [r7, #8]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <USB_ReadDevAllInEpInterrupt>:
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <USB_ReadDevOutEPInterrupt>:
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	4013      	ands	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <USB_ReadDevInEPInterrupt>:
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b82:	01db      	lsls	r3, r3, #7
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <USB_GetMode>:
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <USB_ActivateSetup>:
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007be4:	f023 0307 	bic.w	r3, r3, #7
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
	...

08007c0c <USB_EP0_OutStart>:
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	333c      	adds	r3, #60	; 0x3c
 8007c1e:	3304      	adds	r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <USB_EP0_OutStart+0x8c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d90a      	bls.n	8007c42 <USB_EP0_OutStart+0x36>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3c:	d101      	bne.n	8007c42 <USB_EP0_OutStart+0x36>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e024      	b.n	8007c8c <USB_EP0_OutStart+0x80>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6113      	str	r3, [r2, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c60:	6113      	str	r3, [r2, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c70:	f043 0318 	orr.w	r3, r3, #24
 8007c74:	6113      	str	r3, [r2, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c88:	6113      	str	r3, [r2, #16]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	4f54300a 	.word	0x4f54300a

08007c9c <USB_CoreReset>:
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a12      	ldr	r2, [pc, #72]	; (8007cfc <USB_CoreReset+0x60>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d901      	bls.n	8007cba <USB_CoreReset+0x1e>
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e01b      	b.n	8007cf2 <USB_CoreReset+0x56>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	daf2      	bge.n	8007ca8 <USB_CoreReset+0xc>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f043 0201 	orr.w	r2, r3, #1
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	611a      	str	r2, [r3, #16]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <USB_CoreReset+0x60>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d901      	bls.n	8007ce4 <USB_CoreReset+0x48>
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e006      	b.n	8007cf2 <USB_CoreReset+0x56>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d0f0      	beq.n	8007cd2 <USB_CoreReset+0x36>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	00030d40 	.word	0x00030d40

08007d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7c1b      	ldrb	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d115      	bne.n	8007d44 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	2181      	movs	r1, #129	; 0x81
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fec0 	bl	8009aa6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d30:	2202      	movs	r2, #2
 8007d32:	2101      	movs	r1, #1
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 feb6 	bl	8009aa6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007d42:	e012      	b.n	8007d6a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d44:	2340      	movs	r3, #64	; 0x40
 8007d46:	2202      	movs	r2, #2
 8007d48:	2181      	movs	r1, #129	; 0x81
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 feab 	bl	8009aa6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d56:	2340      	movs	r3, #64	; 0x40
 8007d58:	2202      	movs	r2, #2
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fea2 	bl	8009aa6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	2203      	movs	r2, #3
 8007d6e:	2182      	movs	r1, #130	; 0x82
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fe98 	bl	8009aa6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d80:	f001 ffb8 	bl	8009cf4 <USBD_static_malloc>
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
 8007d9a:	e026      	b.n	8007dea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7c1b      	ldrb	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 ff57 	bl	8009c86 <USBD_LL_PrepareReceive>
 8007dd8:	e007      	b.n	8007dea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2101      	movs	r1, #1
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 ff4e 	bl	8009c86 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e04:	2181      	movs	r1, #129	; 0x81
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fe73 	bl	8009af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e12:	2101      	movs	r1, #1
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 fe6c 	bl	8009af2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e22:	2182      	movs	r1, #130	; 0x82
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fe64 	bl	8009af2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 ff5e 	bl	8009d0c <USBD_static_free>
    pdev->pClassData = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d039      	beq.n	8007f00 <USBD_CDC_Setup+0x9e>
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d17f      	bne.n	8007f90 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	88db      	ldrh	r3, [r3, #6]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d029      	beq.n	8007eec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	da11      	bge.n	8007ec6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007eae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	88d2      	ldrh	r2, [r2, #6]
 8007eb4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007eb6:	6939      	ldr	r1, [r7, #16]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	88db      	ldrh	r3, [r3, #6]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 fa13 	bl	80092ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ec4:	e06b      	b.n	8007f9e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	785a      	ldrb	r2, [r3, #1]
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	88db      	ldrh	r3, [r3, #6]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007edc:	6939      	ldr	r1, [r7, #16]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	88db      	ldrh	r3, [r3, #6]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fa2e 	bl	8009346 <USBD_CtlPrepareRx>
      break;
 8007eea:	e058      	b.n	8007f9e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	7850      	ldrb	r0, [r2, #1]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	4798      	blx	r3
      break;
 8007efe:	e04e      	b.n	8007f9e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b0b      	cmp	r3, #11
 8007f06:	d02e      	beq.n	8007f66 <USBD_CDC_Setup+0x104>
 8007f08:	2b0b      	cmp	r3, #11
 8007f0a:	dc38      	bgt.n	8007f7e <USBD_CDC_Setup+0x11c>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <USBD_CDC_Setup+0xb4>
 8007f10:	2b0a      	cmp	r3, #10
 8007f12:	d014      	beq.n	8007f3e <USBD_CDC_Setup+0xdc>
 8007f14:	e033      	b.n	8007f7e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d107      	bne.n	8007f30 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f20:	f107 030c 	add.w	r3, r7, #12
 8007f24:	2202      	movs	r2, #2
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 f9de 	bl	80092ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2e:	e02e      	b.n	8007f8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 f96f 	bl	8009216 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f3c:	e027      	b.n	8007f8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d107      	bne.n	8007f58 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f48:	f107 030f 	add.w	r3, r7, #15
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f9ca 	bl	80092ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f56:	e01a      	b.n	8007f8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 f95b 	bl	8009216 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f60:	2302      	movs	r3, #2
 8007f62:	75fb      	strb	r3, [r7, #23]
          break;
 8007f64:	e013      	b.n	8007f8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d00d      	beq.n	8007f8c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 f94f 	bl	8009216 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f7c:	e006      	b.n	8007f8c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 f948 	bl	8009216 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f86:	2302      	movs	r3, #2
 8007f88:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8a:	e000      	b.n	8007f8e <USBD_CDC_Setup+0x12c>
          break;
 8007f8c:	bf00      	nop
      }
      break;
 8007f8e:	e006      	b.n	8007f9e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 f93f 	bl	8009216 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9c:	bf00      	nop
  }

  return ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d03a      	beq.n	8008044 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	331c      	adds	r3, #28
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d029      	beq.n	8008038 <USBD_CDC_DataIn+0x90>
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	331c      	adds	r3, #28
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	78f9      	ldrb	r1, [r7, #3]
 8007ff8:	68b8      	ldr	r0, [r7, #8]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	440b      	add	r3, r1
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4403      	add	r3, r0
 8008004:	3344      	adds	r3, #68	; 0x44
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	fbb2 f1f3 	udiv	r1, r2, r3
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d110      	bne.n	8008038 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	331c      	adds	r3, #28
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800802a:	78f9      	ldrb	r1, [r7, #3]
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fe05 	bl	8009c40 <USBD_LL_Transmit>
 8008036:	e003      	b.n	8008040 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	e000      	b.n	8008046 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fe30 	bl	8009ccc <USBD_LL_GetRxDataSize>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00d      	beq.n	800809a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008092:	4611      	mov	r1, r2
 8008094:	4798      	blx	r3

    return USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800809a:	2302      	movs	r3, #2
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d015      	beq.n	80080ea <USBD_CDC_EP0_RxReady+0x46>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080c4:	2bff      	cmp	r3, #255	; 0xff
 80080c6:	d010      	beq.n	80080ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80080d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080de:	b292      	uxth	r2, r2
 80080e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	22ff      	movs	r2, #255	; 0xff
 80080e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2243      	movs	r2, #67	; 0x43
 8008100:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	; (8008110 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000100 	.word	0x20000100

08008114 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2243      	movs	r2, #67	; 0x43
 8008120:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	; (8008130 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	200000bc 	.word	0x200000bc

08008134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2243      	movs	r2, #67	; 0x43
 8008140:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	; (8008150 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000144 	.word	0x20000144

08008154 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	220a      	movs	r2, #10
 8008160:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008162:	4b03      	ldr	r3, [pc, #12]	; (8008170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000078 	.word	0x20000078

08008174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800817e:	2302      	movs	r3, #2
 8008180:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr

080081a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr

080081d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008206:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d017      	beq.n	8008242 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7c1b      	ldrb	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008224:	2101      	movs	r1, #1
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fd2d 	bl	8009c86 <USBD_LL_PrepareReceive>
 800822c:	e007      	b.n	800823e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	2101      	movs	r1, #1
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fd24 	bl	8009c86 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e000      	b.n	8008244 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008242:	2302      	movs	r3, #2
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008260:	2302      	movs	r3, #2
 8008262:	e01a      	b.n	800829a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	79fa      	ldrb	r2, [r7, #7]
 8008290:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f001 fba8 	bl	80099e8 <USBD_LL_Init>

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73fb      	strb	r3, [r7, #15]
 80082c2:	e001      	b.n	80082c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80082c4:	2302      	movs	r3, #2
 80082c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr

080082d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fbc7 	bl	8009a70 <USBD_LL_Start>

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr

08008300 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800830c:	2302      	movs	r3, #2
 800830e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00c      	beq.n	8008334 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	4611      	mov	r1, r2
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3

  return USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ff11 	bl	800919e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800838a:	461a      	mov	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2b02      	cmp	r3, #2
 800839e:	d016      	beq.n	80083ce <USBD_LL_SetupStage+0x6a>
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d81c      	bhi.n	80083de <USBD_LL_SetupStage+0x7a>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <USBD_LL_SetupStage+0x4a>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d008      	beq.n	80083be <USBD_LL_SetupStage+0x5a>
 80083ac:	e017      	b.n	80083de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa04 	bl	80087c4 <USBD_StdDevReq>
      break;
 80083bc:	e01a      	b.n	80083f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa66 	bl	8008898 <USBD_StdItfReq>
      break;
 80083cc:	e012      	b.n	80083f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 faa6 	bl	8008928 <USBD_StdEPReq>
      break;
 80083dc:	e00a      	b.n	80083f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 fb9f 	bl	8009b30 <USBD_LL_StallEP>
      break;
 80083f2:	bf00      	nop
  }

  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b086      	sub	sp, #24
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	460b      	mov	r3, r1
 8008408:	607a      	str	r2, [r7, #4]
 800840a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d14b      	bne.n	80084aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008418:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008420:	2b03      	cmp	r3, #3
 8008422:	d134      	bne.n	800848e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	429a      	cmp	r2, r3
 800842e:	d919      	bls.n	8008464 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	1ad2      	subs	r2, r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008446:	429a      	cmp	r2, r3
 8008448:	d203      	bcs.n	8008452 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800844e:	b29b      	uxth	r3, r3
 8008450:	e002      	b.n	8008458 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 ff90 	bl	8009382 <USBD_CtlContinueRx>
 8008462:	e038      	b.n	80084d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008476:	2b03      	cmp	r3, #3
 8008478:	d105      	bne.n	8008486 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 ff8d 	bl	80093a6 <USBD_CtlSendStatus>
 800848c:	e023      	b.n	80084d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008494:	2b05      	cmp	r3, #5
 8008496:	d11e      	bne.n	80084d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f001 fb44 	bl	8009b30 <USBD_LL_StallEP>
 80084a8:	e015      	b.n	80084d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d108      	bne.n	80084d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	7afa      	ldrb	r2, [r7, #11]
 80084ca:	4611      	mov	r1, r2
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	4798      	blx	r3
 80084d0:	e001      	b.n	80084d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084d2:	2302      	movs	r3, #2
 80084d4:	e000      	b.n	80084d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	460b      	mov	r3, r1
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d17f      	bne.n	80085f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3314      	adds	r3, #20
 80084f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008500:	2b02      	cmp	r3, #2
 8008502:	d15c      	bne.n	80085be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	429a      	cmp	r2, r3
 800850e:	d915      	bls.n	800853c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	1ad2      	subs	r2, r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	b29b      	uxth	r3, r3
 8008524:	461a      	mov	r2, r3
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fefa 	bl	8009322 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800852e:	2300      	movs	r3, #0
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f001 fba6 	bl	8009c86 <USBD_LL_PrepareReceive>
 800853a:	e04e      	b.n	80085da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	6912      	ldr	r2, [r2, #16]
 8008544:	fbb3 f1f2 	udiv	r1, r3, r2
 8008548:	fb01 f202 	mul.w	r2, r1, r2
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11c      	bne.n	800858c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800855a:	429a      	cmp	r2, r3
 800855c:	d316      	bcc.n	800858c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008568:	429a      	cmp	r2, r3
 800856a:	d20f      	bcs.n	800858c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800856c:	2200      	movs	r2, #0
 800856e:	2100      	movs	r1, #0
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fed6 	bl	8009322 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800857e:	2300      	movs	r3, #0
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f001 fb7e 	bl	8009c86 <USBD_LL_PrepareReceive>
 800858a:	e026      	b.n	80085da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00a      	beq.n	80085ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d105      	bne.n	80085ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80085ae:	2180      	movs	r1, #128	; 0x80
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 fabd 	bl	8009b30 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 ff08 	bl	80093cc <USBD_CtlReceiveStatus>
 80085bc:	e00d      	b.n	80085da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d004      	beq.n	80085d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d103      	bne.n	80085da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f001 faab 	bl	8009b30 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d11d      	bne.n	8008620 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff fe81 	bl	80082ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085f2:	e015      	b.n	8008620 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00d      	beq.n	800861c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008606:	2b03      	cmp	r3, #3
 8008608:	d108      	bne.n	800861c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	7afa      	ldrb	r2, [r7, #11]
 8008614:	4611      	mov	r1, r2
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	4798      	blx	r3
 800861a:	e001      	b.n	8008620 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800861c:	2302      	movs	r3, #2
 800861e:	e000      	b.n	8008622 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	2200      	movs	r2, #0
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fa34 	bl	8009aa6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2240      	movs	r2, #64	; 0x40
 800864a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	2200      	movs	r2, #0
 8008652:	2180      	movs	r1, #128	; 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fa26 	bl	8009aa6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2240      	movs	r2, #64	; 0x40
 8008664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6852      	ldr	r2, [r2, #4]
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	4611      	mov	r1, r2
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
  }

  return USBD_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2204      	movs	r2, #4
 80086e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr

080086f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	2b04      	cmp	r3, #4
 8008702:	d105      	bne.n	8008710 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872a:	2b03      	cmp	r3, #3
 800872c:	d10b      	bne.n	8008746 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6852      	ldr	r2, [r2, #4]
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	4611      	mov	r1, r2
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087da:	2b40      	cmp	r3, #64	; 0x40
 80087dc:	d005      	beq.n	80087ea <USBD_StdDevReq+0x26>
 80087de:	2b40      	cmp	r3, #64	; 0x40
 80087e0:	d84f      	bhi.n	8008882 <USBD_StdDevReq+0xbe>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <USBD_StdDevReq+0x36>
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d14b      	bne.n	8008882 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
      break;
 80087f8:	e048      	b.n	800888c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	785b      	ldrb	r3, [r3, #1]
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d839      	bhi.n	8008876 <USBD_StdDevReq+0xb2>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBD_StdDevReq+0x44>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008859 	.word	0x08008859
 800880c:	0800886d 	.word	0x0800886d
 8008810:	08008877 	.word	0x08008877
 8008814:	08008863 	.word	0x08008863
 8008818:	08008877 	.word	0x08008877
 800881c:	0800883b 	.word	0x0800883b
 8008820:	08008831 	.word	0x08008831
 8008824:	08008877 	.word	0x08008877
 8008828:	0800884f 	.word	0x0800884f
 800882c:	08008845 	.word	0x08008845
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f9dc 	bl	8008bf0 <USBD_GetDescriptor>
          break;
 8008838:	e022      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fb3f 	bl	8008ec0 <USBD_SetAddress>
          break;
 8008842:	e01d      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb7e 	bl	8008f48 <USBD_SetConfig>
          break;
 800884c:	e018      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fc07 	bl	8009064 <USBD_GetConfig>
          break;
 8008856:	e013      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc37 	bl	80090ce <USBD_GetStatus>
          break;
 8008860:	e00e      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc65 	bl	8009134 <USBD_SetFeature>
          break;
 800886a:	e009      	b.n	8008880 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fc74 	bl	800915c <USBD_ClrFeature>
          break;
 8008874:	e004      	b.n	8008880 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fccc 	bl	8009216 <USBD_CtlError>
          break;
 800887e:	bf00      	nop
      }
      break;
 8008880:	e004      	b.n	800888c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fcc6 	bl	8009216 <USBD_CtlError>
      break;
 800888a:	bf00      	nop
  }

  return ret;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop

08008898 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	d005      	beq.n	80088be <USBD_StdItfReq+0x26>
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	d82e      	bhi.n	8008914 <USBD_StdItfReq+0x7c>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <USBD_StdItfReq+0x26>
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d12a      	bne.n	8008914 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c4:	3b01      	subs	r3, #1
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d81d      	bhi.n	8008906 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d813      	bhi.n	80088fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d110      	bne.n	8008910 <USBD_StdItfReq+0x78>
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10d      	bne.n	8008910 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd56 	bl	80093a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088fa:	e009      	b.n	8008910 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fc89 	bl	8009216 <USBD_CtlError>
          break;
 8008904:	e004      	b.n	8008910 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 fc84 	bl	8009216 <USBD_CtlError>
          break;
 800890e:	e000      	b.n	8008912 <USBD_StdItfReq+0x7a>
          break;
 8008910:	bf00      	nop
      }
      break;
 8008912:	e004      	b.n	800891e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fc7d 	bl	8009216 <USBD_CtlError>
      break;
 800891c:	bf00      	nop
  }

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	889b      	ldrh	r3, [r3, #4]
 800893a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d007      	beq.n	8008958 <USBD_StdEPReq+0x30>
 8008948:	2b40      	cmp	r3, #64	; 0x40
 800894a:	f200 8146 	bhi.w	8008bda <USBD_StdEPReq+0x2b2>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <USBD_StdEPReq+0x40>
 8008952:	2b20      	cmp	r3, #32
 8008954:	f040 8141 	bne.w	8008bda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	4798      	blx	r3
      break;
 8008966:	e13d      	b.n	8008be4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008970:	2b20      	cmp	r3, #32
 8008972:	d10a      	bne.n	800898a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	e12d      	b.n	8008be6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d007      	beq.n	80089a2 <USBD_StdEPReq+0x7a>
 8008992:	2b03      	cmp	r3, #3
 8008994:	f300 811b 	bgt.w	8008bce <USBD_StdEPReq+0x2a6>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d072      	beq.n	8008a82 <USBD_StdEPReq+0x15a>
 800899c:	2b01      	cmp	r3, #1
 800899e:	d03a      	beq.n	8008a16 <USBD_StdEPReq+0xee>
 80089a0:	e115      	b.n	8008bce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d002      	beq.n	80089b2 <USBD_StdEPReq+0x8a>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d015      	beq.n	80089dc <USBD_StdEPReq+0xb4>
 80089b0:	e02b      	b.n	8008a0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00c      	beq.n	80089d2 <USBD_StdEPReq+0xaa>
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b80      	cmp	r3, #128	; 0x80
 80089bc:	d009      	beq.n	80089d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 f8b4 	bl	8009b30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089c8:	2180      	movs	r1, #128	; 0x80
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 f8b0 	bl	8009b30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089d0:	e020      	b.n	8008a14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc1e 	bl	8009216 <USBD_CtlError>
              break;
 80089da:	e01b      	b.n	8008a14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	885b      	ldrh	r3, [r3, #2]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10e      	bne.n	8008a02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00b      	beq.n	8008a02 <USBD_StdEPReq+0xda>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b80      	cmp	r3, #128	; 0x80
 80089ee:	d008      	beq.n	8008a02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	88db      	ldrh	r3, [r3, #6]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d104      	bne.n	8008a02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f897 	bl	8009b30 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fccf 	bl	80093a6 <USBD_CtlSendStatus>

              break;
 8008a08:	e004      	b.n	8008a14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fc02 	bl	8009216 <USBD_CtlError>
              break;
 8008a12:	bf00      	nop
          }
          break;
 8008a14:	e0e0      	b.n	8008bd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d002      	beq.n	8008a26 <USBD_StdEPReq+0xfe>
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d015      	beq.n	8008a50 <USBD_StdEPReq+0x128>
 8008a24:	e026      	b.n	8008a74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00c      	beq.n	8008a46 <USBD_StdEPReq+0x11e>
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	2b80      	cmp	r3, #128	; 0x80
 8008a30:	d009      	beq.n	8008a46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 f87a 	bl	8009b30 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a3c:	2180      	movs	r1, #128	; 0x80
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 f876 	bl	8009b30 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a44:	e01c      	b.n	8008a80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fbe4 	bl	8009216 <USBD_CtlError>
              break;
 8008a4e:	e017      	b.n	8008a80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	885b      	ldrh	r3, [r3, #2]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d112      	bne.n	8008a7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f881 	bl	8009b6e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fc9a 	bl	80093a6 <USBD_CtlSendStatus>
              }
              break;
 8008a72:	e004      	b.n	8008a7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fbcd 	bl	8009216 <USBD_CtlError>
              break;
 8008a7c:	e000      	b.n	8008a80 <USBD_StdEPReq+0x158>
              break;
 8008a7e:	bf00      	nop
          }
          break;
 8008a80:	e0aa      	b.n	8008bd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d002      	beq.n	8008a92 <USBD_StdEPReq+0x16a>
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d032      	beq.n	8008af6 <USBD_StdEPReq+0x1ce>
 8008a90:	e097      	b.n	8008bc2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <USBD_StdEPReq+0x180>
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b80      	cmp	r3, #128	; 0x80
 8008a9c:	d004      	beq.n	8008aa8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fbb8 	bl	8009216 <USBD_CtlError>
                break;
 8008aa6:	e091      	b.n	8008bcc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da0b      	bge.n	8008ac8 <USBD_StdEPReq+0x1a0>
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	3310      	adds	r3, #16
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	e00b      	b.n	8008ae0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	3304      	adds	r3, #4
 8008ae0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2202      	movs	r2, #2
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fbfb 	bl	80092ea <USBD_CtlSendData>
              break;
 8008af4:	e06a      	b.n	8008bcc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008af6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da11      	bge.n	8008b22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	3318      	adds	r3, #24
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d117      	bne.n	8008b48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fb7b 	bl	8009216 <USBD_CtlError>
                  break;
 8008b20:	e054      	b.n	8008bcc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	f003 020f 	and.w	r2, r3, #15
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d104      	bne.n	8008b48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb68 	bl	8009216 <USBD_CtlError>
                  break;
 8008b46:	e041      	b.n	8008bcc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da0b      	bge.n	8008b68 <USBD_StdEPReq+0x240>
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	3310      	adds	r3, #16
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	4413      	add	r3, r2
 8008b64:	3304      	adds	r3, #4
 8008b66:	e00b      	b.n	8008b80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	3304      	adds	r3, #4
 8008b80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <USBD_StdEPReq+0x266>
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b80      	cmp	r3, #128	; 0x80
 8008b8c:	d103      	bne.n	8008b96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e00e      	b.n	8008bb4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 f806 	bl	8009bac <USBD_LL_IsStallEP>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e002      	b.n	8008bb4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fb95 	bl	80092ea <USBD_CtlSendData>
              break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fb26 	bl	8009216 <USBD_CtlError>
              break;
 8008bca:	bf00      	nop
          }
          break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fb20 	bl	8009216 <USBD_CtlError>
          break;
 8008bd6:	bf00      	nop
      }
      break;
 8008bd8:	e004      	b.n	8008be4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb1a 	bl	8009216 <USBD_CtlError>
      break;
 8008be2:	bf00      	nop
  }

  return ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b06      	cmp	r3, #6
 8008c12:	f200 8128 	bhi.w	8008e66 <USBD_GetDescriptor+0x276>
 8008c16:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <USBD_GetDescriptor+0x2c>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008c39 	.word	0x08008c39
 8008c20:	08008c51 	.word	0x08008c51
 8008c24:	08008c91 	.word	0x08008c91
 8008c28:	08008e67 	.word	0x08008e67
 8008c2c:	08008e67 	.word	0x08008e67
 8008c30:	08008e07 	.word	0x08008e07
 8008c34:	08008e33 	.word	0x08008e33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	7c12      	ldrb	r2, [r2, #16]
 8008c44:	f107 0108 	add.w	r1, r7, #8
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	60f8      	str	r0, [r7, #12]
      break;
 8008c4e:	e112      	b.n	8008e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7c1b      	ldrb	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10d      	bne.n	8008c74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f107 0208 	add.w	r2, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	2202      	movs	r2, #2
 8008c70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c72:	e100      	b.n	8008e76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	f107 0208 	add.w	r2, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	701a      	strb	r2, [r3, #0]
      break;
 8008c8e:	e0f2      	b.n	8008e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	885b      	ldrh	r3, [r3, #2]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	f200 80ac 	bhi.w	8008df4 <USBD_GetDescriptor+0x204>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <USBD_GetDescriptor+0xb4>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cbd 	.word	0x08008cbd
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008d25 	.word	0x08008d25
 8008cb0:	08008d59 	.word	0x08008d59
 8008cb4:	08008d8d 	.word	0x08008d8d
 8008cb8:	08008dc1 	.word	0x08008dc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7c12      	ldrb	r2, [r2, #16]
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cde:	e091      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa97 	bl	8009216 <USBD_CtlError>
            err++;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	3301      	adds	r3, #1
 8008cec:	72fb      	strb	r3, [r7, #11]
          break;
 8008cee:	e089      	b.n	8008e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7c12      	ldrb	r2, [r2, #16]
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d12:	e077      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa7d 	bl	8009216 <USBD_CtlError>
            err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
          break;
 8008d22:	e06f      	b.n	8008e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	7c12      	ldrb	r2, [r2, #16]
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d46:	e05d      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa63 	bl	8009216 <USBD_CtlError>
            err++;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	3301      	adds	r3, #1
 8008d54:	72fb      	strb	r3, [r7, #11]
          break;
 8008d56:	e055      	b.n	8008e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7a:	e043      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa49 	bl	8009216 <USBD_CtlError>
            err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8a:	e03b      	b.n	8008e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7c12      	ldrb	r2, [r2, #16]
 8008da4:	f107 0108 	add.w	r1, r7, #8
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dae:	e029      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa2f 	bl	8009216 <USBD_CtlError>
            err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dbe:	e021      	b.n	8008e04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de2:	e00f      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa15 	bl	8009216 <USBD_CtlError>
            err++;
 8008dec:	7afb      	ldrb	r3, [r7, #11]
 8008dee:	3301      	adds	r3, #1
 8008df0:	72fb      	strb	r3, [r7, #11]
          break;
 8008df2:	e007      	b.n	8008e04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa0d 	bl	8009216 <USBD_CtlError>
          err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e02:	e038      	b.n	8008e76 <USBD_GetDescriptor+0x286>
 8008e04:	e037      	b.n	8008e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7c1b      	ldrb	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e16:	f107 0208 	add.w	r2, r7, #8
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4798      	blx	r3
 8008e1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e20:	e029      	b.n	8008e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9f6 	bl	8009216 <USBD_CtlError>
        err++;
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e30:	e021      	b.n	8008e76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7c1b      	ldrb	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10d      	bne.n	8008e56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	f107 0208 	add.w	r2, r7, #8
 8008e46:	4610      	mov	r0, r2
 8008e48:	4798      	blx	r3
 8008e4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	2207      	movs	r2, #7
 8008e52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e54:	e00f      	b.n	8008e76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f9dc 	bl	8009216 <USBD_CtlError>
        err++;
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	3301      	adds	r3, #1
 8008e62:	72fb      	strb	r3, [r7, #11]
      break;
 8008e64:	e007      	b.n	8008e76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9d4 	bl	8009216 <USBD_CtlError>
      err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	bf00      	nop
  }

  if (err != 0U)
 8008e76:	7afb      	ldrb	r3, [r7, #11]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d11c      	bne.n	8008eb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e7c:	893b      	ldrh	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d011      	beq.n	8008ea6 <USBD_GetDescriptor+0x2b6>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00d      	beq.n	8008ea6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	88da      	ldrh	r2, [r3, #6]
 8008e8e:	893b      	ldrh	r3, [r7, #8]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	bf28      	it	cs
 8008e94:	4613      	movcs	r3, r2
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e9a:	893b      	ldrh	r3, [r7, #8]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68f9      	ldr	r1, [r7, #12]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa22 	bl	80092ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	88db      	ldrh	r3, [r3, #6]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa79 	bl	80093a6 <USBD_CtlSendStatus>
 8008eb4:	e000      	b.n	8008eb8 <USBD_GetDescriptor+0x2c8>
    return;
 8008eb6:	bf00      	nop
    }
  }
}
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	889b      	ldrh	r3, [r3, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d130      	bne.n	8008f34 <USBD_SetAddress+0x74>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	88db      	ldrh	r3, [r3, #6]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d12c      	bne.n	8008f34 <USBD_SetAddress+0x74>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	2b7f      	cmp	r3, #127	; 0x7f
 8008ee0:	d828      	bhi.n	8008f34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	885b      	ldrh	r3, [r3, #2]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d104      	bne.n	8008f02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f98b 	bl	8009216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f00:	e01d      	b.n	8008f3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7bfa      	ldrb	r2, [r7, #15]
 8008f06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fe77 	bl	8009c02 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa46 	bl	80093a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f28:	e009      	b.n	8008f3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f32:	e004      	b.n	8008f3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f96d 	bl	8009216 <USBD_CtlError>
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	885b      	ldrh	r3, [r3, #2]
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	4b41      	ldr	r3, [pc, #260]	; (8009060 <USBD_SetConfig+0x118>)
 8008f5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f5c:	4b40      	ldr	r3, [pc, #256]	; (8009060 <USBD_SetConfig+0x118>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d904      	bls.n	8008f6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f955 	bl	8009216 <USBD_CtlError>
 8008f6c:	e075      	b.n	800905a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d002      	beq.n	8008f7e <USBD_SetConfig+0x36>
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d023      	beq.n	8008fc4 <USBD_SetConfig+0x7c>
 8008f7c:	e062      	b.n	8009044 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f7e:	4b38      	ldr	r3, [pc, #224]	; (8009060 <USBD_SetConfig+0x118>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01a      	beq.n	8008fbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f86:	4b36      	ldr	r3, [pc, #216]	; (8009060 <USBD_SetConfig+0x118>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2203      	movs	r2, #3
 8008f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f98:	4b31      	ldr	r3, [pc, #196]	; (8009060 <USBD_SetConfig+0x118>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f9ae 	bl	8008300 <USBD_SetClassConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d104      	bne.n	8008fb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f932 	bl	8009216 <USBD_CtlError>
            return;
 8008fb2:	e052      	b.n	800905a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f9f6 	bl	80093a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fba:	e04e      	b.n	800905a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9f2 	bl	80093a6 <USBD_CtlSendStatus>
        break;
 8008fc2:	e04a      	b.n	800905a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008fc4:	4b26      	ldr	r3, [pc, #152]	; (8009060 <USBD_SetConfig+0x118>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d112      	bne.n	8008ff2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008fd4:	4b22      	ldr	r3, [pc, #136]	; (8009060 <USBD_SetConfig+0x118>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008fde:	4b20      	ldr	r3, [pc, #128]	; (8009060 <USBD_SetConfig+0x118>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff f9aa 	bl	800833e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9db 	bl	80093a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ff0:	e033      	b.n	800905a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ff2:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <USBD_SetConfig+0x118>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d01d      	beq.n	800903c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff f998 	bl	800833e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800900e:	4b14      	ldr	r3, [pc, #80]	; (8009060 <USBD_SetConfig+0x118>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	461a      	mov	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <USBD_SetConfig+0x118>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff f96e 	bl	8008300 <USBD_SetClassConfig>
 8009024:	4603      	mov	r3, r0
 8009026:	2b02      	cmp	r3, #2
 8009028:	d104      	bne.n	8009034 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f8f2 	bl	8009216 <USBD_CtlError>
            return;
 8009032:	e012      	b.n	800905a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f9b6 	bl	80093a6 <USBD_CtlSendStatus>
        break;
 800903a:	e00e      	b.n	800905a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f9b2 	bl	80093a6 <USBD_CtlSendStatus>
        break;
 8009042:	e00a      	b.n	800905a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8e5 	bl	8009216 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <USBD_SetConfig+0x118>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff f973 	bl	800833e <USBD_ClrClassConfig>
        break;
 8009058:	bf00      	nop
    }
  }
}
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	2000038c 	.word	0x2000038c

08009064 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d004      	beq.n	8009080 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8cc 	bl	8009216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800907e:	e022      	b.n	80090c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009086:	2b02      	cmp	r3, #2
 8009088:	dc02      	bgt.n	8009090 <USBD_GetConfig+0x2c>
 800908a:	2b00      	cmp	r3, #0
 800908c:	dc03      	bgt.n	8009096 <USBD_GetConfig+0x32>
 800908e:	e015      	b.n	80090bc <USBD_GetConfig+0x58>
 8009090:	2b03      	cmp	r3, #3
 8009092:	d00b      	beq.n	80090ac <USBD_GetConfig+0x48>
 8009094:	e012      	b.n	80090bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3308      	adds	r3, #8
 80090a0:	2201      	movs	r2, #1
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f920 	bl	80092ea <USBD_CtlSendData>
        break;
 80090aa:	e00c      	b.n	80090c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3304      	adds	r3, #4
 80090b0:	2201      	movs	r2, #1
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f918 	bl	80092ea <USBD_CtlSendData>
        break;
 80090ba:	e004      	b.n	80090c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f8a9 	bl	8009216 <USBD_CtlError>
        break;
 80090c4:	bf00      	nop
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d81e      	bhi.n	8009122 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	88db      	ldrh	r3, [r3, #6]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d004      	beq.n	80090f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f891 	bl	8009216 <USBD_CtlError>
        break;
 80090f4:	e01a      	b.n	800912c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f043 0202 	orr.w	r2, r3, #2
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	330c      	adds	r3, #12
 8009116:	2202      	movs	r2, #2
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f8e5 	bl	80092ea <USBD_CtlSendData>
      break;
 8009120:	e004      	b.n	800912c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f876 	bl	8009216 <USBD_CtlError>
      break;
 800912a:	bf00      	nop
  }
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d106      	bne.n	8009154 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f929 	bl	80093a6 <USBD_CtlSendStatus>
  }
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	3b01      	subs	r3, #1
 800916e:	2b02      	cmp	r3, #2
 8009170:	d80b      	bhi.n	800918a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d10c      	bne.n	8009194 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f90f 	bl	80093a6 <USBD_CtlSendStatus>
      }
      break;
 8009188:	e004      	b.n	8009194 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f842 	bl	8009216 <USBD_CtlError>
      break;
 8009192:	e000      	b.n	8009196 <USBD_ClrFeature+0x3a>
      break;
 8009194:	bf00      	nop
  }
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	785a      	ldrb	r2, [r3, #1]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	3302      	adds	r3, #2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	3303      	adds	r3, #3
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3304      	adds	r3, #4
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	3305      	adds	r3, #5
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	3306      	adds	r3, #6
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	3307      	adds	r3, #7
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b29b      	uxth	r3, r3
 8009204:	4413      	add	r3, r2
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	80da      	strh	r2, [r3, #6]

}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	bc80      	pop	{r7}
 8009214:	4770      	bx	lr

08009216 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009220:	2180      	movs	r1, #128	; 0x80
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fc84 	bl	8009b30 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009228:	2100      	movs	r1, #0
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc80 	bl	8009b30 <USBD_LL_StallEP>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d032      	beq.n	80092b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 f834 	bl	80092bc <USBD_GetLen>
 8009254:	4603      	mov	r3, r0
 8009256:	3301      	adds	r3, #1
 8009258:	b29b      	uxth	r3, r3
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	75fa      	strb	r2, [r7, #23]
 8009268:	461a      	mov	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	7812      	ldrb	r2, [r2, #0]
 8009272:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	75fa      	strb	r2, [r7, #23]
 800927a:	461a      	mov	r2, r3
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4413      	add	r3, r2
 8009280:	2203      	movs	r2, #3
 8009282:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009284:	e012      	b.n	80092ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	60fa      	str	r2, [r7, #12]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	1c51      	adds	r1, r2, #1
 8009290:	75f9      	strb	r1, [r7, #23]
 8009292:	4611      	mov	r1, r2
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	440a      	add	r2, r1
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800929c:	7dfb      	ldrb	r3, [r7, #23]
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	75fa      	strb	r2, [r7, #23]
 80092a2:	461a      	mov	r2, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4413      	add	r3, r2
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e8      	bne.n	8009286 <USBD_GetString+0x4e>
    }
  }
}
 80092b4:	bf00      	nop
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80092c8:	e005      	b.n	80092d6 <USBD_GetLen+0x1a>
  {
    len++;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	3301      	adds	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3301      	adds	r3, #1
 80092d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f5      	bne.n	80092ca <USBD_GetLen+0xe>
  }

  return len;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr

080092ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	4613      	mov	r3, r2
 80092f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009300:	88fa      	ldrh	r2, [r7, #6]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	2100      	movs	r1, #0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f000 fc94 	bl	8009c40 <USBD_LL_Transmit>

  return USBD_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	4613      	mov	r3, r2
 800932e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009330:	88fb      	ldrh	r3, [r7, #6]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	2100      	movs	r1, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fc82 	bl	8009c40 <USBD_LL_Transmit>

  return USBD_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	4613      	mov	r3, r2
 8009352:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2203      	movs	r2, #3
 8009358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800935c:	88fa      	ldrh	r2, [r7, #6]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009364:	88fa      	ldrh	r2, [r7, #6]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f000 fc87 	bl	8009c86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	4613      	mov	r3, r2
 800938e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	2100      	movs	r1, #0
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 fc75 	bl	8009c86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2204      	movs	r2, #4
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80093b6:	2300      	movs	r3, #0
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc3f 	bl	8009c40 <USBD_LL_Transmit>

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2205      	movs	r2, #5
 80093d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093dc:	2300      	movs	r3, #0
 80093de:	2200      	movs	r2, #0
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc4f 	bl	8009c86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093f8:	2200      	movs	r2, #0
 80093fa:	4912      	ldr	r1, [pc, #72]	; (8009444 <MX_USB_DEVICE_Init+0x50>)
 80093fc:	4812      	ldr	r0, [pc, #72]	; (8009448 <MX_USB_DEVICE_Init+0x54>)
 80093fe:	f7fe ff25 	bl	800824c <USBD_Init>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009408:	f7f9 f928 	bl	800265c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800940c:	490f      	ldr	r1, [pc, #60]	; (800944c <MX_USB_DEVICE_Init+0x58>)
 800940e:	480e      	ldr	r0, [pc, #56]	; (8009448 <MX_USB_DEVICE_Init+0x54>)
 8009410:	f7fe ff47 	bl	80082a2 <USBD_RegisterClass>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800941a:	f7f9 f91f 	bl	800265c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800941e:	490c      	ldr	r1, [pc, #48]	; (8009450 <MX_USB_DEVICE_Init+0x5c>)
 8009420:	4809      	ldr	r0, [pc, #36]	; (8009448 <MX_USB_DEVICE_Init+0x54>)
 8009422:	f7fe fea7 	bl	8008174 <USBD_CDC_RegisterInterface>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800942c:	f7f9 f916 	bl	800265c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009430:	4805      	ldr	r0, [pc, #20]	; (8009448 <MX_USB_DEVICE_Init+0x54>)
 8009432:	f7fe ff4f 	bl	80082d4 <USBD_Start>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800943c:	f7f9 f90e 	bl	800265c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009440:	bf00      	nop
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20000198 	.word	0x20000198
 8009448:	20000390 	.word	0x20000390
 800944c:	20000084 	.word	0x20000084
 8009450:	20000188 	.word	0x20000188

08009454 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009458:	2200      	movs	r2, #0
 800945a:	4905      	ldr	r1, [pc, #20]	; (8009470 <CDC_Init_FS+0x1c>)
 800945c:	4805      	ldr	r0, [pc, #20]	; (8009474 <CDC_Init_FS+0x20>)
 800945e:	f7fe fe9f 	bl	80081a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009462:	4905      	ldr	r1, [pc, #20]	; (8009478 <CDC_Init_FS+0x24>)
 8009464:	4803      	ldr	r0, [pc, #12]	; (8009474 <CDC_Init_FS+0x20>)
 8009466:	f7fe feb4 	bl	80081d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800946a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20000a54 	.word	0x20000a54
 8009474:	20000390 	.word	0x20000390
 8009478:	20000654 	.word	0x20000654

0800947c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009480:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009482:	4618      	mov	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
	...

0800948c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
 8009498:	4613      	mov	r3, r2
 800949a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b23      	cmp	r3, #35	; 0x23
 80094a0:	d84a      	bhi.n	8009538 <CDC_Control_FS+0xac>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <CDC_Control_FS+0x1c>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	08009539 	.word	0x08009539
 80094ac:	08009539 	.word	0x08009539
 80094b0:	08009539 	.word	0x08009539
 80094b4:	08009539 	.word	0x08009539
 80094b8:	08009539 	.word	0x08009539
 80094bc:	08009539 	.word	0x08009539
 80094c0:	08009539 	.word	0x08009539
 80094c4:	08009539 	.word	0x08009539
 80094c8:	08009539 	.word	0x08009539
 80094cc:	08009539 	.word	0x08009539
 80094d0:	08009539 	.word	0x08009539
 80094d4:	08009539 	.word	0x08009539
 80094d8:	08009539 	.word	0x08009539
 80094dc:	08009539 	.word	0x08009539
 80094e0:	08009539 	.word	0x08009539
 80094e4:	08009539 	.word	0x08009539
 80094e8:	08009539 	.word	0x08009539
 80094ec:	08009539 	.word	0x08009539
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009539 	.word	0x08009539
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009539 	.word	0x08009539
 8009500:	08009539 	.word	0x08009539
 8009504:	08009539 	.word	0x08009539
 8009508:	08009539 	.word	0x08009539
 800950c:	08009539 	.word	0x08009539
 8009510:	08009539 	.word	0x08009539
 8009514:	08009539 	.word	0x08009539
 8009518:	08009539 	.word	0x08009539
 800951c:	08009539 	.word	0x08009539
 8009520:	08009539 	.word	0x08009539
 8009524:	08009539 	.word	0x08009539
 8009528:	08009539 	.word	0x08009539
 800952c:	08009539 	.word	0x08009539
 8009530:	08009539 	.word	0x08009539
 8009534:	08009539 	.word	0x08009539
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009538:	bf00      	nop
  }

  return (USBD_OK);
 800953a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	bc80      	pop	{r7}
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop

08009548 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4805      	ldr	r0, [pc, #20]	; (800956c <CDC_Receive_FS+0x24>)
 8009556:	f7fe fe3c 	bl	80081d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800955a:	4804      	ldr	r0, [pc, #16]	; (800956c <CDC_Receive_FS+0x24>)
 800955c:	f7fe fe4c 	bl	80081f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009560:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20000390 	.word	0x20000390

08009570 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2212      	movs	r2, #18
 8009580:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	; (8009590 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	200001b4 	.word	0x200001b4

08009594 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2204      	movs	r2, #4
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	200001c8 	.word	0x200001c8

080095b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4907      	ldr	r1, [pc, #28]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
 80095ce:	4808      	ldr	r0, [pc, #32]	; (80095f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80095d0:	f7ff fe32 	bl	8009238 <USBD_GetString>
 80095d4:	e004      	b.n	80095e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4904      	ldr	r1, [pc, #16]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
 80095da:	4805      	ldr	r0, [pc, #20]	; (80095f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80095dc:	f7ff fe2c 	bl	8009238 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e0:	4b02      	ldr	r3, [pc, #8]	; (80095ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000e54 	.word	0x20000e54
 80095f0:	0800a414 	.word	0x0800a414

080095f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	4904      	ldr	r1, [pc, #16]	; (8009614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009604:	4804      	ldr	r0, [pc, #16]	; (8009618 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009606:	f7ff fe17 	bl	8009238 <USBD_GetString>
  return USBD_StrDesc;
 800960a:	4b02      	ldr	r3, [pc, #8]	; (8009614 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000e54 	.word	0x20000e54
 8009618:	0800a42c 	.word	0x0800a42c

0800961c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	221a      	movs	r2, #26
 800962c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800962e:	f000 f843 	bl	80096b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009632:	4b02      	ldr	r3, [pc, #8]	; (800963c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	200001cc 	.word	0x200001cc

08009640 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4907      	ldr	r1, [pc, #28]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009656:	4808      	ldr	r0, [pc, #32]	; (8009678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009658:	f7ff fdee 	bl	8009238 <USBD_GetString>
 800965c:	e004      	b.n	8009668 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4904      	ldr	r1, [pc, #16]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009662:	4805      	ldr	r0, [pc, #20]	; (8009678 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009664:	f7ff fde8 	bl	8009238 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000e54 	.word	0x20000e54
 8009678:	0800a440 	.word	0x0800a440

0800967c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	4603      	mov	r3, r0
 8009684:	6039      	str	r1, [r7, #0]
 8009686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4907      	ldr	r1, [pc, #28]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009692:	4808      	ldr	r0, [pc, #32]	; (80096b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009694:	f7ff fdd0 	bl	8009238 <USBD_GetString>
 8009698:	e004      	b.n	80096a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800969e:	4805      	ldr	r0, [pc, #20]	; (80096b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096a0:	f7ff fdca 	bl	8009238 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000e54 	.word	0x20000e54
 80096b4:	0800a44c 	.word	0x0800a44c

080096b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <Get_SerialNum+0x44>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <Get_SerialNum+0x48>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ca:	4b0e      	ldr	r3, [pc, #56]	; (8009704 <Get_SerialNum+0x4c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096de:	2208      	movs	r2, #8
 80096e0:	4909      	ldr	r1, [pc, #36]	; (8009708 <Get_SerialNum+0x50>)
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f814 	bl	8009710 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e8:	2204      	movs	r2, #4
 80096ea:	4908      	ldr	r1, [pc, #32]	; (800970c <Get_SerialNum+0x54>)
 80096ec:	68b8      	ldr	r0, [r7, #8]
 80096ee:	f000 f80f 	bl	8009710 <IntToUnicode>
  }
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	1ffff7e8 	.word	0x1ffff7e8
 8009700:	1ffff7ec 	.word	0x1ffff7ec
 8009704:	1ffff7f0 	.word	0x1ffff7f0
 8009708:	200001ce 	.word	0x200001ce
 800970c:	200001de 	.word	0x200001de

08009710 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009722:	2300      	movs	r3, #0
 8009724:	75fb      	strb	r3, [r7, #23]
 8009726:	e027      	b.n	8009778 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0f1b      	lsrs	r3, r3, #28
 800972c:	2b09      	cmp	r3, #9
 800972e:	d80b      	bhi.n	8009748 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	0f1b      	lsrs	r3, r3, #28
 8009734:	b2da      	uxtb	r2, r3
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	4619      	mov	r1, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	440b      	add	r3, r1
 8009740:	3230      	adds	r2, #48	; 0x30
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e00a      	b.n	800975e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	0f1b      	lsrs	r3, r3, #28
 800974c:	b2da      	uxtb	r2, r3
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4619      	mov	r1, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	440b      	add	r3, r1
 8009758:	3237      	adds	r2, #55	; 0x37
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	3301      	adds	r3, #1
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	3301      	adds	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
 8009778:	7dfa      	ldrb	r2, [r7, #23]
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	429a      	cmp	r2, r3
 800977e:	d3d3      	bcc.n	8009728 <IntToUnicode+0x18>
  }
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	371c      	adds	r7, #28
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr

0800978c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009794:	f107 0310 	add.w	r3, r7, #16
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097aa:	d12c      	bne.n	8009806 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ac:	4b18      	ldr	r3, [pc, #96]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	4a17      	ldr	r2, [pc, #92]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097b2:	f043 0304 	orr.w	r3, r3, #4
 80097b6:	6193      	str	r3, [r2, #24]
 80097b8:	4b15      	ldr	r3, [pc, #84]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80097c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d2:	f107 0310 	add.w	r3, r7, #16
 80097d6:	4619      	mov	r1, r3
 80097d8:	480e      	ldr	r0, [pc, #56]	; (8009814 <HAL_PCD_MspInit+0x88>)
 80097da:	f7fa f8c9 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	4a0b      	ldr	r2, [pc, #44]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097e8:	6153      	str	r3, [r2, #20]
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <HAL_PCD_MspInit+0x84>)
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80097f2:	60bb      	str	r3, [r7, #8]
 80097f4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	2043      	movs	r0, #67	; 0x43
 80097fc:	f7fa f881 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009800:	2043      	movs	r0, #67	; 0x43
 8009802:	f7fa f89a 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009806:	bf00      	nop
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	40021000 	.word	0x40021000
 8009814:	40010800 	.word	0x40010800

08009818 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f7fe fd98 	bl	8008364 <USBD_LL_SetupStage>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	440b      	add	r3, r1
 800985c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	4619      	mov	r1, r3
 8009866:	f7fe fdca 	bl	80083fe <USBD_LL_DataOutStage>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	6879      	ldr	r1, [r7, #4]
 8009888:	4613      	mov	r3, r2
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	3348      	adds	r3, #72	; 0x48
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	4619      	mov	r1, r3
 800989a:	f7fe fe21 	bl	80084e0 <USBD_LL_DataInStage>
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe ff31 	bl	800871c <USBD_LL_SOF>
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d001      	beq.n	80098da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098d6:	f7f8 fec1 	bl	800265c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80098e0:	7bfa      	ldrb	r2, [r7, #15]
 80098e2:	4611      	mov	r1, r2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fe fee1 	bl	80086ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fe9a 	bl	800862a <USBD_LL_Reset>
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800990e:	4618      	mov	r0, r3
 8009910:	f7fe fedb 	bl	80086ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6812      	ldr	r2, [r2, #0]
 8009922:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009926:	f043 0301 	orr.w	r3, r3, #1
 800992a:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <HAL_PCD_SuspendCallback+0x48>)
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	4a03      	ldr	r2, [pc, #12]	; (8009948 <HAL_PCD_SuspendCallback+0x48>)
 800993a:	f043 0306 	orr.w	r3, r3, #6
 800993e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009940:	bf00      	nop
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	e000ed00 	.word	0xe000ed00

0800994c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fec9 	bl	80086f2 <USBD_LL_Resume>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800997a:	78fa      	ldrb	r2, [r7, #3]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fef2 	bl	8008768 <USBD_LL_IsoOUTIncomplete>
}
 8009984:	bf00      	nop
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fed4 	bl	8008750 <USBD_LL_IsoINIncomplete>
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fede 	bl	8008780 <USBD_LL_DevConnected>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe feda 	bl	8008794 <USBD_LL_DevDisconnected>
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d133      	bne.n	8009a60 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099f8:	4a1c      	ldr	r2, [pc, #112]	; (8009a6c <USBD_LL_Init+0x84>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a1a      	ldr	r2, [pc, #104]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a08:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a10:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a12:	2204      	movs	r2, #4
 8009a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a16:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a18:	2202      	movs	r2, #2
 8009a1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a1c:	4b13      	ldr	r3, [pc, #76]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a1e:	2202      	movs	r2, #2
 8009a20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a28:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a34:	480d      	ldr	r0, [pc, #52]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a36:	f7fa f950 	bl	8003cda <HAL_PCD_Init>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009a40:	f7f8 fe0c 	bl	800265c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a44:	2180      	movs	r1, #128	; 0x80
 8009a46:	4809      	ldr	r0, [pc, #36]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a48:	f7fb fa68 	bl	8004f1c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a4c:	2240      	movs	r2, #64	; 0x40
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4806      	ldr	r0, [pc, #24]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a52:	f7fb fa1d 	bl	8004e90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a56:	2280      	movs	r2, #128	; 0x80
 8009a58:	2101      	movs	r1, #1
 8009a5a:	4804      	ldr	r0, [pc, #16]	; (8009a6c <USBD_LL_Init+0x84>)
 8009a5c:	f7fb fa18 	bl	8004e90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20001054 	.word	0x20001054

08009a70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fa fa44 	bl	8003f14 <HAL_PCD_Start>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f944 	bl	8009d20 <USBD_Get_USB_Status>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	4608      	mov	r0, r1
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	70fb      	strb	r3, [r7, #3]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70bb      	strb	r3, [r7, #2]
 8009abc:	4613      	mov	r3, r2
 8009abe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ace:	78bb      	ldrb	r3, [r7, #2]
 8009ad0:	883a      	ldrh	r2, [r7, #0]
 8009ad2:	78f9      	ldrb	r1, [r7, #3]
 8009ad4:	f7fa febd 	bl	8004852 <HAL_PCD_EP_Open>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f91e 	bl	8009d20 <USBD_Get_USB_Status>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	460b      	mov	r3, r1
 8009afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fa ff06 	bl	8004922 <HAL_PCD_EP_Close>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f8ff 	bl	8009d20 <USBD_Get_USB_Status>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fa ffab 	bl	8004aaa <HAL_PCD_EP_SetStall>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f8e0 	bl	8009d20 <USBD_Get_USB_Status>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b88:	78fa      	ldrb	r2, [r7, #3]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fa ffee 	bl	8004b6e <HAL_PCD_EP_ClrStall>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f8c1 	bl	8009d20 <USBD_Get_USB_Status>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da0b      	bge.n	8009be0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bc8:	78fb      	ldrb	r3, [r7, #3]
 8009bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	333e      	adds	r3, #62	; 0x3e
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	e00b      	b.n	8009bf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	4613      	mov	r3, r2
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009bf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bc80      	pop	{r7}
 8009c00:	4770      	bx	lr

08009c02 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c1c:	78fa      	ldrb	r2, [r7, #3]
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fa fdf1 	bl	8004808 <HAL_PCD_SetAddress>
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 f877 	bl	8009d20 <USBD_Get_USB_Status>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	72fb      	strb	r3, [r7, #11]
 8009c50:	4613      	mov	r3, r2
 8009c52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c62:	893b      	ldrh	r3, [r7, #8]
 8009c64:	7af9      	ldrb	r1, [r7, #11]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	f7fa feee 	bl	8004a48 <HAL_PCD_EP_Transmit>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f854 	bl	8009d20 <USBD_Get_USB_Status>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	461a      	mov	r2, r3
 8009c92:	460b      	mov	r3, r1
 8009c94:	72fb      	strb	r3, [r7, #11]
 8009c96:	4613      	mov	r3, r2
 8009c98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ca8:	893b      	ldrh	r3, [r7, #8]
 8009caa:	7af9      	ldrb	r1, [r7, #11]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	f7fa fe82 	bl	80049b6 <HAL_PCD_EP_Receive>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f831 	bl	8009d20 <USBD_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fa fe99 	bl	8004a1a <HAL_PCD_EP_GetRxCount>
 8009ce8:	4603      	mov	r3, r0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_static_malloc+0x14>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr
 8009d08:	20001558 	.word	0x20001558

08009d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr
	...

08009d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d817      	bhi.n	8009d64 <USBD_Get_USB_Status+0x44>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USBD_Get_USB_Status+0x1c>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d4d 	.word	0x08009d4d
 8009d40:	08009d53 	.word	0x08009d53
 8009d44:	08009d59 	.word	0x08009d59
 8009d48:	08009d5f 	.word	0x08009d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d50:	e00b      	b.n	8009d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	73fb      	strb	r3, [r7, #15]
    break;
 8009d56:	e008      	b.n	8009d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5c:	e005      	b.n	8009d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	73fb      	strb	r3, [r7, #15]
    break;
 8009d62:	e002      	b.n	8009d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d64:	2302      	movs	r3, #2
 8009d66:	73fb      	strb	r3, [r7, #15]
    break;
 8009d68:	bf00      	nop
  }
  return usb_status;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop

08009d78 <malloc>:
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <malloc+0xc>)
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	f000 b82b 	b.w	8009dd8 <_malloc_r>
 8009d82:	bf00      	nop
 8009d84:	20000234 	.word	0x20000234

08009d88 <free>:
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <free+0xc>)
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	6818      	ldr	r0, [r3, #0]
 8009d8e:	f000 b901 	b.w	8009f94 <_free_r>
 8009d92:	bf00      	nop
 8009d94:	20000234 	.word	0x20000234

08009d98 <sbrk_aligned>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	4e0e      	ldr	r6, [pc, #56]	; (8009dd4 <sbrk_aligned+0x3c>)
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	6831      	ldr	r1, [r6, #0]
 8009da0:	4605      	mov	r5, r0
 8009da2:	b911      	cbnz	r1, 8009daa <sbrk_aligned+0x12>
 8009da4:	f000 f8ac 	bl	8009f00 <_sbrk_r>
 8009da8:	6030      	str	r0, [r6, #0]
 8009daa:	4621      	mov	r1, r4
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 f8a7 	bl	8009f00 <_sbrk_r>
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	d00a      	beq.n	8009dcc <sbrk_aligned+0x34>
 8009db6:	1cc4      	adds	r4, r0, #3
 8009db8:	f024 0403 	bic.w	r4, r4, #3
 8009dbc:	42a0      	cmp	r0, r4
 8009dbe:	d007      	beq.n	8009dd0 <sbrk_aligned+0x38>
 8009dc0:	1a21      	subs	r1, r4, r0
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f89c 	bl	8009f00 <_sbrk_r>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d101      	bne.n	8009dd0 <sbrk_aligned+0x38>
 8009dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	2000177c 	.word	0x2000177c

08009dd8 <_malloc_r>:
 8009dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ddc:	1ccd      	adds	r5, r1, #3
 8009dde:	f025 0503 	bic.w	r5, r5, #3
 8009de2:	3508      	adds	r5, #8
 8009de4:	2d0c      	cmp	r5, #12
 8009de6:	bf38      	it	cc
 8009de8:	250c      	movcc	r5, #12
 8009dea:	2d00      	cmp	r5, #0
 8009dec:	4607      	mov	r7, r0
 8009dee:	db01      	blt.n	8009df4 <_malloc_r+0x1c>
 8009df0:	42a9      	cmp	r1, r5
 8009df2:	d905      	bls.n	8009e00 <_malloc_r+0x28>
 8009df4:	230c      	movs	r3, #12
 8009df6:	2600      	movs	r6, #0
 8009df8:	603b      	str	r3, [r7, #0]
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ed4 <_malloc_r+0xfc>
 8009e04:	f000 f868 	bl	8009ed8 <__malloc_lock>
 8009e08:	f8d8 3000 	ldr.w	r3, [r8]
 8009e0c:	461c      	mov	r4, r3
 8009e0e:	bb5c      	cbnz	r4, 8009e68 <_malloc_r+0x90>
 8009e10:	4629      	mov	r1, r5
 8009e12:	4638      	mov	r0, r7
 8009e14:	f7ff ffc0 	bl	8009d98 <sbrk_aligned>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	d155      	bne.n	8009eca <_malloc_r+0xf2>
 8009e1e:	f8d8 4000 	ldr.w	r4, [r8]
 8009e22:	4626      	mov	r6, r4
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d145      	bne.n	8009eb4 <_malloc_r+0xdc>
 8009e28:	2c00      	cmp	r4, #0
 8009e2a:	d048      	beq.n	8009ebe <_malloc_r+0xe6>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4638      	mov	r0, r7
 8009e32:	eb04 0903 	add.w	r9, r4, r3
 8009e36:	f000 f863 	bl	8009f00 <_sbrk_r>
 8009e3a:	4581      	cmp	r9, r0
 8009e3c:	d13f      	bne.n	8009ebe <_malloc_r+0xe6>
 8009e3e:	6821      	ldr	r1, [r4, #0]
 8009e40:	4638      	mov	r0, r7
 8009e42:	1a6d      	subs	r5, r5, r1
 8009e44:	4629      	mov	r1, r5
 8009e46:	f7ff ffa7 	bl	8009d98 <sbrk_aligned>
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	d037      	beq.n	8009ebe <_malloc_r+0xe6>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	442b      	add	r3, r5
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	f8d8 3000 	ldr.w	r3, [r8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d038      	beq.n	8009ece <_malloc_r+0xf6>
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	42a2      	cmp	r2, r4
 8009e60:	d12b      	bne.n	8009eba <_malloc_r+0xe2>
 8009e62:	2200      	movs	r2, #0
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	e00f      	b.n	8009e88 <_malloc_r+0xb0>
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	1b52      	subs	r2, r2, r5
 8009e6c:	d41f      	bmi.n	8009eae <_malloc_r+0xd6>
 8009e6e:	2a0b      	cmp	r2, #11
 8009e70:	d917      	bls.n	8009ea2 <_malloc_r+0xca>
 8009e72:	1961      	adds	r1, r4, r5
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	bf18      	it	ne
 8009e7a:	6059      	strne	r1, [r3, #4]
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	bf08      	it	eq
 8009e80:	f8c8 1000 	streq.w	r1, [r8]
 8009e84:	5162      	str	r2, [r4, r5]
 8009e86:	604b      	str	r3, [r1, #4]
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f104 060b 	add.w	r6, r4, #11
 8009e8e:	f000 f829 	bl	8009ee4 <__malloc_unlock>
 8009e92:	f026 0607 	bic.w	r6, r6, #7
 8009e96:	1d23      	adds	r3, r4, #4
 8009e98:	1af2      	subs	r2, r6, r3
 8009e9a:	d0ae      	beq.n	8009dfa <_malloc_r+0x22>
 8009e9c:	1b9b      	subs	r3, r3, r6
 8009e9e:	50a3      	str	r3, [r4, r2]
 8009ea0:	e7ab      	b.n	8009dfa <_malloc_r+0x22>
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	6862      	ldr	r2, [r4, #4]
 8009ea6:	d1dd      	bne.n	8009e64 <_malloc_r+0x8c>
 8009ea8:	f8c8 2000 	str.w	r2, [r8]
 8009eac:	e7ec      	b.n	8009e88 <_malloc_r+0xb0>
 8009eae:	4623      	mov	r3, r4
 8009eb0:	6864      	ldr	r4, [r4, #4]
 8009eb2:	e7ac      	b.n	8009e0e <_malloc_r+0x36>
 8009eb4:	4634      	mov	r4, r6
 8009eb6:	6876      	ldr	r6, [r6, #4]
 8009eb8:	e7b4      	b.n	8009e24 <_malloc_r+0x4c>
 8009eba:	4613      	mov	r3, r2
 8009ebc:	e7cc      	b.n	8009e58 <_malloc_r+0x80>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	f000 f80e 	bl	8009ee4 <__malloc_unlock>
 8009ec8:	e797      	b.n	8009dfa <_malloc_r+0x22>
 8009eca:	6025      	str	r5, [r4, #0]
 8009ecc:	e7dc      	b.n	8009e88 <_malloc_r+0xb0>
 8009ece:	605b      	str	r3, [r3, #4]
 8009ed0:	deff      	udf	#255	; 0xff
 8009ed2:	bf00      	nop
 8009ed4:	20001778 	.word	0x20001778

08009ed8 <__malloc_lock>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__malloc_lock+0x8>)
 8009eda:	f000 b84b 	b.w	8009f74 <__retarget_lock_acquire_recursive>
 8009ede:	bf00      	nop
 8009ee0:	200018bc 	.word	0x200018bc

08009ee4 <__malloc_unlock>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__malloc_unlock+0x8>)
 8009ee6:	f000 b846 	b.w	8009f76 <__retarget_lock_release_recursive>
 8009eea:	bf00      	nop
 8009eec:	200018bc 	.word	0x200018bc

08009ef0 <memset>:
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	4402      	add	r2, r0
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d100      	bne.n	8009efa <memset+0xa>
 8009ef8:	4770      	bx	lr
 8009efa:	f803 1b01 	strb.w	r1, [r3], #1
 8009efe:	e7f9      	b.n	8009ef4 <memset+0x4>

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	2300      	movs	r3, #0
 8009f04:	4d05      	ldr	r5, [pc, #20]	; (8009f1c <_sbrk_r+0x1c>)
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f8 fea2 	bl	8002c54 <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	200018b8 	.word	0x200018b8

08009f20 <__errno>:
 8009f20:	4b01      	ldr	r3, [pc, #4]	; (8009f28 <__errno+0x8>)
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000234 	.word	0x20000234

08009f2c <__libc_init_array>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	2600      	movs	r6, #0
 8009f30:	4d0c      	ldr	r5, [pc, #48]	; (8009f64 <__libc_init_array+0x38>)
 8009f32:	4c0d      	ldr	r4, [pc, #52]	; (8009f68 <__libc_init_array+0x3c>)
 8009f34:	1b64      	subs	r4, r4, r5
 8009f36:	10a4      	asrs	r4, r4, #2
 8009f38:	42a6      	cmp	r6, r4
 8009f3a:	d109      	bne.n	8009f50 <__libc_init_array+0x24>
 8009f3c:	f000 fa5e 	bl	800a3fc <_init>
 8009f40:	2600      	movs	r6, #0
 8009f42:	4d0a      	ldr	r5, [pc, #40]	; (8009f6c <__libc_init_array+0x40>)
 8009f44:	4c0a      	ldr	r4, [pc, #40]	; (8009f70 <__libc_init_array+0x44>)
 8009f46:	1b64      	subs	r4, r4, r5
 8009f48:	10a4      	asrs	r4, r4, #2
 8009f4a:	42a6      	cmp	r6, r4
 8009f4c:	d105      	bne.n	8009f5a <__libc_init_array+0x2e>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f54:	4798      	blx	r3
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7ee      	b.n	8009f38 <__libc_init_array+0xc>
 8009f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f5e:	4798      	blx	r3
 8009f60:	3601      	adds	r6, #1
 8009f62:	e7f2      	b.n	8009f4a <__libc_init_array+0x1e>
 8009f64:	0800a8a4 	.word	0x0800a8a4
 8009f68:	0800a8a4 	.word	0x0800a8a4
 8009f6c:	0800a8a4 	.word	0x0800a8a4
 8009f70:	0800a8a8 	.word	0x0800a8a8

08009f74 <__retarget_lock_acquire_recursive>:
 8009f74:	4770      	bx	lr

08009f76 <__retarget_lock_release_recursive>:
 8009f76:	4770      	bx	lr

08009f78 <memcpy>:
 8009f78:	440a      	add	r2, r1
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f80:	d100      	bne.n	8009f84 <memcpy+0xc>
 8009f82:	4770      	bx	lr
 8009f84:	b510      	push	{r4, lr}
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	4291      	cmp	r1, r2
 8009f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f90:	d1f9      	bne.n	8009f86 <memcpy+0xe>
 8009f92:	bd10      	pop	{r4, pc}

08009f94 <_free_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4605      	mov	r5, r0
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d040      	beq.n	800a01e <_free_r+0x8a>
 8009f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa0:	1f0c      	subs	r4, r1, #4
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	bfb8      	it	lt
 8009fa6:	18e4      	addlt	r4, r4, r3
 8009fa8:	f7ff ff96 	bl	8009ed8 <__malloc_lock>
 8009fac:	4a1c      	ldr	r2, [pc, #112]	; (800a020 <_free_r+0x8c>)
 8009fae:	6813      	ldr	r3, [r2, #0]
 8009fb0:	b933      	cbnz	r3, 8009fc0 <_free_r+0x2c>
 8009fb2:	6063      	str	r3, [r4, #4]
 8009fb4:	6014      	str	r4, [r2, #0]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fbc:	f7ff bf92 	b.w	8009ee4 <__malloc_unlock>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d908      	bls.n	8009fd6 <_free_r+0x42>
 8009fc4:	6820      	ldr	r0, [r4, #0]
 8009fc6:	1821      	adds	r1, r4, r0
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	bf01      	itttt	eq
 8009fcc:	6819      	ldreq	r1, [r3, #0]
 8009fce:	685b      	ldreq	r3, [r3, #4]
 8009fd0:	1809      	addeq	r1, r1, r0
 8009fd2:	6021      	streq	r1, [r4, #0]
 8009fd4:	e7ed      	b.n	8009fb2 <_free_r+0x1e>
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	b10b      	cbz	r3, 8009fe0 <_free_r+0x4c>
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d9fa      	bls.n	8009fd6 <_free_r+0x42>
 8009fe0:	6811      	ldr	r1, [r2, #0]
 8009fe2:	1850      	adds	r0, r2, r1
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d10b      	bne.n	800a000 <_free_r+0x6c>
 8009fe8:	6820      	ldr	r0, [r4, #0]
 8009fea:	4401      	add	r1, r0
 8009fec:	1850      	adds	r0, r2, r1
 8009fee:	4283      	cmp	r3, r0
 8009ff0:	6011      	str	r1, [r2, #0]
 8009ff2:	d1e0      	bne.n	8009fb6 <_free_r+0x22>
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4408      	add	r0, r1
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	6053      	str	r3, [r2, #4]
 8009ffe:	e7da      	b.n	8009fb6 <_free_r+0x22>
 800a000:	d902      	bls.n	800a008 <_free_r+0x74>
 800a002:	230c      	movs	r3, #12
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	e7d6      	b.n	8009fb6 <_free_r+0x22>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	1821      	adds	r1, r4, r0
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf01      	itttt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	1809      	addeq	r1, r1, r0
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	6054      	str	r4, [r2, #4]
 800a01c:	e7cb      	b.n	8009fb6 <_free_r+0x22>
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	20001778 	.word	0x20001778

0800a024 <log>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	f000 f835 	bl	800a098 <__ieee754_log>
 800a02e:	4622      	mov	r2, r4
 800a030:	4606      	mov	r6, r0
 800a032:	460f      	mov	r7, r1
 800a034:	462b      	mov	r3, r5
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fd4b 	bl	8000ad4 <__aeabi_dcmpun>
 800a03e:	b998      	cbnz	r0, 800a068 <log+0x44>
 800a040:	2200      	movs	r2, #0
 800a042:	2300      	movs	r3, #0
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 fd3a 	bl	8000ac0 <__aeabi_dcmpgt>
 800a04c:	b960      	cbnz	r0, 800a068 <log+0x44>
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	4620      	mov	r0, r4
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 fd0b 	bl	8000a70 <__aeabi_dcmpeq>
 800a05a:	b140      	cbz	r0, 800a06e <log+0x4a>
 800a05c:	f7ff ff60 	bl	8009f20 <__errno>
 800a060:	2322      	movs	r3, #34	; 0x22
 800a062:	2600      	movs	r6, #0
 800a064:	4f06      	ldr	r7, [pc, #24]	; (800a080 <log+0x5c>)
 800a066:	6003      	str	r3, [r0, #0]
 800a068:	4630      	mov	r0, r6
 800a06a:	4639      	mov	r1, r7
 800a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06e:	f7ff ff57 	bl	8009f20 <__errno>
 800a072:	2321      	movs	r3, #33	; 0x21
 800a074:	6003      	str	r3, [r0, #0]
 800a076:	4803      	ldr	r0, [pc, #12]	; (800a084 <log+0x60>)
 800a078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a07c:	f000 b804 	b.w	800a088 <nan>
 800a080:	fff00000 	.word	0xfff00000
 800a084:	0800a898 	.word	0x0800a898

0800a088 <nan>:
 800a088:	2000      	movs	r0, #0
 800a08a:	4901      	ldr	r1, [pc, #4]	; (800a090 <nan+0x8>)
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	7ff80000 	.word	0x7ff80000
 800a094:	00000000 	.word	0x00000000

0800a098 <__ieee754_log>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	da24      	bge.n	800a0f4 <__ieee754_log+0x5c>
 800a0aa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a0ae:	4304      	orrs	r4, r0
 800a0b0:	d108      	bne.n	800a0c4 <__ieee754_log+0x2c>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	49cb      	ldr	r1, [pc, #812]	; (800a3e8 <__ieee754_log+0x350>)
 800a0ba:	f7f6 fb9b 	bl	80007f4 <__aeabi_ddiv>
 800a0be:	b007      	add	sp, #28
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	2900      	cmp	r1, #0
 800a0c6:	da04      	bge.n	800a0d2 <__ieee754_log+0x3a>
 800a0c8:	f7f6 f8b2 	bl	8000230 <__aeabi_dsub>
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e7f3      	b.n	800a0ba <__ieee754_log+0x22>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4bc5      	ldr	r3, [pc, #788]	; (800a3ec <__ieee754_log+0x354>)
 800a0d6:	f7f6 fa63 	bl	80005a0 <__aeabi_dmul>
 800a0da:	460b      	mov	r3, r1
 800a0dc:	460d      	mov	r5, r1
 800a0de:	4602      	mov	r2, r0
 800a0e0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a0e4:	48c2      	ldr	r0, [pc, #776]	; (800a3f0 <__ieee754_log+0x358>)
 800a0e6:	4285      	cmp	r5, r0
 800a0e8:	dd06      	ble.n	800a0f8 <__ieee754_log+0x60>
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f7f6 f8a1 	bl	8000234 <__adddf3>
 800a0f2:	e7e4      	b.n	800a0be <__ieee754_log+0x26>
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	e7f5      	b.n	800a0e4 <__ieee754_log+0x4c>
 800a0f8:	152c      	asrs	r4, r5, #20
 800a0fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a102:	440c      	add	r4, r1
 800a104:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a108:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a10c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800a110:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800a114:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a118:	ea41 0305 	orr.w	r3, r1, r5
 800a11c:	4610      	mov	r0, r2
 800a11e:	4619      	mov	r1, r3
 800a120:	2200      	movs	r2, #0
 800a122:	4bb4      	ldr	r3, [pc, #720]	; (800a3f4 <__ieee754_log+0x35c>)
 800a124:	f7f6 f884 	bl	8000230 <__aeabi_dsub>
 800a128:	1cab      	adds	r3, r5, #2
 800a12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a12e:	2b02      	cmp	r3, #2
 800a130:	4682      	mov	sl, r0
 800a132:	468b      	mov	fp, r1
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800a13c:	dc53      	bgt.n	800a1e6 <__ieee754_log+0x14e>
 800a13e:	2300      	movs	r3, #0
 800a140:	f7f6 fc96 	bl	8000a70 <__aeabi_dcmpeq>
 800a144:	b1d0      	cbz	r0, 800a17c <__ieee754_log+0xe4>
 800a146:	2c00      	cmp	r4, #0
 800a148:	f000 8122 	beq.w	800a390 <__ieee754_log+0x2f8>
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7f6 f9bd 	bl	80004cc <__aeabi_i2d>
 800a152:	a391      	add	r3, pc, #580	; (adr r3, 800a398 <__ieee754_log+0x300>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	4606      	mov	r6, r0
 800a15a:	460f      	mov	r7, r1
 800a15c:	f7f6 fa20 	bl	80005a0 <__aeabi_dmul>
 800a160:	a38f      	add	r3, pc, #572	; (adr r3, 800a3a0 <__ieee754_log+0x308>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	f7f6 fa17 	bl	80005a0 <__aeabi_dmul>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	e7b8      	b.n	800a0ee <__ieee754_log+0x56>
 800a17c:	a38a      	add	r3, pc, #552	; (adr r3, 800a3a8 <__ieee754_log+0x310>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	4650      	mov	r0, sl
 800a184:	4659      	mov	r1, fp
 800a186:	f7f6 fa0b 	bl	80005a0 <__aeabi_dmul>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	2000      	movs	r0, #0
 800a190:	4999      	ldr	r1, [pc, #612]	; (800a3f8 <__ieee754_log+0x360>)
 800a192:	f7f6 f84d 	bl	8000230 <__aeabi_dsub>
 800a196:	4652      	mov	r2, sl
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	465b      	mov	r3, fp
 800a19e:	4650      	mov	r0, sl
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 f9fd 	bl	80005a0 <__aeabi_dmul>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 f9f7 	bl	80005a0 <__aeabi_dmul>
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	b914      	cbnz	r4, 800a1be <__ieee754_log+0x126>
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	e0a2      	b.n	800a304 <__ieee754_log+0x26c>
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7f6 f984 	bl	80004cc <__aeabi_i2d>
 800a1c4:	a374      	add	r3, pc, #464	; (adr r3, 800a398 <__ieee754_log+0x300>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	4689      	mov	r9, r1
 800a1ce:	f7f6 f9e7 	bl	80005a0 <__aeabi_dmul>
 800a1d2:	a373      	add	r3, pc, #460	; (adr r3, 800a3a0 <__ieee754_log+0x308>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	4640      	mov	r0, r8
 800a1de:	4649      	mov	r1, r9
 800a1e0:	f7f6 f9de 	bl	80005a0 <__aeabi_dmul>
 800a1e4:	e0a7      	b.n	800a336 <__ieee754_log+0x29e>
 800a1e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1ea:	f7f6 f823 	bl	8000234 <__adddf3>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	4659      	mov	r1, fp
 800a1f6:	f7f6 fafd 	bl	80007f4 <__aeabi_ddiv>
 800a1fa:	e9cd 0100 	strd	r0, r1, [sp]
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7f6 f964 	bl	80004cc <__aeabi_i2d>
 800a204:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a20c:	4610      	mov	r0, r2
 800a20e:	4619      	mov	r1, r3
 800a210:	f7f6 f9c6 	bl	80005a0 <__aeabi_dmul>
 800a214:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a218:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a21c:	4602      	mov	r2, r0
 800a21e:	9305      	str	r3, [sp, #20]
 800a220:	460b      	mov	r3, r1
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	f7f6 f9bb 	bl	80005a0 <__aeabi_dmul>
 800a22a:	a361      	add	r3, pc, #388	; (adr r3, 800a3b0 <__ieee754_log+0x318>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	4680      	mov	r8, r0
 800a232:	4689      	mov	r9, r1
 800a234:	f7f6 f9b4 	bl	80005a0 <__aeabi_dmul>
 800a238:	a35f      	add	r3, pc, #380	; (adr r3, 800a3b8 <__ieee754_log+0x320>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f5 fff9 	bl	8000234 <__adddf3>
 800a242:	4642      	mov	r2, r8
 800a244:	464b      	mov	r3, r9
 800a246:	f7f6 f9ab 	bl	80005a0 <__aeabi_dmul>
 800a24a:	a35d      	add	r3, pc, #372	; (adr r3, 800a3c0 <__ieee754_log+0x328>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f5 fff0 	bl	8000234 <__adddf3>
 800a254:	4642      	mov	r2, r8
 800a256:	464b      	mov	r3, r9
 800a258:	f7f6 f9a2 	bl	80005a0 <__aeabi_dmul>
 800a25c:	a35a      	add	r3, pc, #360	; (adr r3, 800a3c8 <__ieee754_log+0x330>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f5 ffe7 	bl	8000234 <__adddf3>
 800a266:	4632      	mov	r2, r6
 800a268:	463b      	mov	r3, r7
 800a26a:	f7f6 f999 	bl	80005a0 <__aeabi_dmul>
 800a26e:	a358      	add	r3, pc, #352	; (adr r3, 800a3d0 <__ieee754_log+0x338>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	4606      	mov	r6, r0
 800a276:	460f      	mov	r7, r1
 800a278:	4640      	mov	r0, r8
 800a27a:	4649      	mov	r1, r9
 800a27c:	f7f6 f990 	bl	80005a0 <__aeabi_dmul>
 800a280:	a355      	add	r3, pc, #340	; (adr r3, 800a3d8 <__ieee754_log+0x340>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f5 ffd5 	bl	8000234 <__adddf3>
 800a28a:	4642      	mov	r2, r8
 800a28c:	464b      	mov	r3, r9
 800a28e:	f7f6 f987 	bl	80005a0 <__aeabi_dmul>
 800a292:	a353      	add	r3, pc, #332	; (adr r3, 800a3e0 <__ieee754_log+0x348>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f5 ffcc 	bl	8000234 <__adddf3>
 800a29c:	4642      	mov	r2, r8
 800a29e:	464b      	mov	r3, r9
 800a2a0:	f7f6 f97e 	bl	80005a0 <__aeabi_dmul>
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7f5 ffc2 	bl	8000234 <__adddf3>
 800a2b0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a2b4:	9b05      	ldr	r3, [sp, #20]
 800a2b6:	3551      	adds	r5, #81	; 0x51
 800a2b8:	431d      	orrs	r5, r3
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	4680      	mov	r8, r0
 800a2be:	4689      	mov	r9, r1
 800a2c0:	dd48      	ble.n	800a354 <__ieee754_log+0x2bc>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b4c      	ldr	r3, [pc, #304]	; (800a3f8 <__ieee754_log+0x360>)
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	f7f6 f969 	bl	80005a0 <__aeabi_dmul>
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	f7f6 f965 	bl	80005a0 <__aeabi_dmul>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460f      	mov	r7, r1
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f5 ffa7 	bl	8000234 <__adddf3>
 800a2e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ea:	f7f6 f959 	bl	80005a0 <__aeabi_dmul>
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	4689      	mov	r9, r1
 800a2f2:	b964      	cbnz	r4, 800a30e <__ieee754_log+0x276>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ff98 	bl	8000230 <__aeabi_dsub>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4650      	mov	r0, sl
 800a306:	4659      	mov	r1, fp
 800a308:	f7f5 ff92 	bl	8000230 <__aeabi_dsub>
 800a30c:	e6d7      	b.n	800a0be <__ieee754_log+0x26>
 800a30e:	a322      	add	r3, pc, #136	; (adr r3, 800a398 <__ieee754_log+0x300>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a318:	f7f6 f942 	bl	80005a0 <__aeabi_dmul>
 800a31c:	a320      	add	r3, pc, #128	; (adr r3, 800a3a0 <__ieee754_log+0x308>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32a:	f7f6 f939 	bl	80005a0 <__aeabi_dmul>
 800a32e:	4642      	mov	r2, r8
 800a330:	464b      	mov	r3, r9
 800a332:	f7f5 ff7f 	bl	8000234 <__adddf3>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f5 ff77 	bl	8000230 <__aeabi_dsub>
 800a342:	4652      	mov	r2, sl
 800a344:	465b      	mov	r3, fp
 800a346:	f7f5 ff73 	bl	8000230 <__aeabi_dsub>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	e7d9      	b.n	800a308 <__ieee754_log+0x270>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	4650      	mov	r0, sl
 800a35a:	4659      	mov	r1, fp
 800a35c:	f7f5 ff68 	bl	8000230 <__aeabi_dsub>
 800a360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a364:	f7f6 f91c 	bl	80005a0 <__aeabi_dmul>
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	f43f af23 	beq.w	800a1b8 <__ieee754_log+0x120>
 800a372:	a309      	add	r3, pc, #36	; (adr r3, 800a398 <__ieee754_log+0x300>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37c:	f7f6 f910 	bl	80005a0 <__aeabi_dmul>
 800a380:	a307      	add	r3, pc, #28	; (adr r3, 800a3a0 <__ieee754_log+0x308>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	4604      	mov	r4, r0
 800a388:	460d      	mov	r5, r1
 800a38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38e:	e727      	b.n	800a1e0 <__ieee754_log+0x148>
 800a390:	2000      	movs	r0, #0
 800a392:	2100      	movs	r1, #0
 800a394:	e693      	b.n	800a0be <__ieee754_log+0x26>
 800a396:	bf00      	nop
 800a398:	fee00000 	.word	0xfee00000
 800a39c:	3fe62e42 	.word	0x3fe62e42
 800a3a0:	35793c76 	.word	0x35793c76
 800a3a4:	3dea39ef 	.word	0x3dea39ef
 800a3a8:	55555555 	.word	0x55555555
 800a3ac:	3fd55555 	.word	0x3fd55555
 800a3b0:	df3e5244 	.word	0xdf3e5244
 800a3b4:	3fc2f112 	.word	0x3fc2f112
 800a3b8:	96cb03de 	.word	0x96cb03de
 800a3bc:	3fc74664 	.word	0x3fc74664
 800a3c0:	94229359 	.word	0x94229359
 800a3c4:	3fd24924 	.word	0x3fd24924
 800a3c8:	55555593 	.word	0x55555593
 800a3cc:	3fe55555 	.word	0x3fe55555
 800a3d0:	d078c69f 	.word	0xd078c69f
 800a3d4:	3fc39a09 	.word	0x3fc39a09
 800a3d8:	1d8e78af 	.word	0x1d8e78af
 800a3dc:	3fcc71c5 	.word	0x3fcc71c5
 800a3e0:	9997fa04 	.word	0x9997fa04
 800a3e4:	3fd99999 	.word	0x3fd99999
 800a3e8:	c3500000 	.word	0xc3500000
 800a3ec:	43500000 	.word	0x43500000
 800a3f0:	7fefffff 	.word	0x7fefffff
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	3fe00000 	.word	0x3fe00000

0800a3fc <_init>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr

0800a408 <_fini>:
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	bf00      	nop
 800a40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40e:	bc08      	pop	{r3}
 800a410:	469e      	mov	lr, r3
 800a412:	4770      	bx	lr
