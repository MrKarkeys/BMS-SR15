
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b49c  0800b49c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4a4  0800b4a4  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a8  0800b4a8  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  2000021c  0800b6c8  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a8  0800b6c8  000218a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017306  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004829  00000000  00000000  0003758e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001163  00000000  00000000  0003d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023faa  00000000  00000000  0003e613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e866  00000000  00000000  000625bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf22c  00000000  00000000  00080e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066e0  00000000  00000000  00140050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00146730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000021c 	.word	0x2000021c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800afbc 	.word	0x0800afbc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000220 	.word	0x20000220
 8000224:	0800afbc 	.word	0x0800afbc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	; 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1e:	2afd      	cmp	r2, #253	; 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	; 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	; 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	; 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <__aeabi_uldivmod>:
 80010ac:	b953      	cbnz	r3, 80010c4 <__aeabi_uldivmod+0x18>
 80010ae:	b94a      	cbnz	r2, 80010c4 <__aeabi_uldivmod+0x18>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	bf08      	it	eq
 80010b4:	2800      	cmpeq	r0, #0
 80010b6:	bf1c      	itt	ne
 80010b8:	f04f 31ff 	movne.w	r1, #4294967295
 80010bc:	f04f 30ff 	movne.w	r0, #4294967295
 80010c0:	f000 b972 	b.w	80013a8 <__aeabi_idiv0>
 80010c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010cc:	f000 f806 	bl	80010dc <__udivmoddi4>
 80010d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010d8:	b004      	add	sp, #16
 80010da:	4770      	bx	lr

080010dc <__udivmoddi4>:
 80010dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e0:	9e08      	ldr	r6, [sp, #32]
 80010e2:	460d      	mov	r5, r1
 80010e4:	4604      	mov	r4, r0
 80010e6:	468e      	mov	lr, r1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d14c      	bne.n	8001186 <__udivmoddi4+0xaa>
 80010ec:	428a      	cmp	r2, r1
 80010ee:	4694      	mov	ip, r2
 80010f0:	d967      	bls.n	80011c2 <__udivmoddi4+0xe6>
 80010f2:	fab2 f382 	clz	r3, r2
 80010f6:	b153      	cbz	r3, 800110e <__udivmoddi4+0x32>
 80010f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010fc:	f1c3 0220 	rsb	r2, r3, #32
 8001100:	fa01 fe03 	lsl.w	lr, r1, r3
 8001104:	fa20 f202 	lsr.w	r2, r0, r2
 8001108:	ea42 0e0e 	orr.w	lr, r2, lr
 800110c:	409c      	lsls	r4, r3
 800110e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001112:	fbbe f1f7 	udiv	r1, lr, r7
 8001116:	fa1f f58c 	uxth.w	r5, ip
 800111a:	fb07 ee11 	mls	lr, r7, r1, lr
 800111e:	fb01 f005 	mul.w	r0, r1, r5
 8001122:	0c22      	lsrs	r2, r4, #16
 8001124:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001128:	4290      	cmp	r0, r2
 800112a:	d90a      	bls.n	8001142 <__udivmoddi4+0x66>
 800112c:	eb1c 0202 	adds.w	r2, ip, r2
 8001130:	f101 3eff 	add.w	lr, r1, #4294967295
 8001134:	f080 8119 	bcs.w	800136a <__udivmoddi4+0x28e>
 8001138:	4290      	cmp	r0, r2
 800113a:	f240 8116 	bls.w	800136a <__udivmoddi4+0x28e>
 800113e:	3902      	subs	r1, #2
 8001140:	4462      	add	r2, ip
 8001142:	1a12      	subs	r2, r2, r0
 8001144:	fbb2 f0f7 	udiv	r0, r2, r7
 8001148:	fb07 2210 	mls	r2, r7, r0, r2
 800114c:	fb00 f505 	mul.w	r5, r0, r5
 8001150:	b2a4      	uxth	r4, r4
 8001152:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001156:	42a5      	cmp	r5, r4
 8001158:	d90a      	bls.n	8001170 <__udivmoddi4+0x94>
 800115a:	eb1c 0404 	adds.w	r4, ip, r4
 800115e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001162:	f080 8104 	bcs.w	800136e <__udivmoddi4+0x292>
 8001166:	42a5      	cmp	r5, r4
 8001168:	f240 8101 	bls.w	800136e <__udivmoddi4+0x292>
 800116c:	4464      	add	r4, ip
 800116e:	3802      	subs	r0, #2
 8001170:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001174:	2100      	movs	r1, #0
 8001176:	1b64      	subs	r4, r4, r5
 8001178:	b11e      	cbz	r6, 8001182 <__udivmoddi4+0xa6>
 800117a:	40dc      	lsrs	r4, r3
 800117c:	2300      	movs	r3, #0
 800117e:	e9c6 4300 	strd	r4, r3, [r6]
 8001182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001186:	428b      	cmp	r3, r1
 8001188:	d908      	bls.n	800119c <__udivmoddi4+0xc0>
 800118a:	2e00      	cmp	r6, #0
 800118c:	f000 80ea 	beq.w	8001364 <__udivmoddi4+0x288>
 8001190:	2100      	movs	r1, #0
 8001192:	e9c6 0500 	strd	r0, r5, [r6]
 8001196:	4608      	mov	r0, r1
 8001198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119c:	fab3 f183 	clz	r1, r3
 80011a0:	2900      	cmp	r1, #0
 80011a2:	d148      	bne.n	8001236 <__udivmoddi4+0x15a>
 80011a4:	42ab      	cmp	r3, r5
 80011a6:	d302      	bcc.n	80011ae <__udivmoddi4+0xd2>
 80011a8:	4282      	cmp	r2, r0
 80011aa:	f200 80f8 	bhi.w	800139e <__udivmoddi4+0x2c2>
 80011ae:	1a84      	subs	r4, r0, r2
 80011b0:	eb65 0203 	sbc.w	r2, r5, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	4696      	mov	lr, r2
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d0e2      	beq.n	8001182 <__udivmoddi4+0xa6>
 80011bc:	e9c6 4e00 	strd	r4, lr, [r6]
 80011c0:	e7df      	b.n	8001182 <__udivmoddi4+0xa6>
 80011c2:	b902      	cbnz	r2, 80011c6 <__udivmoddi4+0xea>
 80011c4:	deff      	udf	#255	; 0xff
 80011c6:	fab2 f382 	clz	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 808e 	bne.w	80012ec <__udivmoddi4+0x210>
 80011d0:	1a88      	subs	r0, r1, r2
 80011d2:	2101      	movs	r1, #1
 80011d4:	0c17      	lsrs	r7, r2, #16
 80011d6:	fa1f fe82 	uxth.w	lr, r2
 80011da:	fbb0 f5f7 	udiv	r5, r0, r7
 80011de:	fb07 0015 	mls	r0, r7, r5, r0
 80011e2:	0c22      	lsrs	r2, r4, #16
 80011e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011e8:	fb0e f005 	mul.w	r0, lr, r5
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d908      	bls.n	8001202 <__udivmoddi4+0x126>
 80011f0:	eb1c 0202 	adds.w	r2, ip, r2
 80011f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011f8:	d202      	bcs.n	8001200 <__udivmoddi4+0x124>
 80011fa:	4290      	cmp	r0, r2
 80011fc:	f200 80cc 	bhi.w	8001398 <__udivmoddi4+0x2bc>
 8001200:	4645      	mov	r5, r8
 8001202:	1a12      	subs	r2, r2, r0
 8001204:	fbb2 f0f7 	udiv	r0, r2, r7
 8001208:	fb07 2210 	mls	r2, r7, r0, r2
 800120c:	fb0e fe00 	mul.w	lr, lr, r0
 8001210:	b2a4      	uxth	r4, r4
 8001212:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001216:	45a6      	cmp	lr, r4
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x150>
 800121a:	eb1c 0404 	adds.w	r4, ip, r4
 800121e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001222:	d202      	bcs.n	800122a <__udivmoddi4+0x14e>
 8001224:	45a6      	cmp	lr, r4
 8001226:	f200 80b4 	bhi.w	8001392 <__udivmoddi4+0x2b6>
 800122a:	4610      	mov	r0, r2
 800122c:	eba4 040e 	sub.w	r4, r4, lr
 8001230:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001234:	e7a0      	b.n	8001178 <__udivmoddi4+0x9c>
 8001236:	f1c1 0720 	rsb	r7, r1, #32
 800123a:	408b      	lsls	r3, r1
 800123c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001240:	ea4c 0c03 	orr.w	ip, ip, r3
 8001244:	fa25 fa07 	lsr.w	sl, r5, r7
 8001248:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800124c:	fbba f8f9 	udiv	r8, sl, r9
 8001250:	408d      	lsls	r5, r1
 8001252:	fa20 f307 	lsr.w	r3, r0, r7
 8001256:	fb09 aa18 	mls	sl, r9, r8, sl
 800125a:	fa1f fe8c 	uxth.w	lr, ip
 800125e:	432b      	orrs	r3, r5
 8001260:	fa00 f501 	lsl.w	r5, r0, r1
 8001264:	fb08 f00e 	mul.w	r0, r8, lr
 8001268:	0c1c      	lsrs	r4, r3, #16
 800126a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800126e:	42a0      	cmp	r0, r4
 8001270:	fa02 f201 	lsl.w	r2, r2, r1
 8001274:	d90b      	bls.n	800128e <__udivmoddi4+0x1b2>
 8001276:	eb1c 0404 	adds.w	r4, ip, r4
 800127a:	f108 3aff 	add.w	sl, r8, #4294967295
 800127e:	f080 8086 	bcs.w	800138e <__udivmoddi4+0x2b2>
 8001282:	42a0      	cmp	r0, r4
 8001284:	f240 8083 	bls.w	800138e <__udivmoddi4+0x2b2>
 8001288:	f1a8 0802 	sub.w	r8, r8, #2
 800128c:	4464      	add	r4, ip
 800128e:	1a24      	subs	r4, r4, r0
 8001290:	b298      	uxth	r0, r3
 8001292:	fbb4 f3f9 	udiv	r3, r4, r9
 8001296:	fb09 4413 	mls	r4, r9, r3, r4
 800129a:	fb03 fe0e 	mul.w	lr, r3, lr
 800129e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012a2:	45a6      	cmp	lr, r4
 80012a4:	d908      	bls.n	80012b8 <__udivmoddi4+0x1dc>
 80012a6:	eb1c 0404 	adds.w	r4, ip, r4
 80012aa:	f103 30ff 	add.w	r0, r3, #4294967295
 80012ae:	d26a      	bcs.n	8001386 <__udivmoddi4+0x2aa>
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d968      	bls.n	8001386 <__udivmoddi4+0x2aa>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4464      	add	r4, ip
 80012b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012bc:	fba0 9302 	umull	r9, r3, r0, r2
 80012c0:	eba4 040e 	sub.w	r4, r4, lr
 80012c4:	429c      	cmp	r4, r3
 80012c6:	46c8      	mov	r8, r9
 80012c8:	469e      	mov	lr, r3
 80012ca:	d354      	bcc.n	8001376 <__udivmoddi4+0x29a>
 80012cc:	d051      	beq.n	8001372 <__udivmoddi4+0x296>
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d067      	beq.n	80013a2 <__udivmoddi4+0x2c6>
 80012d2:	ebb5 0308 	subs.w	r3, r5, r8
 80012d6:	eb64 040e 	sbc.w	r4, r4, lr
 80012da:	40cb      	lsrs	r3, r1
 80012dc:	fa04 f707 	lsl.w	r7, r4, r7
 80012e0:	431f      	orrs	r7, r3
 80012e2:	40cc      	lsrs	r4, r1
 80012e4:	e9c6 7400 	strd	r7, r4, [r6]
 80012e8:	2100      	movs	r1, #0
 80012ea:	e74a      	b.n	8001182 <__udivmoddi4+0xa6>
 80012ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80012f0:	f1c3 0020 	rsb	r0, r3, #32
 80012f4:	40c1      	lsrs	r1, r0
 80012f6:	409d      	lsls	r5, r3
 80012f8:	fa24 f000 	lsr.w	r0, r4, r0
 80012fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001300:	4328      	orrs	r0, r5
 8001302:	fbb1 f5f7 	udiv	r5, r1, r7
 8001306:	fb07 1115 	mls	r1, r7, r5, r1
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	0c02      	lsrs	r2, r0, #16
 8001310:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001314:	fb05 f10e 	mul.w	r1, r5, lr
 8001318:	4291      	cmp	r1, r2
 800131a:	fa04 f403 	lsl.w	r4, r4, r3
 800131e:	d908      	bls.n	8001332 <__udivmoddi4+0x256>
 8001320:	eb1c 0202 	adds.w	r2, ip, r2
 8001324:	f105 38ff 	add.w	r8, r5, #4294967295
 8001328:	d22f      	bcs.n	800138a <__udivmoddi4+0x2ae>
 800132a:	4291      	cmp	r1, r2
 800132c:	d92d      	bls.n	800138a <__udivmoddi4+0x2ae>
 800132e:	3d02      	subs	r5, #2
 8001330:	4462      	add	r2, ip
 8001332:	1a52      	subs	r2, r2, r1
 8001334:	fbb2 f1f7 	udiv	r1, r2, r7
 8001338:	fb07 2211 	mls	r2, r7, r1, r2
 800133c:	b280      	uxth	r0, r0
 800133e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001342:	fb01 f20e 	mul.w	r2, r1, lr
 8001346:	4282      	cmp	r2, r0
 8001348:	d908      	bls.n	800135c <__udivmoddi4+0x280>
 800134a:	eb1c 0000 	adds.w	r0, ip, r0
 800134e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001352:	d216      	bcs.n	8001382 <__udivmoddi4+0x2a6>
 8001354:	4282      	cmp	r2, r0
 8001356:	d914      	bls.n	8001382 <__udivmoddi4+0x2a6>
 8001358:	3902      	subs	r1, #2
 800135a:	4460      	add	r0, ip
 800135c:	1a80      	subs	r0, r0, r2
 800135e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001362:	e73a      	b.n	80011da <__udivmoddi4+0xfe>
 8001364:	4631      	mov	r1, r6
 8001366:	4630      	mov	r0, r6
 8001368:	e70b      	b.n	8001182 <__udivmoddi4+0xa6>
 800136a:	4671      	mov	r1, lr
 800136c:	e6e9      	b.n	8001142 <__udivmoddi4+0x66>
 800136e:	4610      	mov	r0, r2
 8001370:	e6fe      	b.n	8001170 <__udivmoddi4+0x94>
 8001372:	454d      	cmp	r5, r9
 8001374:	d2ab      	bcs.n	80012ce <__udivmoddi4+0x1f2>
 8001376:	ebb9 0802 	subs.w	r8, r9, r2
 800137a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800137e:	3801      	subs	r0, #1
 8001380:	e7a5      	b.n	80012ce <__udivmoddi4+0x1f2>
 8001382:	4641      	mov	r1, r8
 8001384:	e7ea      	b.n	800135c <__udivmoddi4+0x280>
 8001386:	4603      	mov	r3, r0
 8001388:	e796      	b.n	80012b8 <__udivmoddi4+0x1dc>
 800138a:	4645      	mov	r5, r8
 800138c:	e7d1      	b.n	8001332 <__udivmoddi4+0x256>
 800138e:	46d0      	mov	r8, sl
 8001390:	e77d      	b.n	800128e <__udivmoddi4+0x1b2>
 8001392:	4464      	add	r4, ip
 8001394:	3802      	subs	r0, #2
 8001396:	e749      	b.n	800122c <__udivmoddi4+0x150>
 8001398:	3d02      	subs	r5, #2
 800139a:	4462      	add	r2, ip
 800139c:	e731      	b.n	8001202 <__udivmoddi4+0x126>
 800139e:	4608      	mov	r0, r1
 80013a0:	e70a      	b.n	80011b8 <__udivmoddi4+0xdc>
 80013a2:	4631      	mov	r1, r6
 80013a4:	e6ed      	b.n	8001182 <__udivmoddi4+0xa6>
 80013a6:	bf00      	nop

080013a8 <__aeabi_idiv0>:
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <set_num_devices>:
static uint8_t num_devices;						// Keep visibility within this file
static uint8_t series_groups;					// Number of series groups

/* Set number of LTC6813/slave devices */
void set_num_devices(uint8_t num)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	if (num)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <set_num_devices+0x16>
		num_devices = num; // Non-zero
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <set_num_devices+0x20>)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	7013      	strb	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000238 	.word	0x20000238

080013d0 <get_num_devices>:

/* Get number of LTC6813/slave devices */
uint8_t get_num_devices(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return num_devices;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <get_num_devices+0x10>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000238 	.word	0x20000238

080013e4 <set_series_groups>:

/* Set number of series groups per LTC6813/slave */
void set_series_groups(uint8_t num)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <set_series_groups+0x1c>
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d802      	bhi.n	8001400 <set_series_groups+0x1c>
		series_groups = num; // Non-zero and 18 or less
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <set_series_groups+0x28>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	7013      	strb	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000239 	.word	0x20000239

08001410 <get_series_groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t get_series_groups(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	return series_groups;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <get_series_groups+0x10>)
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000239 	.word	0x20000239

08001424 <wakeup_idle>:

/* Wake LTC up from IDLE state into READY state */
void wakeup_idle(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800142a:	23ff      	movs	r3, #255	; 0xff
 800142c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < get_num_devices(); i++)
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e00c      	b.n	800144e <wakeup_idle+0x2a>
	{
		LTC_nCS_Low();							   // Pull CS low
 8001434:	f001 fd9e 	bl	8002f74 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 8001438:	1cf9      	adds	r1, r7, #3
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2201      	movs	r2, #1
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <wakeup_idle+0x44>)
 8001440:	f004 fe16 	bl	8006070 <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 8001444:	f001 fd8a 	bl	8002f5c <LTC_nCS_High>
	for (int i = 0; i < get_num_devices(); i++)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	f7ff ffbf 	bl	80013d0 <get_num_devices>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4293      	cmp	r3, r2
 800145a:	dbeb      	blt.n	8001434 <wakeup_idle+0x10>
	}
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002cc 	.word	0x200002cc

0800146c <wakeup_sleep>:

// wake up sleep
void wakeup_sleep(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

	for (int i = 0; i < get_num_devices(); i++)
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e00e      	b.n	8001496 <wakeup_sleep+0x2a>
	{
		LTC_nCS_Low();
 8001478:	f001 fd7c 	bl	8002f74 <LTC_nCS_Low>
		HAL_Delay(300);
 800147c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001480:	f001 ff00 	bl	8003284 <HAL_Delay>
		LTC_nCS_High();
 8001484:	f001 fd6a 	bl	8002f5c <LTC_nCS_High>
		HAL_Delay(300);
 8001488:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800148c:	f001 fefa 	bl	8003284 <HAL_Delay>
	for (int i = 0; i < get_num_devices(); i++)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	f7ff ff9b 	bl	80013d0 <get_num_devices>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	dbe9      	blt.n	8001478 <wakeup_sleep+0xc>
	}
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <read_cell_volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef read_cell_volt(uint16_t *read_voltages)
{
 80014b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014b4:	b089      	sub	sp, #36	; 0x24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	466b      	mov	r3, sp
 80014bc:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = get_num_devices() * REG_LEN;
 80014c2:	f7ff ff85 	bl	80013d0 <get_num_devices>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	2308      	movs	r3, #8
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80014d2:	7f3b      	ldrb	r3, [r7, #28]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	7f3b      	ldrb	r3, [r7, #28]
 80014da:	2200      	movs	r2, #0
 80014dc:	4698      	mov	r8, r3
 80014de:	4691      	mov	r9, r2
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f4:	7f3b      	ldrb	r3, [r7, #28]
 80014f6:	2200      	movs	r2, #0
 80014f8:	461c      	mov	r4, r3
 80014fa:	4615      	mov	r5, r2
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	00eb      	lsls	r3, r5, #3
 8001506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150a:	00e2      	lsls	r2, r4, #3
 800150c:	7f3b      	ldrb	r3, [r7, #28]
 800150e:	3307      	adds	r3, #7
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	ebad 0d03 	sub.w	sp, sp, r3
 8001518:	466b      	mov	r3, sp
 800151a:	3300      	adds	r3, #0
 800151c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (get_series_groups() / LTC_SERIES_GROUPS_PER_RDCV);
 800151e:	2300      	movs	r3, #0
 8001520:	77bb      	strb	r3, [r7, #30]
 8001522:	e07e      	b.n	8001622 <read_cell_volt+0x172>
		 i++)
	{
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001524:	7fbb      	ldrb	r3, [r7, #30]
 8001526:	4a48      	ldr	r2, [pc, #288]	; (8001648 <read_cell_volt+0x198>)
 8001528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001534:	7fbb      	ldrb	r3, [r7, #30]
 8001536:	4a44      	ldr	r2, [pc, #272]	; (8001648 <read_cell_volt+0x198>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	2002      	movs	r0, #2
 8001548:	f000 fbf2 	bl	8001d30 <ltc_pec15_calc>
 800154c:	4603      	mov	r3, r0
 800154e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001550:	8a7b      	ldrh	r3, [r7, #18]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800155a:	8a7b      	ldrh	r3, [r7, #18]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8001560:	f7ff ff60 	bl	8001424 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8001564:	f001 fd06 	bl	8002f74 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001568:	f107 0108 	add.w	r1, r7, #8
 800156c:	2364      	movs	r3, #100	; 0x64
 800156e:	2204      	movs	r2, #4
 8001570:	4836      	ldr	r0, [pc, #216]	; (800164c <read_cell_volt+0x19c>)
 8001572:	f004 fd7d 	bl	8006070 <HAL_SPI_Transmit>
 8001576:	4603      	mov	r3, r0
 8001578:	747b      	strb	r3, [r7, #17]
		if (hal_ret)
 800157a:	7c7b      	ldrb	r3, [r7, #17]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <read_cell_volt+0xe8>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001580:	7c7b      	ldrb	r3, [r7, #17]
 8001582:	2200      	movs	r2, #0
 8001584:	4413      	add	r3, r2
 8001586:	2201      	movs	r2, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	b25a      	sxtb	r2, r3
 800158e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001592:	4313      	orrs	r3, r2
 8001594:	b25b      	sxtb	r3, r3
 8001596:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_voltages_reg,
 8001598:	7f3b      	ldrb	r3, [r7, #28]
 800159a:	b29a      	uxth	r2, r3
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	482a      	ldr	r0, [pc, #168]	; (800164c <read_cell_volt+0x19c>)
 80015a2:	f004 fea8 	bl	80062f6 <HAL_SPI_Receive>
 80015a6:	4603      	mov	r3, r0
 80015a8:	747b      	strb	r3, [r7, #17]
								  ARR_SIZE_REG, 100);
		if (hal_ret)
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <read_cell_volt+0x118>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80015b0:	7c7b      	ldrb	r3, [r7, #17]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	777b      	strb	r3, [r7, #29]
 80015cc:	e01d      	b.n	800160a <read_cell_volt+0x15a>
		{
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80015ce:	7f7b      	ldrb	r3, [r7, #29]
 80015d0:	2208      	movs	r2, #8
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
				&read_voltages[dev_idx * get_series_groups() + i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 80015dc:	7f7c      	ldrb	r4, [r7, #29]
 80015de:	f7ff ff17 	bl	8001410 <get_series_groups>
 80015e2:	4603      	mov	r3, r0
 80015e4:	fb03 f204 	mul.w	r2, r3, r4
 80015e8:	7fbb      	ldrb	r3, [r7, #30]
 80015ea:	2103      	movs	r1, #3
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
				REG_LEN - 2);
 80015f8:	2208      	movs	r2, #8
 80015fa:	3a02      	subs	r2, #2
			memcpy(
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 ff50 	bl	800a4a4 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 8001604:	7f7b      	ldrb	r3, [r7, #29]
 8001606:	3301      	adds	r3, #1
 8001608:	777b      	strb	r3, [r7, #29]
 800160a:	f7ff fee1 	bl	80013d0 <get_num_devices>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	7f7b      	ldrb	r3, [r7, #29]
 8001614:	4293      	cmp	r3, r2
 8001616:	d3da      	bcc.n	80015ce <read_cell_volt+0x11e>
		}

		LTC_nCS_High(); // Pull CS high
 8001618:	f001 fca0 	bl	8002f5c <LTC_nCS_High>
		 i++)
 800161c:	7fbb      	ldrb	r3, [r7, #30]
 800161e:	3301      	adds	r3, #1
 8001620:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (get_series_groups() / LTC_SERIES_GROUPS_PER_RDCV);
 8001622:	f7ff fef5 	bl	8001410 <get_series_groups>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	2303      	movs	r3, #3
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	7fba      	ldrb	r2, [r7, #30]
 8001634:	429a      	cmp	r2, r3
 8001636:	f4ff af75 	bcc.w	8001524 <read_cell_volt+0x74>
	}

	return ret;
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	46b5      	mov	sp, r6
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001648:	0800b02c 	.word	0x0800b02c
 800164c:	200002cc 	.word	0x200002cc

08001650 <ltc6811_wrpwm>:
 * 	write command to all pwm registers. This setup only allows to use 4b'1111 (HIGH) or 4b'0000 (LOW). 
 * @param total_ic		total count of ic (daisy chain)
 * @param pwm			A two dimensional array of the configuration data that will be written
 */
void ltc6811_wrpwm(uint8_t total_ic, uint8_t pwm)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	// NOTE currently chaging this method to only assign a specific PWM to all registers

	// TODO change it back to relying on @param pwm for duty cycle assignment. 

	const uint8_t BYTES_IN_REG = 6;
 8001660:	2306      	movs	r3, #6
 8001662:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3304      	adds	r3, #4
 800166c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t pwm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 800166e:	7cfb      	ldrb	r3, [r7, #19]
 8001670:	4618      	mov	r0, r3
 8001672:	f008 fde3 	bl	800a23c <malloc>
 8001676:	4603      	mov	r3, r0
 8001678:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x00;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x20;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	2220      	movs	r2, #32
 8001686:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	2002      	movs	r0, #2
 800168c:	f000 fb50 	bl	8001d30 <ltc_pec15_calc>
 8001690:	4603      	mov	r3, r0
 8001692:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001694:	897b      	ldrh	r3, [r7, #10]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3302      	adds	r3, #2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3303      	adds	r3, #3
 80016a6:	897a      	ldrh	r2, [r7, #10]
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80016ac:	2304      	movs	r3, #4
 80016ae:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	75bb      	strb	r3, [r7, #22]
 80016b4:	e04f      	b.n	8001756 <ltc6811_wrpwm+0x106>
	{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 80016b6:	2300      	movs	r3, #0
 80016b8:	757b      	strb	r3, [r7, #21]
 80016ba:	e02b      	b.n	8001714 <ltc6811_wrpwm+0xc4>
			// NOTE this is real code: 
			// cmd[cmd_index] = pwm; // adding the pwm data to the array to be sent
			// cmd_index = cmd_index + 1;

			// NOTE use this code to change individual PWM bits that control 4 bits. 
			if (cmd_index % 4 == 0) {
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <ltc6811_wrpwm+0x84>
				cmd[cmd_index] = 1; 
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e01c      	b.n	800170e <ltc6811_wrpwm+0xbe>
			} else if (cmd_index % 4 == 1) {
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <ltc6811_wrpwm+0x9c>
				cmd[cmd_index] = 1; 
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e010      	b.n	800170e <ltc6811_wrpwm+0xbe>
			} else if (cmd_index % 4 == 2) {
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d105      	bne.n	8001704 <ltc6811_wrpwm+0xb4>
				cmd[cmd_index] = 1; 
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4413      	add	r3, r2
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e004      	b.n	800170e <ltc6811_wrpwm+0xbe>
			} else { 
				cmd[cmd_index] = 0; 
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 800170e:	7d7b      	ldrb	r3, [r7, #21]
 8001710:	3301      	adds	r3, #1
 8001712:	757b      	strb	r3, [r7, #21]
 8001714:	7d7a      	ldrb	r2, [r7, #21]
 8001716:	7d3b      	ldrb	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	d3cf      	bcc.n	80016bc <ltc6811_wrpwm+0x6c>
			}

		}

		pwm_pec = (uint16_t)ltc_pec15_calc(BYTES_IN_REG, &pwm); // calculating the PEC for each ICs configuration register data
 800171c:	1dba      	adds	r2, r7, #6
 800171e:	7d3b      	ldrb	r3, [r7, #20]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fb04 	bl	8001d30 <ltc_pec15_calc>
 8001728:	4603      	mov	r3, r0
 800172a:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t)(pwm_pec >> 8);
 800172c:	893b      	ldrh	r3, [r7, #8]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b299      	uxth	r1, r3
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)pwm_pec;
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	3301      	adds	r3, #1
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	893a      	ldrh	r2, [r7, #8]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	3302      	adds	r3, #2
 800174e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001750:	7dbb      	ldrb	r3, [r7, #22]
 8001752:	3b01      	subs	r3, #1
 8001754:	75bb      	strb	r3, [r7, #22]
 8001756:	7dbb      	ldrb	r3, [r7, #22]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ac      	bne.n	80016b6 <ltc6811_wrpwm+0x66>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800175c:	f7ff fe62 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 8001760:	f001 fc08 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, CMD_LEN, 100);
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <ltc6811_wrpwm+0x134>)
 800176e:	f004 fc7f 	bl	8006070 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001772:	f001 fbf3 	bl	8002f5c <LTC_nCS_High>
	free(cmd);
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f008 fd68 	bl	800a24c <free>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002cc 	.word	0x200002cc

08001788 <ltc6811_wrcfg>:

void ltc6811_wrcfg(uint8_t total_ic, //The number of ICs being written to
		uint8_t config[][6] //A two dimensional array of the configuration data that will be written
		) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001794:	2306      	movs	r3, #6
 8001796:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	3304      	adds	r3, #4
 80017a0:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t cfg_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 fd49 	bl	800a23c <malloc>
 80017aa:	4603      	mov	r3, r0
 80017ac:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x00;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3302      	adds	r3, #2
 80017c0:	223d      	movs	r2, #61	; 0x3d
 80017c2:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3303      	adds	r3, #3
 80017c8:	226e      	movs	r2, #110	; 0x6e
 80017ca:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	75fb      	strb	r3, [r7, #23]
	// executes for each ltc6811 in daisy chain, this loops starts with
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) 
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	75bb      	strb	r3, [r7, #22]
 80017d4:	e03f      	b.n	8001856 <ltc6811_wrcfg+0xce>
	{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		// executes for each of the 6 bytes in the CFGR register
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 80017d6:	2300      	movs	r3, #0
 80017d8:	757b      	strb	r3, [r7, #21]
 80017da:	e013      	b.n	8001804 <ltc6811_wrcfg+0x7c>
			// current_byte is the byte counter

			cmd[cmd_index] = config[current_ic - 1][current_byte]; //adding the config data to the array to be sent
 80017dc:	7dba      	ldrb	r2, [r7, #22]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	3b06      	subs	r3, #6
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	18d1      	adds	r1, r2, r3
 80017ec:	7d7a      	ldrb	r2, [r7, #21]
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	4403      	add	r3, r0
 80017f4:	5c8a      	ldrb	r2, [r1, r2]
 80017f6:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	3301      	adds	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)	{
 80017fe:	7d7b      	ldrb	r3, [r7, #21]
 8001800:	3301      	adds	r3, #1
 8001802:	757b      	strb	r3, [r7, #21]
 8001804:	7d7a      	ldrb	r2, [r7, #21]
 8001806:	7d3b      	ldrb	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3e7      	bcc.n	80017dc <ltc6811_wrcfg+0x54>
		}

		cfg_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG, &config[current_ic - 1][0]); // calculating the PEC for each ICs configuration register data
 800180c:	7dba      	ldrb	r2, [r7, #22]
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	3b06      	subs	r3, #6
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	4413      	add	r3, r2
 800181c:	461a      	mov	r2, r3
 800181e:	7d3b      	ldrb	r3, [r7, #20]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fa84 	bl	8001d30 <ltc_pec15_calc>
 8001828:	4603      	mov	r3, r0
 800182a:	817b      	strh	r3, [r7, #10]
		cmd[cmd_index] = (uint8_t) (cfg_pec >> 8);
 800182c:	897b      	ldrh	r3, [r7, #10]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	b299      	uxth	r1, r3
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	b2ca      	uxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) cfg_pec;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	3301      	adds	r3, #1
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	897a      	ldrh	r2, [r7, #10]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	3302      	adds	r3, #2
 800184e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) 
 8001850:	7dbb      	ldrb	r3, [r7, #22]
 8001852:	3b01      	subs	r3, #1
 8001854:	75bb      	strb	r3, [r7, #22]
 8001856:	7dbb      	ldrb	r3, [r7, #22]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1bc      	bne.n	80017d6 <ltc6811_wrcfg+0x4e>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800185c:	f7ff fde2 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 8001860:	f001 fb88 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <ltc6811_wrcfg+0xfc>)
 800186e:	f004 fbff 	bl	8006070 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001872:	f001 fb73 	bl	8002f5c <LTC_nCS_High>
	free(cmd);
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f008 fce8 	bl	800a24c <free>
}
 800187c:	bf00      	nop
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002cc 	.word	0x200002cc

08001888 <ltc_wrcomm>:
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
*/
void ltc_wrcomm(uint8_t total_ic, uint8_t comm[6])
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001894:	2306      	movs	r3, #6
 8001896:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	3304      	adds	r3, #4
 80018a0:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 fcc9 	bl	800a23c <malloc>
 80018aa:	4603      	mov	r3, r0
 80018ac:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2207      	movs	r2, #7
 80018b2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	2221      	movs	r2, #33	; 0x21
 80018ba:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	2002      	movs	r0, #2
 80018c0:	f000 fa36 	bl	8001d30 <ltc_pec15_calc>
 80018c4:	4603      	mov	r3, r0
 80018c6:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3302      	adds	r3, #2
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3303      	adds	r3, #3
 80018da:	897a      	ldrh	r2, [r7, #10]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 80018e0:	2304      	movs	r3, #4
 80018e2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	75bb      	strb	r3, [r7, #22]
 80018e8:	e030      	b.n	800194c <ltc_wrcomm+0xc4>
	{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80018ea:	2300      	movs	r3, #0
 80018ec:	757b      	strb	r3, [r7, #21]
 80018ee:	e00d      	b.n	800190c <ltc_wrcomm+0x84>
			 current_byte++) // executes for each of the 6 bytes in the CFGR register
		{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80018f0:	7d7b      	ldrb	r3, [r7, #21]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	441a      	add	r2, r3
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	440b      	add	r3, r1
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	3301      	adds	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
			 current_byte++) // executes for each of the 6 bytes in the CFGR register
 8001906:	7d7b      	ldrb	r3, [r7, #21]
 8001908:	3301      	adds	r3, #1
 800190a:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 800190c:	7d7a      	ldrb	r2, [r7, #21]
 800190e:	7d3b      	ldrb	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	d3ed      	bcc.n	80018f0 <ltc_wrcomm+0x68>
		}
		comm_pec = (uint16_t)ltc_pec15_calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 8001914:	7d3b      	ldrb	r3, [r7, #20]
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fa09 	bl	8001d30 <ltc_pec15_calc>
 800191e:	4603      	mov	r3, r0
 8001920:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t)(comm_pec >> 8);
 8001922:	893b      	ldrh	r3, [r7, #8]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b299      	uxth	r1, r3
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)comm_pec;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	3301      	adds	r3, #1
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	893a      	ldrh	r2, [r7, #8]
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	3302      	adds	r3, #2
 8001944:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001946:	7dbb      	ldrb	r3, [r7, #22]
 8001948:	3b01      	subs	r3, #1
 800194a:	75bb      	strb	r3, [r7, #22]
 800194c:	7dbb      	ldrb	r3, [r7, #22]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1cb      	bne.n	80018ea <ltc_wrcomm+0x62>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001952:	f7ff fd67 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 8001956:	f001 fb0d 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, CMD_LEN, 100);
 800195a:	7cfb      	ldrb	r3, [r7, #19]
 800195c:	b29a      	uxth	r2, r3
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <ltc_wrcomm+0xf4>)
 8001964:	f004 fb84 	bl	8006070 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001968:	f001 faf8 	bl	8002f5c <LTC_nCS_High>
	free(cmd);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f008 fc6d 	bl	800a24c <free>
}
 8001972:	bf00      	nop
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002cc 	.word	0x200002cc

08001980 <ltc_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc_stcomm(uint8_t len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800198a:	2307      	movs	r3, #7
 800198c:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800198e:	2323      	movs	r3, #35	; 0x23
 8001990:	737b      	strb	r3, [r7, #13]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4619      	mov	r1, r3
 8001998:	2002      	movs	r0, #2
 800199a:	f000 f9c9 	bl	8001d30 <ltc_pec15_calc>
 800199e:	4603      	mov	r3, r0
 80019a0:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 80019a2:	8a7b      	ldrh	r3, [r7, #18]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t)(cmd_pec);
 80019ac:	8a7b      	ldrh	r3, [r7, #18]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80019b2:	f7ff fd37 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 80019b6:	f001 fadd 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 80019ba:	f107 010c 	add.w	r1, r7, #12
 80019be:	2364      	movs	r3, #100	; 0x64
 80019c0:	2204      	movs	r2, #4
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <ltc_stcomm+0x7c>)
 80019c4:	f004 fb54 	bl	8006070 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e008      	b.n	80019e0 <ltc_stcomm+0x60>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t *)0xFF, 1, 100);
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	2201      	movs	r2, #1
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <ltc_stcomm+0x7c>)
 80019d6:	f004 fb4b 	bl	8006070 <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	79fa      	ldrb	r2, [r7, #7]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbef      	blt.n	80019ce <ltc_stcomm+0x4e>
	}
	LTC_nCS_High();
 80019ee:	f001 fab5 	bl	8002f5c <LTC_nCS_High>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002cc 	.word	0x200002cc

08001a00 <read_cell_temps>:

LTC_SPI_StatusTypeDef read_cell_temps(uint16_t *read_auxiliary)
{
 8001a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a04:	b089      	sub	sp, #36	; 0x24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	466b      	mov	r3, sp
 8001a0c:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = get_num_devices() * REG_LEN;
 8001a12:	f7ff fcdd 	bl	80013d0 <get_num_devices>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001a22:	7f3b      	ldrb	r3, [r7, #28]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	7f3b      	ldrb	r3, [r7, #28]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4698      	mov	r8, r3
 8001a2e:	4691      	mov	r9, r2
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a44:	7f3b      	ldrb	r3, [r7, #28]
 8001a46:	2200      	movs	r2, #0
 8001a48:	461c      	mov	r4, r3
 8001a4a:	4615      	mov	r5, r2
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	00eb      	lsls	r3, r5, #3
 8001a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a5a:	00e2      	lsls	r2, r4, #3
 8001a5c:	7f3b      	ldrb	r3, [r7, #28]
 8001a5e:	3307      	adds	r3, #7
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	ebad 0d03 	sub.w	sp, sp, r3
 8001a68:	466b      	mov	r3, sp
 8001a6a:	3300      	adds	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77bb      	strb	r3, [r7, #30]
 8001a72:	e07c      	b.n	8001b6e <read_cell_temps+0x16e>
		 i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++)
	{
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001a74:	7fbb      	ldrb	r3, [r7, #30]
 8001a76:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <read_cell_temps+0x190>)
 8001a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001a84:	7fbb      	ldrb	r3, [r7, #30]
 8001a86:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <read_cell_temps+0x190>)
 8001a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	2002      	movs	r0, #2
 8001a98:	f000 f94a 	bl	8001d30 <ltc_pec15_calc>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001aa0:	8a7b      	ldrh	r3, [r7, #18]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 8001aaa:	8a7b      	ldrh	r3, [r7, #18]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8001ab0:	f7ff fcb8 	bl	8001424 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8001ab4:	f001 fa5e 	bl	8002f74 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001ab8:	f107 0108 	add.w	r1, r7, #8
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <read_cell_temps+0x194>)
 8001ac2:	f004 fad5 	bl	8006070 <HAL_SPI_Transmit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	747b      	strb	r3, [r7, #17]
		if (hal_ret)
 8001aca:	7c7b      	ldrb	r3, [r7, #17]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00b      	beq.n	8001ae8 <read_cell_temps+0xe8>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001ad0:	7c7b      	ldrb	r3, [r7, #17]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_auxiliary_reg,
 8001ae8:	7f3b      	ldrb	r3, [r7, #28]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2364      	movs	r3, #100	; 0x64
 8001aee:	6979      	ldr	r1, [r7, #20]
 8001af0:	4828      	ldr	r0, [pc, #160]	; (8001b94 <read_cell_temps+0x194>)
 8001af2:	f004 fc00 	bl	80062f6 <HAL_SPI_Receive>
 8001af6:	4603      	mov	r3, r0
 8001af8:	747b      	strb	r3, [r7, #17]
								  ARR_SIZE_REG, 100);
		if (hal_ret)
 8001afa:	7c7b      	ldrb	r3, [r7, #17]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <read_cell_temps+0x118>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8001b00:	7c7b      	ldrb	r3, [r7, #17]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	2201      	movs	r2, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	777b      	strb	r3, [r7, #29]
 8001b1c:	e01b      	b.n	8001b56 <read_cell_temps+0x156>
		{
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 8001b1e:	7f7b      	ldrb	r3, [r7, #29]
 8001b20:	2208      	movs	r2, #8
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

			memcpy(
				&read_auxiliary[dev_idx * num_aux_series_groups + i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001b2c:	7f7b      	ldrb	r3, [r7, #29]
 8001b2e:	2206      	movs	r2, #6
 8001b30:	fb03 f202 	mul.w	r2, r3, r2
 8001b34:	7fbb      	ldrb	r3, [r7, #30]
 8001b36:	2103      	movs	r1, #3
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
				REG_LEN - 2);
 8001b44:	2208      	movs	r2, #8
 8001b46:	3a02      	subs	r2, #2
			memcpy(
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 fcaa 	bl	800a4a4 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 8001b50:	7f7b      	ldrb	r3, [r7, #29]
 8001b52:	3301      	adds	r3, #1
 8001b54:	777b      	strb	r3, [r7, #29]
 8001b56:	f7ff fc3b 	bl	80013d0 <get_num_devices>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	7f7b      	ldrb	r3, [r7, #29]
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d3dc      	bcc.n	8001b1e <read_cell_temps+0x11e>
		}

		LTC_nCS_High(); // Pull CS high
 8001b64:	f001 f9fa 	bl	8002f5c <LTC_nCS_High>
		 i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++)
 8001b68:	7fbb      	ldrb	r3, [r7, #30]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	77bb      	strb	r3, [r7, #30]
 8001b6e:	2206      	movs	r2, #6
 8001b70:	2303      	movs	r3, #3
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	7fba      	ldrb	r2, [r7, #30]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f4ff af7a 	bcc.w	8001a74 <read_cell_temps+0x74>
	}

	return ret;
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	46b5      	mov	sp, r6
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3724      	adds	r7, #36	; 0x24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800b034 	.word	0x0800b034
 8001b94:	200002cc 	.word	0x200002cc

08001b98 <ltc_adcv>:
 */
void ltc_adcv(uint8_t MD,  // ADC Mode
			  uint8_t DCP, // Discharge Permit
			  uint8_t CH   // Cell Channels to be measured
)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	105b      	asrs	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	797b      	ldrb	r3, [r7, #5]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	3360      	adds	r3, #96	; 0x60
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	4619      	mov	r1, r3
 8001be2:	2002      	movs	r0, #2
 8001be4:	f000 f8a4 	bl	8001d30 <ltc_pec15_calc>
 8001be8:	4603      	mov	r3, r0
 8001bea:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001bec:	89bb      	ldrh	r3, [r7, #12]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001bf6:	89bb      	ldrh	r3, [r7, #12]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	72fb      	strb	r3, [r7, #11]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001bfc:	f7ff fc12 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 8001c00:	f001 f9b8 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <ltc_adcv+0x88>)
 8001c0e:	f004 fa2f 	bl	8006070 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001c12:	f001 f9a3 	bl	8002f5c <LTC_nCS_High>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002cc 	.word	0x200002cc

08001c24 <ltc_adax>:

void ltc_adax(uint8_t MD, // ADC Mode
			  uint8_t CHG // GPIO Channels to be measured)
)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	105b      	asrs	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	3304      	adds	r3, #4
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	01db      	lsls	r3, r3, #7
 8001c4c:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	4413      	add	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3360      	adds	r3, #96	; 0x60
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f864 	bl	8001d30 <ltc_pec15_calc>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001c6c:	89bb      	ldrh	r3, [r7, #12]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001c7c:	f7ff fbd2 	bl	8001424 <wakeup_idle>
	LTC_nCS_Low();
 8001c80:	f001 f978 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001c84:	f107 0108 	add.w	r1, r7, #8
 8001c88:	2364      	movs	r3, #100	; 0x64
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <ltc_adax+0x7c>)
 8001c8e:	f004 f9ef 	bl	8006070 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001c92:	f001 f963 	bl	8002f5c <LTC_nCS_High>
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200002cc 	.word	0x200002cc

08001ca4 <ltc_polladc>:

int32_t ltc_polladc()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001cba:	2314      	movs	r3, #20
 8001cbc:	717b      	strb	r3, [r7, #5]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f000 f834 	bl	8001d30 <ltc_pec15_calc>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001ccc:	893b      	ldrh	r3, [r7, #8]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8001cd6:	893b      	ldrh	r3, [r7, #8]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	71fb      	strb	r3, [r7, #7]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001cdc:	f7ff fba2 	bl	8001424 <wakeup_idle>

	LTC_nCS_Low();
 8001ce0:	f001 f948 	bl	8002f74 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001ce4:	1d39      	adds	r1, r7, #4
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	2204      	movs	r2, #4
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <ltc_polladc+0x84>)
 8001cec:	f004 f9c0 	bl	8006070 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0))
 8001cf0:	e00c      	b.n	8001d0c <ltc_polladc+0x68>
	{
		current_time = HAL_GetTick();
 8001cf2:	f001 fabd 	bl	8003270 <HAL_GetTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0)
 8001cfa:	7abb      	ldrb	r3, [r7, #10]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <ltc_polladc+0x62>
		{
			finished = 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	e002      	b.n	8001d0c <ltc_polladc+0x68>
		}
		else
		{
			counter = counter + 10;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	330a      	adds	r3, #10
 8001d0a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <ltc_polladc+0x88>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d802      	bhi.n	8001d1a <ltc_polladc+0x76>
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0eb      	beq.n	8001cf2 <ltc_polladc+0x4e>
		}
	}
	LTC_nCS_High();
 8001d1a:	f001 f91f 	bl	8002f5c <LTC_nCS_High>
	return (counter);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002cc 	.word	0x200002cc
 8001d2c:	00030d3f 	.word	0x00030d3f

08001d30 <ltc_pec15_calc>:
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
*/
uint16_t ltc_pec15_calc(uint8_t len, uint8_t *data)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001d40:	2300      	movs	r3, #0
 8001d42:	737b      	strb	r3, [r7, #13]
 8001d44:	e018      	b.n	8001d78 <ltc_pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	09db      	lsrs	r3, r3, #7
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4053      	eors	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	897b      	ldrh	r3, [r7, #10]
 8001d66:	490a      	ldr	r1, [pc, #40]	; (8001d90 <ltc_pec15_calc+0x60>)
 8001d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4053      	eors	r3, r2
 8001d70:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001d72:	7b7b      	ldrb	r3, [r7, #13]
 8001d74:	3301      	adds	r3, #1
 8001d76:	737b      	strb	r3, [r7, #13]
 8001d78:	7b7a      	ldrb	r2, [r7, #13]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3e2      	bcc.n	8001d46 <ltc_pec15_calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	b29b      	uxth	r3, r3
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	0800b038 	.word	0x0800b038

08001d94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001da6:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <MX_ADC1_Init+0x78>)
 8001da8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001dbe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001dd2:	f001 fa7b 	bl	80032cc <HAL_ADC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ddc:	f000 fdd4 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001de0:	230e      	movs	r3, #14
 8001de2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_ADC1_Init+0x74>)
 8001df2:	f001 fb43 	bl	800347c <HAL_ADC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001dfc:	f000 fdc4 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000023c 	.word	0x2000023c
 8001e0c:	40012400 	.word	0x40012400

08001e10 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <MX_ADC2_Init+0x78>)
 8001e24:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e4e:	f001 fa3d 	bl	80032cc <HAL_ADC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001e58:	f000 fd96 	bl	8002988 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_ADC2_Init+0x74>)
 8001e6e:	f001 fb05 	bl	800347c <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8001e78:	f000 fd86 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000026c 	.word	0x2000026c
 8001e88:	40012800 	.word	0x40012800

08001e8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a28      	ldr	r2, [pc, #160]	; (8001f48 <HAL_ADC_MspInit+0xbc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d122      	bne.n	8001ef2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001eca:	f043 0310 	orr.w	r3, r3, #16
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001edc:	2330      	movs	r3, #48	; 0x30
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <HAL_ADC_MspInit+0xc4>)
 8001eec:	f001 ff40 	bl	8003d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001ef0:	e026      	b.n	8001f40 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_ADC_MspInit+0xc8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d121      	bne.n	8001f40 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_ADC_MspInit+0xc0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f2c:	230f      	movs	r3, #15
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_ADC_MspInit+0xc4>)
 8001f3c:	f001 ff18 	bl	8003d70 <HAL_GPIO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40012400 	.word	0x40012400
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40012800 	.word	0x40012800

08001f58 <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <MX_CAN2_Init+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f64:	2209      	movs	r2, #9
 8001f66:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f7e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f82:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_CAN2_Init+0x64>)
 8001faa:	f001 fba0 	bl	80036ee <HAL_CAN_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_CAN2_Init+0x60>
		Error_Handler();
 8001fb4:	f000 fce8 	bl	8002988 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000029c 	.word	0x2000029c
 8001fc0:	40006800 	.word	0x40006800

08001fc4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <HAL_CAN_MspInit+0xa4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d13d      	bne.n	8002060 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8001fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a1a      	ldr	r2, [pc, #104]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8002002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_CAN_MspInit+0xa8>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_CAN_MspInit+0xa8>)
 800201a:	f043 0308 	orr.w	r3, r3, #8
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_CAN_MspInit+0xa8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	4619      	mov	r1, r3
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <HAL_CAN_MspInit+0xac>)
 8002042:	f001 fe95 	bl	8003d70 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_CAN_MspInit+0xac>)
 800205c:	f001 fe88 	bl	8003d70 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40006800 	.word	0x40006800
 800206c:	40021000 	.word	0x40021000
 8002070:	40010c00 	.word	0x40010c00

08002074 <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <CAN_Start+0x10>)
 800207a:	f001 fc33 	bl	80038e4 <HAL_CAN_Start>
 800207e:	4603      	mov	r3, r0
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000029c 	.word	0x2000029c

08002088 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800208c:	2102      	movs	r1, #2
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <CAN_Activate+0x14>)
 8002090:	f001 fd3b 	bl	8003b0a <HAL_CAN_ActivateNotification>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000029c 	.word	0x2000029c

080020a0 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 021c 	add.w	r2, r3, #28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3318      	adds	r3, #24
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <CAN_Send+0x24>)
 80020b6:	f001 fc59 	bl	800396c <HAL_CAN_AddTxMessage>
 80020ba:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000029c 	.word	0x2000029c

080020c8 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	CAN_Start();
 80020d0:	f7ff ffd0 	bl	8002074 <CAN_Start>
	CAN_Activate();
 80020d4:	f7ff ffd8 	bl	8002088 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2208      	movs	r2, #8
 80020ee:	611a      	str	r2, [r3, #16]
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <setCANId>:

void setCANId(struct CANMessage *ptr, uint32_t id) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 800211c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8002120:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8002122:	8afb      	ldrh	r3, [r7, #22]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffe6 	bl	80020f8 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	e074      	b.n	800221c <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d156      	bne.n	80021ea <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	3301      	adds	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	b29b      	uxth	r3, r3
 8002188:	b2da      	uxtb	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	3301      	adds	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	3301      	adds	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dd0c      	ble.n	800220a <CAN_Send_Voltage+0xf8>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 80021fa:	8afb      	ldrh	r3, [r7, #22]
 80021fc:	3301      	adds	r3, #1
 80021fe:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 8002200:	8afb      	ldrh	r3, [r7, #22]
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff77 	bl	80020f8 <setCANId>
		}
		HAL_Delay(10);
 800220a:	200a      	movs	r0, #10
 800220c:	f001 f83a 	bl	8003284 <HAL_Delay>
		CAN_Send(ptr);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff45 	bl	80020a0 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b0b      	cmp	r3, #11
 8002220:	dd87      	ble.n	8002132 <CAN_Send_Voltage+0x20>
	}

}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 8002236:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 800223a:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff59 	bl	80020f8 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	737b      	strb	r3, [r7, #13]
 800224a:	e076      	b.n	800233a <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 800224c:	7b7b      	ldrb	r3, [r7, #13]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d156      	bne.n	8002306 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8002258:	7b7b      	ldrb	r3, [r7, #13]
 800225a:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 800225c:	7b3b      	ldrb	r3, [r7, #12]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	4413      	add	r3, r2
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4413      	add	r3, r2
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2da      	uxtb	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002280:	7b3b      	ldrb	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8002286:	7b3b      	ldrb	r3, [r7, #12]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 80022aa:	7b3b      	ldrb	r3, [r7, #12]
 80022ac:	3301      	adds	r3, #1
 80022ae:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 80022c2:	7b3b      	ldrb	r3, [r7, #12]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	4413      	add	r3, r2
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 80022de:	7b3b      	ldrb	r3, [r7, #12]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 80022f0:	7b3b      	ldrb	r3, [r7, #12]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8002306:	7b7b      	ldrb	r3, [r7, #13]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <CAN_Send_Temperature+0xfc>
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	3301      	adds	r3, #1
 800231c:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fee8 	bl	80020f8 <setCANId>
		}
		HAL_Delay(10);
 8002328:	200a      	movs	r0, #10
 800232a:	f000 ffab 	bl	8003284 <HAL_Delay>
		CAN_Send(ptr);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff feb6 	bl	80020a0 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 8002334:	7b7b      	ldrb	r3, [r7, #13]
 8002336:	3301      	adds	r3, #1
 8002338:	737b      	strb	r3, [r7, #13]
 800233a:	7b7b      	ldrb	r3, [r7, #13]
 800233c:	2b0b      	cmp	r3, #11
 800233e:	d985      	bls.n	800224c <CAN_Send_Temperature+0x20>
	}

}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr,
		struct batteryModuleVoltage *batt) {
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002354:	f240 6322 	movw	r3, #1570	; 0x622
 8002358:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff feca 	bl	80020f8 <setCANId>

	ptr->data[0] = batt->cell_volt_highest;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	895b      	ldrh	r3, [r3, #10]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	895b      	ldrh	r3, [r3, #10]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29b      	uxth	r3, r3
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	891b      	ldrh	r3, [r3, #8]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	891b      	ldrh	r3, [r3, #8]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	89db      	ldrh	r3, [r3, #14]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	89db      	ldrh	r3, [r3, #14]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	899b      	ldrh	r3, [r3, #12]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	899b      	ldrh	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 80023cc:	200a      	movs	r0, #10
 80023ce:	f000 ff59 	bl	8003284 <HAL_Delay>
	CAN_Send(ptr);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fe64 	bl	80020a0 <CAN_Send>
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, uint8_t* faults, uint8_t* warnings){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
	uint16_t CAN_ID = 0x600;
 80023ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023f0:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 80023f2:	8afb      	ldrh	r3, [r7, #22]
 80023f4:	4619      	mov	r1, r3
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff fe7e 	bl	80020f8 <setCANId>
	ptr->data[0] = *faults;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	775a      	strb	r2, [r3, #29]
	HAL_Delay(10);
 800240c:	200a      	movs	r0, #10
 800240e:	f000 ff39 	bl	8003284 <HAL_Delay>
	CAN_Send(ptr);
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff fe44 	bl	80020a0 <CAN_Send>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002434:	4b52      	ldr	r3, [pc, #328]	; (8002580 <MX_GPIO_Init+0x160>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a51      	ldr	r2, [pc, #324]	; (8002580 <MX_GPIO_Init+0x160>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <MX_GPIO_Init+0x160>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <MX_GPIO_Init+0x160>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <MX_GPIO_Init+0x160>)
 8002452:	f043 0320 	orr.w	r3, r3, #32
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <MX_GPIO_Init+0x160>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002464:	4b46      	ldr	r3, [pc, #280]	; (8002580 <MX_GPIO_Init+0x160>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <MX_GPIO_Init+0x160>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <MX_GPIO_Init+0x160>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <MX_GPIO_Init+0x160>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <MX_GPIO_Init+0x160>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <MX_GPIO_Init+0x160>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8002494:	2200      	movs	r2, #0
 8002496:	2110      	movs	r1, #16
 8002498:	483a      	ldr	r0, [pc, #232]	; (8002584 <MX_GPIO_Init+0x164>)
 800249a:	f001 fded 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	2102      	movs	r1, #2
 80024a2:	4839      	ldr	r0, [pc, #228]	; (8002588 <MX_GPIO_Init+0x168>)
 80024a4:	f001 fde8 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	4837      	ldr	r0, [pc, #220]	; (800258c <MX_GPIO_Init+0x16c>)
 80024ae:	f001 fde3 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 80024b2:	2310      	movs	r3, #16
 80024b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2302      	movs	r3, #2
 80024c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	482e      	ldr	r0, [pc, #184]	; (8002584 <MX_GPIO_Init+0x164>)
 80024ca:	f001 fc51 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024ce:	2302      	movs	r3, #2
 80024d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4828      	ldr	r0, [pc, #160]	; (8002588 <MX_GPIO_Init+0x168>)
 80024e6:	f001 fc43 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2302      	movs	r3, #2
 80024f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4822      	ldr	r0, [pc, #136]	; (800258c <MX_GPIO_Init+0x16c>)
 8002502:	f001 fc35 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	481c      	ldr	r0, [pc, #112]	; (800258c <MX_GPIO_Init+0x16c>)
 800251c:	f001 fc28 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4814      	ldr	r0, [pc, #80]	; (8002588 <MX_GPIO_Init+0x168>)
 8002536:	f001 fc1b 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800253a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	480e      	ldr	r0, [pc, #56]	; (8002588 <MX_GPIO_Init+0x168>)
 8002550:	f001 fc0e 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8002554:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_GPIO_Init+0x170>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <MX_GPIO_Init+0x170>)
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	6053      	str	r3, [r2, #4]

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800
 8002588:	40010c00 	.word	0x40010c00
 800258c:	40011000 	.word	0x40011000
 8002590:	40010000 	.word	0x40010000

08002594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a2      	sub	sp, #136	; 0x88
 8002598:	af00      	add	r7, sp, #0
	TimerPacket timerpacket_ltc_volt;
	TimerPacket timerpacket_ltc_temp;
	TimerPacket timerpacket_can;
	TimerPacket timerpacket_safety;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800259a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	2018      	movs	r0, #24
 80025ae:	f007 fe45 	bl	800a23c <malloc>
 80025b2:	4603      	mov	r3, r0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 80025b6:	2018      	movs	r0, #24
 80025b8:	f007 fe40 	bl	800a23c <malloc>
 80025bc:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 80025c0:	200c      	movs	r0, #12
 80025c2:	f007 fe3b 	bl	800a23c <malloc>
 80025c6:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
	NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	71fb      	strb	r3, [r7, #7]
	uint8_t safetyWarnings = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71bb      	strb	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025d2:	f000 fdf5 	bl	80031c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025d6:	f000 f8fb 	bl	80027d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025da:	f7ff ff21 	bl	8002420 <MX_GPIO_Init>
	MX_ADC1_Init();
 80025de:	f7ff fbd9 	bl	8001d94 <MX_ADC1_Init>
	MX_ADC2_Init();
 80025e2:	f7ff fc15 	bl	8001e10 <MX_ADC2_Init>
	MX_TIM7_Init();
 80025e6:	f000 fd71 	bl	80030cc <MX_TIM7_Init>
	MX_SPI1_Init();
 80025ea:	f000 fc37 	bl	8002e5c <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 80025ee:	f007 f93d 	bl	800986c <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 80025f2:	f7ff fcb1 	bl	8001f58 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fd64 	bl	80020c8 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 8002600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	496f      	ldr	r1, [pc, #444]	; (80027c4 <main+0x230>)
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f94d 	bl	80028a8 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc_volt, LTC_VOlT_DELAY);
 800260e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002612:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f986 	bl	8002928 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_ltc_temp, LTC_TEMP_DELAY);
 800261c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f980 	bl	8002928 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can, CAN_DELAY);
 8002628:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800262c:	2164      	movs	r1, #100	; 0x64
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f97a 	bl	8002928 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_safety, SAFETY_DELAY);
 8002634:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002638:	2132      	movs	r1, #50	; 0x32
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f974 	bl	8002928 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 8002640:	f000 fc8c 	bl	8002f5c <LTC_nCS_High>
	set_num_devices(NUM_DEVICES);
 8002644:	2001      	movs	r0, #1
 8002646:	f7fe feb1 	bl	80013ac <set_num_devices>
	set_series_groups(NUM_CELL_SERIES_GROUP);
 800264a:	200c      	movs	r0, #12
 800264c:	f7fe feca 	bl	80013e4 <set_series_groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t indexpause = 8;
 8002656:	2308      	movs	r3, #8
 8002658:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t loop_count = 3;
 800265c:	2303      	movs	r3, #3
 800265e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	// Config Balancing controls: 
	// 4'b1111 for no balance 
	// 4'b0000 for balance 

	wakeup_sleep();
 8002662:	f7fe ff03 	bl	800146c <wakeup_sleep>
	ltc6811_wrpwm(NUM_DEVICES, 0x00);
 8002666:	2100      	movs	r1, #0
 8002668:	2001      	movs	r0, #1
 800266a:	f7fe fff1 	bl	8001650 <ltc6811_wrpwm>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800266e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002672:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f933 	bl	80028e2 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc_volt)) {
 800267c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f964 	bl	800294e <TimerPacket_FixedPulse>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <main+0x11a>
			wakeup_sleep();
 800268c:	f7fe feee 	bl	800146c <wakeup_sleep>
			readVolt(modVoltage.cell_volt);
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa12 	bl	8002abc <readVolt>
			wakeup_idle(); // Sets up for balance.
 8002698:	f7fe fec4 	bl	8001424 <wakeup_idle>
			ltc6811_wrcfg(NUM_DEVICES, config);
 800269c:	494a      	ldr	r1, [pc, #296]	; (80027c8 <main+0x234>)
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff f872 	bl	8001788 <ltc6811_wrcfg>
			print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	4619      	mov	r1, r3
 80026a8:	200c      	movs	r0, #12
 80026aa:	f000 fa69 	bl	8002b80 <print>
		}

		if (TimerPacket_FixedPulse(&timerpacket_ltc_temp)) {
 80026ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f94b 	bl	800294e <TimerPacket_FixedPulse>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d034      	beq.n	8002728 <main+0x194>
			//start sending to mux to read temperatures
			wakeup_sleep();
 80026be:	f7fe fed5 	bl	800146c <wakeup_sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80026c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026c6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80026ca:	e00e      	b.n	80026ea <main+0x156>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 80026cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fa07 	bl	8002ae8 <readTemp>
				HAL_Delay(100);
 80026da:	2064      	movs	r0, #100	; 0x64
 80026dc:	f000 fdd2 	bl	8003284 <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80026e0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80026e4:	3301      	adds	r3, #1
 80026e6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80026ea:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80026ee:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d3ea      	bcc.n	80026cc <main+0x138>
			}
			if (indexpause == 8) {
 80026f6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d106      	bne.n	800270c <main+0x178>
				tempindex = 8;
 80026fe:	2308      	movs	r3, #8
 8002700:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				indexpause = 12;
 8002704:	230c      	movs	r3, #12
 8002706:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800270a:	e009      	b.n	8002720 <main+0x18c>
			} else if (indexpause == 12) {
 800270c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d105      	bne.n	8002720 <main+0x18c>
				indexpause = 8;
 8002714:	2308      	movs	r3, #8
 8002716:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				tempindex = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			HAL_Delay(2300);
 8002720:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8002724:	f000 fdae 	bl	8003284 <HAL_Delay>
			//print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);
		}

		if (loop_count == 0) {
 8002728:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11c      	bne.n	800276a <main+0x1d6>
			if (TimerPacket_FixedPulse(&timerpacket_safety)) {
 8002730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f90a 	bl	800294e <TimerPacket_FixedPulse>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d019      	beq.n	8002774 <main+0x1e0>
				cellSummary(&modVoltage);
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa95 	bl	8002c74 <cellSummary>
				fault_and_warning(&modVoltage, &safetyFaults, &safetyWarnings);
 800274a:	1dba      	adds	r2, r7, #6
 800274c:	1df9      	adds	r1, r7, #7
 800274e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fb15 	bl	8002d82 <fault_and_warning>
				if (safetyFaults != 0) {
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <main+0x1e0>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	2102      	movs	r1, #2
 8002762:	481a      	ldr	r0, [pc, #104]	; (80027cc <main+0x238>)
 8002764:	f001 fc88 	bl	8004078 <HAL_GPIO_WritePin>
 8002768:	e004      	b.n	8002774 <main+0x1e0>
				}

			}
		} else {
			loop_count--;
 800276a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800276e:	3b01      	subs	r3, #1
 8002770:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		if (TimerPacket_FixedPulse(&timerpacket_can)) {
 8002774:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f8e8 	bl	800294e <TimerPacket_FixedPulse>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f43f af74 	beq.w	800266e <main+0xda>
			CAN_Send_Safety_Checker(&msg,&safetyFaults, &safetyWarnings);
 8002786:	1dba      	adds	r2, r7, #6
 8002788:	1df9      	adds	r1, r7, #7
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fe26 	bl	80023e0 <CAN_Send_Safety_Checker>
			CAN_Send_Cell_Summary(&msg, &modVoltage);
 8002794:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002798:	f107 0308 	add.w	r3, r7, #8
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fdd3 	bl	800234a <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modVoltage.cell_volt);
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fcb0 	bl	8002112 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modVoltage.cell_temp);
 80027b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fd36 	bl	800222c <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80027c0:	e755      	b.n	800266e <main+0xda>
 80027c2:	bf00      	nop
 80027c4:	40011000 	.word	0x40011000
 80027c8:	20000000 	.word	0x20000000
 80027cc:	40010c00 	.word	0x40010c00

080027d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b09c      	sub	sp, #112	; 0x70
 80027d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027da:	2238      	movs	r2, #56	; 0x38
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 fe08 	bl	800a3f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2220      	movs	r2, #32
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f007 fdfa 	bl	800a3f4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002800:	2301      	movs	r3, #1
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800280a:	2304      	movs	r3, #4
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800280e:	2301      	movs	r3, #1
 8002810:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002818:	2302      	movs	r3, #2
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800281c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002820:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002822:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002826:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002828:	2302      	movs	r3, #2
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800282c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002830:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fd7e 	bl	800533c <HAL_RCC_OscConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <SystemClock_Config+0x7a>
		Error_Handler();
 8002846:	f000 f89f 	bl	8002988 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800284a:	230f      	movs	r3, #15
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f87e 	bl	8005968 <HAL_RCC_ClockConfig>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SystemClock_Config+0xa6>
		Error_Handler();
 8002872:	f000 f889 	bl	8002988 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8002876:	2312      	movs	r3, #18
 8002878:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800287a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800287e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fa3c 	bl	8005d04 <HAL_RCCEx_PeriphCLKConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config+0xc6>
		Error_Handler();
 8002892:	f000 f879 	bl	8002988 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002896:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <SystemClock_Config+0xd4>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	3770      	adds	r7, #112	; 0x70
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	42420070 	.word	0x42420070

080028a8 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	68b8      	ldr	r0, [r7, #8]
 80028be:	f001 fbdb 	bl	8004078 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80028ee:	f000 fcbf 	bl	8003270 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	1ad2      	subs	r2, r2, r3
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	429a      	cmp	r2, r3
 8002906:	d90b      	bls.n	8002920 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f001 fbc8 	bl	80040a8 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
	}
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002956:	f000 fc8b 	bl	8003270 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	429a      	cmp	r2, r3
 8002970:	d905      	bls.n	800297e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298c:	b672      	cpsid	i
}
 800298e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002990:	e7fe      	b.n	8002990 <Error_Handler+0x8>
	...

08002994 <getActualTemps>:
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	603a      	str	r2, [r7, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	460b      	mov	r3, r1
 80029a4:	71bb      	strb	r3, [r7, #6]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80bb      	strh	r3, [r7, #4]
 80029aa:	88bb      	ldrh	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe f9b5 	bl	8000d1c <__aeabi_ui2f>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4619      	mov	r1, r3
 80029b6:	483a      	ldr	r0, [pc, #232]	; (8002aa0 <getActualTemps+0x10c>)
 80029b8:	f7fe fabc 	bl	8000f34 <__aeabi_fdiv>
 80029bc:	4603      	mov	r3, r0
 80029be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f8f8 	bl	8000bb8 <__aeabi_fsub>
 80029c8:	4603      	mov	r3, r0
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b35      	ldr	r3, [pc, #212]	; (8002aa4 <getActualTemps+0x110>)
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <getActualTemps+0x110>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	4834      	ldr	r0, [pc, #208]	; (8002aa8 <getActualTemps+0x114>)
 80029d8:	f7fe faac 	bl	8000f34 <__aeabi_fdiv>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <getActualTemps+0x110>)
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <getActualTemps+0x110>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	492f      	ldr	r1, [pc, #188]	; (8002aa8 <getActualTemps+0x114>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe faa2 	bl	8000f34 <__aeabi_fdiv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <getActualTemps+0x118>)
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <getActualTemps+0x118>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd7f 	bl	8000500 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f008 f8ed 	bl	800abe8 <log>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f7fe f87b 	bl	8000b10 <__aeabi_d2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <getActualTemps+0x118>)
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b22      	ldr	r3, [pc, #136]	; (8002aac <getActualTemps+0x118>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <getActualTemps+0x11c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa84 	bl	8000f34 <__aeabi_fdiv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <getActualTemps+0x118>)
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <getActualTemps+0x118>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	491e      	ldr	r1, [pc, #120]	; (8002ab4 <getActualTemps+0x120>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe f8be 	bl	8000bbc <__addsf3>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <getActualTemps+0x118>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <getActualTemps+0x118>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a52:	f7fe fa6f 	bl	8000f34 <__aeabi_fdiv>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <getActualTemps+0x118>)
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <getActualTemps+0x118>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4915      	ldr	r1, [pc, #84]	; (8002ab8 <getActualTemps+0x124>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f8a7 	bl	8000bb8 <__aeabi_fsub>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <getActualTemps+0x118>)
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <getActualTemps+0x118>)
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	79fa      	ldrb	r2, [r7, #7]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	461a      	mov	r2, r3
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	4413      	add	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	18d4      	adds	r4, r2, r3
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	f7fe faed 	bl	800106c <__aeabi_f2uiz>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8023      	strh	r3, [r4, #0]
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	46ea6000 	.word	0x46ea6000
 8002aa4:	200002c4 	.word	0x200002c4
 8002aa8:	47435000 	.word	0x47435000
 8002aac:	200002c8 	.word	0x200002c8
 8002ab0:	45534000 	.word	0x45534000
 8002ab4:	3b5bcf0f 	.word	0x3b5bcf0f
 8002ab8:	43889333 	.word	0x43889333

08002abc <readVolt>:
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	f7fe fcae 	bl	8001424 <wakeup_idle>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	2100      	movs	r1, #0
 8002acc:	2200      	movs	r2, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f862 	bl	8001b98 <ltc_adcv>
 8002ad4:	f7ff f8e6 	bl	8001ca4 <ltc_polladc>
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7fe fce9 	bl	80014b0 <read_cell_volt>
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <readTemp>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	f7fe fc95 	bl	8001424 <wakeup_idle>
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <readTemp+0x94>)
 8002b06:	4413      	add	r3, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7fe febc 	bl	8001888 <ltc_wrcomm>
 8002b10:	f7fe fc88 	bl	8001424 <wakeup_idle>
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7fe ff33 	bl	8001980 <ltc_stcomm>
 8002b1a:	f7fe fc83 	bl	8001424 <wakeup_idle>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f87e 	bl	8001c24 <ltc_adax>
 8002b28:	f7ff f8bc 	bl	8001ca4 <ltc_polladc>
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe ff67 	bl	8001a00 <read_cell_temps>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11c      	bne.n	8002b72 <readTemp+0x8a>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]
 8002b3c:	e012      	b.n	8002b64 <readTemp+0x7c>
 8002b3e:	7dfa      	ldrb	r2, [r7, #23]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	82bb      	strh	r3, [r7, #20]
 8002b52:	8abb      	ldrh	r3, [r7, #20]
 8002b54:	7bf9      	ldrb	r1, [r7, #15]
 8002b56:	7df8      	ldrb	r0, [r7, #23]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	f7ff ff1b 	bl	8002994 <getActualTemps>
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	3301      	adds	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
 8002b64:	f7fe fc34 	bl	80013d0 <get_num_devices>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d3e5      	bcc.n	8002b3e <readTemp+0x56>
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000008 	.word	0x20000008

08002b80 <print>:
 *      Author: karth
 */

#include "print.h"

void print(uint8_t len, uint16_t *read_temp) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b8e:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002b92:	6019      	str	r1, [r3, #0]
 8002b94:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002b98:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8002b9c:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 8002b9e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002ba2:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	3304      	adds	r3, #4
 8002bac:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 fc1e 	bl	800a3f4 <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 8002bb8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002bbc:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002bc0:	220a      	movs	r2, #10
 8002bc2:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 8002bc4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002bc8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002bcc:	2200      	movs	r2, #0
 8002bce:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < len; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002bd6:	e027      	b.n	8002c28 <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 8002bd8:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8002be8:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	491d      	ldr	r1, [pc, #116]	; (8002c70 <print+0xf0>)
 8002bfa:	f007 fbdb 	bl	800a3b4 <siprintf>
		strncat(out_buf, buf, 20);
 8002bfe:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	2214      	movs	r2, #20
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f007 fbfb 	bl	800a404 <strncat>
		strncat(out_buf, char_to_str, 2);
 8002c0e:	f107 010c 	add.w	r1, r7, #12
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	2202      	movs	r2, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f007 fbf3 	bl	800a404 <strncat>
	for (uint8_t i = 0; i < len; i++) {
 8002c1e:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8002c22:	3301      	adds	r3, #1
 8002c24:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8002c28:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002c2c:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8002c30:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3ce      	bcc.n	8002bd8 <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 8002c3a:	f107 010c 	add.w	r1, r7, #12
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	2202      	movs	r2, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f007 fbdd 	bl	800a404 <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd faea 	bl	8000228 <strlen>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f006 fdf5 	bl	800984e <USB_Transmit>
}
 8002c64:	bf00      	nop
 8002c66:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	0800afd4 	.word	0x0800afd4

08002c74 <cellSummary>:
#include "safety.h"

void cellSummary(struct batteryModuleVoltage *batt){
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	819a      	strh	r2, [r3, #12]
	batt->pack_voltage = 0;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	821a      	strh	r2, [r3, #16]

	for(int i = 1; i < NUM_CELLS; i++){
 8002caa:	2301      	movs	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e032      	b.n	8002d16 <cellSummary+0xa2>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	881a      	ldrh	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	895b      	ldrh	r3, [r3, #10]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d907      	bls.n	8002cd4 <cellSummary+0x60>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	881a      	ldrh	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	891b      	ldrh	r3, [r3, #8]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d207      	bcs.n	8002cf8 <cellSummary+0x84>
			batt->cell_temp_lowest = batt->cell_volt[i];
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	819a      	strh	r2, [r3, #12]
		}

		batt->pack_voltage += batt->cell_volt[i];
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8a1a      	ldrh	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	440b      	add	r3, r1
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b0b      	cmp	r3, #11
 8002d1a:	ddc9      	ble.n	8002cb0 <cellSummary+0x3c>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	e026      	b.n	8002d70 <cellSummary+0xfc>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	89da      	ldrh	r2, [r3, #14]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d207      	bcs.n	8002d46 <cellSummary+0xd2>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	899a      	ldrh	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	440b      	add	r3, r1
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d907      	bls.n	8002d6a <cellSummary+0xf6>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b0b      	cmp	r3, #11
 8002d74:	ddd5      	ble.n	8002d22 <cellSummary+0xae>
		}
	}

}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <fault_and_warning>:


void fault_and_warning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
	if(batt->pack_voltage >= PACK_HIGH_VOLT_FAULT){
		*fault |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_FAULT){
		*fault |= 0b01000000;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT){
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	891b      	ldrh	r3, [r3, #8]
 8002da0:	f247 5230 	movw	r2, #30000	; 0x7530
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d806      	bhi.n	8002db6 <fault_and_warning+0x34>
		*fault |= 0b00100000;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f043 0320 	orr.w	r3, r3, #32
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	701a      	strb	r2, [r3, #0]
	}

		if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	895b      	ldrh	r3, [r3, #10]
 8002dba:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d906      	bls.n	8002dd0 <fault_and_warning+0x4e>
		*fault |= 0b00010000;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	f043 0310 	orr.w	r3, r3, #16
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	89db      	ldrh	r3, [r3, #14]
 8002dd4:	2b3b      	cmp	r3, #59	; 0x3b
 8002dd6:	d906      	bls.n	8002de6 <fault_and_warning+0x64>
		*fault |= 0b00001000;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	891b      	ldrh	r3, [r3, #8]
 8002df8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002dfc:	d806      	bhi.n	8002e0c <fault_and_warning+0x8a>
		*warnings |= 0b00100000;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f043 0320 	orr.w	r3, r3, #32
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	895b      	ldrh	r3, [r3, #10]
 8002e10:	f24a 6203 	movw	r2, #42499	; 0xa603
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d906      	bls.n	8002e26 <fault_and_warning+0xa4>
		*warnings |= 0b00010000;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	89db      	ldrh	r3, [r3, #14]
 8002e2a:	2b36      	cmp	r3, #54	; 0x36
 8002e2c:	d906      	bls.n	8002e3c <fault_and_warning+0xba>
		*warnings |= 0b00001000;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	899b      	ldrh	r3, [r3, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <fault_and_warning+0xd0>
		*warnings |= 0b00000100;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	701a      	strb	r2, [r3, #0]
	}
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <MX_SPI1_Init+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e90:	2228      	movs	r2, #40	; 0x28
 8002e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea0:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002ea8:	220a      	movs	r2, #10
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002eac:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <MX_SPI1_Init+0x64>)
 8002eae:	f003 f85b 	bl	8005f68 <HAL_SPI_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8002eb8:	f7ff fd66 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200002cc 	.word	0x200002cc
 8002ec4:	40013000 	.word	0x40013000

08002ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_SPI_MspInit+0x88>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d12f      	bne.n	8002f48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6193      	str	r3, [r2, #24]
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_SPI_MspInit+0x8c>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f18:	23a0      	movs	r3, #160	; 0xa0
 8002f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480b      	ldr	r0, [pc, #44]	; (8002f58 <HAL_SPI_MspInit+0x90>)
 8002f2c:	f000 ff20 	bl	8003d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f30:	2340      	movs	r3, #64	; 0x40
 8002f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4619      	mov	r1, r3
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <HAL_SPI_MspInit+0x90>)
 8002f44:	f000 ff14 	bl	8003d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40013000 	.word	0x40013000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010800 	.word	0x40010800

08002f5c <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002f60:	2201      	movs	r2, #1
 8002f62:	2110      	movs	r1, #16
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <LTC_nCS_High+0x14>)
 8002f66:	f001 f887 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40010800 	.word	0x40010800

08002f74 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2110      	movs	r1, #16
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <LTC_nCS_Low+0x14>)
 8002f7e:	f001 f87b 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40010800 	.word	0x40010800

08002f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6193      	str	r3, [r2, #24]
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	61d3      	str	r3, [r2, #28]
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_MspInit+0x5c>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_MspInit+0x60>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <HAL_MspInit+0x60>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40010000 	.word	0x40010000

08002ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <NMI_Handler+0x4>

08002ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <MemManage_Handler+0x4>

08003002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <UsageFault_Handler+0x4>

0800300e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003036:	f000 f909 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <OTG_FS_IRQHandler+0x10>)
 8003046:	f001 f987 	bl	8004358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000103c 	.word	0x2000103c

08003054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <_sbrk+0x5c>)
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <_sbrk+0x60>)
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <_sbrk+0x64>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <_sbrk+0x68>)
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <_sbrk+0x64>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d207      	bcs.n	8003094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003084:	f007 f9e2 	bl	800a44c <__errno>
 8003088:	4603      	mov	r3, r0
 800308a:	220c      	movs	r2, #12
 800308c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	e009      	b.n	80030a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <_sbrk+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <_sbrk+0x64>)
 80030a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20010000 	.word	0x20010000
 80030b4:	00000400 	.word	0x00000400
 80030b8:	20000324 	.word	0x20000324
 80030bc:	200018a8 	.word	0x200018a8

080030c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d2:	463b      	mov	r3, r7
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_TIM7_Init+0x64>)
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <MX_TIM7_Init+0x68>)
 80030de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <MX_TIM7_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <MX_TIM7_Init+0x64>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <MX_TIM7_Init+0x64>)
 80030ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030f4:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <MX_TIM7_Init+0x64>)
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030fa:	480d      	ldr	r0, [pc, #52]	; (8003130 <MX_TIM7_Init+0x64>)
 80030fc:	f003 fcbc 	bl	8006a78 <HAL_TIM_Base_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003106:	f7ff fc3f 	bl	8002988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003112:	463b      	mov	r3, r7
 8003114:	4619      	mov	r1, r3
 8003116:	4806      	ldr	r0, [pc, #24]	; (8003130 <MX_TIM7_Init+0x64>)
 8003118:	f003 fd6a 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003122:	f7ff fc31 	bl	8002988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000328 	.word	0x20000328
 8003134:	40001400 	.word	0x40001400

08003138 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_TIM_Base_MspInit+0x34>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10b      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_TIM_Base_MspInit+0x38>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a08      	ldr	r2, [pc, #32]	; (8003170 <HAL_TIM_Base_MspInit+0x38>)
 8003150:	f043 0320 	orr.w	r3, r3, #32
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_TIM_Base_MspInit+0x38>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40001400 	.word	0x40001400
 8003170:	40021000 	.word	0x40021000

08003174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003174:	f7ff ffa4 	bl	80030c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800317a:	490c      	ldr	r1, [pc, #48]	; (80031ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003190:	4c09      	ldr	r4, [pc, #36]	; (80031b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800319e:	f007 f95b 	bl	800a458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff f9f7 	bl	8002594 <main>
  bx lr
 80031a6:	4770      	bx	lr
  ldr r0, =_sdata
 80031a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ac:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 80031b0:	0800b4ac 	.word	0x0800b4ac
  ldr r2, =_sbss
 80031b4:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 80031b8:	200018a8 	.word	0x200018a8

080031bc <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC1_2_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_Init+0x28>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_Init+0x28>)
 80031ca:	f043 0310 	orr.w	r3, r3, #16
 80031ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f000 fd8b 	bl	8003cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	200f      	movs	r0, #15
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff fed6 	bl	8002f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fda3 	bl	8003d56 <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f000 fd6b 	bl	8003d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000050 	.word	0x20000050
 8003244:	20000058 	.word	0x20000058
 8003248:	20000054 	.word	0x20000054

0800324c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_IncTick+0x20>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000058 	.word	0x20000058
 800326c:	20000370 	.word	0x20000370

08003270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_GetTick+0x10>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	20000370 	.word	0x20000370

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fff0 	bl	8003270 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_Delay+0x44>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffe0 	bl	8003270 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000058 	.word	0x20000058

080032cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0be      	b.n	800346c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fe fdbe 	bl	8001e8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9ab 	bl	800366c <ADC_ConversionStop_Disable>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8099 	bne.w	800345a <HAL_ADC_Init+0x18e>
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8095 	bne.w	800345a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003338:	f023 0302 	bic.w	r3, r3, #2
 800333c:	f043 0202 	orr.w	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800334c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7b1b      	ldrb	r3, [r3, #12]
 8003352:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003354:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d003      	beq.n	800336e <HAL_ADC_Init+0xa2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_ADC_Init+0xa8>
 800336e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003372:	e000      	b.n	8003376 <HAL_ADC_Init+0xaa>
 8003374:	2300      	movs	r3, #0
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7d1b      	ldrb	r3, [r3, #20]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7b1b      	ldrb	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	3b01      	subs	r3, #1
 8003392:	035a      	lsls	r2, r3, #13
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e00b      	b.n	80033b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_ADC_Init+0x1a8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e8:	d003      	beq.n	80033f2 <HAL_ADC_Init+0x126>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d104      	bne.n	80033fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	051b      	lsls	r3, r3, #20
 80033fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	430a      	orrs	r2, r1
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_ADC_Init+0x1ac>)
 8003418:	4013      	ands	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d10b      	bne.n	8003438 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003436:	e018      	b.n	800346a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f023 0312 	bic.w	r3, r3, #18
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003458:	e007      	b.n	800346a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	ffe1f7fd 	.word	0xffe1f7fd
 8003478:	ff1f0efe 	.word	0xff1f0efe

0800347c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x20>
 8003498:	2302      	movs	r3, #2
 800349a:	e0dc      	b.n	8003656 <HAL_ADC_ConfigChannel+0x1da>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d81c      	bhi.n	80034e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3b05      	subs	r3, #5
 80034be:	221f      	movs	r2, #31
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4019      	ands	r1, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	3b05      	subs	r3, #5
 80034d8:	fa00 f203 	lsl.w	r2, r0, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
 80034e4:	e03c      	b.n	8003560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d81c      	bhi.n	8003528 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	3b23      	subs	r3, #35	; 0x23
 8003500:	221f      	movs	r2, #31
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	4019      	ands	r1, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	3b23      	subs	r3, #35	; 0x23
 800351a:	fa00 f203 	lsl.w	r2, r0, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
 8003526:	e01b      	b.n	8003560 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	3b41      	subs	r3, #65	; 0x41
 800353a:	221f      	movs	r2, #31
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	4019      	ands	r1, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	3b41      	subs	r3, #65	; 0x41
 8003554:	fa00 f203 	lsl.w	r2, r0, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b09      	cmp	r3, #9
 8003566:	d91c      	bls.n	80035a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68d9      	ldr	r1, [r3, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	2207      	movs	r2, #7
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	4019      	ands	r1, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6898      	ldr	r0, [r3, #8]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	3b1e      	subs	r3, #30
 8003594:	fa00 f203 	lsl.w	r2, r0, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	e019      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6919      	ldr	r1, [r3, #16]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	2207      	movs	r2, #7
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	4019      	ands	r1, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6898      	ldr	r0, [r3, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d003      	beq.n	80035e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035e2:	2b11      	cmp	r3, #17
 80035e4:	d132      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <HAL_ADC_ConfigChannel+0x1e4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d125      	bne.n	800363c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d126      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800360c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d11a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_ADC_ConfigChannel+0x1e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <HAL_ADC_ConfigChannel+0x1ec>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	0c9a      	lsrs	r2, r3, #18
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800362c:	e002      	b.n	8003634 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3b01      	subs	r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f9      	bne.n	800362e <HAL_ADC_ConfigChannel+0x1b2>
 800363a:	e007      	b.n	800364c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012400 	.word	0x40012400
 8003664:	20000050 	.word	0x20000050
 8003668:	431bde83 	.word	0x431bde83

0800366c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d12e      	bne.n	80036e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003696:	f7ff fdeb 	bl	8003270 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800369c:	e01b      	b.n	80036d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800369e:	f7ff fde7 	bl	8003270 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d914      	bls.n	80036d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f043 0210 	orr.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e007      	b.n	80036e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d0dc      	beq.n	800369e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0ed      	b.n	80038dc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7fe fc59 	bl	8001fc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003722:	f7ff fda5 	bl	8003270 <HAL_GetTick>
 8003726:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003728:	e012      	b.n	8003750 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800372a:	f7ff fda1 	bl	8003270 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b0a      	cmp	r3, #10
 8003736:	d90b      	bls.n	8003750 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2205      	movs	r2, #5
 8003748:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0c5      	b.n	80038dc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0e5      	beq.n	800372a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0202 	bic.w	r2, r2, #2
 800376c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800376e:	f7ff fd7f 	bl	8003270 <HAL_GetTick>
 8003772:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003774:	e012      	b.n	800379c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003776:	f7ff fd7b 	bl	8003270 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b0a      	cmp	r3, #10
 8003782:	d90b      	bls.n	800379c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2205      	movs	r2, #5
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e09f      	b.n	80038dc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7e1b      	ldrb	r3, [r3, #24]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e007      	b.n	80037d4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7e5b      	ldrb	r3, [r3, #25]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d108      	bne.n	80037ee <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7e9b      	ldrb	r3, [r3, #26]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d108      	bne.n	8003818 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0220 	orr.w	r2, r2, #32
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e007      	b.n	8003828 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0220 	bic.w	r2, r2, #32
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7edb      	ldrb	r3, [r3, #27]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d108      	bne.n	8003842 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0210 	bic.w	r2, r2, #16
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0210 	orr.w	r2, r2, #16
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7f1b      	ldrb	r3, [r3, #28]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0208 	orr.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e007      	b.n	800387c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0208 	bic.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7f5b      	ldrb	r3, [r3, #29]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d108      	bne.n	8003896 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0204 	orr.w	r2, r2, #4
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e007      	b.n	80038a6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0204 	bic.w	r2, r2, #4
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d12e      	bne.n	8003956 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003910:	f7ff fcae 	bl	8003270 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003916:	e012      	b.n	800393e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003918:	f7ff fcaa 	bl	8003270 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b0a      	cmp	r3, #10
 8003924:	d90b      	bls.n	800393e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e012      	b.n	8003964 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e006      	b.n	8003964 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800398a:	7ffb      	ldrb	r3, [r7, #31]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d003      	beq.n	8003998 <HAL_CAN_AddTxMessage+0x2c>
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	2b02      	cmp	r3, #2
 8003994:	f040 80ad 	bne.w	8003af2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8095 	beq.w	8003ae2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	0e1b      	lsrs	r3, r3, #24
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039c2:	2201      	movs	r2, #1
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	6809      	ldr	r1, [r1, #0]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3318      	adds	r3, #24
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	440b      	add	r3, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00f      	b.n	8003a10 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80039fa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	440b      	add	r3, r1
 8003a0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	440b      	add	r3, r1
 8003a20:	3304      	adds	r3, #4
 8003a22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	7d1b      	ldrb	r3, [r3, #20]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d111      	bne.n	8003a50 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3318      	adds	r3, #24
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3318      	adds	r3, #24
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3307      	adds	r3, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	061a      	lsls	r2, r3, #24
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3306      	adds	r3, #6
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3305      	adds	r3, #5
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	3204      	adds	r2, #4
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	4610      	mov	r0, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6811      	ldr	r1, [r2, #0]
 8003a78:	ea43 0200 	orr.w	r2, r3, r0
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3303      	adds	r3, #3
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	061a      	lsls	r2, r3, #24
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3302      	adds	r3, #2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	ea43 0200 	orr.w	r2, r3, r0
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003abc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	6811      	ldr	r1, [r2, #0]
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3318      	adds	r3, #24
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	440b      	add	r3, r1
 8003adc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e00e      	b.n	8003b00 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e006      	b.n	8003b00 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3724      	adds	r7, #36	; 0x24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d002      	beq.n	8003b28 <HAL_CAN_ActivateNotification+0x1e>
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d109      	bne.n	8003b3c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6959      	ldr	r1, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e006      	b.n	8003b4a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b86:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	60d3      	str	r3, [r2, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0307 	and.w	r3, r3, #7
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	db0b      	blt.n	8003be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	f003 021f 	and.w	r2, r3, #31
 8003bd0:	4906      	ldr	r1, [pc, #24]	; (8003bec <__NVIC_EnableIRQ+0x34>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2001      	movs	r0, #1
 8003bda:	fa00 f202 	lsl.w	r2, r0, r2
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb8:	d301      	bcc.n	8003cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e00f      	b.n	8003cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <SysTick_Config+0x40>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	f7ff ff90 	bl	8003bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <SysTick_Config+0x40>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd6:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <SysTick_Config+0x40>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e000e010 	.word	0xe000e010

08003cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff2d 	bl	8003b54 <__NVIC_SetPriorityGrouping>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d14:	f7ff ff42 	bl	8003b9c <__NVIC_GetPriorityGrouping>
 8003d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	6978      	ldr	r0, [r7, #20]
 8003d20:	f7ff ff90 	bl	8003c44 <NVIC_EncodePriority>
 8003d24:	4602      	mov	r2, r0
 8003d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff5f 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003d32:	bf00      	nop
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff35 	bl	8003bb8 <__NVIC_EnableIRQ>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ffa2 	bl	8003ca8 <SysTick_Config>
 8003d64:	4603      	mov	r3, r0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b08b      	sub	sp, #44	; 0x2c
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d82:	e169      	b.n	8004058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d84:	2201      	movs	r2, #1
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f040 8158 	bne.w	8004052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4a9a      	ldr	r2, [pc, #616]	; (8004010 <HAL_GPIO_Init+0x2a0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d05e      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
 8003dac:	4a98      	ldr	r2, [pc, #608]	; (8004010 <HAL_GPIO_Init+0x2a0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d875      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003db2:	4a98      	ldr	r2, [pc, #608]	; (8004014 <HAL_GPIO_Init+0x2a4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d058      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
 8003db8:	4a96      	ldr	r2, [pc, #600]	; (8004014 <HAL_GPIO_Init+0x2a4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d86f      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003dbe:	4a96      	ldr	r2, [pc, #600]	; (8004018 <HAL_GPIO_Init+0x2a8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d052      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
 8003dc4:	4a94      	ldr	r2, [pc, #592]	; (8004018 <HAL_GPIO_Init+0x2a8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d869      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003dca:	4a94      	ldr	r2, [pc, #592]	; (800401c <HAL_GPIO_Init+0x2ac>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d04c      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
 8003dd0:	4a92      	ldr	r2, [pc, #584]	; (800401c <HAL_GPIO_Init+0x2ac>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d863      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003dd6:	4a92      	ldr	r2, [pc, #584]	; (8004020 <HAL_GPIO_Init+0x2b0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d046      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
 8003ddc:	4a90      	ldr	r2, [pc, #576]	; (8004020 <HAL_GPIO_Init+0x2b0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d85d      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003de2:	2b12      	cmp	r3, #18
 8003de4:	d82a      	bhi.n	8003e3c <HAL_GPIO_Init+0xcc>
 8003de6:	2b12      	cmp	r3, #18
 8003de8:	d859      	bhi.n	8003e9e <HAL_GPIO_Init+0x12e>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_GPIO_Init+0x80>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e6b 	.word	0x08003e6b
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	08003e57 	.word	0x08003e57
 8003dfc:	08003e99 	.word	0x08003e99
 8003e00:	08003e9f 	.word	0x08003e9f
 8003e04:	08003e9f 	.word	0x08003e9f
 8003e08:	08003e9f 	.word	0x08003e9f
 8003e0c:	08003e9f 	.word	0x08003e9f
 8003e10:	08003e9f 	.word	0x08003e9f
 8003e14:	08003e9f 	.word	0x08003e9f
 8003e18:	08003e9f 	.word	0x08003e9f
 8003e1c:	08003e9f 	.word	0x08003e9f
 8003e20:	08003e9f 	.word	0x08003e9f
 8003e24:	08003e9f 	.word	0x08003e9f
 8003e28:	08003e9f 	.word	0x08003e9f
 8003e2c:	08003e9f 	.word	0x08003e9f
 8003e30:	08003e9f 	.word	0x08003e9f
 8003e34:	08003e4d 	.word	0x08003e4d
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	4a79      	ldr	r2, [pc, #484]	; (8004024 <HAL_GPIO_Init+0x2b4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e42:	e02c      	b.n	8003e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	623b      	str	r3, [r7, #32]
          break;
 8003e4a:	e029      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	3304      	adds	r3, #4
 8003e52:	623b      	str	r3, [r7, #32]
          break;
 8003e54:	e024      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	623b      	str	r3, [r7, #32]
          break;
 8003e5e:	e01f      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	330c      	adds	r3, #12
 8003e66:	623b      	str	r3, [r7, #32]
          break;
 8003e68:	e01a      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e72:	2304      	movs	r3, #4
 8003e74:	623b      	str	r3, [r7, #32]
          break;
 8003e76:	e013      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e80:	2308      	movs	r3, #8
 8003e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	611a      	str	r2, [r3, #16]
          break;
 8003e8a:	e009      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	615a      	str	r2, [r3, #20]
          break;
 8003e96:	e003      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
          break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x130>
          break;
 8003e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2bff      	cmp	r3, #255	; 0xff
 8003ea4:	d801      	bhi.n	8003eaa <HAL_GPIO_Init+0x13a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	e001      	b.n	8003eae <HAL_GPIO_Init+0x13e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2bff      	cmp	r3, #255	; 0xff
 8003eb4:	d802      	bhi.n	8003ebc <HAL_GPIO_Init+0x14c>
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	e002      	b.n	8003ec2 <HAL_GPIO_Init+0x152>
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	3b08      	subs	r3, #8
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	210f      	movs	r1, #15
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80b1 	beq.w	8004052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ef0:	4b4d      	ldr	r3, [pc, #308]	; (8004028 <HAL_GPIO_Init+0x2b8>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	4a4c      	ldr	r2, [pc, #304]	; (8004028 <HAL_GPIO_Init+0x2b8>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6193      	str	r3, [r2, #24]
 8003efc:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_GPIO_Init+0x2b8>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f08:	4a48      	ldr	r2, [pc, #288]	; (800402c <HAL_GPIO_Init+0x2bc>)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	220f      	movs	r2, #15
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a40      	ldr	r2, [pc, #256]	; (8004030 <HAL_GPIO_Init+0x2c0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <HAL_GPIO_Init+0x1ec>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3f      	ldr	r2, [pc, #252]	; (8004034 <HAL_GPIO_Init+0x2c4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00d      	beq.n	8003f58 <HAL_GPIO_Init+0x1e8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a3e      	ldr	r2, [pc, #248]	; (8004038 <HAL_GPIO_Init+0x2c8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d007      	beq.n	8003f54 <HAL_GPIO_Init+0x1e4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3d      	ldr	r2, [pc, #244]	; (800403c <HAL_GPIO_Init+0x2cc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_GPIO_Init+0x1e0>
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e006      	b.n	8003f5e <HAL_GPIO_Init+0x1ee>
 8003f50:	2304      	movs	r3, #4
 8003f52:	e004      	b.n	8003f5e <HAL_GPIO_Init+0x1ee>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e002      	b.n	8003f5e <HAL_GPIO_Init+0x1ee>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_GPIO_Init+0x1ee>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	f002 0203 	and.w	r2, r2, #3
 8003f64:	0092      	lsls	r2, r2, #2
 8003f66:	4093      	lsls	r3, r2
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f6e:	492f      	ldr	r1, [pc, #188]	; (800402c <HAL_GPIO_Init+0x2bc>)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d006      	beq.n	8003f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	492c      	ldr	r1, [pc, #176]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]
 8003f94:	e006      	b.n	8003fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f96:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	4928      	ldr	r1, [pc, #160]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4922      	ldr	r1, [pc, #136]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
 8003fbc:	e006      	b.n	8003fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fbe:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	491e      	ldr	r1, [pc, #120]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	4918      	ldr	r1, [pc, #96]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	e006      	b.n	8003ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	4914      	ldr	r1, [pc, #80]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d021      	beq.n	8004044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e021      	b.n	8004052 <HAL_GPIO_Init+0x2e2>
 800400e:	bf00      	nop
 8004010:	10320000 	.word	0x10320000
 8004014:	10310000 	.word	0x10310000
 8004018:	10220000 	.word	0x10220000
 800401c:	10210000 	.word	0x10210000
 8004020:	10120000 	.word	0x10120000
 8004024:	10110000 	.word	0x10110000
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	40010800 	.word	0x40010800
 8004034:	40010c00 	.word	0x40010c00
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_GPIO_Init+0x304>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	43db      	mvns	r3, r3
 800404c:	4909      	ldr	r1, [pc, #36]	; (8004074 <HAL_GPIO_Init+0x304>)
 800404e:	4013      	ands	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	3301      	adds	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	f47f ae8e 	bne.w	8003d84 <HAL_GPIO_Init+0x14>
  }
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	372c      	adds	r7, #44	; 0x2c
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40010400 	.word	0x40010400

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004094:	e003      	b.n	800409e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	041a      	lsls	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ba:	887a      	ldrh	r2, [r7, #2]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4013      	ands	r3, r2
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43d9      	mvns	r1, r3
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	400b      	ands	r3, r1
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	611a      	str	r2, [r3, #16]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040dc:	b08f      	sub	sp, #60	; 0x3c
 80040de:	af0a      	add	r7, sp, #40	; 0x28
 80040e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e10f      	b.n	800430c <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f005 fda2 	bl	8009c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f002 fe94 	bl	8006e58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	687e      	ldr	r6, [r7, #4]
 8004138:	466d      	mov	r5, sp
 800413a:	f106 0410 	add.w	r4, r6, #16
 800413e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800414a:	e885 0003 	stmia.w	r5, {r0, r1}
 800414e:	1d33      	adds	r3, r6, #4
 8004150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f002 fdb2 	bl	8006cbc <USB_CoreInit>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0d0      	b.n	800430c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f002 fe81 	bl	8006e78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e04a      	b.n	8004212 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	333d      	adds	r3, #61	; 0x3d
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	333c      	adds	r3, #60	; 0x3c
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	b298      	uxth	r0, r3
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3356      	adds	r3, #86	; 0x56
 80041b8:	4602      	mov	r2, r0
 80041ba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3340      	adds	r3, #64	; 0x40
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3344      	adds	r3, #68	; 0x44
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3348      	adds	r3, #72	; 0x48
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	; 0x4c
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	3301      	adds	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d3af      	bcc.n	800417c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e044      	b.n	80042ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	3301      	adds	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3b5      	bcc.n	8004222 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	687e      	ldr	r6, [r7, #4]
 80042be:	466d      	mov	r5, sp
 80042c0:	f106 0410 	add.w	r4, r6, #16
 80042c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80042d4:	1d33      	adds	r3, r6, #4
 80042d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d8:	6838      	ldr	r0, [r7, #0]
 80042da:	f002 fe19 	bl	8006f10 <USB_DevInit>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e00d      	b.n	800430c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f003 fda3 	bl	8007e50 <USB_DevDisconnect>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004314 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_PCD_Start+0x16>
 8004326:	2302      	movs	r3, #2
 8004328:	e012      	b.n	8004350 <HAL_PCD_Start+0x3c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f002 fd7e 	bl	8006e38 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f003 fd65 	bl	8007e10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b08d      	sub	sp, #52	; 0x34
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fe1c 	bl	8007fac <USB_GetMode>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	f040 8443 	bne.w	8004c02 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f003 fd85 	bl	8007e90 <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8439 	beq.w	8004c00 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fd72 	bl	8007e90 <USB_ReadInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f002 0202 	and.w	r2, r2, #2
 80043c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f003 fd60 	bl	8007e90 <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d161      	bne.n	800449e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	0c5b      	lsrs	r3, r3, #17
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	2b02      	cmp	r3, #2
 8004414:	d124      	bne.n	8004460 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d035      	beq.n	800448e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800442c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004430:	b29b      	uxth	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6a38      	ldr	r0, [r7, #32]
 8004436:	f003 fb9d 	bl	8007b74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004446:	441a      	add	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004458:	441a      	add	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	615a      	str	r2, [r3, #20]
 800445e:	e016      	b.n	800448e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	0c5b      	lsrs	r3, r3, #17
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	2b06      	cmp	r3, #6
 800446a:	d110      	bne.n	800448e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004472:	2208      	movs	r2, #8
 8004474:	4619      	mov	r1, r3
 8004476:	6a38      	ldr	r0, [r7, #32]
 8004478:	f003 fb7c 	bl	8007b74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004488:	441a      	add	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0210 	orr.w	r2, r2, #16
 800449c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f003 fcf4 	bl	8007e90 <USB_ReadInterrupts>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044b2:	f040 80a7 	bne.w	8004604 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fcf8 	bl	8007eb4 <USB_ReadDevAllOutEpInterrupt>
 80044c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044c6:	e099      	b.n	80045fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 808e 	beq.w	80045f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f003 fd1a 	bl	8007f18 <USB_ReadDevOutEPInterrupt>
 80044e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00c      	beq.n	800450a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	461a      	mov	r2, r3
 80044fe:	2301      	movs	r3, #1
 8004500:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fe41 	bl	800518c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00c      	beq.n	800452e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	461a      	mov	r2, r3
 8004522:	2308      	movs	r3, #8
 8004524:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fe7d 	bl	8005228 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2310      	movs	r3, #16
 8004548:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d030      	beq.n	80045b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d109      	bne.n	8004574 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800456e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004572:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	78db      	ldrb	r3, [r3, #3]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d108      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f005 fc44 	bl	8009e2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	461a      	mov	r2, r3
 80045b2:	2302      	movs	r3, #2
 80045b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	2320      	movs	r3, #32
 80045d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	3301      	adds	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f47f af62 	bne.w	80044c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f003 fc41 	bl	8007e90 <USB_ReadInterrupts>
 800460e:	4603      	mov	r3, r0
 8004610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004618:	f040 80a4 	bne.w	8004764 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fc60 	bl	8007ee6 <USB_ReadDevAllInEpInterrupt>
 8004626:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800462c:	e096      	b.n	800475c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 808b 	beq.w	8004750 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f003 fc84 	bl	8007f52 <USB_ReadDevInEPInterrupt>
 800464a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d020      	beq.n	8004698 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	2201      	movs	r2, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43db      	mvns	r3, r3
 8004670:	69f9      	ldr	r1, [r7, #28]
 8004672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004676:	4013      	ands	r3, r2
 8004678:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	461a      	mov	r2, r3
 8004688:	2301      	movs	r3, #1
 800468a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	b2db      	uxtb	r3, r3
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f005 fb4f 	bl	8009d36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	461a      	mov	r2, r3
 80046b0:	2308      	movs	r3, #8
 80046b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2310      	movs	r3, #16
 80046ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d023      	beq.n	800473e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046f8:	6a38      	ldr	r0, [r7, #32]
 80046fa:	f002 fd2b 	bl	8007154 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	3338      	adds	r3, #56	; 0x38
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	3304      	adds	r3, #4
 8004710:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	b2db      	uxtb	r3, r3
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f005 fb92 	bl	8009e50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	2302      	movs	r3, #2
 800473c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fc96 	bl	800507c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	3301      	adds	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	f47f af65 	bne.w	800462e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f003 fb91 	bl	8007e90 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004778:	d114      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f005 fb3e 	bl	8009e10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80047a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f003 fb71 	bl	8007e90 <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b8:	d112      	bne.n	80047e0 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d102      	bne.n	80047d0 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f005 fafa 	bl	8009dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80047de:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f003 fb53 	bl	8007e90 <USB_ReadInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	f040 80b5 	bne.w	8004962 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2110      	movs	r1, #16
 8004812:	4618      	mov	r0, r3
 8004814:	f002 fc9e 	bl	8007154 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481c:	e046      	b.n	80048ac <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	461a      	mov	r2, r3
 800482c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004830:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004864:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	3301      	adds	r3, #1
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d3b3      	bcc.n	800481e <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80048c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e2:	f043 030b 	orr.w	r3, r3, #11
 80048e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f8:	f043 030b 	orr.w	r3, r3, #11
 80048fc:	6453      	str	r3, [r2, #68]	; 0x44
 80048fe:	e015      	b.n	800492c <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800490e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004912:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004916:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004926:	f043 030b 	orr.w	r3, r3, #11
 800492a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800493e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f003 fb5d 	bl	800800c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f003 fa92 	bl	8007e90 <USB_ReadInterrupts>
 800496c:	4603      	mov	r3, r0
 800496e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004976:	d124      	bne.n	80049c2 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f003 fb22 	bl	8007fc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f002 fc60 	bl	800724c <USB_GetDevSpeed>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681c      	ldr	r4, [r3, #0]
 8004998:	f001 f98c 	bl	8005cb4 <HAL_RCC_GetHCLKFreq>
 800499c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	4620      	mov	r0, r4
 80049a8:	f002 f9aa 	bl	8006d00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f005 f9ea 	bl	8009d86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f003 fa62 	bl	8007e90 <USB_ReadInterrupts>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d10a      	bne.n	80049ec <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f005 f9c7 	bl	8009d6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f002 0208 	and.w	r2, r2, #8
 80049ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fa4d 	bl	8007e90 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d122      	bne.n	8004a46 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a10:	e014      	b.n	8004a3c <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 faf2 	bl	800501a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	3301      	adds	r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3e5      	bcc.n	8004a12 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fa20 	bl	8007e90 <USB_ReadInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d13b      	bne.n	8004ad4 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e02b      	b.n	8004aba <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d115      	bne.n	8004ab4 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	da12      	bge.n	8004ab4 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	333f      	adds	r3, #63	; 0x3f
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fab3 	bl	800501a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3ce      	bcc.n	8004a62 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 f9d9 	bl	8007e90 <USB_ReadInterrupts>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae8:	d155      	bne.n	8004b96 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aea:	2301      	movs	r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e045      	b.n	8004b7c <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d12e      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da2b      	bge.n	8004b76 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d121      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b72:	6053      	str	r3, [r2, #4]
            break;
 8004b74:	e007      	b.n	8004b86 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	3301      	adds	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3b4      	bcc.n	8004af0 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 f978 	bl	8007e90 <USB_ReadInterrupts>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d10a      	bne.n	8004bc2 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f005 f961 	bl	8009e74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 f962 	bl	8007e90 <USB_ReadInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d115      	bne.n	8004c02 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f005 f951 	bl	8009e90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e000      	b.n	8004c02 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004c00:	bf00      	nop
    }
  }
}
 8004c02:	3734      	adds	r7, #52	; 0x34
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}

08004c08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_PCD_SetAddress+0x1a>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e013      	b.n	8004c4a <HAL_PCD_SetAddress+0x42>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 f8c3 	bl	8007dc6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	70fb      	strb	r3, [r7, #3]
 8004c64:	460b      	mov	r3, r1
 8004c66:	803b      	strh	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	da0f      	bge.n	8004c98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 020f 	and.w	r2, r3, #15
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	3338      	adds	r3, #56	; 0x38
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	705a      	strb	r2, [r3, #1]
 8004c96:	e00f      	b.n	8004cb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cc4:	883a      	ldrh	r2, [r7, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	78ba      	ldrb	r2, [r7, #2]
 8004cce:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ce2:	78bb      	ldrb	r3, [r7, #2]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d102      	bne.n	8004cee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_PCD_EP_Open+0xaa>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e00e      	b.n	8004d1a <HAL_PCD_EP_Open+0xc8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 fabc 	bl	8007288 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004d18:	7afb      	ldrb	r3, [r7, #11]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	da0f      	bge.n	8004d56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	3338      	adds	r3, #56	; 0x38
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	705a      	strb	r2, [r3, #1]
 8004d54:	e00f      	b.n	8004d76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_EP_Close+0x6e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e00e      	b.n	8004dae <HAL_PCD_EP_Close+0x8c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 faf8 	bl	8007394 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b086      	sub	sp, #24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	7afb      	ldrb	r3, [r7, #11]
 8004dc8:	f003 020f 	and.w	r2, r3, #15
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3304      	adds	r3, #4
 8004dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2200      	movs	r2, #0
 8004df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f002 fb9e 	bl	800754c <USB_EPStartXfer>

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004e3c:	681b      	ldr	r3, [r3, #0]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	460b      	mov	r3, r1
 8004e56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e58:	7afb      	ldrb	r3, [r7, #11]
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	4613      	mov	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3338      	adds	r3, #56	; 0x38
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2201      	movs	r2, #1
 8004e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6979      	ldr	r1, [r7, #20]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 fb56 	bl	800754c <USB_EPStartXfer>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d901      	bls.n	8004ec8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e04e      	b.n	8004f66 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da0f      	bge.n	8004ef0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	3338      	adds	r3, #56	; 0x38
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	705a      	strb	r2, [r3, #1]
 8004eee:	e00d      	b.n	8004f0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_PCD_EP_SetStall+0x82>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e01c      	b.n	8004f66 <HAL_PCD_EP_SetStall+0xbc>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f002 fe71 	bl	8007c22 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d108      	bne.n	8004f5c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f003 f858 	bl	800800c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	460b      	mov	r3, r1
 8004f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d901      	bls.n	8004f8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e042      	b.n	8005012 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da0f      	bge.n	8004fb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	3338      	adds	r3, #56	; 0x38
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3304      	adds	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	705a      	strb	r2, [r3, #1]
 8004fb2:	e00f      	b.n	8004fd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	3304      	adds	r3, #4
 8004fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_PCD_EP_ClrStall+0x86>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e00e      	b.n	8005012 <HAL_PCD_EP_ClrStall+0xa4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	4618      	mov	r0, r3
 8005004:	f002 fe7a 	bl	8007cfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800502a:	2b00      	cmp	r3, #0
 800502c:	da0c      	bge.n	8005048 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	3338      	adds	r3, #56	; 0x38
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	3304      	adds	r3, #4
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e00c      	b.n	8005062 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	4613      	mov	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	4618      	mov	r0, r3
 800506a:	f002 fca1 	bl	80079b0 <USB_EPStopXfer>
 800506e:	4603      	mov	r3, r0
 8005070:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005072:	7afb      	ldrb	r3, [r7, #11]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	3338      	adds	r3, #56	; 0x38
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	3304      	adds	r3, #4
 80050a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d901      	bls.n	80050b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e067      	b.n	8005184 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d902      	bls.n	80050d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3303      	adds	r3, #3
 80050d4:	089b      	lsrs	r3, r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050d8:	e026      	b.n	8005128 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d902      	bls.n	80050f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3303      	adds	r3, #3
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	b29b      	uxth	r3, r3
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f002 fcf9 	bl	8007b02 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	441a      	add	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	441a      	add	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	429a      	cmp	r2, r3
 800513c:	d809      	bhi.n	8005152 <PCD_WriteEmptyTxFifo+0xd6>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005146:	429a      	cmp	r2, r3
 8005148:	d203      	bcs.n	8005152 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1c3      	bne.n	80050da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	429a      	cmp	r2, r3
 800515c:	d811      	bhi.n	8005182 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	2201      	movs	r2, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	43db      	mvns	r3, r3
 8005178:	6939      	ldr	r1, [r7, #16]
 800517a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800517e:	4013      	ands	r3, r2
 8005180:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	333c      	adds	r3, #60	; 0x3c
 80051a4:	3304      	adds	r3, #4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <PCD_EP_OutXfrComplete_int+0x98>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d124      	bne.n	800520c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	461a      	mov	r2, r3
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	6093      	str	r3, [r2, #8]
 80051e0:	e01a      	b.n	8005218 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2320      	movs	r3, #32
 80051fc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f004 fd7b 	bl	8009d00 <HAL_PCD_DataOutStageCallback>
 800520a:	e005      	b.n	8005218 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f004 fd74 	bl	8009d00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	4f54310a 	.word	0x4f54310a

08005228 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	333c      	adds	r3, #60	; 0x3c
 8005240:	3304      	adds	r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a0c      	ldr	r2, [pc, #48]	; (800528c <PCD_EP_OutSetupPacket_int+0x64>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d90e      	bls.n	800527c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f004 fd2d 	bl	8009cdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	4f54300a 	.word	0x4f54300a

08005290 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
 800529c:	4613      	mov	r3, r2
 800529e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d107      	bne.n	80052be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052ae:	883b      	ldrh	r3, [r7, #0]
 80052b0:	0419      	lsls	r1, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
 80052bc:	e028      	b.n	8005310 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	e00d      	b.n	80052ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	3340      	adds	r3, #64	; 0x40
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	3301      	adds	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d3ec      	bcc.n	80052d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052f8:	883b      	ldrh	r3, [r7, #0]
 80052fa:	0418      	lsls	r0, r3, #16
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6819      	ldr	r1, [r3, #0]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	3b01      	subs	r3, #1
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	4302      	orrs	r2, r0
 8005308:	3340      	adds	r3, #64	; 0x40
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	887a      	ldrh	r2, [r7, #2]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e304      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8087 	beq.w	800546a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800535c:	4b92      	ldr	r3, [pc, #584]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b04      	cmp	r3, #4
 8005366:	d00c      	beq.n	8005382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005368:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d112      	bne.n	800539a <HAL_RCC_OscConfig+0x5e>
 8005374:	4b8c      	ldr	r3, [pc, #560]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d10b      	bne.n	800539a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005382:	4b89      	ldr	r3, [pc, #548]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d06c      	beq.n	8005468 <HAL_RCC_OscConfig+0x12c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d168      	bne.n	8005468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e2de      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x76>
 80053a4:	4b80      	ldr	r3, [pc, #512]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e02e      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x98>
 80053ba:	4b7b      	ldr	r3, [pc, #492]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b78      	ldr	r3, [pc, #480]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a77      	ldr	r2, [pc, #476]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0xbc>
 80053de:	4b72      	ldr	r3, [pc, #456]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a71      	ldr	r2, [pc, #452]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6e      	ldr	r2, [pc, #440]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053f8:	4b6b      	ldr	r3, [pc, #428]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6a      	ldr	r2, [pc, #424]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b68      	ldr	r3, [pc, #416]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a67      	ldr	r2, [pc, #412]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fd ff2a 	bl	8003270 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fd ff26 	bl	8003270 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e292      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b5d      	ldr	r3, [pc, #372]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xe4>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fd ff16 	bl	8003270 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fd ff12 	bl	8003270 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e27e      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b53      	ldr	r3, [pc, #332]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x10c>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d063      	beq.n	800553e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005476:	4b4c      	ldr	r3, [pc, #304]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005482:	4b49      	ldr	r3, [pc, #292]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	d11c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x18c>
 800548e:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d116      	bne.n	80054c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549a:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x176>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e252      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b2:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4939      	ldr	r1, [pc, #228]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	e03a      	b.n	800553e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_RCC_OscConfig+0x270>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d6:	f7fd fecb 	bl	8003270 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fd fec7 	bl	8003270 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e233      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4927      	ldr	r1, [pc, #156]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]
 8005510:	e015      	b.n	800553e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_RCC_OscConfig+0x270>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fd feaa 	bl	8003270 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005520:	f7fd fea6 	bl	8003270 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e212      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005532:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03a      	beq.n	80055c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d019      	beq.n	8005586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fd fe8a 	bl	8003270 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005560:	f7fd fe86 	bl	8003270 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e1f2      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800557e:	2001      	movs	r0, #1
 8005580:	f000 fba2 	bl	8005cc8 <RCC_Delay>
 8005584:	e01c      	b.n	80055c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558c:	f7fd fe70 	bl	8003270 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005592:	e00f      	b.n	80055b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005594:	f7fd fe6c 	bl	8003270 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d908      	bls.n	80055b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e1d8      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	42420000 	.word	0x42420000
 80055b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b4:	4b9b      	ldr	r3, [pc, #620]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e9      	bne.n	8005594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80a6 	beq.w	800571a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ce:	2300      	movs	r3, #0
 80055d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d2:	4b94      	ldr	r3, [pc, #592]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	4b91      	ldr	r3, [pc, #580]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4a90      	ldr	r2, [pc, #576]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	61d3      	str	r3, [r2, #28]
 80055ea:	4b8e      	ldr	r3, [pc, #568]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b8b      	ldr	r3, [pc, #556]	; (8005828 <HAL_RCC_OscConfig+0x4ec>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b88      	ldr	r3, [pc, #544]	; (8005828 <HAL_RCC_OscConfig+0x4ec>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a87      	ldr	r2, [pc, #540]	; (8005828 <HAL_RCC_OscConfig+0x4ec>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fd fe2d 	bl	8003270 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561a:	f7fd fe29 	bl	8003270 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b64      	cmp	r3, #100	; 0x64
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e195      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	4b7e      	ldr	r3, [pc, #504]	; (8005828 <HAL_RCC_OscConfig+0x4ec>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x312>
 8005640:	4b78      	ldr	r3, [pc, #480]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4a77      	ldr	r2, [pc, #476]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6213      	str	r3, [r2, #32]
 800564c:	e02d      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0x334>
 8005656:	4b73      	ldr	r3, [pc, #460]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4a72      	ldr	r2, [pc, #456]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	6213      	str	r3, [r2, #32]
 8005662:	4b70      	ldr	r3, [pc, #448]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4a6f      	ldr	r2, [pc, #444]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	6213      	str	r3, [r2, #32]
 800566e:	e01c      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d10c      	bne.n	8005692 <HAL_RCC_OscConfig+0x356>
 8005678:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4a69      	ldr	r2, [pc, #420]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800567e:	f043 0304 	orr.w	r3, r3, #4
 8005682:	6213      	str	r3, [r2, #32]
 8005684:	4b67      	ldr	r3, [pc, #412]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	4a66      	ldr	r2, [pc, #408]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6213      	str	r3, [r2, #32]
 8005690:	e00b      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 8005692:	4b64      	ldr	r3, [pc, #400]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4a63      	ldr	r2, [pc, #396]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	6213      	str	r3, [r2, #32]
 800569e:	4b61      	ldr	r3, [pc, #388]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4a60      	ldr	r2, [pc, #384]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d015      	beq.n	80056de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fd fddd 	bl	8003270 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	e00a      	b.n	80056d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fd fdd9 	bl	8003270 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e143      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	4b54      	ldr	r3, [pc, #336]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ee      	beq.n	80056ba <HAL_RCC_OscConfig+0x37e>
 80056dc:	e014      	b.n	8005708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056de:	f7fd fdc7 	bl	8003270 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fd fdc3 	bl	8003270 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e12d      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fc:	4b49      	ldr	r3, [pc, #292]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ee      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570e:	4b45      	ldr	r3, [pc, #276]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4a44      	ldr	r2, [pc, #272]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005718:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 808c 	beq.w	800583c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005724:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d10e      	bne.n	8005750 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005732:	4b3c      	ldr	r3, [pc, #240]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800573a:	2b08      	cmp	r3, #8
 800573c:	d108      	bne.n	8005750 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800573e:	4b39      	ldr	r3, [pc, #228]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574a:	d101      	bne.n	8005750 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e103      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	2b02      	cmp	r3, #2
 8005756:	d14e      	bne.n	80057f6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005758:	4b32      	ldr	r3, [pc, #200]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005764:	4b2f      	ldr	r3, [pc, #188]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0ef      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005778:	4b2c      	ldr	r3, [pc, #176]	; (800582c <HAL_RCC_OscConfig+0x4f0>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fd fd77 	bl	8003270 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005786:	f7fd fd73 	bl	8003270 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b64      	cmp	r3, #100	; 0x64
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0df      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f0      	bne.n	8005786 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80057a4:	4b1f      	ldr	r3, [pc, #124]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	491c      	ldr	r1, [pc, #112]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	4918      	ldr	r1, [pc, #96]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80057c8:	4b18      	ldr	r3, [pc, #96]	; (800582c <HAL_RCC_OscConfig+0x4f0>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fd fd4f 	bl	8003270 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057d6:	f7fd fd4b 	bl	8003270 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b64      	cmp	r3, #100	; 0x64
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0b7      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80057e8:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x49a>
 80057f4:	e022      	b.n	800583c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <HAL_RCC_OscConfig+0x4f0>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd fd32 	bl	8003270 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800580e:	e00f      	b.n	8005830 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005810:	f7fd fd2e 	bl	8003270 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d908      	bls.n	8005830 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e09a      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
 8005822:	bf00      	nop
 8005824:	40021000 	.word	0x40021000
 8005828:	40007000 	.word	0x40007000
 800582c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005830:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e9      	bne.n	8005810 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8088 	beq.w	8005956 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005846:	4b46      	ldr	r3, [pc, #280]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b08      	cmp	r3, #8
 8005850:	d068      	beq.n	8005924 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d14d      	bne.n	80058f6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <HAL_RCC_OscConfig+0x628>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fd fd06 	bl	8003270 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005868:	f7fd fd02 	bl	8003270 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e06e      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588e:	d10f      	bne.n	80058b0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005890:	4b33      	ldr	r3, [pc, #204]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4931      	ldr	r1, [pc, #196]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 800589a:	4313      	orrs	r3, r2
 800589c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800589e:	4b30      	ldr	r3, [pc, #192]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f023 020f 	bic.w	r2, r3, #15
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	492d      	ldr	r1, [pc, #180]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b0:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	430b      	orrs	r3, r1
 80058c2:	4927      	ldr	r1, [pc, #156]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c8:	4b26      	ldr	r3, [pc, #152]	; (8005964 <HAL_RCC_OscConfig+0x628>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fd fccf 	bl	8003270 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fd fccb 	bl	8003270 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e037      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x59a>
 80058f4:	e02f      	b.n	8005956 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x628>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fd fcb8 	bl	8003270 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fd fcb4 	bl	8003270 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e020      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005916:	4b12      	ldr	r3, [pc, #72]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x5c8>
 8005922:	e018      	b.n	8005956 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e013      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_OscConfig+0x624>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	429a      	cmp	r2, r3
 8005942:	d106      	bne.n	8005952 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d001      	beq.n	8005956 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40021000 	.word	0x40021000
 8005964:	42420060 	.word	0x42420060

08005968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0d0      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800597c:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d910      	bls.n	80059ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b67      	ldr	r3, [pc, #412]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 0207 	bic.w	r2, r3, #7
 8005992:	4965      	ldr	r1, [pc, #404]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b63      	ldr	r3, [pc, #396]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0b8      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c4:	4b59      	ldr	r3, [pc, #356]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4a58      	ldr	r2, [pc, #352]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059dc:	4b53      	ldr	r3, [pc, #332]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a52      	ldr	r2, [pc, #328]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e8:	4b50      	ldr	r3, [pc, #320]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	494d      	ldr	r1, [pc, #308]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d040      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0e:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d115      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e07f      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d107      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a26:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e073      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a36:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e06b      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a46:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f023 0203 	bic.w	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4936      	ldr	r1, [pc, #216]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a58:	f7fd fc0a 	bl	8003270 <HAL_GetTick>
 8005a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a60:	f7fd fc06 	bl	8003270 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e053      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a76:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 020c 	and.w	r2, r3, #12
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d1eb      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d210      	bcs.n	8005ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b24      	ldr	r3, [pc, #144]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 0207 	bic.w	r2, r3, #7
 8005a9e:	4922      	ldr	r1, [pc, #136]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e032      	b.n	8005b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4916      	ldr	r1, [pc, #88]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	490e      	ldr	r1, [pc, #56]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005af6:	f000 f821 	bl	8005b3c <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_ClockConfig+0x1c4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	490a      	ldr	r1, [pc, #40]	; (8005b30 <HAL_RCC_ClockConfig+0x1c8>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1cc>)
 8005b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <HAL_RCC_ClockConfig+0x1d0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fd fb68 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	0800b438 	.word	0x0800b438
 8005b34:	20000050 	.word	0x20000050
 8005b38:	20000054 	.word	0x20000054

08005b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b40:	b08e      	sub	sp, #56	; 0x38
 8005b42:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b60:	4b4e      	ldr	r3, [pc, #312]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	f003 030c 	and.w	r3, r3, #12
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d002      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d003      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x40>
 8005b74:	e089      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b7a:	e089      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	0c9b      	lsrs	r3, r3, #18
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005b86:	5c9b      	ldrb	r3, [r3, r2]
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d072      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005b94:	4b41      	ldr	r3, [pc, #260]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	4b42      	ldr	r3, [pc, #264]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005b9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005ba2:	4b3e      	ldr	r3, [pc, #248]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d053      	beq.n	8005c56 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005bae:	4b3b      	ldr	r3, [pc, #236]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	3301      	adds	r3, #1
 8005bba:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005bbc:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	469a      	mov	sl, r3
 8005bd0:	4693      	mov	fp, r2
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	617a      	str	r2, [r7, #20]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	fb03 f20b 	mul.w	r2, r3, fp
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	fb0a f303 	mul.w	r3, sl, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	fbaa 0102 	umull	r0, r1, sl, r2
 8005bee:	440b      	add	r3, r1
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4b2b      	ldr	r3, [pc, #172]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005bf4:	fb03 f201 	mul.w	r2, r3, r1
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	fb00 f303 	mul.w	r3, r0, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c02:	fba0 4502 	umull	r4, r5, r0, r2
 8005c06:	442b      	add	r3, r5
 8005c08:	461d      	mov	r5, r3
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	2200      	movs	r2, #0
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c24:	4652      	mov	r2, sl
 8005c26:	fb02 f203 	mul.w	r2, r2, r3
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	4684      	mov	ip, r0
 8005c2e:	fb0c f303 	mul.w	r3, ip, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	4602      	mov	r2, r0
 8005c36:	4651      	mov	r1, sl
 8005c38:	fba2 8901 	umull	r8, r9, r2, r1
 8005c3c:	444b      	add	r3, r9
 8005c3e:	4699      	mov	r9, r3
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	4620      	mov	r0, r4
 8005c46:	4629      	mov	r1, r5
 8005c48:	f7fb fa30 	bl	80010ac <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4613      	mov	r3, r2
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
 8005c54:	e007      	b.n	8005c66 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c5a:	fb03 f202 	mul.w	r2, r3, r2
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c68:	7b5b      	ldrb	r3, [r3, #13]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
 8005c78:	e004      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <HAL_RCC_GetSysClockFreq+0x170>)
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c88:	e002      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x174>)
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3738      	adds	r7, #56	; 0x38
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	017d7840 	.word	0x017d7840
 8005ca4:	0800b448 	.word	0x0800b448
 8005ca8:	0800b458 	.word	0x0800b458
 8005cac:	003d0900 	.word	0x003d0900
 8005cb0:	007a1200 	.word	0x007a1200

08005cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	20000050 	.word	0x20000050

08005cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <RCC_Delay+0x34>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <RCC_Delay+0x38>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	0a5b      	lsrs	r3, r3, #9
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ce4:	bf00      	nop
  }
  while (Delay --);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	60fa      	str	r2, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f9      	bne.n	8005ce4 <RCC_Delay+0x1c>
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr
 8005cfc:	20000050 	.word	0x20000050
 8005d00:	10624dd3 	.word	0x10624dd3

08005d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	2300      	movs	r3, #0
 8005d12:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d07d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005d24:	2300      	movs	r3, #0
 8005d26:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d28:	4b8b      	ldr	r3, [pc, #556]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d34:	4b88      	ldr	r3, [pc, #544]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4a87      	ldr	r2, [pc, #540]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	61d3      	str	r3, [r2, #28]
 8005d40:	4b85      	ldr	r3, [pc, #532]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b82      	ldr	r3, [pc, #520]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d118      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b7f      	ldr	r3, [pc, #508]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7e      	ldr	r2, [pc, #504]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d68:	f7fd fa82 	bl	8003270 <HAL_GetTick>
 8005d6c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	e008      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d70:	f7fd fa7e 	bl	8003270 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e0e5      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8e:	4b72      	ldr	r3, [pc, #456]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d027      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dac:	4b6a      	ldr	r3, [pc, #424]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db6:	4b6a      	ldr	r3, [pc, #424]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dbc:	4b68      	ldr	r3, [pc, #416]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005dc2:	4a65      	ldr	r2, [pc, #404]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fd fa4d 	bl	8003270 <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fd fa49 	bl	8003270 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e0ae      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ee      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfc:	4b56      	ldr	r3, [pc, #344]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4953      	ldr	r1, [pc, #332]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e0e:	7efb      	ldrb	r3, [r7, #27]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e14:	4b50      	ldr	r3, [pc, #320]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4a4f      	ldr	r2, [pc, #316]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e2c:	4b4a      	ldr	r3, [pc, #296]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4947      	ldr	r1, [pc, #284]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d008      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005e4a:	4b43      	ldr	r3, [pc, #268]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	4940      	ldr	r1, [pc, #256]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005e68:	4b3b      	ldr	r3, [pc, #236]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4938      	ldr	r1, [pc, #224]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005e7a:	4b37      	ldr	r3, [pc, #220]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d105      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005e86:	4b34      	ldr	r3, [pc, #208]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d148      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005e9c:	4b2e      	ldr	r3, [pc, #184]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d138      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005eb4:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e042      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005ec8:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	4920      	ldr	r1, [pc, #128]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	491c      	ldr	r1, [pc, #112]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fd f9bd 	bl	8003270 <HAL_GetTick>
 8005ef6:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005efa:	f7fd f9b9 	bl	8003270 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	; 0x64
 8005f06:	d901      	bls.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e020      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005f18:	e009      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d001      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e00f      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4904      	ldr	r1, [pc, #16]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40007000 	.word	0x40007000
 8005f60:	42420440 	.word	0x42420440
 8005f64:	42420070 	.word	0x42420070

08005f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e076      	b.n	8006068 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8a:	d009      	beq.n	8005fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	61da      	str	r2, [r3, #28]
 8005f92:	e005      	b.n	8005fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc ff84 	bl	8002ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006024:	ea42 0103 	orr.w	r1, r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	0c1a      	lsrs	r2, r3, #16
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f002 0204 	and.w	r2, r2, #4
 8006046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	603b      	str	r3, [r7, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_SPI_Transmit+0x22>
 800608e:	2302      	movs	r3, #2
 8006090:	e12d      	b.n	80062ee <HAL_SPI_Transmit+0x27e>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800609a:	f7fd f8e9 	bl	8003270 <HAL_GetTick>
 800609e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
 80060b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060b4:	e116      	b.n	80062e4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_SPI_Transmit+0x52>
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060c6:	e10d      	b.n	80062e4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2203      	movs	r2, #3
 80060cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	88fa      	ldrh	r2, [r7, #6]
 80060e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	88fa      	ldrh	r2, [r7, #6]
 80060e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610e:	d10f      	bne.n	8006130 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800612e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d007      	beq.n	800614e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d14f      	bne.n	80061f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_SPI_Transmit+0xf6>
 8006160:	8afb      	ldrh	r3, [r7, #22]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d142      	bne.n	80061ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	881a      	ldrh	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800618a:	e02f      	b.n	80061ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d112      	bne.n	80061c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	1c9a      	adds	r2, r3, #2
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80061be:	e015      	b.n	80061ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c0:	f7fd f856 	bl	8003270 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d803      	bhi.n	80061d8 <HAL_SPI_Transmit+0x168>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d102      	bne.n	80061de <HAL_SPI_Transmit+0x16e>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061ea:	e07b      	b.n	80062e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1ca      	bne.n	800618c <HAL_SPI_Transmit+0x11c>
 80061f6:	e050      	b.n	800629a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_SPI_Transmit+0x196>
 8006200:	8afb      	ldrh	r3, [r7, #22]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d144      	bne.n	8006290 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800622c:	e030      	b.n	8006290 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b02      	cmp	r3, #2
 800623a:	d113      	bne.n	8006264 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	86da      	strh	r2, [r3, #54]	; 0x36
 8006262:	e015      	b.n	8006290 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006264:	f7fd f804 	bl	8003270 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d803      	bhi.n	800627c <HAL_SPI_Transmit+0x20c>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d102      	bne.n	8006282 <HAL_SPI_Transmit+0x212>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800628e:	e029      	b.n	80062e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1c9      	bne.n	800622e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fbcc 	bl	8006a3c <SPI_EndRxTxTransaction>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e003      	b.n	80062e4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af02      	add	r7, sp, #8
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b01      	cmp	r3, #1
 8006314:	d002      	beq.n	800631c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006316:	2302      	movs	r3, #2
 8006318:	75fb      	strb	r3, [r7, #23]
    goto error;
 800631a:	e0fb      	b.n	8006514 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006324:	d112      	bne.n	800634c <HAL_SPI_Receive+0x56>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10e      	bne.n	800634c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2204      	movs	r2, #4
 8006332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f8ef 	bl	8006526 <HAL_SPI_TransmitReceive>
 8006348:	4603      	mov	r3, r0
 800634a:	e0e8      	b.n	800651e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_SPI_Receive+0x64>
 8006356:	2302      	movs	r3, #2
 8006358:	e0e1      	b.n	800651e <HAL_SPI_Receive+0x228>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006362:	f7fc ff85 	bl	8003270 <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_SPI_Receive+0x7e>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006378:	e0cc      	b.n	8006514 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2204      	movs	r2, #4
 800637e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	d10f      	bne.n	80063e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d007      	beq.n	8006400 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d16a      	bne.n	80064de <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006408:	e032      	b.n	8006470 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d115      	bne.n	8006444 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f103 020c 	add.w	r2, r3, #12
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006442:	e015      	b.n	8006470 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006444:	f7fc ff14 	bl	8003270 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d803      	bhi.n	800645c <HAL_SPI_Receive+0x166>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d102      	bne.n	8006462 <HAL_SPI_Receive+0x16c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800646e:	e051      	b.n	8006514 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1c7      	bne.n	800640a <HAL_SPI_Receive+0x114>
 800647a:	e035      	b.n	80064e8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d113      	bne.n	80064b2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	b292      	uxth	r2, r2
 8006496:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b0:	e015      	b.n	80064de <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b2:	f7fc fedd 	bl	8003270 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d803      	bhi.n	80064ca <HAL_SPI_Receive+0x1d4>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c8:	d102      	bne.n	80064d0 <HAL_SPI_Receive+0x1da>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80064dc:	e01a      	b.n	8006514 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1c9      	bne.n	800647c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fa53 	bl	8006998 <SPI_EndRxTransaction>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	e003      	b.n	8006514 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800651c:	7dfb      	ldrb	r3, [r7, #23]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08c      	sub	sp, #48	; 0x30
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006534:	2301      	movs	r3, #1
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_SPI_TransmitReceive+0x26>
 8006548:	2302      	movs	r3, #2
 800654a:	e198      	b.n	800687e <HAL_SPI_TransmitReceive+0x358>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006554:	f7fc fe8c 	bl	8003270 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800656a:	887b      	ldrh	r3, [r7, #2]
 800656c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800656e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006572:	2b01      	cmp	r3, #1
 8006574:	d00f      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x70>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657c:	d107      	bne.n	800658e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_SPI_TransmitReceive+0x68>
 8006586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658a:	2b04      	cmp	r3, #4
 800658c:	d003      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006594:	e16d      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x82>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x82>
 80065a2:	887b      	ldrh	r3, [r7, #2]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065ae:	e160      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d003      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2205      	movs	r2, #5
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	887a      	ldrh	r2, [r7, #2]
 80065da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	887a      	ldrh	r2, [r7, #2]
 80065e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	887a      	ldrh	r2, [r7, #2]
 80065ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d007      	beq.n	8006618 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d17c      	bne.n	800671c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x10a>
 800662a:	8b7b      	ldrh	r3, [r7, #26]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d16a      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006654:	e057      	b.n	8006706 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d11b      	bne.n	800669c <HAL_SPI_TransmitReceive+0x176>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_SPI_TransmitReceive+0x176>
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d113      	bne.n	800669c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	1c9a      	adds	r2, r3, #2
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d119      	bne.n	80066de <HAL_SPI_TransmitReceive+0x1b8>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d014      	beq.n	80066de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	b292      	uxth	r2, r2
 80066c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066da:	2301      	movs	r3, #1
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066de:	f7fc fdc7 	bl	8003270 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d80b      	bhi.n	8006706 <HAL_SPI_TransmitReceive+0x1e0>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d007      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006704:	e0b5      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1a2      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x130>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d19d      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x130>
 800671a:	e080      	b.n	800681e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_SPI_TransmitReceive+0x204>
 8006724:	8b7b      	ldrh	r3, [r7, #26]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d16f      	bne.n	800680a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	7812      	ldrb	r2, [r2, #0]
 8006736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006750:	e05b      	b.n	800680a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d11c      	bne.n	800679a <HAL_SPI_TransmitReceive+0x274>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d017      	beq.n	800679a <HAL_SPI_TransmitReceive+0x274>
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d114      	bne.n	800679a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	7812      	ldrb	r2, [r2, #0]
 800677c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d119      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x2b6>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d014      	beq.n	80067dc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067d8:	2301      	movs	r3, #1
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067dc:	f7fc fd48 	bl	8003270 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d803      	bhi.n	80067f4 <HAL_SPI_TransmitReceive+0x2ce>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d102      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x2d4>
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006808:	e033      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d19e      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x22c>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d199      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f90a 	bl	8006a3c <SPI_EndRxTxTransaction>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800683a:	e01a      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006868:	e003      	b.n	8006872 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800687a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800687e:	4618      	mov	r0, r3
 8006880:	3730      	adds	r7, #48	; 0x30
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006898:	f7fc fcea 	bl	8003270 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068a8:	f7fc fce2 	bl	8003270 <HAL_GetTick>
 80068ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ae:	4b39      	ldr	r3, [pc, #228]	; (8006994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	015b      	lsls	r3, r3, #5
 80068b4:	0d1b      	lsrs	r3, r3, #20
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068be:	e054      	b.n	800696a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d050      	beq.n	800696a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068c8:	f7fc fcd2 	bl	8003270 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d902      	bls.n	80068de <SPI_WaitFlagStateUntilTimeout+0x56>
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d13d      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d111      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x94>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d004      	beq.n	800690c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d107      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d10f      	bne.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e017      	b.n	800698a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3b01      	subs	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4013      	ands	r3, r2
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	429a      	cmp	r2, r3
 8006986:	d19b      	bne.n	80068c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000050 	.word	0x20000050

08006998 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ac:	d111      	bne.n	80069d2 <SPI_EndRxTransaction+0x3a>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b6:	d004      	beq.n	80069c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c0:	d107      	bne.n	80069d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069da:	d117      	bne.n	8006a0c <SPI_EndRxTransaction+0x74>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d112      	bne.n	8006a0c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2101      	movs	r1, #1
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff ff49 	bl	8006888 <SPI_WaitFlagStateUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01a      	beq.n	8006a32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e013      	b.n	8006a34 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	2180      	movs	r1, #128	; 0x80
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff ff36 	bl	8006888 <SPI_WaitFlagStateUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e000      	b.n	8006a34 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff ff18 	bl	8006888 <SPI_WaitFlagStateUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f043 0220 	orr.w	r2, r3, #32
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e000      	b.n	8006a70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e041      	b.n	8006b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fc fb4a 	bl	8003138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 f82e 	bl	8006b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2d      	ldr	r2, [pc, #180]	; (8006be0 <TIM_Base_SetConfig+0xc8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00f      	beq.n	8006b50 <TIM_Base_SetConfig+0x38>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d00b      	beq.n	8006b50 <TIM_Base_SetConfig+0x38>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <TIM_Base_SetConfig+0xcc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d007      	beq.n	8006b50 <TIM_Base_SetConfig+0x38>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <TIM_Base_SetConfig+0xd0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_Base_SetConfig+0x38>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a28      	ldr	r2, [pc, #160]	; (8006bec <TIM_Base_SetConfig+0xd4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d108      	bne.n	8006b62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <TIM_Base_SetConfig+0xc8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00f      	beq.n	8006b8a <TIM_Base_SetConfig+0x72>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b70:	d00b      	beq.n	8006b8a <TIM_Base_SetConfig+0x72>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1b      	ldr	r2, [pc, #108]	; (8006be4 <TIM_Base_SetConfig+0xcc>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_Base_SetConfig+0x72>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <TIM_Base_SetConfig+0xd0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_Base_SetConfig+0x72>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <TIM_Base_SetConfig+0xd4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d108      	bne.n	8006b9c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <TIM_Base_SetConfig+0xc8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d103      	bne.n	8006bd0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	615a      	str	r2, [r3, #20]
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e04b      	b.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c54:	d00e      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10c      	bne.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00

08006cbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	f107 001c 	add.w	r0, r7, #28
 8006cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 f9de 	bl	800809c <USB_CoreReset>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfc:	b004      	add	sp, #16
 8006cfe:	4770      	bx	lr

08006d00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d165      	bne.n	8006de0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a3e      	ldr	r2, [pc, #248]	; (8006e10 <USB_SetTurnaroundTime+0x110>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d906      	bls.n	8006d2a <USB_SetTurnaroundTime+0x2a>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <USB_SetTurnaroundTime+0x114>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d202      	bcs.n	8006d2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d24:	230f      	movs	r3, #15
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e05c      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4a39      	ldr	r2, [pc, #228]	; (8006e14 <USB_SetTurnaroundTime+0x114>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d306      	bcc.n	8006d40 <USB_SetTurnaroundTime+0x40>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a38      	ldr	r2, [pc, #224]	; (8006e18 <USB_SetTurnaroundTime+0x118>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d202      	bcs.n	8006d40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d3a:	230e      	movs	r3, #14
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	e051      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a35      	ldr	r2, [pc, #212]	; (8006e18 <USB_SetTurnaroundTime+0x118>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d306      	bcc.n	8006d56 <USB_SetTurnaroundTime+0x56>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a34      	ldr	r2, [pc, #208]	; (8006e1c <USB_SetTurnaroundTime+0x11c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d202      	bcs.n	8006d56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d50:	230d      	movs	r3, #13
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e046      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a30      	ldr	r2, [pc, #192]	; (8006e1c <USB_SetTurnaroundTime+0x11c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d306      	bcc.n	8006d6c <USB_SetTurnaroundTime+0x6c>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a2f      	ldr	r2, [pc, #188]	; (8006e20 <USB_SetTurnaroundTime+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d802      	bhi.n	8006d6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d66:	230c      	movs	r3, #12
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	e03b      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <USB_SetTurnaroundTime+0x120>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d906      	bls.n	8006d82 <USB_SetTurnaroundTime+0x82>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <USB_SetTurnaroundTime+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d802      	bhi.n	8006d82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d7c:	230b      	movs	r3, #11
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e030      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <USB_SetTurnaroundTime+0x124>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d906      	bls.n	8006d98 <USB_SetTurnaroundTime+0x98>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	; (8006e28 <USB_SetTurnaroundTime+0x128>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d802      	bhi.n	8006d98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d92:	230a      	movs	r3, #10
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e025      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4a23      	ldr	r2, [pc, #140]	; (8006e28 <USB_SetTurnaroundTime+0x128>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d906      	bls.n	8006dae <USB_SetTurnaroundTime+0xae>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <USB_SetTurnaroundTime+0x12c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d202      	bcs.n	8006dae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006da8:	2309      	movs	r3, #9
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e01a      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <USB_SetTurnaroundTime+0x12c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d306      	bcc.n	8006dc4 <USB_SetTurnaroundTime+0xc4>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <USB_SetTurnaroundTime+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d802      	bhi.n	8006dc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e00f      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <USB_SetTurnaroundTime+0x130>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d906      	bls.n	8006dda <USB_SetTurnaroundTime+0xda>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a19      	ldr	r2, [pc, #100]	; (8006e34 <USB_SetTurnaroundTime+0x134>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d202      	bcs.n	8006dda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dd4:	2307      	movs	r3, #7
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	e004      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dda:	2306      	movs	r3, #6
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e001      	b.n	8006de4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006de0:	2309      	movs	r3, #9
 8006de2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	029b      	lsls	r3, r3, #10
 8006df8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	00d8acbf 	.word	0x00d8acbf
 8006e14:	00e4e1c0 	.word	0x00e4e1c0
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	01067380 	.word	0x01067380
 8006e20:	011a499f 	.word	0x011a499f
 8006e24:	01312cff 	.word	0x01312cff
 8006e28:	014ca43f 	.word	0x014ca43f
 8006e2c:	016e3600 	.word	0x016e3600
 8006e30:	01a6ab1f 	.word	0x01a6ab1f
 8006e34:	01e84800 	.word	0x01e84800

08006e38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f043 0201 	orr.w	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 0201 	bic.w	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d115      	bne.n	8006ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f7fc f9ec 	bl	8003284 <HAL_Delay>
      ms++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 f87a 	bl	8007fac <USB_GetMode>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d01e      	beq.n	8006efc <USB_SetCurrentMode+0x84>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b31      	cmp	r3, #49	; 0x31
 8006ec2:	d9f0      	bls.n	8006ea6 <USB_SetCurrentMode+0x2e>
 8006ec4:	e01a      	b.n	8006efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d115      	bne.n	8006ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ed8:	2001      	movs	r0, #1
 8006eda:	f7fc f9d3 	bl	8003284 <HAL_Delay>
      ms++;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 f861 	bl	8007fac <USB_GetMode>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USB_SetCurrentMode+0x84>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b31      	cmp	r3, #49	; 0x31
 8006ef4:	d9f0      	bls.n	8006ed8 <USB_SetCurrentMode+0x60>
 8006ef6:	e001      	b.n	8006efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e005      	b.n	8006f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b32      	cmp	r3, #50	; 0x32
 8006f00:	d101      	bne.n	8006f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f10:	b084      	sub	sp, #16
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e009      	b.n	8006f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3340      	adds	r3, #64	; 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b0e      	cmp	r3, #14
 8006f48:	d9f2      	bls.n	8006f30 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f62:	2103      	movs	r1, #3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f959 	bl	800721c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f6a:	2110      	movs	r1, #16
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8f1 	bl	8007154 <USB_FlushTxFifo>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f91d 	bl	80071bc <USB_FlushRxFifo>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	461a      	mov	r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006faa:	461a      	mov	r2, r3
 8006fac:	2300      	movs	r3, #0
 8006fae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	e043      	b.n	800703e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fcc:	d118      	bne.n	8007000 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e013      	b.n	8007012 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e008      	b.n	8007012 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	461a      	mov	r2, r3
 800700e:	2300      	movs	r3, #0
 8007010:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	461a      	mov	r2, r3
 8007032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	429a      	cmp	r2, r3
 8007044:	d3b7      	bcc.n	8006fb6 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	e043      	b.n	80070d4 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007062:	d118      	bne.n	8007096 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e013      	b.n	80070a8 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	461a      	mov	r2, r3
 800708e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e008      	b.n	80070a8 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b4:	461a      	mov	r2, r3
 80070b6:	2300      	movs	r3, #0
 80070b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	461a      	mov	r2, r3
 80070c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3301      	adds	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d3b7      	bcc.n	800704c <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f043 0210 	orr.w	r2, r3, #16
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <USB_DevInit+0x240>)
 8007110:	4313      	orrs	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	f043 0208 	orr.w	r2, r3, #8
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007136:	f043 0304 	orr.w	r3, r3, #4
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800714a:	b004      	add	sp, #16
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	803c3800 	.word	0x803c3800

08007154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <USB_FlushTxFifo+0x64>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e01b      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	daf2      	bge.n	8007162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	019b      	lsls	r3, r3, #6
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a08      	ldr	r2, [pc, #32]	; (80071b8 <USB_FlushTxFifo+0x64>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e006      	b.n	80071ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d0f0      	beq.n	800718c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	00030d40 	.word	0x00030d40

080071bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <USB_FlushRxFifo+0x5c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e018      	b.n	800720c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	daf2      	bge.n	80071c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2210      	movs	r2, #16
 80071ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <USB_FlushRxFifo+0x5c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2b10      	cmp	r3, #16
 8007208:	d0f0      	beq.n	80071ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	00030d40 	.word	0x00030d40

0800721c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800723c:	4313      	orrs	r3, r2
 800723e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0306 	and.w	r3, r3, #6
 8007264:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d002      	beq.n	8007272 <USB_GetDevSpeed+0x26>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b06      	cmp	r3, #6
 8007270:	d102      	bne.n	8007278 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007272:	2302      	movs	r3, #2
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e001      	b.n	800727c <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007278:	230f      	movs	r3, #15
 800727a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d13a      	bne.n	800731a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	2101      	movs	r1, #1
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	68f9      	ldr	r1, [r7, #12]
 80072be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c2:	4313      	orrs	r3, r2
 80072c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d155      	bne.n	8007388 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	791b      	ldrb	r3, [r3, #4]
 80072f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	059b      	lsls	r3, r3, #22
 80072fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007300:	4313      	orrs	r3, r2
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	e036      	b.n	8007388 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007320:	69da      	ldr	r2, [r3, #28]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 030f 	and.w	r3, r3, #15
 800732a:	2101      	movs	r1, #1
 800732c:	fa01 f303 	lsl.w	r3, r1, r3
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007338:	4313      	orrs	r3, r2
 800733a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d11a      	bne.n	8007388 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	791b      	ldrb	r3, [r3, #4]
 800736c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800736e:	430b      	orrs	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	440a      	add	r2, r1
 800737a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800737e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007386:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d161      	bne.n	8007474 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c6:	d11f      	bne.n	8007408 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	0151      	lsls	r1, r2, #5
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	440a      	add	r2, r1
 80073de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007406:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2101      	movs	r1, #1
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	b29b      	uxth	r3, r3
 8007420:	43db      	mvns	r3, r3
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007428:	4013      	ands	r3, r2
 800742a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	2101      	movs	r1, #1
 800743e:	fa01 f303 	lsl.w	r3, r1, r3
 8007442:	b29b      	uxth	r3, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800744c:	4013      	ands	r3, r2
 800744e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	0159      	lsls	r1, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	440b      	add	r3, r1
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	4619      	mov	r1, r3
 800746c:	4b35      	ldr	r3, [pc, #212]	; (8007544 <USB_DeactivateEndpoint+0x1b0>)
 800746e:	4013      	ands	r3, r2
 8007470:	600b      	str	r3, [r1, #0]
 8007472:	e060      	b.n	8007536 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800748a:	d11f      	bne.n	80074cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	041b      	lsls	r3, r3, #16
 80074e4:	43db      	mvns	r3, r3
 80074e6:	68f9      	ldr	r1, [r7, #12]
 80074e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074ec:	4013      	ands	r3, r2
 80074ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	2101      	movs	r1, #1
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	041b      	lsls	r3, r3, #16
 8007508:	43db      	mvns	r3, r3
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007510:	4013      	ands	r3, r2
 8007512:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	0159      	lsls	r1, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	440b      	add	r3, r1
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	4619      	mov	r1, r3
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <USB_DeactivateEndpoint+0x1b4>)
 8007532:	4013      	ands	r3, r2
 8007534:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	ec337800 	.word	0xec337800
 8007548:	eff37800 	.word	0xeff37800

0800754c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	785b      	ldrb	r3, [r3, #1]
 8007564:	2b01      	cmp	r3, #1
 8007566:	f040 8128 	bne.w	80077ba <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d132      	bne.n	80075d8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800758c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d0:	0cdb      	lsrs	r3, r3, #19
 80075d2:	04db      	lsls	r3, r3, #19
 80075d4:	6113      	str	r3, [r2, #16]
 80075d6:	e092      	b.n	80076fe <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f2:	0cdb      	lsrs	r3, r3, #19
 80075f4:	04db      	lsls	r3, r3, #19
 80075f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007612:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007616:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800761a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d11a      	bne.n	8007658 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	d903      	bls.n	8007636 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007654:	6113      	str	r3, [r2, #16]
 8007656:	e01b      	b.n	8007690 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6919      	ldr	r1, [r3, #16]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	440b      	add	r3, r1
 8007670:	1e59      	subs	r1, r3, #1
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	fbb1 f3f3 	udiv	r3, r1, r3
 800767a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800767c:	4b8d      	ldr	r3, [pc, #564]	; (80078b4 <USB_EPStartXfer+0x368>)
 800767e:	400b      	ands	r3, r1
 8007680:	6939      	ldr	r1, [r7, #16]
 8007682:	0148      	lsls	r0, r1, #5
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	4401      	add	r1, r0
 8007688:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800768c:	4313      	orrs	r3, r2
 800768e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a6:	6939      	ldr	r1, [r7, #16]
 80076a8:	0148      	lsls	r0, r1, #5
 80076aa:	6979      	ldr	r1, [r7, #20]
 80076ac:	4401      	add	r1, r0
 80076ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076b2:	4313      	orrs	r3, r2
 80076b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	791b      	ldrb	r3, [r3, #4]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d11f      	bne.n	80076fe <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076fc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007718:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800771c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d015      	beq.n	8007752 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8139 	beq.w	80079a2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	2101      	movs	r1, #1
 8007742:	fa01 f303 	lsl.w	r3, r1, r3
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774c:	4313      	orrs	r3, r2
 800774e:	634b      	str	r3, [r1, #52]	; 0x34
 8007750:	e127      	b.n	80079a2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775e:	2b00      	cmp	r3, #0
 8007760:	d110      	bne.n	8007784 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e00f      	b.n	80077a4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800779e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68d9      	ldr	r1, [r3, #12]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9a5 	bl	8007b02 <USB_WritePacket>
 80077b8:	e0f3      	b.n	80079a2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d4:	0cdb      	lsrs	r3, r3, #19
 80077d6:	04db      	lsls	r3, r3, #19
 80077d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077fc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d12f      	bne.n	8007864 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007832:	6939      	ldr	r1, [r7, #16]
 8007834:	0148      	lsls	r0, r1, #5
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	4401      	add	r1, r0
 800783a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800783e:	4313      	orrs	r3, r2
 8007840:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007860:	6113      	str	r3, [r2, #16]
 8007862:	e061      	b.n	8007928 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d125      	bne.n	80078b8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007882:	6939      	ldr	r1, [r7, #16]
 8007884:	0148      	lsls	r0, r1, #5
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	4401      	add	r1, r0
 800788a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800788e:	4313      	orrs	r3, r2
 8007890:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	0151      	lsls	r1, r2, #5
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	440a      	add	r2, r1
 80078a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b0:	6113      	str	r3, [r2, #16]
 80078b2:	e039      	b.n	8007928 <USB_EPStartXfer+0x3dc>
 80078b4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	89fa      	ldrh	r2, [r7, #14]
 80078d4:	fb03 f202 	mul.w	r2, r3, r2
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	89fb      	ldrh	r3, [r7, #14]
 80078ec:	04d9      	lsls	r1, r3, #19
 80078ee:	4b2f      	ldr	r3, [pc, #188]	; (80079ac <USB_EPStartXfer+0x460>)
 80078f0:	400b      	ands	r3, r1
 80078f2:	6939      	ldr	r1, [r7, #16]
 80078f4:	0148      	lsls	r0, r1, #5
 80078f6:	6979      	ldr	r1, [r7, #20]
 80078f8:	4401      	add	r1, r0
 80078fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007918:	6939      	ldr	r1, [r7, #16]
 800791a:	0148      	lsls	r0, r1, #5
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	4401      	add	r1, r0
 8007920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007924:	4313      	orrs	r3, r2
 8007926:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	791b      	ldrb	r3, [r3, #4]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d128      	bne.n	8007982 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d110      	bne.n	8007962 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	e00f      	b.n	8007982 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007980:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	1ff80000 	.word	0x1ff80000

080079b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d14a      	bne.n	8007a64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079e6:	f040 8086 	bne.w	8007af6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	7812      	ldrb	r2, [r2, #0]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d902      	bls.n	8007a48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
          break;
 8007a46:	e056      	b.n	8007af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a60:	d0e7      	beq.n	8007a32 <USB_EPStopXfer+0x82>
 8007a62:	e048      	b.n	8007af6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7c:	d13b      	bne.n	8007af6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d902      	bls.n	8007adc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8007ada:	e00c      	b.n	8007af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af4:	d0e7      	beq.n	8007ac6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	371c      	adds	r7, #28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b089      	sub	sp, #36	; 0x24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	461a      	mov	r2, r3
 8007b10:	460b      	mov	r3, r1
 8007b12:	71fb      	strb	r3, [r7, #7]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007b20:	88bb      	ldrh	r3, [r7, #4]
 8007b22:	3303      	adds	r3, #3
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	e018      	b.n	8007b60 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	031a      	lsls	r2, r3, #12
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	3301      	adds	r3, #1
 8007b46:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3301      	adds	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	3301      	adds	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	61bb      	str	r3, [r7, #24]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d3e2      	bcc.n	8007b2e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3724      	adds	r7, #36	; 0x24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b08b      	sub	sp, #44	; 0x2c
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	089b      	lsrs	r3, r3, #2
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	f003 0303 	and.w	r3, r3, #3
 8007b98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	623b      	str	r3, [r7, #32]
 8007b9e:	e014      	b.n	8007bca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	3301      	adds	r3, #1
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	3301      	adds	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	623b      	str	r3, [r7, #32]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d3e6      	bcc.n	8007ba0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bd2:	8bfb      	ldrh	r3, [r7, #30]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01e      	beq.n	8007c16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be2:	461a      	mov	r2, r3
 8007be4:	f107 0310 	add.w	r3, r7, #16
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	701a      	strb	r2, [r3, #0]
      i++;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	3301      	adds	r3, #1
 8007c02:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	3301      	adds	r3, #1
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c0a:	8bfb      	ldrh	r3, [r7, #30]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1ea      	bne.n	8007bec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	372c      	adds	r7, #44	; 0x2c
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d12c      	bne.n	8007c98 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db12      	blt.n	8007c76 <USB_EPSetStall+0x54>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	0151      	lsls	r1, r2, #5
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c74:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	e02b      	b.n	8007cf0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	db12      	blt.n	8007cd0 <USB_EPSetStall+0xae>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00f      	beq.n	8007cd0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d128      	bne.n	8007d6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	791b      	ldrb	r3, [r3, #4]
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d003      	beq.n	8007d48 <USB_EPClearStall+0x4c>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	791b      	ldrb	r3, [r3, #4]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d138      	bne.n	8007dba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	e027      	b.n	8007dba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	791b      	ldrb	r3, [r3, #4]
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d003      	beq.n	8007d9a <USB_EPClearStall+0x9e>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d10f      	bne.n	8007dba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007de8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	011b      	lsls	r3, r3, #4
 8007df6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e00:	4313      	orrs	r3, r2
 8007e02:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr

08007e10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e3e:	f023 0302 	bic.w	r3, r3, #2
 8007e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e7e:	f043 0302 	orr.w	r3, r3, #2
 8007e82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	0c1b      	lsrs	r3, r3, #16
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	b29b      	uxth	r3, r3
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr

08007f18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f46:	68bb      	ldr	r3, [r7, #8]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b087      	sub	sp, #28
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f82:	01db      	lsls	r3, r3, #7
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr

08007fac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f003 0301 	and.w	r3, r3, #1
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fe4:	f023 0307 	bic.w	r3, r3, #7
 8007fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr
	...

0800800c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	333c      	adds	r3, #60	; 0x3c
 800801e:	3304      	adds	r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a1c      	ldr	r2, [pc, #112]	; (8008098 <USB_EP0_OutStart+0x8c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d90a      	bls.n	8008042 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803c:	d101      	bne.n	8008042 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e024      	b.n	800808c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	461a      	mov	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800805c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008060:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008070:	f043 0318 	orr.w	r3, r3, #24
 8008074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008084:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008088:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	4f54300a 	.word	0x4f54300a

0800809c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3301      	adds	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a12      	ldr	r2, [pc, #72]	; (80080fc <USB_CoreReset+0x60>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d901      	bls.n	80080ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e01b      	b.n	80080f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	daf2      	bge.n	80080a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f043 0201 	orr.w	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4a08      	ldr	r2, [pc, #32]	; (80080fc <USB_CoreReset+0x60>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d901      	bls.n	80080e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e006      	b.n	80080f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d0f0      	beq.n	80080d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	00030d40 	.word	0x00030d40

08008100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7c1b      	ldrb	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d115      	bne.n	8008144 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811c:	2202      	movs	r2, #2
 800811e:	2181      	movs	r1, #129	; 0x81
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 ff22 	bl	8009f6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800812c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008130:	2202      	movs	r2, #2
 8008132:	2101      	movs	r1, #1
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 ff18 	bl	8009f6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008142:	e012      	b.n	800816a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2202      	movs	r2, #2
 8008148:	2181      	movs	r1, #129	; 0x81
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f001 ff0d 	bl	8009f6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	2202      	movs	r2, #2
 800815a:	2101      	movs	r1, #1
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 ff04 	bl	8009f6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800816a:	2308      	movs	r3, #8
 800816c:	2203      	movs	r2, #3
 800816e:	2182      	movs	r1, #130	; 0x82
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fefa 	bl	8009f6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800817c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008180:	f002 f81a 	bl	800a1b8 <USBD_static_malloc>
 8008184:	4602      	mov	r2, r0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
 800819a:	e026      	b.n	80081ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	7c1b      	ldrb	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d0:	2101      	movs	r1, #1
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 ffb9 	bl	800a14a <USBD_LL_PrepareReceive>
 80081d8:	e007      	b.n	80081ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	2101      	movs	r1, #1
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 ffb0 	bl	800a14a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008204:	2181      	movs	r1, #129	; 0x81
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fed5 	bl	8009fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008212:	2101      	movs	r1, #1
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fece 	bl	8009fb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008222:	2182      	movs	r1, #130	; 0x82
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f001 fec6 	bl	8009fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	4618      	mov	r0, r3
 800824c:	f001 ffc0 	bl	800a1d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008272:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008288:	2b00      	cmp	r3, #0
 800828a:	d039      	beq.n	8008300 <USBD_CDC_Setup+0x9e>
 800828c:	2b20      	cmp	r3, #32
 800828e:	d17f      	bne.n	8008390 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d029      	beq.n	80082ec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b25b      	sxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da11      	bge.n	80082c6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80082ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	88d2      	ldrh	r2, [r2, #6]
 80082b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082b6:	6939      	ldr	r1, [r7, #16]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	88db      	ldrh	r3, [r3, #6]
 80082bc:	461a      	mov	r2, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fa41 	bl	8009746 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80082c4:	e06b      	b.n	800839e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785a      	ldrb	r2, [r3, #1]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	88db      	ldrh	r3, [r3, #6]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082dc:	6939      	ldr	r1, [r7, #16]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	88db      	ldrh	r3, [r3, #6]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fa5c 	bl	80097a2 <USBD_CtlPrepareRx>
      break;
 80082ea:	e058      	b.n	800839e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	7850      	ldrb	r0, [r2, #1]
 80082f8:	2200      	movs	r2, #0
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	4798      	blx	r3
      break;
 80082fe:	e04e      	b.n	800839e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	2b0b      	cmp	r3, #11
 8008306:	d02e      	beq.n	8008366 <USBD_CDC_Setup+0x104>
 8008308:	2b0b      	cmp	r3, #11
 800830a:	dc38      	bgt.n	800837e <USBD_CDC_Setup+0x11c>
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <USBD_CDC_Setup+0xb4>
 8008310:	2b0a      	cmp	r3, #10
 8008312:	d014      	beq.n	800833e <USBD_CDC_Setup+0xdc>
 8008314:	e033      	b.n	800837e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831c:	2b03      	cmp	r3, #3
 800831e:	d107      	bne.n	8008330 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008320:	f107 030c 	add.w	r3, r7, #12
 8008324:	2202      	movs	r2, #2
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 fa0c 	bl	8009746 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800832e:	e02e      	b.n	800838e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f99d 	bl	8009672 <USBD_CtlError>
            ret = USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	75fb      	strb	r3, [r7, #23]
          break;
 800833c:	e027      	b.n	800838e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	2b03      	cmp	r3, #3
 8008346:	d107      	bne.n	8008358 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008348:	f107 030f 	add.w	r3, r7, #15
 800834c:	2201      	movs	r2, #1
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f9f8 	bl	8009746 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008356:	e01a      	b.n	800838e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 f989 	bl	8009672 <USBD_CtlError>
            ret = USBD_FAIL;
 8008360:	2302      	movs	r3, #2
 8008362:	75fb      	strb	r3, [r7, #23]
          break;
 8008364:	e013      	b.n	800838e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	2b03      	cmp	r3, #3
 800836e:	d00d      	beq.n	800838c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 f97d 	bl	8009672 <USBD_CtlError>
            ret = USBD_FAIL;
 8008378:	2302      	movs	r3, #2
 800837a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800837c:	e006      	b.n	800838c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f001 f976 	bl	8009672 <USBD_CtlError>
          ret = USBD_FAIL;
 8008386:	2302      	movs	r3, #2
 8008388:	75fb      	strb	r3, [r7, #23]
          break;
 800838a:	e000      	b.n	800838e <USBD_CDC_Setup+0x12c>
          break;
 800838c:	bf00      	nop
      }
      break;
 800838e:	e006      	b.n	800839e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 f96d 	bl	8009672 <USBD_CtlError>
      ret = USBD_FAIL;
 8008398:	2302      	movs	r3, #2
 800839a:	75fb      	strb	r3, [r7, #23]
      break;
 800839c:	bf00      	nop
  }

  return ret;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083c2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d03a      	beq.n	8008444 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	331c      	adds	r3, #28
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d029      	beq.n	8008438 <USBD_CDC_DataIn+0x90>
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	331c      	adds	r3, #28
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	78f9      	ldrb	r1, [r7, #3]
 80083f8:	68b8      	ldr	r0, [r7, #8]
 80083fa:	460b      	mov	r3, r1
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4403      	add	r3, r0
 8008404:	3344      	adds	r3, #68	; 0x44
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	fbb2 f1f3 	udiv	r1, r2, r3
 800840c:	fb01 f303 	mul.w	r3, r1, r3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d110      	bne.n	8008438 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	331c      	adds	r3, #28
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800842a:	78f9      	ldrb	r1, [r7, #3]
 800842c:	2300      	movs	r3, #0
 800842e:	2200      	movs	r2, #0
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 fe67 	bl	800a104 <USBD_LL_Transmit>
 8008436:	e003      	b.n	8008440 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e000      	b.n	8008446 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fe92 	bl	800a190 <USBD_LL_GetRxDataSize>
 800846c:	4602      	mov	r2, r0
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008492:	4611      	mov	r1, r2
 8008494:	4798      	blx	r3

    return USBD_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e000      	b.n	800849c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d015      	beq.n	80084ea <USBD_CDC_EP0_RxReady+0x46>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	d010      	beq.n	80084ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80084d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084de:	b292      	uxth	r2, r2
 80084e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2243      	movs	r2, #67	; 0x43
 8008500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	200000e4 	.word	0x200000e4

08008514 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2243      	movs	r2, #67	; 0x43
 8008520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008522:	4b03      	ldr	r3, [pc, #12]	; (8008530 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	200000a0 	.word	0x200000a0

08008534 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2243      	movs	r2, #67	; 0x43
 8008540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008542:	4b03      	ldr	r3, [pc, #12]	; (8008550 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000128 	.word	0x20000128

08008554 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	220a      	movs	r2, #10
 8008560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008562:	4b03      	ldr	r3, [pc, #12]	; (8008570 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	2000005c 	.word	0x2000005c

08008574 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800857e:	2302      	movs	r3, #2
 8008580:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085be:	88fa      	ldrh	r2, [r7, #6]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr

080085d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bc80      	pop	{r7}
 80085f6:	4770      	bx	lr

080085f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01c      	beq.n	800864c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008618:	2b00      	cmp	r3, #0
 800861a:	d115      	bne.n	8008648 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800863a:	b29b      	uxth	r3, r3
 800863c:	2181      	movs	r1, #129	; 0x81
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fd60 	bl	800a104 <USBD_LL_Transmit>

      return USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	e002      	b.n	800864e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866c:	2b00      	cmp	r3, #0
 800866e:	d017      	beq.n	80086a0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7c1b      	ldrb	r3, [r3, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800867e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008682:	2101      	movs	r1, #1
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fd60 	bl	800a14a <USBD_LL_PrepareReceive>
 800868a:	e007      	b.n	800869c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	2101      	movs	r1, #1
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fd57 	bl	800a14a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	e000      	b.n	80086a2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80086a0:	2302      	movs	r3, #2
  }
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	60b9      	str	r1, [r7, #8]
 80086b4:	4613      	mov	r3, r2
 80086b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086be:	2302      	movs	r3, #2
 80086c0:	e01a      	b.n	80086f8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	79fa      	ldrb	r2, [r7, #7]
 80086ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f001 fbdb 	bl	8009eac <USBD_LL_Init>

  return USBD_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
 8008720:	e001      	b.n	8008726 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008722:	2302      	movs	r3, #2
 8008724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fbfa 	bl	8009f34 <USBD_LL_Start>

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800876a:	2302      	movs	r3, #2
 800876c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00c      	beq.n	8008792 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	4798      	blx	r3
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	4611      	mov	r1, r2
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 ff10 	bl	80095fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087e8:	461a      	mov	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087f6:	f003 031f 	and.w	r3, r3, #31
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d016      	beq.n	800882c <USBD_LL_SetupStage+0x6a>
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d81c      	bhi.n	800883c <USBD_LL_SetupStage+0x7a>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <USBD_LL_SetupStage+0x4a>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d008      	beq.n	800881c <USBD_LL_SetupStage+0x5a>
 800880a:	e017      	b.n	800883c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa03 	bl	8008c20 <USBD_StdDevReq>
      break;
 800881a:	e01a      	b.n	8008852 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fa65 	bl	8008cf4 <USBD_StdItfReq>
      break;
 800882a:	e012      	b.n	8008852 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 faa5 	bl	8008d84 <USBD_StdEPReq>
      break;
 800883a:	e00a      	b.n	8008852 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008842:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008846:	b2db      	uxtb	r3, r3
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fbd2 	bl	8009ff4 <USBD_LL_StallEP>
      break;
 8008850:	bf00      	nop
  }

  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	460b      	mov	r3, r1
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d14b      	bne.n	8008908 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008876:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800887e:	2b03      	cmp	r3, #3
 8008880:	d134      	bne.n	80088ec <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	429a      	cmp	r2, r3
 800888c:	d919      	bls.n	80088c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d203      	bcs.n	80088b0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	e002      	b.n	80088b6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 ff8f 	bl	80097de <USBD_CtlContinueRx>
 80088c0:	e038      	b.n	8008934 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d105      	bne.n	80088e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 ff8c 	bl	8009802 <USBD_CtlSendStatus>
 80088ea:	e023      	b.n	8008934 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d11e      	bne.n	8008934 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80088fe:	2100      	movs	r1, #0
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f001 fb77 	bl	8009ff4 <USBD_LL_StallEP>
 8008906:	e015      	b.n	8008934 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800891a:	2b03      	cmp	r3, #3
 800891c:	d108      	bne.n	8008930 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	7afa      	ldrb	r2, [r7, #11]
 8008928:	4611      	mov	r1, r2
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	4798      	blx	r3
 800892e:	e001      	b.n	8008934 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	e000      	b.n	8008936 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	460b      	mov	r3, r1
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d17f      	bne.n	8008a52 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3314      	adds	r3, #20
 8008956:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800895e:	2b02      	cmp	r3, #2
 8008960:	d15c      	bne.n	8008a1c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	429a      	cmp	r2, r3
 800896c:	d915      	bls.n	800899a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f000 fef9 	bl	800977e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800898c:	2300      	movs	r3, #0
 800898e:	2200      	movs	r2, #0
 8008990:	2100      	movs	r1, #0
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f001 fbd9 	bl	800a14a <USBD_LL_PrepareReceive>
 8008998:	e04e      	b.n	8008a38 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	6912      	ldr	r2, [r2, #16]
 80089a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80089a6:	fb01 f202 	mul.w	r2, r1, r2
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11c      	bne.n	80089ea <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d316      	bcc.n	80089ea <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d20f      	bcs.n	80089ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fed5 	bl	800977e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f001 fbb1 	bl	800a14a <USBD_LL_PrepareReceive>
 80089e8:	e026      	b.n	8008a38 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d105      	bne.n	8008a0c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f001 faf0 	bl	8009ff4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 ff07 	bl	8009828 <USBD_CtlReceiveStatus>
 8008a1a:	e00d      	b.n	8008a38 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d004      	beq.n	8008a30 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008a30:	2180      	movs	r1, #128	; 0x80
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f001 fade 	bl	8009ff4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d11d      	bne.n	8008a7e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff fe81 	bl	800874a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a50:	e015      	b.n	8008a7e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d108      	bne.n	8008a7a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	7afa      	ldrb	r2, [r7, #11]
 8008a72:	4611      	mov	r1, r2
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	4798      	blx	r3
 8008a78:	e001      	b.n	8008a7e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e000      	b.n	8008a80 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	2200      	movs	r2, #0
 8008a94:	2100      	movs	r1, #0
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fa67 	bl	8009f6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2240      	movs	r2, #64	; 0x40
 8008aa8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aac:	2340      	movs	r3, #64	; 0x40
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2180      	movs	r1, #128	; 0x80
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 fa59 	bl	8009f6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2240      	movs	r2, #64	; 0x40
 8008ac2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6852      	ldr	r2, [r2, #4]
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	4611      	mov	r1, r2
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
  }

  return USBD_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr

08008b28 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2204      	movs	r2, #4
 8008b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d105      	bne.n	8008b6e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr

08008b7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d10b      	bne.n	8008ba4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr

08008bde <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6852      	ldr	r2, [r2, #4]
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	4611      	mov	r1, r2
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3

  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d005      	beq.n	8008c46 <USBD_StdDevReq+0x26>
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d84f      	bhi.n	8008cde <USBD_StdDevReq+0xbe>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <USBD_StdDevReq+0x36>
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d14b      	bne.n	8008cde <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	4798      	blx	r3
      break;
 8008c54:	e048      	b.n	8008ce8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d839      	bhi.n	8008cd2 <USBD_StdDevReq+0xb2>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <USBD_StdDevReq+0x44>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008cb5 	.word	0x08008cb5
 8008c68:	08008cc9 	.word	0x08008cc9
 8008c6c:	08008cd3 	.word	0x08008cd3
 8008c70:	08008cbf 	.word	0x08008cbf
 8008c74:	08008cd3 	.word	0x08008cd3
 8008c78:	08008c97 	.word	0x08008c97
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008cd3 	.word	0x08008cd3
 8008c84:	08008cab 	.word	0x08008cab
 8008c88:	08008ca1 	.word	0x08008ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9dc 	bl	800904c <USBD_GetDescriptor>
          break;
 8008c94:	e022      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb3f 	bl	800931c <USBD_SetAddress>
          break;
 8008c9e:	e01d      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fb7e 	bl	80093a4 <USBD_SetConfig>
          break;
 8008ca8:	e018      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fc07 	bl	80094c0 <USBD_GetConfig>
          break;
 8008cb2:	e013      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc37 	bl	800952a <USBD_GetStatus>
          break;
 8008cbc:	e00e      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc65 	bl	8009590 <USBD_SetFeature>
          break;
 8008cc6:	e009      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fc74 	bl	80095b8 <USBD_ClrFeature>
          break;
 8008cd0:	e004      	b.n	8008cdc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fccc 	bl	8009672 <USBD_CtlError>
          break;
 8008cda:	bf00      	nop
      }
      break;
 8008cdc:	e004      	b.n	8008ce8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fcc6 	bl	8009672 <USBD_CtlError>
      break;
 8008ce6:	bf00      	nop
  }

  return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	d005      	beq.n	8008d1a <USBD_StdItfReq+0x26>
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d82e      	bhi.n	8008d70 <USBD_StdItfReq+0x7c>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <USBD_StdItfReq+0x26>
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d12a      	bne.n	8008d70 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d20:	3b01      	subs	r3, #1
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d81d      	bhi.n	8008d62 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	889b      	ldrh	r3, [r3, #4]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d813      	bhi.n	8008d58 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	88db      	ldrh	r3, [r3, #6]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d110      	bne.n	8008d6c <USBD_StdItfReq+0x78>
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10d      	bne.n	8008d6c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fd56 	bl	8009802 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d56:	e009      	b.n	8008d6c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fc89 	bl	8009672 <USBD_CtlError>
          break;
 8008d60:	e004      	b.n	8008d6c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc84 	bl	8009672 <USBD_CtlError>
          break;
 8008d6a:	e000      	b.n	8008d6e <USBD_StdItfReq+0x7a>
          break;
 8008d6c:	bf00      	nop
      }
      break;
 8008d6e:	e004      	b.n	8008d7a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fc7d 	bl	8009672 <USBD_CtlError>
      break;
 8008d78:	bf00      	nop
  }

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	889b      	ldrh	r3, [r3, #4]
 8008d96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008da0:	2b40      	cmp	r3, #64	; 0x40
 8008da2:	d007      	beq.n	8008db4 <USBD_StdEPReq+0x30>
 8008da4:	2b40      	cmp	r3, #64	; 0x40
 8008da6:	f200 8146 	bhi.w	8009036 <USBD_StdEPReq+0x2b2>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <USBD_StdEPReq+0x40>
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	f040 8141 	bne.w	8009036 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
      break;
 8008dc2:	e13d      	b.n	8009040 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d10a      	bne.n	8008de6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	e12d      	b.n	8009042 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d007      	beq.n	8008dfe <USBD_StdEPReq+0x7a>
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	f300 811b 	bgt.w	800902a <USBD_StdEPReq+0x2a6>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d072      	beq.n	8008ede <USBD_StdEPReq+0x15a>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d03a      	beq.n	8008e72 <USBD_StdEPReq+0xee>
 8008dfc:	e115      	b.n	800902a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d002      	beq.n	8008e0e <USBD_StdEPReq+0x8a>
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d015      	beq.n	8008e38 <USBD_StdEPReq+0xb4>
 8008e0c:	e02b      	b.n	8008e66 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00c      	beq.n	8008e2e <USBD_StdEPReq+0xaa>
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	2b80      	cmp	r3, #128	; 0x80
 8008e18:	d009      	beq.n	8008e2e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 f8e8 	bl	8009ff4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 f8e4 	bl	8009ff4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e2c:	e020      	b.n	8008e70 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fc1e 	bl	8009672 <USBD_CtlError>
              break;
 8008e36:	e01b      	b.n	8008e70 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	885b      	ldrh	r3, [r3, #2]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10e      	bne.n	8008e5e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <USBD_StdEPReq+0xda>
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d008      	beq.n	8008e5e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f8cb 	bl	8009ff4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fccf 	bl	8009802 <USBD_CtlSendStatus>

              break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc02 	bl	8009672 <USBD_CtlError>
              break;
 8008e6e:	bf00      	nop
          }
          break;
 8008e70:	e0e0      	b.n	8009034 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d002      	beq.n	8008e82 <USBD_StdEPReq+0xfe>
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d015      	beq.n	8008eac <USBD_StdEPReq+0x128>
 8008e80:	e026      	b.n	8008ed0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00c      	beq.n	8008ea2 <USBD_StdEPReq+0x11e>
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b80      	cmp	r3, #128	; 0x80
 8008e8c:	d009      	beq.n	8008ea2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f8ae 	bl	8009ff4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e98:	2180      	movs	r1, #128	; 0x80
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 f8aa 	bl	8009ff4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea0:	e01c      	b.n	8008edc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbe4 	bl	8009672 <USBD_CtlError>
              break;
 8008eaa:	e017      	b.n	8008edc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	885b      	ldrh	r3, [r3, #2]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d112      	bne.n	8008eda <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 f8b5 	bl	800a032 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc9a 	bl	8009802 <USBD_CtlSendStatus>
              }
              break;
 8008ece:	e004      	b.n	8008eda <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fbcd 	bl	8009672 <USBD_CtlError>
              break;
 8008ed8:	e000      	b.n	8008edc <USBD_StdEPReq+0x158>
              break;
 8008eda:	bf00      	nop
          }
          break;
 8008edc:	e0aa      	b.n	8009034 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d002      	beq.n	8008eee <USBD_StdEPReq+0x16a>
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d032      	beq.n	8008f52 <USBD_StdEPReq+0x1ce>
 8008eec:	e097      	b.n	800901e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d007      	beq.n	8008f04 <USBD_StdEPReq+0x180>
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b80      	cmp	r3, #128	; 0x80
 8008ef8:	d004      	beq.n	8008f04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fbb8 	bl	8009672 <USBD_CtlError>
                break;
 8008f02:	e091      	b.n	8009028 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da0b      	bge.n	8008f24 <USBD_StdEPReq+0x1a0>
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f12:	4613      	mov	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	3304      	adds	r3, #4
 8008f22:	e00b      	b.n	8008f3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	4413      	add	r3, r2
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2202      	movs	r2, #2
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fbfb 	bl	8009746 <USBD_CtlSendData>
              break;
 8008f50:	e06a      	b.n	8009028 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	da11      	bge.n	8008f7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3318      	adds	r3, #24
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d117      	bne.n	8008fa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fb7b 	bl	8009672 <USBD_CtlError>
                  break;
 8008f7c:	e054      	b.n	8009028 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	f003 020f 	and.w	r2, r3, #15
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	440b      	add	r3, r1
 8008f90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fb68 	bl	8009672 <USBD_CtlError>
                  break;
 8008fa2:	e041      	b.n	8009028 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	da0b      	bge.n	8008fc4 <USBD_StdEPReq+0x240>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	3310      	adds	r3, #16
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	e00b      	b.n	8008fdc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	3304      	adds	r3, #4
 8008fdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <USBD_StdEPReq+0x266>
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b80      	cmp	r3, #128	; 0x80
 8008fe8:	d103      	bne.n	8008ff2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e00e      	b.n	8009010 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 f83a 	bl	800a070 <USBD_LL_IsStallEP>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2201      	movs	r2, #1
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e002      	b.n	8009010 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2202      	movs	r2, #2
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb95 	bl	8009746 <USBD_CtlSendData>
              break;
 800901c:	e004      	b.n	8009028 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fb26 	bl	8009672 <USBD_CtlError>
              break;
 8009026:	bf00      	nop
          }
          break;
 8009028:	e004      	b.n	8009034 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fb20 	bl	8009672 <USBD_CtlError>
          break;
 8009032:	bf00      	nop
      }
      break;
 8009034:	e004      	b.n	8009040 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb1a 	bl	8009672 <USBD_CtlError>
      break;
 800903e:	bf00      	nop
  }

  return ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	2b06      	cmp	r3, #6
 800906e:	f200 8128 	bhi.w	80092c2 <USBD_GetDescriptor+0x276>
 8009072:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <USBD_GetDescriptor+0x2c>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	08009095 	.word	0x08009095
 800907c:	080090ad 	.word	0x080090ad
 8009080:	080090ed 	.word	0x080090ed
 8009084:	080092c3 	.word	0x080092c3
 8009088:	080092c3 	.word	0x080092c3
 800908c:	08009263 	.word	0x08009263
 8009090:	0800928f 	.word	0x0800928f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
      break;
 80090aa:	e112      	b.n	80092d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7c1b      	ldrb	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10d      	bne.n	80090d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	f107 0208 	add.w	r2, r7, #8
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
 80090c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	2202      	movs	r2, #2
 80090cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ce:	e100      	b.n	80092d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	f107 0208 	add.w	r2, r7, #8
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
 80090e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3301      	adds	r3, #1
 80090e6:	2202      	movs	r2, #2
 80090e8:	701a      	strb	r2, [r3, #0]
      break;
 80090ea:	e0f2      	b.n	80092d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	885b      	ldrh	r3, [r3, #2]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	f200 80ac 	bhi.w	8009250 <USBD_GetDescriptor+0x204>
 80090f8:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <USBD_GetDescriptor+0xb4>)
 80090fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fe:	bf00      	nop
 8009100:	08009119 	.word	0x08009119
 8009104:	0800914d 	.word	0x0800914d
 8009108:	08009181 	.word	0x08009181
 800910c:	080091b5 	.word	0x080091b5
 8009110:	080091e9 	.word	0x080091e9
 8009114:	0800921d 	.word	0x0800921d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	7c12      	ldrb	r2, [r2, #16]
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913a:	e091      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa97 	bl	8009672 <USBD_CtlError>
            err++;
 8009144:	7afb      	ldrb	r3, [r7, #11]
 8009146:	3301      	adds	r3, #1
 8009148:	72fb      	strb	r3, [r7, #11]
          break;
 800914a:	e089      	b.n	8009260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7c12      	ldrb	r2, [r2, #16]
 8009164:	f107 0108 	add.w	r1, r7, #8
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916e:	e077      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa7d 	bl	8009672 <USBD_CtlError>
            err++;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	3301      	adds	r3, #1
 800917c:	72fb      	strb	r3, [r7, #11]
          break;
 800917e:	e06f      	b.n	8009260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	7c12      	ldrb	r2, [r2, #16]
 8009198:	f107 0108 	add.w	r1, r7, #8
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a2:	e05d      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa63 	bl	8009672 <USBD_CtlError>
            err++;
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	3301      	adds	r3, #1
 80091b0:	72fb      	strb	r3, [r7, #11]
          break;
 80091b2:	e055      	b.n	8009260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	7c12      	ldrb	r2, [r2, #16]
 80091cc:	f107 0108 	add.w	r1, r7, #8
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d6:	e043      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa49 	bl	8009672 <USBD_CtlError>
            err++;
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	3301      	adds	r3, #1
 80091e4:	72fb      	strb	r3, [r7, #11]
          break;
 80091e6:	e03b      	b.n	8009260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7c12      	ldrb	r2, [r2, #16]
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920a:	e029      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa2f 	bl	8009672 <USBD_CtlError>
            err++;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	3301      	adds	r3, #1
 8009218:	72fb      	strb	r3, [r7, #11]
          break;
 800921a:	e021      	b.n	8009260 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	7c12      	ldrb	r2, [r2, #16]
 8009234:	f107 0108 	add.w	r1, r7, #8
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
 800923c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800923e:	e00f      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fa15 	bl	8009672 <USBD_CtlError>
            err++;
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	3301      	adds	r3, #1
 800924c:	72fb      	strb	r3, [r7, #11]
          break;
 800924e:	e007      	b.n	8009260 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fa0d 	bl	8009672 <USBD_CtlError>
          err++;
 8009258:	7afb      	ldrb	r3, [r7, #11]
 800925a:	3301      	adds	r3, #1
 800925c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800925e:	e038      	b.n	80092d2 <USBD_GetDescriptor+0x286>
 8009260:	e037      	b.n	80092d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7c1b      	ldrb	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d109      	bne.n	800927e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009272:	f107 0208 	add.w	r2, r7, #8
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
 800927a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800927c:	e029      	b.n	80092d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f9f6 	bl	8009672 <USBD_CtlError>
        err++;
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	3301      	adds	r3, #1
 800928a:	72fb      	strb	r3, [r7, #11]
      break;
 800928c:	e021      	b.n	80092d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	7c1b      	ldrb	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10d      	bne.n	80092b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	f107 0208 	add.w	r2, r7, #8
 80092a2:	4610      	mov	r0, r2
 80092a4:	4798      	blx	r3
 80092a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	2207      	movs	r2, #7
 80092ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092b0:	e00f      	b.n	80092d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9dc 	bl	8009672 <USBD_CtlError>
        err++;
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	3301      	adds	r3, #1
 80092be:	72fb      	strb	r3, [r7, #11]
      break;
 80092c0:	e007      	b.n	80092d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f9d4 	bl	8009672 <USBD_CtlError>
      err++;
 80092ca:	7afb      	ldrb	r3, [r7, #11]
 80092cc:	3301      	adds	r3, #1
 80092ce:	72fb      	strb	r3, [r7, #11]
      break;
 80092d0:	bf00      	nop
  }

  if (err != 0U)
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11c      	bne.n	8009312 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092d8:	893b      	ldrh	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d011      	beq.n	8009302 <USBD_GetDescriptor+0x2b6>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00d      	beq.n	8009302 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	88da      	ldrh	r2, [r3, #6]
 80092ea:	893b      	ldrh	r3, [r7, #8]
 80092ec:	4293      	cmp	r3, r2
 80092ee:	bf28      	it	cs
 80092f0:	4613      	movcs	r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092f6:	893b      	ldrh	r3, [r7, #8]
 80092f8:	461a      	mov	r2, r3
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa22 	bl	8009746 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	88db      	ldrh	r3, [r3, #6]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa79 	bl	8009802 <USBD_CtlSendStatus>
 8009310:	e000      	b.n	8009314 <USBD_GetDescriptor+0x2c8>
    return;
 8009312:	bf00      	nop
    }
  }
}
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop

0800931c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	889b      	ldrh	r3, [r3, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d130      	bne.n	8009390 <USBD_SetAddress+0x74>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	88db      	ldrh	r3, [r3, #6]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d12c      	bne.n	8009390 <USBD_SetAddress+0x74>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	885b      	ldrh	r3, [r3, #2]
 800933a:	2b7f      	cmp	r3, #127	; 0x7f
 800933c:	d828      	bhi.n	8009390 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009350:	2b03      	cmp	r3, #3
 8009352:	d104      	bne.n	800935e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f98b 	bl	8009672 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935c:	e01d      	b.n	800939a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 feab 	bl	800a0c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fa46 	bl	8009802 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009384:	e009      	b.n	800939a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938e:	e004      	b.n	800939a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f96d 	bl	8009672 <USBD_CtlError>
  }
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	885b      	ldrh	r3, [r3, #2]
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	4b41      	ldr	r3, [pc, #260]	; (80094bc <USBD_SetConfig+0x118>)
 80093b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093b8:	4b40      	ldr	r3, [pc, #256]	; (80094bc <USBD_SetConfig+0x118>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d904      	bls.n	80093ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f955 	bl	8009672 <USBD_CtlError>
 80093c8:	e075      	b.n	80094b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d002      	beq.n	80093da <USBD_SetConfig+0x36>
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d023      	beq.n	8009420 <USBD_SetConfig+0x7c>
 80093d8:	e062      	b.n	80094a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093da:	4b38      	ldr	r3, [pc, #224]	; (80094bc <USBD_SetConfig+0x118>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01a      	beq.n	8009418 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093e2:	4b36      	ldr	r3, [pc, #216]	; (80094bc <USBD_SetConfig+0x118>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2203      	movs	r2, #3
 80093f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093f4:	4b31      	ldr	r3, [pc, #196]	; (80094bc <USBD_SetConfig+0x118>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff f9af 	bl	800875e <USBD_SetClassConfig>
 8009400:	4603      	mov	r3, r0
 8009402:	2b02      	cmp	r3, #2
 8009404:	d104      	bne.n	8009410 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f932 	bl	8009672 <USBD_CtlError>
            return;
 800940e:	e052      	b.n	80094b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f9f6 	bl	8009802 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009416:	e04e      	b.n	80094b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9f2 	bl	8009802 <USBD_CtlSendStatus>
        break;
 800941e:	e04a      	b.n	80094b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009420:	4b26      	ldr	r3, [pc, #152]	; (80094bc <USBD_SetConfig+0x118>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d112      	bne.n	800944e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009430:	4b22      	ldr	r3, [pc, #136]	; (80094bc <USBD_SetConfig+0x118>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800943a:	4b20      	ldr	r3, [pc, #128]	; (80094bc <USBD_SetConfig+0x118>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff f9ab 	bl	800879c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f9db 	bl	8009802 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800944c:	e033      	b.n	80094b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800944e:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <USBD_SetConfig+0x118>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d01d      	beq.n	8009498 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff f999 	bl	800879c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <USBD_SetConfig+0x118>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <USBD_SetConfig+0x118>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff f96f 	bl	800875e <USBD_SetClassConfig>
 8009480:	4603      	mov	r3, r0
 8009482:	2b02      	cmp	r3, #2
 8009484:	d104      	bne.n	8009490 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f8f2 	bl	8009672 <USBD_CtlError>
            return;
 800948e:	e012      	b.n	80094b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9b6 	bl	8009802 <USBD_CtlSendStatus>
        break;
 8009496:	e00e      	b.n	80094b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9b2 	bl	8009802 <USBD_CtlSendStatus>
        break;
 800949e:	e00a      	b.n	80094b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f8e5 	bl	8009672 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <USBD_SetConfig+0x118>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff f974 	bl	800879c <USBD_ClrClassConfig>
        break;
 80094b4:	bf00      	nop
    }
  }
}
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000374 	.word	0x20000374

080094c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88db      	ldrh	r3, [r3, #6]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d004      	beq.n	80094dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f8cc 	bl	8009672 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094da:	e022      	b.n	8009522 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	dc02      	bgt.n	80094ec <USBD_GetConfig+0x2c>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dc03      	bgt.n	80094f2 <USBD_GetConfig+0x32>
 80094ea:	e015      	b.n	8009518 <USBD_GetConfig+0x58>
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d00b      	beq.n	8009508 <USBD_GetConfig+0x48>
 80094f0:	e012      	b.n	8009518 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	3308      	adds	r3, #8
 80094fc:	2201      	movs	r2, #1
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f920 	bl	8009746 <USBD_CtlSendData>
        break;
 8009506:	e00c      	b.n	8009522 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2201      	movs	r2, #1
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f918 	bl	8009746 <USBD_CtlSendData>
        break;
 8009516:	e004      	b.n	8009522 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f8a9 	bl	8009672 <USBD_CtlError>
        break;
 8009520:	bf00      	nop
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953a:	3b01      	subs	r3, #1
 800953c:	2b02      	cmp	r3, #2
 800953e:	d81e      	bhi.n	800957e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	88db      	ldrh	r3, [r3, #6]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d004      	beq.n	8009552 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f891 	bl	8009672 <USBD_CtlError>
        break;
 8009550:	e01a      	b.n	8009588 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800955e:	2b00      	cmp	r3, #0
 8009560:	d005      	beq.n	800956e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f043 0202 	orr.w	r2, r3, #2
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	330c      	adds	r3, #12
 8009572:	2202      	movs	r2, #2
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f8e5 	bl	8009746 <USBD_CtlSendData>
      break;
 800957c:	e004      	b.n	8009588 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f876 	bl	8009672 <USBD_CtlError>
      break;
 8009586:	bf00      	nop
  }
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d106      	bne.n	80095b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f929 	bl	8009802 <USBD_CtlSendStatus>
  }
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	3b01      	subs	r3, #1
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d80b      	bhi.n	80095e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d10c      	bne.n	80095f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f90f 	bl	8009802 <USBD_CtlSendStatus>
      }
      break;
 80095e4:	e004      	b.n	80095f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f842 	bl	8009672 <USBD_CtlError>
      break;
 80095ee:	e000      	b.n	80095f2 <USBD_ClrFeature+0x3a>
      break;
 80095f0:	bf00      	nop
  }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781a      	ldrb	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	785a      	ldrb	r2, [r3, #1]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	3302      	adds	r3, #2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	3303      	adds	r3, #3
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b29b      	uxth	r3, r3
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	b29b      	uxth	r3, r3
 8009628:	4413      	add	r3, r2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	3304      	adds	r3, #4
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b29a      	uxth	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	3305      	adds	r3, #5
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	021b      	lsls	r3, r3, #8
 8009642:	b29b      	uxth	r3, r3
 8009644:	4413      	add	r3, r2
 8009646:	b29a      	uxth	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	3306      	adds	r3, #6
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b29a      	uxth	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	3307      	adds	r3, #7
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	b29b      	uxth	r3, r3
 8009660:	4413      	add	r3, r2
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	80da      	strh	r2, [r3, #6]

}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr

08009672 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b082      	sub	sp, #8
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800967c:	2180      	movs	r1, #128	; 0x80
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fcb8 	bl	8009ff4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009684:	2100      	movs	r1, #0
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fcb4 	bl	8009ff4 <USBD_LL_StallEP>
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d032      	beq.n	8009710 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f834 	bl	8009718 <USBD_GetLen>
 80096b0:	4603      	mov	r3, r0
 80096b2:	3301      	adds	r3, #1
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	75fa      	strb	r2, [r7, #23]
 80096c4:	461a      	mov	r2, r3
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4413      	add	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	7812      	ldrb	r2, [r2, #0]
 80096ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	75fa      	strb	r2, [r7, #23]
 80096d6:	461a      	mov	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4413      	add	r3, r2
 80096dc:	2203      	movs	r2, #3
 80096de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096e0:	e012      	b.n	8009708 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	60fa      	str	r2, [r7, #12]
 80096e8:	7dfa      	ldrb	r2, [r7, #23]
 80096ea:	1c51      	adds	r1, r2, #1
 80096ec:	75f9      	strb	r1, [r7, #23]
 80096ee:	4611      	mov	r1, r2
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	440a      	add	r2, r1
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	75fa      	strb	r2, [r7, #23]
 80096fe:	461a      	mov	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4413      	add	r3, r2
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e8      	bne.n	80096e2 <USBD_GetString+0x4e>
    }
  }
}
 8009710:	bf00      	nop
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009724:	e005      	b.n	8009732 <USBD_GetLen+0x1a>
  {
    len++;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	3301      	adds	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3301      	adds	r3, #1
 8009730:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1f5      	bne.n	8009726 <USBD_GetLen+0xe>
  }

  return len;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr

08009746 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	4613      	mov	r3, r2
 8009752:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2202      	movs	r2, #2
 8009758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800975c:	88fa      	ldrh	r2, [r7, #6]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009762:	88fa      	ldrh	r2, [r7, #6]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	2100      	movs	r1, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fcc8 	bl	800a104 <USBD_LL_Transmit>

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	4613      	mov	r3, r2
 800978a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	2100      	movs	r1, #0
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 fcb6 	bl	800a104 <USBD_LL_Transmit>

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	4613      	mov	r3, r2
 80097ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2203      	movs	r2, #3
 80097b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097b8:	88fa      	ldrh	r2, [r7, #6]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097c8:	88fb      	ldrh	r3, [r7, #6]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fcbb 	bl	800a14a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	4613      	mov	r3, r2
 80097ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097ec:	88fb      	ldrh	r3, [r7, #6]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	2100      	movs	r1, #0
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 fca9 	bl	800a14a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2204      	movs	r2, #4
 800980e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009812:	2300      	movs	r3, #0
 8009814:	2200      	movs	r2, #0
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fc73 	bl	800a104 <USBD_LL_Transmit>

  return USBD_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2205      	movs	r2, #5
 8009834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009838:	2300      	movs	r3, #0
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fc83 	bl	800a14a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 800985a:	887b      	ldrh	r3, [r7, #2]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8c2 	bl	80099e8 <CDC_Transmit_FS>
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009870:	2200      	movs	r2, #0
 8009872:	4912      	ldr	r1, [pc, #72]	; (80098bc <MX_USB_DEVICE_Init+0x50>)
 8009874:	4812      	ldr	r0, [pc, #72]	; (80098c0 <MX_USB_DEVICE_Init+0x54>)
 8009876:	f7fe ff18 	bl	80086aa <USBD_Init>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009880:	f7f9 f882 	bl	8002988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009884:	490f      	ldr	r1, [pc, #60]	; (80098c4 <MX_USB_DEVICE_Init+0x58>)
 8009886:	480e      	ldr	r0, [pc, #56]	; (80098c0 <MX_USB_DEVICE_Init+0x54>)
 8009888:	f7fe ff3a 	bl	8008700 <USBD_RegisterClass>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009892:	f7f9 f879 	bl	8002988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009896:	490c      	ldr	r1, [pc, #48]	; (80098c8 <MX_USB_DEVICE_Init+0x5c>)
 8009898:	4809      	ldr	r0, [pc, #36]	; (80098c0 <MX_USB_DEVICE_Init+0x54>)
 800989a:	f7fe fe6b 	bl	8008574 <USBD_CDC_RegisterInterface>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098a4:	f7f9 f870 	bl	8002988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <MX_USB_DEVICE_Init+0x54>)
 80098aa:	f7fe ff42 	bl	8008732 <USBD_Start>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098b4:	f7f9 f868 	bl	8002988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098b8:	bf00      	nop
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	2000017c 	.word	0x2000017c
 80098c0:	20000378 	.word	0x20000378
 80098c4:	20000068 	.word	0x20000068
 80098c8:	2000016c 	.word	0x2000016c

080098cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098d0:	2200      	movs	r2, #0
 80098d2:	4905      	ldr	r1, [pc, #20]	; (80098e8 <CDC_Init_FS+0x1c>)
 80098d4:	4805      	ldr	r0, [pc, #20]	; (80098ec <CDC_Init_FS+0x20>)
 80098d6:	f7fe fe63 	bl	80085a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098da:	4905      	ldr	r1, [pc, #20]	; (80098f0 <CDC_Init_FS+0x24>)
 80098dc:	4803      	ldr	r0, [pc, #12]	; (80098ec <CDC_Init_FS+0x20>)
 80098de:	f7fe fe78 	bl	80085d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20000a3c 	.word	0x20000a3c
 80098ec:	20000378 	.word	0x20000378
 80098f0:	2000063c 	.word	0x2000063c

080098f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr
	...

08009904 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
 8009910:	4613      	mov	r3, r2
 8009912:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	2b23      	cmp	r3, #35	; 0x23
 8009918:	d84a      	bhi.n	80099b0 <CDC_Control_FS+0xac>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <CDC_Control_FS+0x1c>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	080099b1 	.word	0x080099b1
 8009924:	080099b1 	.word	0x080099b1
 8009928:	080099b1 	.word	0x080099b1
 800992c:	080099b1 	.word	0x080099b1
 8009930:	080099b1 	.word	0x080099b1
 8009934:	080099b1 	.word	0x080099b1
 8009938:	080099b1 	.word	0x080099b1
 800993c:	080099b1 	.word	0x080099b1
 8009940:	080099b1 	.word	0x080099b1
 8009944:	080099b1 	.word	0x080099b1
 8009948:	080099b1 	.word	0x080099b1
 800994c:	080099b1 	.word	0x080099b1
 8009950:	080099b1 	.word	0x080099b1
 8009954:	080099b1 	.word	0x080099b1
 8009958:	080099b1 	.word	0x080099b1
 800995c:	080099b1 	.word	0x080099b1
 8009960:	080099b1 	.word	0x080099b1
 8009964:	080099b1 	.word	0x080099b1
 8009968:	080099b1 	.word	0x080099b1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099b1 	.word	0x080099b1
 8009974:	080099b1 	.word	0x080099b1
 8009978:	080099b1 	.word	0x080099b1
 800997c:	080099b1 	.word	0x080099b1
 8009980:	080099b1 	.word	0x080099b1
 8009984:	080099b1 	.word	0x080099b1
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b1 	.word	0x080099b1
 8009990:	080099b1 	.word	0x080099b1
 8009994:	080099b1 	.word	0x080099b1
 8009998:	080099b1 	.word	0x080099b1
 800999c:	080099b1 	.word	0x080099b1
 80099a0:	080099b1 	.word	0x080099b1
 80099a4:	080099b1 	.word	0x080099b1
 80099a8:	080099b1 	.word	0x080099b1
 80099ac:	080099b1 	.word	0x080099b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099b0:	bf00      	nop
  }

  return (USBD_OK);
 80099b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <CDC_Receive_FS+0x24>)
 80099ce:	f7fe fe00 	bl	80085d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099d2:	4804      	ldr	r0, [pc, #16]	; (80099e4 <CDC_Receive_FS+0x24>)
 80099d4:	f7fe fe3f 	bl	8008656 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20000378 	.word	0x20000378

080099e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099f8:	4b0d      	ldr	r3, [pc, #52]	; (8009a30 <CDC_Transmit_FS+0x48>)
 80099fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e00b      	b.n	8009a26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a0e:	887b      	ldrh	r3, [r7, #2]
 8009a10:	461a      	mov	r2, r3
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4806      	ldr	r0, [pc, #24]	; (8009a30 <CDC_Transmit_FS+0x48>)
 8009a16:	f7fe fdc3 	bl	80085a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a1a:	4805      	ldr	r0, [pc, #20]	; (8009a30 <CDC_Transmit_FS+0x48>)
 8009a1c:	f7fe fdec 	bl	80085f8 <USBD_CDC_TransmitPacket>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000378 	.word	0x20000378

08009a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2212      	movs	r2, #18
 8009a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20000198 	.word	0x20000198

08009a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2204      	movs	r2, #4
 8009a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a6a:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	200001ac 	.word	0x200001ac

08009a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d105      	bne.n	8009a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	4907      	ldr	r1, [pc, #28]	; (8009ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a92:	4808      	ldr	r0, [pc, #32]	; (8009ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a94:	f7ff fdfe 	bl	8009694 <USBD_GetString>
 8009a98:	e004      	b.n	8009aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4904      	ldr	r1, [pc, #16]	; (8009ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a9e:	4805      	ldr	r0, [pc, #20]	; (8009ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009aa0:	f7ff fdf8 	bl	8009694 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000e3c 	.word	0x20000e3c
 8009ab4:	0800afe4 	.word	0x0800afe4

08009ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	4904      	ldr	r1, [pc, #16]	; (8009ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ac8:	4804      	ldr	r0, [pc, #16]	; (8009adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009aca:	f7ff fde3 	bl	8009694 <USBD_GetString>
  return USBD_StrDesc;
 8009ace:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000e3c 	.word	0x20000e3c
 8009adc:	0800affc 	.word	0x0800affc

08009ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	221a      	movs	r2, #26
 8009af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009af2:	f000 f843 	bl	8009b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009af6:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200001b0 	.word	0x200001b0

08009b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	4907      	ldr	r1, [pc, #28]	; (8009b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b1a:	4808      	ldr	r0, [pc, #32]	; (8009b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b1c:	f7ff fdba 	bl	8009694 <USBD_GetString>
 8009b20:	e004      	b.n	8009b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4904      	ldr	r1, [pc, #16]	; (8009b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b26:	4805      	ldr	r0, [pc, #20]	; (8009b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b28:	f7ff fdb4 	bl	8009694 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000e3c 	.word	0x20000e3c
 8009b3c:	0800b010 	.word	0x0800b010

08009b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d105      	bne.n	8009b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b52:	683a      	ldr	r2, [r7, #0]
 8009b54:	4907      	ldr	r1, [pc, #28]	; (8009b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b56:	4808      	ldr	r0, [pc, #32]	; (8009b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b58:	f7ff fd9c 	bl	8009694 <USBD_GetString>
 8009b5c:	e004      	b.n	8009b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4904      	ldr	r1, [pc, #16]	; (8009b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b62:	4805      	ldr	r0, [pc, #20]	; (8009b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b64:	f7ff fd96 	bl	8009694 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b68:	4b02      	ldr	r3, [pc, #8]	; (8009b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000e3c 	.word	0x20000e3c
 8009b78:	0800b01c 	.word	0x0800b01c

08009b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <Get_SerialNum+0x44>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <Get_SerialNum+0x48>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b8e:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <Get_SerialNum+0x4c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4413      	add	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ba2:	2208      	movs	r2, #8
 8009ba4:	4909      	ldr	r1, [pc, #36]	; (8009bcc <Get_SerialNum+0x50>)
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f814 	bl	8009bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bac:	2204      	movs	r2, #4
 8009bae:	4908      	ldr	r1, [pc, #32]	; (8009bd0 <Get_SerialNum+0x54>)
 8009bb0:	68b8      	ldr	r0, [r7, #8]
 8009bb2:	f000 f80f 	bl	8009bd4 <IntToUnicode>
  }
}
 8009bb6:	bf00      	nop
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	1ffff7e8 	.word	0x1ffff7e8
 8009bc4:	1ffff7ec 	.word	0x1ffff7ec
 8009bc8:	1ffff7f0 	.word	0x1ffff7f0
 8009bcc:	200001b2 	.word	0x200001b2
 8009bd0:	200001c2 	.word	0x200001c2

08009bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009be6:	2300      	movs	r3, #0
 8009be8:	75fb      	strb	r3, [r7, #23]
 8009bea:	e027      	b.n	8009c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0f1b      	lsrs	r3, r3, #28
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	d80b      	bhi.n	8009c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	0f1b      	lsrs	r3, r3, #28
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	4619      	mov	r1, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	440b      	add	r3, r1
 8009c04:	3230      	adds	r2, #48	; 0x30
 8009c06:	b2d2      	uxtb	r2, r2
 8009c08:	701a      	strb	r2, [r3, #0]
 8009c0a:	e00a      	b.n	8009c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	0f1b      	lsrs	r3, r3, #28
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	4619      	mov	r1, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	440b      	add	r3, r1
 8009c1c:	3237      	adds	r2, #55	; 0x37
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	2200      	movs	r2, #0
 8009c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	75fb      	strb	r3, [r7, #23]
 8009c3c:	7dfa      	ldrb	r2, [r7, #23]
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d3d3      	bcc.n	8009bec <IntToUnicode+0x18>
  }
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bc80      	pop	{r7}
 8009c4e:	4770      	bx	lr

08009c50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c58:	f107 0310 	add.w	r3, r7, #16
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	605a      	str	r2, [r3, #4]
 8009c62:	609a      	str	r2, [r3, #8]
 8009c64:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c6e:	d12c      	bne.n	8009cca <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c70:	4b18      	ldr	r3, [pc, #96]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	4a17      	ldr	r2, [pc, #92]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009c76:	f043 0304 	orr.w	r3, r3, #4
 8009c7a:	6193      	str	r3, [r2, #24]
 8009c7c:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c96:	f107 0310 	add.w	r3, r7, #16
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	480e      	ldr	r0, [pc, #56]	; (8009cd8 <HAL_PCD_MspInit+0x88>)
 8009c9e:	f7fa f867 	bl	8003d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ca2:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	4a0b      	ldr	r2, [pc, #44]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cac:	6153      	str	r3, [r2, #20]
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <HAL_PCD_MspInit+0x84>)
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cb6:	60bb      	str	r3, [r7, #8]
 8009cb8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	2043      	movs	r0, #67	; 0x43
 8009cc0:	f7fa f81f 	bl	8003d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cc4:	2043      	movs	r0, #67	; 0x43
 8009cc6:	f7fa f838 	bl	8003d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cca:	bf00      	nop
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40021000 	.word	0x40021000
 8009cd8:	40010800 	.word	0x40010800

08009cdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fd65 	bl	80087c2 <USBD_LL_SetupStage>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	4613      	mov	r3, r2
 8009d18:	00db      	lsls	r3, r3, #3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	440b      	add	r3, r1
 8009d20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f7fe fd97 	bl	800885c <USBD_LL_DataOutStage>
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	4413      	add	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	440b      	add	r3, r1
 8009d56:	3348      	adds	r3, #72	; 0x48
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	f7fe fdee 	bl	800893e <USBD_LL_DataInStage>
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fefe 	bl	8008b7a <USBD_LL_SOF>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d001      	beq.n	8009d9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d9a:	f7f8 fdf5 	bl	8002988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009da4:	7bfa      	ldrb	r2, [r7, #15]
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe feae 	bl	8008b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fe67 	bl	8008a88 <USBD_LL_Reset>
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe fea8 	bl	8008b28 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6812      	ldr	r2, [r2, #0]
 8009de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009dea:	f043 0301 	orr.w	r3, r3, #1
 8009dee:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d005      	beq.n	8009e04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009df8:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <HAL_PCD_SuspendCallback+0x48>)
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	4a03      	ldr	r2, [pc, #12]	; (8009e0c <HAL_PCD_SuspendCallback+0x48>)
 8009dfe:	f043 0306 	orr.w	r3, r3, #6
 8009e02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e04:	bf00      	nop
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	e000ed00 	.word	0xe000ed00

08009e10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fe96 	bl	8008b50 <USBD_LL_Resume>
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e3e:	78fa      	ldrb	r2, [r7, #3]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe febf 	bl	8008bc6 <USBD_LL_IsoOUTIncomplete>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fea1 	bl	8008bae <USBD_LL_IsoINIncomplete>
}
 8009e6c:	bf00      	nop
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe feab 	bl	8008bde <USBD_LL_DevConnected>
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fea7 	bl	8008bf2 <USBD_LL_DevDisconnected>
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d133      	bne.n	8009f24 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ebc:	4a1c      	ldr	r2, [pc, #112]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a1a      	ldr	r2, [pc, #104]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ec8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ecc:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009eda:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <USBD_LL_Init+0x84>)
 8009edc:	2202      	movs	r2, #2
 8009ede:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ee0:	4b13      	ldr	r3, [pc, #76]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ee6:	4b12      	ldr	r3, [pc, #72]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009eec:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <USBD_LL_Init+0x84>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <USBD_LL_Init+0x84>)
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ef8:	480d      	ldr	r0, [pc, #52]	; (8009f30 <USBD_LL_Init+0x84>)
 8009efa:	f7fa f8ee 	bl	80040da <HAL_PCD_Init>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009f04:	f7f8 fd40 	bl	8002988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f08:	2180      	movs	r1, #128	; 0x80
 8009f0a:	4809      	ldr	r0, [pc, #36]	; (8009f30 <USBD_LL_Init+0x84>)
 8009f0c:	f7fb fa06 	bl	800531c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f10:	2240      	movs	r2, #64	; 0x40
 8009f12:	2100      	movs	r1, #0
 8009f14:	4806      	ldr	r0, [pc, #24]	; (8009f30 <USBD_LL_Init+0x84>)
 8009f16:	f7fb f9bb 	bl	8005290 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f1a:	2280      	movs	r2, #128	; 0x80
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	4804      	ldr	r0, [pc, #16]	; (8009f30 <USBD_LL_Init+0x84>)
 8009f20:	f7fb f9b6 	bl	8005290 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	2000103c 	.word	0x2000103c

08009f34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fa f9e2 	bl	8004314 <HAL_PCD_Start>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f944 	bl	800a1e4 <USBD_Get_USB_Status>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	4608      	mov	r0, r1
 8009f74:	4611      	mov	r1, r2
 8009f76:	461a      	mov	r2, r3
 8009f78:	4603      	mov	r3, r0
 8009f7a:	70fb      	strb	r3, [r7, #3]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70bb      	strb	r3, [r7, #2]
 8009f80:	4613      	mov	r3, r2
 8009f82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f92:	78bb      	ldrb	r3, [r7, #2]
 8009f94:	883a      	ldrh	r2, [r7, #0]
 8009f96:	78f9      	ldrb	r1, [r7, #3]
 8009f98:	f7fa fe5b 	bl	8004c52 <HAL_PCD_EP_Open>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 f91e 	bl	800a1e4 <USBD_Get_USB_Status>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd0:	78fa      	ldrb	r2, [r7, #3]
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fa fea4 	bl	8004d22 <HAL_PCD_EP_Close>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 f8ff 	bl	800a1e4 <USBD_Get_USB_Status>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	4611      	mov	r1, r2
 800a012:	4618      	mov	r0, r3
 800a014:	f7fa ff49 	bl	8004eaa <HAL_PCD_EP_SetStall>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 f8e0 	bl	800a1e4 <USBD_Get_USB_Status>
 800a024:	4603      	mov	r3, r0
 800a026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a028:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f7fa ff8c 	bl	8004f6e <HAL_PCD_EP_ClrStall>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 f8c1 	bl	800a1e4 <USBD_Get_USB_Status>
 800a062:	4603      	mov	r3, r0
 800a064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a066:	7bbb      	ldrb	r3, [r7, #14]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a082:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	da0b      	bge.n	800a0a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	4613      	mov	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	333e      	adds	r3, #62	; 0x3e
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	e00b      	b.n	800a0bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr

0800a0c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0e0:	78fa      	ldrb	r2, [r7, #3]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fa fd8f 	bl	8004c08 <HAL_PCD_SetAddress>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f877 	bl	800a1e4 <USBD_Get_USB_Status>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	461a      	mov	r2, r3
 800a110:	460b      	mov	r3, r1
 800a112:	72fb      	strb	r3, [r7, #11]
 800a114:	4613      	mov	r3, r2
 800a116:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a126:	893b      	ldrh	r3, [r7, #8]
 800a128:	7af9      	ldrb	r1, [r7, #11]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f7fa fe8c 	bl	8004e48 <HAL_PCD_EP_Transmit>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a134:	7dfb      	ldrb	r3, [r7, #23]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f854 	bl	800a1e4 <USBD_Get_USB_Status>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a140:	7dbb      	ldrb	r3, [r7, #22]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	607a      	str	r2, [r7, #4]
 800a154:	461a      	mov	r2, r3
 800a156:	460b      	mov	r3, r1
 800a158:	72fb      	strb	r3, [r7, #11]
 800a15a:	4613      	mov	r3, r2
 800a15c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a16c:	893b      	ldrh	r3, [r7, #8]
 800a16e:	7af9      	ldrb	r1, [r7, #11]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	f7fa fe20 	bl	8004db6 <HAL_PCD_EP_Receive>
 800a176:	4603      	mov	r3, r0
 800a178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f831 	bl	800a1e4 <USBD_Get_USB_Status>
 800a182:	4603      	mov	r3, r0
 800a184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a186:	7dbb      	ldrb	r3, [r7, #22]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fa fe37 	bl	8004e1a <HAL_PCD_EP_GetRxCount>
 800a1ac:	4603      	mov	r3, r0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <USBD_static_malloc+0x14>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr
 800a1cc:	20001540 	.word	0x20001540

0800a1d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]

}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d817      	bhi.n	800a228 <USBD_Get_USB_Status+0x44>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <USBD_Get_USB_Status+0x1c>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a211 	.word	0x0800a211
 800a204:	0800a217 	.word	0x0800a217
 800a208:	0800a21d 	.word	0x0800a21d
 800a20c:	0800a223 	.word	0x0800a223
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
    break;
 800a214:	e00b      	b.n	800a22e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a216:	2302      	movs	r3, #2
 800a218:	73fb      	strb	r3, [r7, #15]
    break;
 800a21a:	e008      	b.n	800a22e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a21c:	2301      	movs	r3, #1
 800a21e:	73fb      	strb	r3, [r7, #15]
    break;
 800a220:	e005      	b.n	800a22e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a222:	2302      	movs	r3, #2
 800a224:	73fb      	strb	r3, [r7, #15]
    break;
 800a226:	e002      	b.n	800a22e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a228:	2302      	movs	r3, #2
 800a22a:	73fb      	strb	r3, [r7, #15]
    break;
 800a22c:	bf00      	nop
  }
  return usb_status;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop

0800a23c <malloc>:
 800a23c:	4b02      	ldr	r3, [pc, #8]	; (800a248 <malloc+0xc>)
 800a23e:	4601      	mov	r1, r0
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	f000 b82b 	b.w	800a29c <_malloc_r>
 800a246:	bf00      	nop
 800a248:	20000218 	.word	0x20000218

0800a24c <free>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <free+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 b935 	b.w	800a4c0 <_free_r>
 800a256:	bf00      	nop
 800a258:	20000218 	.word	0x20000218

0800a25c <sbrk_aligned>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4e0e      	ldr	r6, [pc, #56]	; (800a298 <sbrk_aligned+0x3c>)
 800a260:	460c      	mov	r4, r1
 800a262:	6831      	ldr	r1, [r6, #0]
 800a264:	4605      	mov	r5, r0
 800a266:	b911      	cbnz	r1, 800a26e <sbrk_aligned+0x12>
 800a268:	f000 f8e0 	bl	800a42c <_sbrk_r>
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f000 f8db 	bl	800a42c <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d00a      	beq.n	800a290 <sbrk_aligned+0x34>
 800a27a:	1cc4      	adds	r4, r0, #3
 800a27c:	f024 0403 	bic.w	r4, r4, #3
 800a280:	42a0      	cmp	r0, r4
 800a282:	d007      	beq.n	800a294 <sbrk_aligned+0x38>
 800a284:	1a21      	subs	r1, r4, r0
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f8d0 	bl	800a42c <_sbrk_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d101      	bne.n	800a294 <sbrk_aligned+0x38>
 800a290:	f04f 34ff 	mov.w	r4, #4294967295
 800a294:	4620      	mov	r0, r4
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	20001764 	.word	0x20001764

0800a29c <_malloc_r>:
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	1ccd      	adds	r5, r1, #3
 800a2a2:	f025 0503 	bic.w	r5, r5, #3
 800a2a6:	3508      	adds	r5, #8
 800a2a8:	2d0c      	cmp	r5, #12
 800a2aa:	bf38      	it	cc
 800a2ac:	250c      	movcc	r5, #12
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	db01      	blt.n	800a2b8 <_malloc_r+0x1c>
 800a2b4:	42a9      	cmp	r1, r5
 800a2b6:	d905      	bls.n	800a2c4 <_malloc_r+0x28>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	2600      	movs	r6, #0
 800a2bc:	603b      	str	r3, [r7, #0]
 800a2be:	4630      	mov	r0, r6
 800a2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a398 <_malloc_r+0xfc>
 800a2c8:	f000 f868 	bl	800a39c <__malloc_lock>
 800a2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d0:	461c      	mov	r4, r3
 800a2d2:	bb5c      	cbnz	r4, 800a32c <_malloc_r+0x90>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f7ff ffc0 	bl	800a25c <sbrk_aligned>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	4604      	mov	r4, r0
 800a2e0:	d155      	bne.n	800a38e <_malloc_r+0xf2>
 800a2e2:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e6:	4626      	mov	r6, r4
 800a2e8:	2e00      	cmp	r6, #0
 800a2ea:	d145      	bne.n	800a378 <_malloc_r+0xdc>
 800a2ec:	2c00      	cmp	r4, #0
 800a2ee:	d048      	beq.n	800a382 <_malloc_r+0xe6>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	eb04 0903 	add.w	r9, r4, r3
 800a2fa:	f000 f897 	bl	800a42c <_sbrk_r>
 800a2fe:	4581      	cmp	r9, r0
 800a300:	d13f      	bne.n	800a382 <_malloc_r+0xe6>
 800a302:	6821      	ldr	r1, [r4, #0]
 800a304:	4638      	mov	r0, r7
 800a306:	1a6d      	subs	r5, r5, r1
 800a308:	4629      	mov	r1, r5
 800a30a:	f7ff ffa7 	bl	800a25c <sbrk_aligned>
 800a30e:	3001      	adds	r0, #1
 800a310:	d037      	beq.n	800a382 <_malloc_r+0xe6>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	442b      	add	r3, r5
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	f8d8 3000 	ldr.w	r3, [r8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d038      	beq.n	800a392 <_malloc_r+0xf6>
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	42a2      	cmp	r2, r4
 800a324:	d12b      	bne.n	800a37e <_malloc_r+0xe2>
 800a326:	2200      	movs	r2, #0
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	e00f      	b.n	800a34c <_malloc_r+0xb0>
 800a32c:	6822      	ldr	r2, [r4, #0]
 800a32e:	1b52      	subs	r2, r2, r5
 800a330:	d41f      	bmi.n	800a372 <_malloc_r+0xd6>
 800a332:	2a0b      	cmp	r2, #11
 800a334:	d917      	bls.n	800a366 <_malloc_r+0xca>
 800a336:	1961      	adds	r1, r4, r5
 800a338:	42a3      	cmp	r3, r4
 800a33a:	6025      	str	r5, [r4, #0]
 800a33c:	bf18      	it	ne
 800a33e:	6059      	strne	r1, [r3, #4]
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	bf08      	it	eq
 800a344:	f8c8 1000 	streq.w	r1, [r8]
 800a348:	5162      	str	r2, [r4, r5]
 800a34a:	604b      	str	r3, [r1, #4]
 800a34c:	4638      	mov	r0, r7
 800a34e:	f104 060b 	add.w	r6, r4, #11
 800a352:	f000 f829 	bl	800a3a8 <__malloc_unlock>
 800a356:	f026 0607 	bic.w	r6, r6, #7
 800a35a:	1d23      	adds	r3, r4, #4
 800a35c:	1af2      	subs	r2, r6, r3
 800a35e:	d0ae      	beq.n	800a2be <_malloc_r+0x22>
 800a360:	1b9b      	subs	r3, r3, r6
 800a362:	50a3      	str	r3, [r4, r2]
 800a364:	e7ab      	b.n	800a2be <_malloc_r+0x22>
 800a366:	42a3      	cmp	r3, r4
 800a368:	6862      	ldr	r2, [r4, #4]
 800a36a:	d1dd      	bne.n	800a328 <_malloc_r+0x8c>
 800a36c:	f8c8 2000 	str.w	r2, [r8]
 800a370:	e7ec      	b.n	800a34c <_malloc_r+0xb0>
 800a372:	4623      	mov	r3, r4
 800a374:	6864      	ldr	r4, [r4, #4]
 800a376:	e7ac      	b.n	800a2d2 <_malloc_r+0x36>
 800a378:	4634      	mov	r4, r6
 800a37a:	6876      	ldr	r6, [r6, #4]
 800a37c:	e7b4      	b.n	800a2e8 <_malloc_r+0x4c>
 800a37e:	4613      	mov	r3, r2
 800a380:	e7cc      	b.n	800a31c <_malloc_r+0x80>
 800a382:	230c      	movs	r3, #12
 800a384:	4638      	mov	r0, r7
 800a386:	603b      	str	r3, [r7, #0]
 800a388:	f000 f80e 	bl	800a3a8 <__malloc_unlock>
 800a38c:	e797      	b.n	800a2be <_malloc_r+0x22>
 800a38e:	6025      	str	r5, [r4, #0]
 800a390:	e7dc      	b.n	800a34c <_malloc_r+0xb0>
 800a392:	605b      	str	r3, [r3, #4]
 800a394:	deff      	udf	#255	; 0xff
 800a396:	bf00      	nop
 800a398:	20001760 	.word	0x20001760

0800a39c <__malloc_lock>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__malloc_lock+0x8>)
 800a39e:	f000 b87f 	b.w	800a4a0 <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	200018a4 	.word	0x200018a4

0800a3a8 <__malloc_unlock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__malloc_unlock+0x8>)
 800a3aa:	f000 b87a 	b.w	800a4a2 <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	200018a4 	.word	0x200018a4

0800a3b4 <siprintf>:
 800a3b4:	b40e      	push	{r1, r2, r3}
 800a3b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3ba:	b500      	push	{lr}
 800a3bc:	b09c      	sub	sp, #112	; 0x70
 800a3be:	ab1d      	add	r3, sp, #116	; 0x74
 800a3c0:	9002      	str	r0, [sp, #8]
 800a3c2:	9006      	str	r0, [sp, #24]
 800a3c4:	9107      	str	r1, [sp, #28]
 800a3c6:	9104      	str	r1, [sp, #16]
 800a3c8:	4808      	ldr	r0, [pc, #32]	; (800a3ec <siprintf+0x38>)
 800a3ca:	4909      	ldr	r1, [pc, #36]	; (800a3f0 <siprintf+0x3c>)
 800a3cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d0:	9105      	str	r1, [sp, #20]
 800a3d2:	6800      	ldr	r0, [r0, #0]
 800a3d4:	a902      	add	r1, sp, #8
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	f000 f914 	bl	800a604 <_svfiprintf_r>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	9b02      	ldr	r3, [sp, #8]
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	b01c      	add	sp, #112	; 0x70
 800a3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e8:	b003      	add	sp, #12
 800a3ea:	4770      	bx	lr
 800a3ec:	20000218 	.word	0x20000218
 800a3f0:	ffff0208 	.word	0xffff0208

0800a3f4 <memset>:
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	4402      	add	r2, r0
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d100      	bne.n	800a3fe <memset+0xa>
 800a3fc:	4770      	bx	lr
 800a3fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a402:	e7f9      	b.n	800a3f8 <memset+0x4>

0800a404 <strncat>:
 800a404:	b530      	push	{r4, r5, lr}
 800a406:	4604      	mov	r4, r0
 800a408:	7825      	ldrb	r5, [r4, #0]
 800a40a:	4623      	mov	r3, r4
 800a40c:	3401      	adds	r4, #1
 800a40e:	2d00      	cmp	r5, #0
 800a410:	d1fa      	bne.n	800a408 <strncat+0x4>
 800a412:	3a01      	subs	r2, #1
 800a414:	d304      	bcc.n	800a420 <strncat+0x1c>
 800a416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a41a:	f803 4b01 	strb.w	r4, [r3], #1
 800a41e:	b904      	cbnz	r4, 800a422 <strncat+0x1e>
 800a420:	bd30      	pop	{r4, r5, pc}
 800a422:	2a00      	cmp	r2, #0
 800a424:	d1f5      	bne.n	800a412 <strncat+0xe>
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e7f3      	b.n	800a412 <strncat+0xe>
	...

0800a42c <_sbrk_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	2300      	movs	r3, #0
 800a430:	4d05      	ldr	r5, [pc, #20]	; (800a448 <_sbrk_r+0x1c>)
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7f8 fe0c 	bl	8003054 <_sbrk>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_sbrk_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_sbrk_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	200018a0 	.word	0x200018a0

0800a44c <__errno>:
 800a44c:	4b01      	ldr	r3, [pc, #4]	; (800a454 <__errno+0x8>)
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000218 	.word	0x20000218

0800a458 <__libc_init_array>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	2600      	movs	r6, #0
 800a45c:	4d0c      	ldr	r5, [pc, #48]	; (800a490 <__libc_init_array+0x38>)
 800a45e:	4c0d      	ldr	r4, [pc, #52]	; (800a494 <__libc_init_array+0x3c>)
 800a460:	1b64      	subs	r4, r4, r5
 800a462:	10a4      	asrs	r4, r4, #2
 800a464:	42a6      	cmp	r6, r4
 800a466:	d109      	bne.n	800a47c <__libc_init_array+0x24>
 800a468:	f000 fda8 	bl	800afbc <_init>
 800a46c:	2600      	movs	r6, #0
 800a46e:	4d0a      	ldr	r5, [pc, #40]	; (800a498 <__libc_init_array+0x40>)
 800a470:	4c0a      	ldr	r4, [pc, #40]	; (800a49c <__libc_init_array+0x44>)
 800a472:	1b64      	subs	r4, r4, r5
 800a474:	10a4      	asrs	r4, r4, #2
 800a476:	42a6      	cmp	r6, r4
 800a478:	d105      	bne.n	800a486 <__libc_init_array+0x2e>
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a480:	4798      	blx	r3
 800a482:	3601      	adds	r6, #1
 800a484:	e7ee      	b.n	800a464 <__libc_init_array+0xc>
 800a486:	f855 3b04 	ldr.w	r3, [r5], #4
 800a48a:	4798      	blx	r3
 800a48c:	3601      	adds	r6, #1
 800a48e:	e7f2      	b.n	800a476 <__libc_init_array+0x1e>
 800a490:	0800b4a4 	.word	0x0800b4a4
 800a494:	0800b4a4 	.word	0x0800b4a4
 800a498:	0800b4a4 	.word	0x0800b4a4
 800a49c:	0800b4a8 	.word	0x0800b4a8

0800a4a0 <__retarget_lock_acquire_recursive>:
 800a4a0:	4770      	bx	lr

0800a4a2 <__retarget_lock_release_recursive>:
 800a4a2:	4770      	bx	lr

0800a4a4 <memcpy>:
 800a4a4:	440a      	add	r2, r1
 800a4a6:	4291      	cmp	r1, r2
 800a4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ac:	d100      	bne.n	800a4b0 <memcpy+0xc>
 800a4ae:	4770      	bx	lr
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4b6:	4291      	cmp	r1, r2
 800a4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4bc:	d1f9      	bne.n	800a4b2 <memcpy+0xe>
 800a4be:	bd10      	pop	{r4, pc}

0800a4c0 <_free_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	d040      	beq.n	800a54a <_free_r+0x8a>
 800a4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4cc:	1f0c      	subs	r4, r1, #4
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfb8      	it	lt
 800a4d2:	18e4      	addlt	r4, r4, r3
 800a4d4:	f7ff ff62 	bl	800a39c <__malloc_lock>
 800a4d8:	4a1c      	ldr	r2, [pc, #112]	; (800a54c <_free_r+0x8c>)
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	b933      	cbnz	r3, 800a4ec <_free_r+0x2c>
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	6014      	str	r4, [r2, #0]
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e8:	f7ff bf5e 	b.w	800a3a8 <__malloc_unlock>
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d908      	bls.n	800a502 <_free_r+0x42>
 800a4f0:	6820      	ldr	r0, [r4, #0]
 800a4f2:	1821      	adds	r1, r4, r0
 800a4f4:	428b      	cmp	r3, r1
 800a4f6:	bf01      	itttt	eq
 800a4f8:	6819      	ldreq	r1, [r3, #0]
 800a4fa:	685b      	ldreq	r3, [r3, #4]
 800a4fc:	1809      	addeq	r1, r1, r0
 800a4fe:	6021      	streq	r1, [r4, #0]
 800a500:	e7ed      	b.n	800a4de <_free_r+0x1e>
 800a502:	461a      	mov	r2, r3
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	b10b      	cbz	r3, 800a50c <_free_r+0x4c>
 800a508:	42a3      	cmp	r3, r4
 800a50a:	d9fa      	bls.n	800a502 <_free_r+0x42>
 800a50c:	6811      	ldr	r1, [r2, #0]
 800a50e:	1850      	adds	r0, r2, r1
 800a510:	42a0      	cmp	r0, r4
 800a512:	d10b      	bne.n	800a52c <_free_r+0x6c>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	4401      	add	r1, r0
 800a518:	1850      	adds	r0, r2, r1
 800a51a:	4283      	cmp	r3, r0
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	d1e0      	bne.n	800a4e2 <_free_r+0x22>
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4408      	add	r0, r1
 800a526:	6010      	str	r0, [r2, #0]
 800a528:	6053      	str	r3, [r2, #4]
 800a52a:	e7da      	b.n	800a4e2 <_free_r+0x22>
 800a52c:	d902      	bls.n	800a534 <_free_r+0x74>
 800a52e:	230c      	movs	r3, #12
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	e7d6      	b.n	800a4e2 <_free_r+0x22>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	1821      	adds	r1, r4, r0
 800a538:	428b      	cmp	r3, r1
 800a53a:	bf01      	itttt	eq
 800a53c:	6819      	ldreq	r1, [r3, #0]
 800a53e:	685b      	ldreq	r3, [r3, #4]
 800a540:	1809      	addeq	r1, r1, r0
 800a542:	6021      	streq	r1, [r4, #0]
 800a544:	6063      	str	r3, [r4, #4]
 800a546:	6054      	str	r4, [r2, #4]
 800a548:	e7cb      	b.n	800a4e2 <_free_r+0x22>
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20001760 	.word	0x20001760

0800a550 <__ssputs_r>:
 800a550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a554:	461f      	mov	r7, r3
 800a556:	688e      	ldr	r6, [r1, #8]
 800a558:	4682      	mov	sl, r0
 800a55a:	42be      	cmp	r6, r7
 800a55c:	460c      	mov	r4, r1
 800a55e:	4690      	mov	r8, r2
 800a560:	680b      	ldr	r3, [r1, #0]
 800a562:	d82c      	bhi.n	800a5be <__ssputs_r+0x6e>
 800a564:	898a      	ldrh	r2, [r1, #12]
 800a566:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a56a:	d026      	beq.n	800a5ba <__ssputs_r+0x6a>
 800a56c:	6965      	ldr	r5, [r4, #20]
 800a56e:	6909      	ldr	r1, [r1, #16]
 800a570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a574:	eba3 0901 	sub.w	r9, r3, r1
 800a578:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a57c:	1c7b      	adds	r3, r7, #1
 800a57e:	444b      	add	r3, r9
 800a580:	106d      	asrs	r5, r5, #1
 800a582:	429d      	cmp	r5, r3
 800a584:	bf38      	it	cc
 800a586:	461d      	movcc	r5, r3
 800a588:	0553      	lsls	r3, r2, #21
 800a58a:	d527      	bpl.n	800a5dc <__ssputs_r+0x8c>
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7ff fe85 	bl	800a29c <_malloc_r>
 800a592:	4606      	mov	r6, r0
 800a594:	b360      	cbz	r0, 800a5f0 <__ssputs_r+0xa0>
 800a596:	464a      	mov	r2, r9
 800a598:	6921      	ldr	r1, [r4, #16]
 800a59a:	f7ff ff83 	bl	800a4a4 <memcpy>
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	6126      	str	r6, [r4, #16]
 800a5ac:	444e      	add	r6, r9
 800a5ae:	6026      	str	r6, [r4, #0]
 800a5b0:	463e      	mov	r6, r7
 800a5b2:	6165      	str	r5, [r4, #20]
 800a5b4:	eba5 0509 	sub.w	r5, r5, r9
 800a5b8:	60a5      	str	r5, [r4, #8]
 800a5ba:	42be      	cmp	r6, r7
 800a5bc:	d900      	bls.n	800a5c0 <__ssputs_r+0x70>
 800a5be:	463e      	mov	r6, r7
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	4641      	mov	r1, r8
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	f000 faaf 	bl	800ab28 <memmove>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	1b9b      	subs	r3, r3, r6
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	4433      	add	r3, r6
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5dc:	462a      	mov	r2, r5
 800a5de:	f000 facb 	bl	800ab78 <_realloc_r>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d1e0      	bne.n	800a5aa <__ssputs_r+0x5a>
 800a5e8:	4650      	mov	r0, sl
 800a5ea:	6921      	ldr	r1, [r4, #16]
 800a5ec:	f7ff ff68 	bl	800a4c0 <_free_r>
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	f8ca 3000 	str.w	r3, [sl]
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	e7e9      	b.n	800a5d8 <__ssputs_r+0x88>

0800a604 <_svfiprintf_r>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	4698      	mov	r8, r3
 800a60a:	898b      	ldrh	r3, [r1, #12]
 800a60c:	4607      	mov	r7, r0
 800a60e:	061b      	lsls	r3, r3, #24
 800a610:	460d      	mov	r5, r1
 800a612:	4614      	mov	r4, r2
 800a614:	b09d      	sub	sp, #116	; 0x74
 800a616:	d50e      	bpl.n	800a636 <_svfiprintf_r+0x32>
 800a618:	690b      	ldr	r3, [r1, #16]
 800a61a:	b963      	cbnz	r3, 800a636 <_svfiprintf_r+0x32>
 800a61c:	2140      	movs	r1, #64	; 0x40
 800a61e:	f7ff fe3d 	bl	800a29c <_malloc_r>
 800a622:	6028      	str	r0, [r5, #0]
 800a624:	6128      	str	r0, [r5, #16]
 800a626:	b920      	cbnz	r0, 800a632 <_svfiprintf_r+0x2e>
 800a628:	230c      	movs	r3, #12
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	e0d0      	b.n	800a7d4 <_svfiprintf_r+0x1d0>
 800a632:	2340      	movs	r3, #64	; 0x40
 800a634:	616b      	str	r3, [r5, #20]
 800a636:	2300      	movs	r3, #0
 800a638:	9309      	str	r3, [sp, #36]	; 0x24
 800a63a:	2320      	movs	r3, #32
 800a63c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a640:	2330      	movs	r3, #48	; 0x30
 800a642:	f04f 0901 	mov.w	r9, #1
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a7ec <_svfiprintf_r+0x1e8>
 800a64e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a652:	4623      	mov	r3, r4
 800a654:	469a      	mov	sl, r3
 800a656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65a:	b10a      	cbz	r2, 800a660 <_svfiprintf_r+0x5c>
 800a65c:	2a25      	cmp	r2, #37	; 0x25
 800a65e:	d1f9      	bne.n	800a654 <_svfiprintf_r+0x50>
 800a660:	ebba 0b04 	subs.w	fp, sl, r4
 800a664:	d00b      	beq.n	800a67e <_svfiprintf_r+0x7a>
 800a666:	465b      	mov	r3, fp
 800a668:	4622      	mov	r2, r4
 800a66a:	4629      	mov	r1, r5
 800a66c:	4638      	mov	r0, r7
 800a66e:	f7ff ff6f 	bl	800a550 <__ssputs_r>
 800a672:	3001      	adds	r0, #1
 800a674:	f000 80a9 	beq.w	800a7ca <_svfiprintf_r+0x1c6>
 800a678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a67a:	445a      	add	r2, fp
 800a67c:	9209      	str	r2, [sp, #36]	; 0x24
 800a67e:	f89a 3000 	ldrb.w	r3, [sl]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 80a1 	beq.w	800a7ca <_svfiprintf_r+0x1c6>
 800a688:	2300      	movs	r3, #0
 800a68a:	f04f 32ff 	mov.w	r2, #4294967295
 800a68e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a692:	f10a 0a01 	add.w	sl, sl, #1
 800a696:	9304      	str	r3, [sp, #16]
 800a698:	9307      	str	r3, [sp, #28]
 800a69a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a69e:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a0:	4654      	mov	r4, sl
 800a6a2:	2205      	movs	r2, #5
 800a6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a8:	4850      	ldr	r0, [pc, #320]	; (800a7ec <_svfiprintf_r+0x1e8>)
 800a6aa:	f000 fa57 	bl	800ab5c <memchr>
 800a6ae:	9a04      	ldr	r2, [sp, #16]
 800a6b0:	b9d8      	cbnz	r0, 800a6ea <_svfiprintf_r+0xe6>
 800a6b2:	06d0      	lsls	r0, r2, #27
 800a6b4:	bf44      	itt	mi
 800a6b6:	2320      	movmi	r3, #32
 800a6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6bc:	0711      	lsls	r1, r2, #28
 800a6be:	bf44      	itt	mi
 800a6c0:	232b      	movmi	r3, #43	; 0x2b
 800a6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a6cc:	d015      	beq.n	800a6fa <_svfiprintf_r+0xf6>
 800a6ce:	4654      	mov	r4, sl
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	f04f 0c0a 	mov.w	ip, #10
 800a6d6:	9a07      	ldr	r2, [sp, #28]
 800a6d8:	4621      	mov	r1, r4
 800a6da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6de:	3b30      	subs	r3, #48	; 0x30
 800a6e0:	2b09      	cmp	r3, #9
 800a6e2:	d94d      	bls.n	800a780 <_svfiprintf_r+0x17c>
 800a6e4:	b1b0      	cbz	r0, 800a714 <_svfiprintf_r+0x110>
 800a6e6:	9207      	str	r2, [sp, #28]
 800a6e8:	e014      	b.n	800a714 <_svfiprintf_r+0x110>
 800a6ea:	eba0 0308 	sub.w	r3, r0, r8
 800a6ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	46a2      	mov	sl, r4
 800a6f6:	9304      	str	r3, [sp, #16]
 800a6f8:	e7d2      	b.n	800a6a0 <_svfiprintf_r+0x9c>
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	9103      	str	r1, [sp, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	bfbb      	ittet	lt
 800a706:	425b      	neglt	r3, r3
 800a708:	f042 0202 	orrlt.w	r2, r2, #2
 800a70c:	9307      	strge	r3, [sp, #28]
 800a70e:	9307      	strlt	r3, [sp, #28]
 800a710:	bfb8      	it	lt
 800a712:	9204      	strlt	r2, [sp, #16]
 800a714:	7823      	ldrb	r3, [r4, #0]
 800a716:	2b2e      	cmp	r3, #46	; 0x2e
 800a718:	d10c      	bne.n	800a734 <_svfiprintf_r+0x130>
 800a71a:	7863      	ldrb	r3, [r4, #1]
 800a71c:	2b2a      	cmp	r3, #42	; 0x2a
 800a71e:	d134      	bne.n	800a78a <_svfiprintf_r+0x186>
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	3402      	adds	r4, #2
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9203      	str	r2, [sp, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfb8      	it	lt
 800a72e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a732:	9305      	str	r3, [sp, #20]
 800a734:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a7f0 <_svfiprintf_r+0x1ec>
 800a738:	2203      	movs	r2, #3
 800a73a:	4650      	mov	r0, sl
 800a73c:	7821      	ldrb	r1, [r4, #0]
 800a73e:	f000 fa0d 	bl	800ab5c <memchr>
 800a742:	b138      	cbz	r0, 800a754 <_svfiprintf_r+0x150>
 800a744:	2240      	movs	r2, #64	; 0x40
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	eba0 000a 	sub.w	r0, r0, sl
 800a74c:	4082      	lsls	r2, r0
 800a74e:	4313      	orrs	r3, r2
 800a750:	3401      	adds	r4, #1
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a758:	2206      	movs	r2, #6
 800a75a:	4826      	ldr	r0, [pc, #152]	; (800a7f4 <_svfiprintf_r+0x1f0>)
 800a75c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a760:	f000 f9fc 	bl	800ab5c <memchr>
 800a764:	2800      	cmp	r0, #0
 800a766:	d038      	beq.n	800a7da <_svfiprintf_r+0x1d6>
 800a768:	4b23      	ldr	r3, [pc, #140]	; (800a7f8 <_svfiprintf_r+0x1f4>)
 800a76a:	bb1b      	cbnz	r3, 800a7b4 <_svfiprintf_r+0x1b0>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	3307      	adds	r3, #7
 800a770:	f023 0307 	bic.w	r3, r3, #7
 800a774:	3308      	adds	r3, #8
 800a776:	9303      	str	r3, [sp, #12]
 800a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77a:	4433      	add	r3, r6
 800a77c:	9309      	str	r3, [sp, #36]	; 0x24
 800a77e:	e768      	b.n	800a652 <_svfiprintf_r+0x4e>
 800a780:	460c      	mov	r4, r1
 800a782:	2001      	movs	r0, #1
 800a784:	fb0c 3202 	mla	r2, ip, r2, r3
 800a788:	e7a6      	b.n	800a6d8 <_svfiprintf_r+0xd4>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f04f 0c0a 	mov.w	ip, #10
 800a790:	4619      	mov	r1, r3
 800a792:	3401      	adds	r4, #1
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4620      	mov	r0, r4
 800a798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79c:	3a30      	subs	r2, #48	; 0x30
 800a79e:	2a09      	cmp	r2, #9
 800a7a0:	d903      	bls.n	800a7aa <_svfiprintf_r+0x1a6>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d0c6      	beq.n	800a734 <_svfiprintf_r+0x130>
 800a7a6:	9105      	str	r1, [sp, #20]
 800a7a8:	e7c4      	b.n	800a734 <_svfiprintf_r+0x130>
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b2:	e7f0      	b.n	800a796 <_svfiprintf_r+0x192>
 800a7b4:	ab03      	add	r3, sp, #12
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <_svfiprintf_r+0x1f8>)
 800a7be:	a904      	add	r1, sp, #16
 800a7c0:	f3af 8000 	nop.w
 800a7c4:	1c42      	adds	r2, r0, #1
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	d1d6      	bne.n	800a778 <_svfiprintf_r+0x174>
 800a7ca:	89ab      	ldrh	r3, [r5, #12]
 800a7cc:	065b      	lsls	r3, r3, #25
 800a7ce:	f53f af2d 	bmi.w	800a62c <_svfiprintf_r+0x28>
 800a7d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7d4:	b01d      	add	sp, #116	; 0x74
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <_svfiprintf_r+0x1f8>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	f000 f87d 	bl	800a8e4 <_printf_i>
 800a7ea:	e7eb      	b.n	800a7c4 <_svfiprintf_r+0x1c0>
 800a7ec:	0800b468 	.word	0x0800b468
 800a7f0:	0800b46e 	.word	0x0800b46e
 800a7f4:	0800b472 	.word	0x0800b472
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	0800a551 	.word	0x0800a551

0800a800 <_printf_common>:
 800a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	4616      	mov	r6, r2
 800a806:	4699      	mov	r9, r3
 800a808:	688a      	ldr	r2, [r1, #8]
 800a80a:	690b      	ldr	r3, [r1, #16]
 800a80c:	4607      	mov	r7, r0
 800a80e:	4293      	cmp	r3, r2
 800a810:	bfb8      	it	lt
 800a812:	4613      	movlt	r3, r2
 800a814:	6033      	str	r3, [r6, #0]
 800a816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a81a:	460c      	mov	r4, r1
 800a81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a820:	b10a      	cbz	r2, 800a826 <_printf_common+0x26>
 800a822:	3301      	adds	r3, #1
 800a824:	6033      	str	r3, [r6, #0]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	0699      	lsls	r1, r3, #26
 800a82a:	bf42      	ittt	mi
 800a82c:	6833      	ldrmi	r3, [r6, #0]
 800a82e:	3302      	addmi	r3, #2
 800a830:	6033      	strmi	r3, [r6, #0]
 800a832:	6825      	ldr	r5, [r4, #0]
 800a834:	f015 0506 	ands.w	r5, r5, #6
 800a838:	d106      	bne.n	800a848 <_printf_common+0x48>
 800a83a:	f104 0a19 	add.w	sl, r4, #25
 800a83e:	68e3      	ldr	r3, [r4, #12]
 800a840:	6832      	ldr	r2, [r6, #0]
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	42ab      	cmp	r3, r5
 800a846:	dc2b      	bgt.n	800a8a0 <_printf_common+0xa0>
 800a848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a84c:	1e13      	subs	r3, r2, #0
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	bf18      	it	ne
 800a852:	2301      	movne	r3, #1
 800a854:	0692      	lsls	r2, r2, #26
 800a856:	d430      	bmi.n	800a8ba <_printf_common+0xba>
 800a858:	4649      	mov	r1, r9
 800a85a:	4638      	mov	r0, r7
 800a85c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a860:	47c0      	blx	r8
 800a862:	3001      	adds	r0, #1
 800a864:	d023      	beq.n	800a8ae <_printf_common+0xae>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	6922      	ldr	r2, [r4, #16]
 800a86a:	f003 0306 	and.w	r3, r3, #6
 800a86e:	2b04      	cmp	r3, #4
 800a870:	bf14      	ite	ne
 800a872:	2500      	movne	r5, #0
 800a874:	6833      	ldreq	r3, [r6, #0]
 800a876:	f04f 0600 	mov.w	r6, #0
 800a87a:	bf08      	it	eq
 800a87c:	68e5      	ldreq	r5, [r4, #12]
 800a87e:	f104 041a 	add.w	r4, r4, #26
 800a882:	bf08      	it	eq
 800a884:	1aed      	subeq	r5, r5, r3
 800a886:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a88a:	bf08      	it	eq
 800a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a890:	4293      	cmp	r3, r2
 800a892:	bfc4      	itt	gt
 800a894:	1a9b      	subgt	r3, r3, r2
 800a896:	18ed      	addgt	r5, r5, r3
 800a898:	42b5      	cmp	r5, r6
 800a89a:	d11a      	bne.n	800a8d2 <_printf_common+0xd2>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e008      	b.n	800a8b2 <_printf_common+0xb2>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4652      	mov	r2, sl
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c0      	blx	r8
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d103      	bne.n	800a8b6 <_printf_common+0xb6>
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	e7c1      	b.n	800a83e <_printf_common+0x3e>
 800a8ba:	2030      	movs	r0, #48	; 0x30
 800a8bc:	18e1      	adds	r1, r4, r3
 800a8be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c8:	4422      	add	r2, r4
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8d0:	e7c2      	b.n	800a858 <_printf_common+0x58>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4638      	mov	r0, r7
 800a8da:	47c0      	blx	r8
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d0e6      	beq.n	800a8ae <_printf_common+0xae>
 800a8e0:	3601      	adds	r6, #1
 800a8e2:	e7d9      	b.n	800a898 <_printf_common+0x98>

0800a8e4 <_printf_i>:
 800a8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e8:	7e0f      	ldrb	r7, [r1, #24]
 800a8ea:	4691      	mov	r9, r2
 800a8ec:	2f78      	cmp	r7, #120	; 0x78
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	469a      	mov	sl, r3
 800a8f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8fa:	d807      	bhi.n	800a90c <_printf_i+0x28>
 800a8fc:	2f62      	cmp	r7, #98	; 0x62
 800a8fe:	d80a      	bhi.n	800a916 <_printf_i+0x32>
 800a900:	2f00      	cmp	r7, #0
 800a902:	f000 80d5 	beq.w	800aab0 <_printf_i+0x1cc>
 800a906:	2f58      	cmp	r7, #88	; 0x58
 800a908:	f000 80c1 	beq.w	800aa8e <_printf_i+0x1aa>
 800a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a914:	e03a      	b.n	800a98c <_printf_i+0xa8>
 800a916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a91a:	2b15      	cmp	r3, #21
 800a91c:	d8f6      	bhi.n	800a90c <_printf_i+0x28>
 800a91e:	a101      	add	r1, pc, #4	; (adr r1, 800a924 <_printf_i+0x40>)
 800a920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a924:	0800a97d 	.word	0x0800a97d
 800a928:	0800a991 	.word	0x0800a991
 800a92c:	0800a90d 	.word	0x0800a90d
 800a930:	0800a90d 	.word	0x0800a90d
 800a934:	0800a90d 	.word	0x0800a90d
 800a938:	0800a90d 	.word	0x0800a90d
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a90d 	.word	0x0800a90d
 800a944:	0800a90d 	.word	0x0800a90d
 800a948:	0800a90d 	.word	0x0800a90d
 800a94c:	0800a90d 	.word	0x0800a90d
 800a950:	0800aa97 	.word	0x0800aa97
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800aa51 	.word	0x0800aa51
 800a95c:	0800a90d 	.word	0x0800a90d
 800a960:	0800a90d 	.word	0x0800a90d
 800a964:	0800aab9 	.word	0x0800aab9
 800a968:	0800a90d 	.word	0x0800a90d
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a90d 	.word	0x0800a90d
 800a974:	0800a90d 	.word	0x0800a90d
 800a978:	0800aa59 	.word	0x0800aa59
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	1d1a      	adds	r2, r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	602a      	str	r2, [r5, #0]
 800a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a98c:	2301      	movs	r3, #1
 800a98e:	e0a0      	b.n	800aad2 <_printf_i+0x1ee>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	682b      	ldr	r3, [r5, #0]
 800a994:	0607      	lsls	r7, r0, #24
 800a996:	f103 0104 	add.w	r1, r3, #4
 800a99a:	6029      	str	r1, [r5, #0]
 800a99c:	d501      	bpl.n	800a9a2 <_printf_i+0xbe>
 800a99e:	681e      	ldr	r6, [r3, #0]
 800a9a0:	e003      	b.n	800a9aa <_printf_i+0xc6>
 800a9a2:	0646      	lsls	r6, r0, #25
 800a9a4:	d5fb      	bpl.n	800a99e <_printf_i+0xba>
 800a9a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9aa:	2e00      	cmp	r6, #0
 800a9ac:	da03      	bge.n	800a9b6 <_printf_i+0xd2>
 800a9ae:	232d      	movs	r3, #45	; 0x2d
 800a9b0:	4276      	negs	r6, r6
 800a9b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	4859      	ldr	r0, [pc, #356]	; (800ab20 <_printf_i+0x23c>)
 800a9ba:	e012      	b.n	800a9e2 <_printf_i+0xfe>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1d19      	adds	r1, r3, #4
 800a9c2:	6029      	str	r1, [r5, #0]
 800a9c4:	0605      	lsls	r5, r0, #24
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0xe8>
 800a9c8:	681e      	ldr	r6, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <_printf_i+0xee>
 800a9cc:	0641      	lsls	r1, r0, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0xe4>
 800a9d0:	881e      	ldrh	r6, [r3, #0]
 800a9d2:	2f6f      	cmp	r7, #111	; 0x6f
 800a9d4:	bf0c      	ite	eq
 800a9d6:	2308      	moveq	r3, #8
 800a9d8:	230a      	movne	r3, #10
 800a9da:	4851      	ldr	r0, [pc, #324]	; (800ab20 <_printf_i+0x23c>)
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9e2:	6865      	ldr	r5, [r4, #4]
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	bfa8      	it	ge
 800a9e8:	6821      	ldrge	r1, [r4, #0]
 800a9ea:	60a5      	str	r5, [r4, #8]
 800a9ec:	bfa4      	itt	ge
 800a9ee:	f021 0104 	bicge.w	r1, r1, #4
 800a9f2:	6021      	strge	r1, [r4, #0]
 800a9f4:	b90e      	cbnz	r6, 800a9fa <_printf_i+0x116>
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	d04b      	beq.n	800aa92 <_printf_i+0x1ae>
 800a9fa:	4615      	mov	r5, r2
 800a9fc:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa00:	fb03 6711 	mls	r7, r3, r1, r6
 800aa04:	5dc7      	ldrb	r7, [r0, r7]
 800aa06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa0a:	4637      	mov	r7, r6
 800aa0c:	42bb      	cmp	r3, r7
 800aa0e:	460e      	mov	r6, r1
 800aa10:	d9f4      	bls.n	800a9fc <_printf_i+0x118>
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	d10b      	bne.n	800aa2e <_printf_i+0x14a>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	07de      	lsls	r6, r3, #31
 800aa1a:	d508      	bpl.n	800aa2e <_printf_i+0x14a>
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	6861      	ldr	r1, [r4, #4]
 800aa20:	4299      	cmp	r1, r3
 800aa22:	bfde      	ittt	le
 800aa24:	2330      	movle	r3, #48	; 0x30
 800aa26:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa2e:	1b52      	subs	r2, r2, r5
 800aa30:	6122      	str	r2, [r4, #16]
 800aa32:	464b      	mov	r3, r9
 800aa34:	4621      	mov	r1, r4
 800aa36:	4640      	mov	r0, r8
 800aa38:	f8cd a000 	str.w	sl, [sp]
 800aa3c:	aa03      	add	r2, sp, #12
 800aa3e:	f7ff fedf 	bl	800a800 <_printf_common>
 800aa42:	3001      	adds	r0, #1
 800aa44:	d14a      	bne.n	800aadc <_printf_i+0x1f8>
 800aa46:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4a:	b004      	add	sp, #16
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	f043 0320 	orr.w	r3, r3, #32
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	2778      	movs	r7, #120	; 0x78
 800aa5a:	4832      	ldr	r0, [pc, #200]	; (800ab24 <_printf_i+0x240>)
 800aa5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	6829      	ldr	r1, [r5, #0]
 800aa64:	061f      	lsls	r7, r3, #24
 800aa66:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa6a:	d402      	bmi.n	800aa72 <_printf_i+0x18e>
 800aa6c:	065f      	lsls	r7, r3, #25
 800aa6e:	bf48      	it	mi
 800aa70:	b2b6      	uxthmi	r6, r6
 800aa72:	07df      	lsls	r7, r3, #31
 800aa74:	bf48      	it	mi
 800aa76:	f043 0320 	orrmi.w	r3, r3, #32
 800aa7a:	6029      	str	r1, [r5, #0]
 800aa7c:	bf48      	it	mi
 800aa7e:	6023      	strmi	r3, [r4, #0]
 800aa80:	b91e      	cbnz	r6, 800aa8a <_printf_i+0x1a6>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	f023 0320 	bic.w	r3, r3, #32
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	2310      	movs	r3, #16
 800aa8c:	e7a6      	b.n	800a9dc <_printf_i+0xf8>
 800aa8e:	4824      	ldr	r0, [pc, #144]	; (800ab20 <_printf_i+0x23c>)
 800aa90:	e7e4      	b.n	800aa5c <_printf_i+0x178>
 800aa92:	4615      	mov	r5, r2
 800aa94:	e7bd      	b.n	800aa12 <_printf_i+0x12e>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	6826      	ldr	r6, [r4, #0]
 800aa9a:	1d18      	adds	r0, r3, #4
 800aa9c:	6961      	ldr	r1, [r4, #20]
 800aa9e:	6028      	str	r0, [r5, #0]
 800aaa0:	0635      	lsls	r5, r6, #24
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	d501      	bpl.n	800aaaa <_printf_i+0x1c6>
 800aaa6:	6019      	str	r1, [r3, #0]
 800aaa8:	e002      	b.n	800aab0 <_printf_i+0x1cc>
 800aaaa:	0670      	lsls	r0, r6, #25
 800aaac:	d5fb      	bpl.n	800aaa6 <_printf_i+0x1c2>
 800aaae:	8019      	strh	r1, [r3, #0]
 800aab0:	2300      	movs	r3, #0
 800aab2:	4615      	mov	r5, r2
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	e7bc      	b.n	800aa32 <_printf_i+0x14e>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	2100      	movs	r1, #0
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	602a      	str	r2, [r5, #0]
 800aac0:	681d      	ldr	r5, [r3, #0]
 800aac2:	6862      	ldr	r2, [r4, #4]
 800aac4:	4628      	mov	r0, r5
 800aac6:	f000 f849 	bl	800ab5c <memchr>
 800aaca:	b108      	cbz	r0, 800aad0 <_printf_i+0x1ec>
 800aacc:	1b40      	subs	r0, r0, r5
 800aace:	6060      	str	r0, [r4, #4]
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	2300      	movs	r3, #0
 800aad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aada:	e7aa      	b.n	800aa32 <_printf_i+0x14e>
 800aadc:	462a      	mov	r2, r5
 800aade:	4649      	mov	r1, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	47d0      	blx	sl
 800aae6:	3001      	adds	r0, #1
 800aae8:	d0ad      	beq.n	800aa46 <_printf_i+0x162>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	079b      	lsls	r3, r3, #30
 800aaee:	d413      	bmi.n	800ab18 <_printf_i+0x234>
 800aaf0:	68e0      	ldr	r0, [r4, #12]
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	4298      	cmp	r0, r3
 800aaf6:	bfb8      	it	lt
 800aaf8:	4618      	movlt	r0, r3
 800aafa:	e7a6      	b.n	800aa4a <_printf_i+0x166>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4632      	mov	r2, r6
 800ab00:	4649      	mov	r1, r9
 800ab02:	4640      	mov	r0, r8
 800ab04:	47d0      	blx	sl
 800ab06:	3001      	adds	r0, #1
 800ab08:	d09d      	beq.n	800aa46 <_printf_i+0x162>
 800ab0a:	3501      	adds	r5, #1
 800ab0c:	68e3      	ldr	r3, [r4, #12]
 800ab0e:	9903      	ldr	r1, [sp, #12]
 800ab10:	1a5b      	subs	r3, r3, r1
 800ab12:	42ab      	cmp	r3, r5
 800ab14:	dcf2      	bgt.n	800aafc <_printf_i+0x218>
 800ab16:	e7eb      	b.n	800aaf0 <_printf_i+0x20c>
 800ab18:	2500      	movs	r5, #0
 800ab1a:	f104 0619 	add.w	r6, r4, #25
 800ab1e:	e7f5      	b.n	800ab0c <_printf_i+0x228>
 800ab20:	0800b479 	.word	0x0800b479
 800ab24:	0800b48a 	.word	0x0800b48a

0800ab28 <memmove>:
 800ab28:	4288      	cmp	r0, r1
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	eb01 0402 	add.w	r4, r1, r2
 800ab30:	d902      	bls.n	800ab38 <memmove+0x10>
 800ab32:	4284      	cmp	r4, r0
 800ab34:	4623      	mov	r3, r4
 800ab36:	d807      	bhi.n	800ab48 <memmove+0x20>
 800ab38:	1e43      	subs	r3, r0, #1
 800ab3a:	42a1      	cmp	r1, r4
 800ab3c:	d008      	beq.n	800ab50 <memmove+0x28>
 800ab3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab46:	e7f8      	b.n	800ab3a <memmove+0x12>
 800ab48:	4601      	mov	r1, r0
 800ab4a:	4402      	add	r2, r0
 800ab4c:	428a      	cmp	r2, r1
 800ab4e:	d100      	bne.n	800ab52 <memmove+0x2a>
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab5a:	e7f7      	b.n	800ab4c <memmove+0x24>

0800ab5c <memchr>:
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	b2c9      	uxtb	r1, r1
 800ab62:	4402      	add	r2, r0
 800ab64:	4293      	cmp	r3, r2
 800ab66:	4618      	mov	r0, r3
 800ab68:	d101      	bne.n	800ab6e <memchr+0x12>
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e003      	b.n	800ab76 <memchr+0x1a>
 800ab6e:	7804      	ldrb	r4, [r0, #0]
 800ab70:	3301      	adds	r3, #1
 800ab72:	428c      	cmp	r4, r1
 800ab74:	d1f6      	bne.n	800ab64 <memchr+0x8>
 800ab76:	bd10      	pop	{r4, pc}

0800ab78 <_realloc_r>:
 800ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	4614      	mov	r4, r2
 800ab80:	460e      	mov	r6, r1
 800ab82:	b921      	cbnz	r1, 800ab8e <_realloc_r+0x16>
 800ab84:	4611      	mov	r1, r2
 800ab86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	f7ff bb87 	b.w	800a29c <_malloc_r>
 800ab8e:	b92a      	cbnz	r2, 800ab9c <_realloc_r+0x24>
 800ab90:	f7ff fc96 	bl	800a4c0 <_free_r>
 800ab94:	4625      	mov	r5, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	f000 f81b 	bl	800abd6 <_malloc_usable_size_r>
 800aba0:	4284      	cmp	r4, r0
 800aba2:	4607      	mov	r7, r0
 800aba4:	d802      	bhi.n	800abac <_realloc_r+0x34>
 800aba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abaa:	d812      	bhi.n	800abd2 <_realloc_r+0x5a>
 800abac:	4621      	mov	r1, r4
 800abae:	4640      	mov	r0, r8
 800abb0:	f7ff fb74 	bl	800a29c <_malloc_r>
 800abb4:	4605      	mov	r5, r0
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0ed      	beq.n	800ab96 <_realloc_r+0x1e>
 800abba:	42bc      	cmp	r4, r7
 800abbc:	4622      	mov	r2, r4
 800abbe:	4631      	mov	r1, r6
 800abc0:	bf28      	it	cs
 800abc2:	463a      	movcs	r2, r7
 800abc4:	f7ff fc6e 	bl	800a4a4 <memcpy>
 800abc8:	4631      	mov	r1, r6
 800abca:	4640      	mov	r0, r8
 800abcc:	f7ff fc78 	bl	800a4c0 <_free_r>
 800abd0:	e7e1      	b.n	800ab96 <_realloc_r+0x1e>
 800abd2:	4635      	mov	r5, r6
 800abd4:	e7df      	b.n	800ab96 <_realloc_r+0x1e>

0800abd6 <_malloc_usable_size_r>:
 800abd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abda:	1f18      	subs	r0, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfbc      	itt	lt
 800abe0:	580b      	ldrlt	r3, [r1, r0]
 800abe2:	18c0      	addlt	r0, r0, r3
 800abe4:	4770      	bx	lr
	...

0800abe8 <log>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	f000 f833 	bl	800ac58 <__ieee754_log>
 800abf2:	4622      	mov	r2, r4
 800abf4:	4606      	mov	r6, r0
 800abf6:	460f      	mov	r7, r1
 800abf8:	462b      	mov	r3, r5
 800abfa:	4620      	mov	r0, r4
 800abfc:	4629      	mov	r1, r5
 800abfe:	f7f5 ff71 	bl	8000ae4 <__aeabi_dcmpun>
 800ac02:	b998      	cbnz	r0, 800ac2c <log+0x44>
 800ac04:	2200      	movs	r2, #0
 800ac06:	2300      	movs	r3, #0
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f7f5 ff60 	bl	8000ad0 <__aeabi_dcmpgt>
 800ac10:	b960      	cbnz	r0, 800ac2c <log+0x44>
 800ac12:	2200      	movs	r2, #0
 800ac14:	2300      	movs	r3, #0
 800ac16:	4620      	mov	r0, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f5 ff31 	bl	8000a80 <__aeabi_dcmpeq>
 800ac1e:	b140      	cbz	r0, 800ac32 <log+0x4a>
 800ac20:	f7ff fc14 	bl	800a44c <__errno>
 800ac24:	2322      	movs	r3, #34	; 0x22
 800ac26:	2600      	movs	r6, #0
 800ac28:	4f06      	ldr	r7, [pc, #24]	; (800ac44 <log+0x5c>)
 800ac2a:	6003      	str	r3, [r0, #0]
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	4639      	mov	r1, r7
 800ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac32:	f7ff fc0b 	bl	800a44c <__errno>
 800ac36:	2321      	movs	r3, #33	; 0x21
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	4803      	ldr	r0, [pc, #12]	; (800ac48 <log+0x60>)
 800ac3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac40:	f000 b804 	b.w	800ac4c <nan>
 800ac44:	fff00000 	.word	0xfff00000
 800ac48:	0800b46d 	.word	0x0800b46d

0800ac4c <nan>:
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	4901      	ldr	r1, [pc, #4]	; (800ac54 <nan+0x8>)
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	7ff80000 	.word	0x7ff80000

0800ac58 <__ieee754_log>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	460d      	mov	r5, r1
 800ac66:	b087      	sub	sp, #28
 800ac68:	da24      	bge.n	800acb4 <__ieee754_log+0x5c>
 800ac6a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ac6e:	4304      	orrs	r4, r0
 800ac70:	d108      	bne.n	800ac84 <__ieee754_log+0x2c>
 800ac72:	2200      	movs	r2, #0
 800ac74:	2300      	movs	r3, #0
 800ac76:	2000      	movs	r0, #0
 800ac78:	49cb      	ldr	r1, [pc, #812]	; (800afa8 <__ieee754_log+0x350>)
 800ac7a:	f7f5 fdc3 	bl	8000804 <__aeabi_ddiv>
 800ac7e:	b007      	add	sp, #28
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	2900      	cmp	r1, #0
 800ac86:	da04      	bge.n	800ac92 <__ieee754_log+0x3a>
 800ac88:	f7f5 fada 	bl	8000240 <__aeabi_dsub>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e7f3      	b.n	800ac7a <__ieee754_log+0x22>
 800ac92:	2200      	movs	r2, #0
 800ac94:	4bc5      	ldr	r3, [pc, #788]	; (800afac <__ieee754_log+0x354>)
 800ac96:	f7f5 fc8b 	bl	80005b0 <__aeabi_dmul>
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	4602      	mov	r2, r0
 800aca0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800aca4:	48c2      	ldr	r0, [pc, #776]	; (800afb0 <__ieee754_log+0x358>)
 800aca6:	4285      	cmp	r5, r0
 800aca8:	dd06      	ble.n	800acb8 <__ieee754_log+0x60>
 800acaa:	4610      	mov	r0, r2
 800acac:	4619      	mov	r1, r3
 800acae:	f7f5 fac9 	bl	8000244 <__adddf3>
 800acb2:	e7e4      	b.n	800ac7e <__ieee754_log+0x26>
 800acb4:	2100      	movs	r1, #0
 800acb6:	e7f5      	b.n	800aca4 <__ieee754_log+0x4c>
 800acb8:	152c      	asrs	r4, r5, #20
 800acba:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800acbe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800acc2:	440c      	add	r4, r1
 800acc4:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800acc8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800accc:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800acd0:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800acd4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800acd8:	ea41 0305 	orr.w	r3, r1, r5
 800acdc:	4610      	mov	r0, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	2200      	movs	r2, #0
 800ace2:	4bb4      	ldr	r3, [pc, #720]	; (800afb4 <__ieee754_log+0x35c>)
 800ace4:	f7f5 faac 	bl	8000240 <__aeabi_dsub>
 800ace8:	1cab      	adds	r3, r5, #2
 800acea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acee:	2b02      	cmp	r3, #2
 800acf0:	4682      	mov	sl, r0
 800acf2:	468b      	mov	fp, r1
 800acf4:	f04f 0200 	mov.w	r2, #0
 800acf8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800acfc:	dc53      	bgt.n	800ada6 <__ieee754_log+0x14e>
 800acfe:	2300      	movs	r3, #0
 800ad00:	f7f5 febe 	bl	8000a80 <__aeabi_dcmpeq>
 800ad04:	b1d0      	cbz	r0, 800ad3c <__ieee754_log+0xe4>
 800ad06:	2c00      	cmp	r4, #0
 800ad08:	f000 8122 	beq.w	800af50 <__ieee754_log+0x2f8>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7f5 fbe5 	bl	80004dc <__aeabi_i2d>
 800ad12:	a391      	add	r3, pc, #580	; (adr r3, 800af58 <__ieee754_log+0x300>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	4606      	mov	r6, r0
 800ad1a:	460f      	mov	r7, r1
 800ad1c:	f7f5 fc48 	bl	80005b0 <__aeabi_dmul>
 800ad20:	a38f      	add	r3, pc, #572	; (adr r3, 800af60 <__ieee754_log+0x308>)
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	4604      	mov	r4, r0
 800ad28:	460d      	mov	r5, r1
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 fc3f 	bl	80005b0 <__aeabi_dmul>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4620      	mov	r0, r4
 800ad38:	4629      	mov	r1, r5
 800ad3a:	e7b8      	b.n	800acae <__ieee754_log+0x56>
 800ad3c:	a38a      	add	r3, pc, #552	; (adr r3, 800af68 <__ieee754_log+0x310>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	4650      	mov	r0, sl
 800ad44:	4659      	mov	r1, fp
 800ad46:	f7f5 fc33 	bl	80005b0 <__aeabi_dmul>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	2000      	movs	r0, #0
 800ad50:	4999      	ldr	r1, [pc, #612]	; (800afb8 <__ieee754_log+0x360>)
 800ad52:	f7f5 fa75 	bl	8000240 <__aeabi_dsub>
 800ad56:	4652      	mov	r2, sl
 800ad58:	4606      	mov	r6, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	4650      	mov	r0, sl
 800ad60:	4659      	mov	r1, fp
 800ad62:	f7f5 fc25 	bl	80005b0 <__aeabi_dmul>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 fc1f 	bl	80005b0 <__aeabi_dmul>
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	b914      	cbnz	r4, 800ad7e <__ieee754_log+0x126>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	e0a2      	b.n	800aec4 <__ieee754_log+0x26c>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7f5 fbac 	bl	80004dc <__aeabi_i2d>
 800ad84:	a374      	add	r3, pc, #464	; (adr r3, 800af58 <__ieee754_log+0x300>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	4689      	mov	r9, r1
 800ad8e:	f7f5 fc0f 	bl	80005b0 <__aeabi_dmul>
 800ad92:	a373      	add	r3, pc, #460	; (adr r3, 800af60 <__ieee754_log+0x308>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4649      	mov	r1, r9
 800ada0:	f7f5 fc06 	bl	80005b0 <__aeabi_dmul>
 800ada4:	e0a7      	b.n	800aef6 <__ieee754_log+0x29e>
 800ada6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adaa:	f7f5 fa4b 	bl	8000244 <__adddf3>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4650      	mov	r0, sl
 800adb4:	4659      	mov	r1, fp
 800adb6:	f7f5 fd25 	bl	8000804 <__aeabi_ddiv>
 800adba:	e9cd 0100 	strd	r0, r1, [sp]
 800adbe:	4620      	mov	r0, r4
 800adc0:	f7f5 fb8c 	bl	80004dc <__aeabi_i2d>
 800adc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adcc:	4610      	mov	r0, r2
 800adce:	4619      	mov	r1, r3
 800add0:	f7f5 fbee 	bl	80005b0 <__aeabi_dmul>
 800add4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800add8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800addc:	4602      	mov	r2, r0
 800adde:	9305      	str	r3, [sp, #20]
 800ade0:	460b      	mov	r3, r1
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	f7f5 fbe3 	bl	80005b0 <__aeabi_dmul>
 800adea:	a361      	add	r3, pc, #388	; (adr r3, 800af70 <__ieee754_log+0x318>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	4680      	mov	r8, r0
 800adf2:	4689      	mov	r9, r1
 800adf4:	f7f5 fbdc 	bl	80005b0 <__aeabi_dmul>
 800adf8:	a35f      	add	r3, pc, #380	; (adr r3, 800af78 <__ieee754_log+0x320>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fa21 	bl	8000244 <__adddf3>
 800ae02:	4642      	mov	r2, r8
 800ae04:	464b      	mov	r3, r9
 800ae06:	f7f5 fbd3 	bl	80005b0 <__aeabi_dmul>
 800ae0a:	a35d      	add	r3, pc, #372	; (adr r3, 800af80 <__ieee754_log+0x328>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 fa18 	bl	8000244 <__adddf3>
 800ae14:	4642      	mov	r2, r8
 800ae16:	464b      	mov	r3, r9
 800ae18:	f7f5 fbca 	bl	80005b0 <__aeabi_dmul>
 800ae1c:	a35a      	add	r3, pc, #360	; (adr r3, 800af88 <__ieee754_log+0x330>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f7f5 fa0f 	bl	8000244 <__adddf3>
 800ae26:	4632      	mov	r2, r6
 800ae28:	463b      	mov	r3, r7
 800ae2a:	f7f5 fbc1 	bl	80005b0 <__aeabi_dmul>
 800ae2e:	a358      	add	r3, pc, #352	; (adr r3, 800af90 <__ieee754_log+0x338>)
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	4606      	mov	r6, r0
 800ae36:	460f      	mov	r7, r1
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 fbb8 	bl	80005b0 <__aeabi_dmul>
 800ae40:	a355      	add	r3, pc, #340	; (adr r3, 800af98 <__ieee754_log+0x340>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f7f5 f9fd 	bl	8000244 <__adddf3>
 800ae4a:	4642      	mov	r2, r8
 800ae4c:	464b      	mov	r3, r9
 800ae4e:	f7f5 fbaf 	bl	80005b0 <__aeabi_dmul>
 800ae52:	a353      	add	r3, pc, #332	; (adr r3, 800afa0 <__ieee754_log+0x348>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 f9f4 	bl	8000244 <__adddf3>
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	464b      	mov	r3, r9
 800ae60:	f7f5 fba6 	bl	80005b0 <__aeabi_dmul>
 800ae64:	460b      	mov	r3, r1
 800ae66:	4602      	mov	r2, r0
 800ae68:	4639      	mov	r1, r7
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7f5 f9ea 	bl	8000244 <__adddf3>
 800ae70:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae74:	9b05      	ldr	r3, [sp, #20]
 800ae76:	3551      	adds	r5, #81	; 0x51
 800ae78:	431d      	orrs	r5, r3
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4689      	mov	r9, r1
 800ae80:	dd48      	ble.n	800af14 <__ieee754_log+0x2bc>
 800ae82:	2200      	movs	r2, #0
 800ae84:	4b4c      	ldr	r3, [pc, #304]	; (800afb8 <__ieee754_log+0x360>)
 800ae86:	4650      	mov	r0, sl
 800ae88:	4659      	mov	r1, fp
 800ae8a:	f7f5 fb91 	bl	80005b0 <__aeabi_dmul>
 800ae8e:	4652      	mov	r2, sl
 800ae90:	465b      	mov	r3, fp
 800ae92:	f7f5 fb8d 	bl	80005b0 <__aeabi_dmul>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4649      	mov	r1, r9
 800aea2:	f7f5 f9cf 	bl	8000244 <__adddf3>
 800aea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeaa:	f7f5 fb81 	bl	80005b0 <__aeabi_dmul>
 800aeae:	4680      	mov	r8, r0
 800aeb0:	4689      	mov	r9, r1
 800aeb2:	b964      	cbnz	r4, 800aece <__ieee754_log+0x276>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 f9c0 	bl	8000240 <__aeabi_dsub>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4650      	mov	r0, sl
 800aec6:	4659      	mov	r1, fp
 800aec8:	f7f5 f9ba 	bl	8000240 <__aeabi_dsub>
 800aecc:	e6d7      	b.n	800ac7e <__ieee754_log+0x26>
 800aece:	a322      	add	r3, pc, #136	; (adr r3, 800af58 <__ieee754_log+0x300>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed8:	f7f5 fb6a 	bl	80005b0 <__aeabi_dmul>
 800aedc:	a320      	add	r3, pc, #128	; (adr r3, 800af60 <__ieee754_log+0x308>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4604      	mov	r4, r0
 800aee4:	460d      	mov	r5, r1
 800aee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeea:	f7f5 fb61 	bl	80005b0 <__aeabi_dmul>
 800aeee:	4642      	mov	r2, r8
 800aef0:	464b      	mov	r3, r9
 800aef2:	f7f5 f9a7 	bl	8000244 <__adddf3>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 f99f 	bl	8000240 <__aeabi_dsub>
 800af02:	4652      	mov	r2, sl
 800af04:	465b      	mov	r3, fp
 800af06:	f7f5 f99b 	bl	8000240 <__aeabi_dsub>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	e7d9      	b.n	800aec8 <__ieee754_log+0x270>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4650      	mov	r0, sl
 800af1a:	4659      	mov	r1, fp
 800af1c:	f7f5 f990 	bl	8000240 <__aeabi_dsub>
 800af20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af24:	f7f5 fb44 	bl	80005b0 <__aeabi_dmul>
 800af28:	4606      	mov	r6, r0
 800af2a:	460f      	mov	r7, r1
 800af2c:	2c00      	cmp	r4, #0
 800af2e:	f43f af23 	beq.w	800ad78 <__ieee754_log+0x120>
 800af32:	a309      	add	r3, pc, #36	; (adr r3, 800af58 <__ieee754_log+0x300>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3c:	f7f5 fb38 	bl	80005b0 <__aeabi_dmul>
 800af40:	a307      	add	r3, pc, #28	; (adr r3, 800af60 <__ieee754_log+0x308>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	4604      	mov	r4, r0
 800af48:	460d      	mov	r5, r1
 800af4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4e:	e727      	b.n	800ada0 <__ieee754_log+0x148>
 800af50:	2000      	movs	r0, #0
 800af52:	2100      	movs	r1, #0
 800af54:	e693      	b.n	800ac7e <__ieee754_log+0x26>
 800af56:	bf00      	nop
 800af58:	fee00000 	.word	0xfee00000
 800af5c:	3fe62e42 	.word	0x3fe62e42
 800af60:	35793c76 	.word	0x35793c76
 800af64:	3dea39ef 	.word	0x3dea39ef
 800af68:	55555555 	.word	0x55555555
 800af6c:	3fd55555 	.word	0x3fd55555
 800af70:	df3e5244 	.word	0xdf3e5244
 800af74:	3fc2f112 	.word	0x3fc2f112
 800af78:	96cb03de 	.word	0x96cb03de
 800af7c:	3fc74664 	.word	0x3fc74664
 800af80:	94229359 	.word	0x94229359
 800af84:	3fd24924 	.word	0x3fd24924
 800af88:	55555593 	.word	0x55555593
 800af8c:	3fe55555 	.word	0x3fe55555
 800af90:	d078c69f 	.word	0xd078c69f
 800af94:	3fc39a09 	.word	0x3fc39a09
 800af98:	1d8e78af 	.word	0x1d8e78af
 800af9c:	3fcc71c5 	.word	0x3fcc71c5
 800afa0:	9997fa04 	.word	0x9997fa04
 800afa4:	3fd99999 	.word	0x3fd99999
 800afa8:	c3500000 	.word	0xc3500000
 800afac:	43500000 	.word	0x43500000
 800afb0:	7fefffff 	.word	0x7fefffff
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	3fe00000 	.word	0x3fe00000

0800afbc <_init>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr

0800afc8 <_fini>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	bf00      	nop
 800afcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afce:	bc08      	pop	{r3}
 800afd0:	469e      	mov	lr, r3
 800afd2:	4770      	bx	lr
