
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f3c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009608  08009608  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009610  08009610  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200001cc  080097e4  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  080097e4  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a8f  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004852  00000000  00000000  00039cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001299  00000000  00000000  0003fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023941  00000000  00000000  00041009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ebb7  00000000  00000000  0006494a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c08d3  00000000  00000000  00083501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a28  00000000  00000000  00143dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0014a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08009108 	.word	0x08009108

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08009108 	.word	0x08009108

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_PEC15_Calc>:
                                            };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate a PEC
                   )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000540:	2310      	movs	r3, #16
 8000542:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	e018      	b.n	800057c <LTC_PEC15_Calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	09db      	lsrs	r3, r3, #7
 800054e:	b29a      	uxth	r2, r3
 8000550:	7b7b      	ldrb	r3, [r7, #13]
 8000552:	6839      	ldr	r1, [r7, #0]
 8000554:	440b      	add	r3, r1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b29a      	uxth	r2, r3
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	490a      	ldr	r1, [pc, #40]	; (8000594 <LTC_PEC15_Calc+0x60>)
 800056c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000570:	b29b      	uxth	r3, r3
 8000572:	4053      	eors	r3, r2
 8000574:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	3301      	adds	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
 800057c:	7b7a      	ldrb	r2, [r7, #13]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3e2      	bcc.n	800054a <LTC_PEC15_Calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b29b      	uxth	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	0800919c 	.word	0x0800919c

08000598 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	if (num) num_devices = num; //Non-zero
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <LTC_Set_Num_Devices+0x16>
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <LTC_Set_Num_Devices+0x20>)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	7013      	strb	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	200001e8 	.word	0x200001e8

080005bc <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	return num_devices;
 80005c0:	4b02      	ldr	r3, [pc, #8]	; (80005cc <LTC_Get_Num_Devices+0x10>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200001e8 	.word	0x200001e8

080005d0 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18)) num_series_groups = num; //Non-zero and 18 or less
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b12      	cmp	r3, #18
 80005e4:	d802      	bhi.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <LTC_Set_Num_Series_Groups+0x28>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	7013      	strb	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200001e9 	.word	0x200001e9

080005fc <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	return num_series_groups;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <LTC_Get_Num_Series_Groups+0x10>)
 8000602:	781b      	ldrb	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	200001e9 	.word	0x200001e9

08000610 <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	73fb      	strb	r3, [r7, #15]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	71bb      	strb	r3, [r7, #6]

	LTC_nCS_Low(); //Pull CS low
 800061e:	f000 fea1 	bl	8001364 <LTC_nCS_Low>

	for (int i = 0; i < num_devices; i++){
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	e019      	b.n	800065c <LTC_Wakeup_Idle+0x4c>
		hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 8000628:	1db9      	adds	r1, r7, #6
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	2201      	movs	r2, #1
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <LTC_Wakeup_Idle+0x68>)
 8000630:	f003 fee0 	bl	80043f4 <HAL_SPI_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
		if (hal_ret) { //Non-zero means error
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00b      	beq.n	8000656 <LTC_Wakeup_Idle+0x46>
			//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
			ret |= (1 << (hal_ret+LTC_SPI_TX_BIT_OFFSET)); //TX error
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2200      	movs	r2, #0
 8000642:	4413      	add	r3, r2
 8000644:	2201      	movs	r2, #1
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	b25a      	sxtb	r2, r3
 800064c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < num_devices; i++){
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	3301      	adds	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <LTC_Wakeup_Idle+0x6c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4293      	cmp	r3, r2
 8000666:	dbdf      	blt.n	8000628 <LTC_Wakeup_Idle+0x18>
		}
	}

	LTC_nCS_High(); //Pull CS high
 8000668:	f000 fe70 	bl	800134c <LTC_nCS_High>

	return ret;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200002a0 	.word	0x200002a0
 800067c:	200001e8 	.word	0x200001e8

08000680 <LTC_ReadRawCellVoltages>:
	LTC_nCS_High();
}


/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 8000680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000684:	b08b      	sub	sp, #44	; 0x2c
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	466b      	mov	r3, sp
 800068c:	461e      	mov	r6, r3
  LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  LTC_SPI_StatusTypeDef hal_ret;
  const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 8000694:	f7ff ff92 	bl	80005bc <LTC_Get_Num_Devices>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	2308      	movs	r3, #8
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80006a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006aa:	3b01      	subs	r3, #1
 80006ac:	623b      	str	r3, [r7, #32]
 80006ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006b2:	2200      	movs	r2, #0
 80006b4:	4698      	mov	r8, r3
 80006b6:	4691      	mov	r9, r2
 80006b8:	f04f 0200 	mov.w	r2, #0
 80006bc:	f04f 0300 	mov.w	r3, #0
 80006c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d0:	2200      	movs	r2, #0
 80006d2:	461c      	mov	r4, r3
 80006d4:	4615      	mov	r5, r2
 80006d6:	f04f 0200 	mov.w	r2, #0
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	00eb      	lsls	r3, r5, #3
 80006e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006e4:	00e2      	lsls	r2, r4, #3
 80006e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006ea:	3307      	adds	r3, #7
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	ebad 0d03 	sub.w	sp, sp, r3
 80006f4:	466b      	mov	r3, sp
 80006f6:	3300      	adds	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000700:	e0b7      	b.n	8000872 <LTC_ReadRawCellVoltages+0x1f2>
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 8000702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000706:	4a65      	ldr	r2, [pc, #404]	; (800089c <LTC_ReadRawCellVoltages+0x21c>)
 8000708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	733b      	strb	r3, [r7, #12]
    cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 8000714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000718:	4a60      	ldr	r2, [pc, #384]	; (800089c <LTC_ReadRawCellVoltages+0x21c>)
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	737b      	strb	r3, [r7, #13]
    cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff ff03 	bl	8000534 <LTC_PEC15_Calc>
 800072e:	4603      	mov	r3, r0
 8000730:	837b      	strh	r3, [r7, #26]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000732:	8b7b      	ldrh	r3, [r7, #26]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	73bb      	strb	r3, [r7, #14]
    cmd[3] = (uint8_t)(cmd_pec);
 800073c:	8b7b      	ldrh	r3, [r7, #26]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	73fb      	strb	r3, [r7, #15]

    ret |= LTC_Wakeup_Idle(); //Wake LTC up
 8000742:	f7ff ff65 	bl	8000610 <LTC_Wakeup_Idle>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800074e:	4313      	orrs	r3, r2
 8000750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    LTC_nCS_Low(); //Pull CS low
 8000754:	f000 fe06 	bl	8001364 <LTC_nCS_Low>

    hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8000758:	f107 010c 	add.w	r1, r7, #12
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2204      	movs	r2, #4
 8000760:	484f      	ldr	r0, [pc, #316]	; (80008a0 <LTC_ReadRawCellVoltages+0x220>)
 8000762:	f003 fe47 	bl	80043f4 <HAL_SPI_Transmit>
 8000766:	4603      	mov	r3, r0
 8000768:	767b      	strb	r3, [r7, #25]
    if (hal_ret) { //Non-zero means error
 800076a:	7e7b      	ldrb	r3, [r7, #25]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00c      	beq.n	800078a <LTC_ReadRawCellVoltages+0x10a>
      ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000770:	7e7b      	ldrb	r3, [r7, #25]
 8000772:	2200      	movs	r2, #0
 8000774:	4413      	add	r3, r2
 8000776:	2201      	movs	r2, #1
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	b25a      	sxtb	r2, r3
 800077e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_voltages_reg, ARR_SIZE_REG, 100);
 800078a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800078e:	b29a      	uxth	r2, r3
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	69f9      	ldr	r1, [r7, #28]
 8000794:	4842      	ldr	r0, [pc, #264]	; (80008a0 <LTC_ReadRawCellVoltages+0x220>)
 8000796:	f003 ff70 	bl	800467a <HAL_SPI_Receive>
 800079a:	4603      	mov	r3, r0
 800079c:	767b      	strb	r3, [r7, #25]
    if (hal_ret) { //Non-zero means error
 800079e:	7e7b      	ldrb	r3, [r7, #25]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00c      	beq.n	80007be <LTC_ReadRawCellVoltages+0x13e>
      ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 80007a4:	7e7b      	ldrb	r3, [r7, #25]
 80007a6:	2204      	movs	r2, #4
 80007a8:	4413      	add	r3, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Process the received data
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80007c4:	e046      	b.n	8000854 <LTC_ReadRawCellVoltages+0x1d4>
      // Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
      // PEC for each device is the last two bytes of its data segment
      uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80007c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ca:	2208      	movs	r2, #8
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	69fa      	ldr	r2, [r7, #28]
 80007d2:	4413      	add	r3, r2
 80007d4:	617b      	str	r3, [r7, #20]
      uint16_t calculated_pec = LTC_PEC15_Calc(REG_LEN - 2, data_ptr); // Calculate PEC based on received data
 80007d6:	2308      	movs	r3, #8
 80007d8:	3b02      	subs	r3, #2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	6979      	ldr	r1, [r7, #20]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fea8 	bl	8000534 <LTC_PEC15_Calc>
 80007e4:	4603      	mov	r3, r0
 80007e6:	827b      	strh	r3, [r7, #18]

      // Convert received PEC from two bytes to uint16_t
      uint16_t received_pec = (data_ptr[REG_LEN - 2] << 8) | data_ptr[REG_LEN - 1];
 80007e8:	2308      	movs	r3, #8
 80007ea:	3b02      	subs	r3, #2
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	2308      	movs	r3, #8
 80007f8:	3b01      	subs	r3, #1
 80007fa:	6979      	ldr	r1, [r7, #20]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b21b      	sxth	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b21b      	sxth	r3, r3
 8000806:	823b      	strh	r3, [r7, #16]

      if (received_pec == calculated_pec) {
 8000808:	8a3a      	ldrh	r2, [r7, #16]
 800080a:	8a7b      	ldrh	r3, [r7, #18]
 800080c:	429a      	cmp	r2, r3
 800080e:	d116      	bne.n	800083e <LTC_ReadRawCellVoltages+0x1be>
        // If PEC matches, copy the voltage data, omitting the PEC bytes
        memcpy(&read_voltages[dev_idx * LTC_Get_Num_Series_Groups() + i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr, REG_LEN - 2);
 8000810:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8000814:	f7ff fef2 	bl	80005fc <LTC_Get_Num_Series_Groups>
 8000818:	4603      	mov	r3, r0
 800081a:	fb03 f204 	mul.w	r2, r3, r4
 800081e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000822:	2103      	movs	r1, #3
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	4413      	add	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	2208      	movs	r2, #8
 8000832:	3a02      	subs	r2, #2
 8000834:	6979      	ldr	r1, [r7, #20]
 8000836:	4618      	mov	r0, r3
 8000838:	f008 f808 	bl	800884c <memcpy>
 800083c:	e005      	b.n	800084a <LTC_ReadRawCellVoltages+0x1ca>
      } else {
        // Handle PEC mismatch error
        ret |= LTC_SPI_RX_ERROR;
 800083e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800084a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800084e:	3301      	adds	r3, #1
 8000850:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000854:	f7ff feb2 	bl	80005bc <LTC_Get_Num_Devices>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000860:	4293      	cmp	r3, r2
 8000862:	d3b0      	bcc.n	80007c6 <LTC_ReadRawCellVoltages+0x146>
      }
    }

    LTC_nCS_High(); //Pull CS high
 8000864:	f000 fd72 	bl	800134c <LTC_nCS_High>
  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 8000868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800086c:	3301      	adds	r3, #1
 800086e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000872:	f7ff fec3 	bl	80005fc <LTC_Get_Num_Series_Groups>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	2303      	movs	r3, #3
 800087c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000886:	429a      	cmp	r2, r3
 8000888:	f4ff af3b 	bcc.w	8000702 <LTC_ReadRawCellVoltages+0x82>
  }

  return ret;
 800088c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000890:	46b5      	mov	sp, r6
}
 8000892:	4618      	mov	r0, r3
 8000894:	372c      	adds	r7, #44	; 0x2c
 8000896:	46bd      	mov	sp, r7
 8000898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800089c:	08009194 	.word	0x08009194
 80008a0:	200002a0 	.word	0x200002a0

080008a4 <LTC_ADCV>:
*/
void LTC_ADCV(
  uint8_t MD, //ADC Mode
  uint8_t DCP, //Discharge Permit
  uint8_t CH //Cell Channels to be measured
) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	460b      	mov	r3, r1
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	4613      	mov	r3, r2
 80008b4:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[4];
  uint16_t cmd_pec;
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	105b      	asrs	r3, r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x02;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3302      	adds	r3, #2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	01db      	lsls	r3, r3, #7
 80008ce:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	4413      	add	r3, r2
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	4413      	add	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	727b      	strb	r3, [r7, #9]
  cmd_pec = LTC_PEC15_Calc(2, cmd);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4619      	mov	r1, r3
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff fe20 	bl	8000534 <LTC_PEC15_Calc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	72fb      	strb	r3, [r7, #11]


  LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000908:	f7ff fe82 	bl	8000610 <LTC_Wakeup_Idle>
  LTC_nCS_Low();
 800090c:	f000 fd2a 	bl	8001364 <LTC_nCS_Low>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8000910:	f107 0108 	add.w	r1, r7, #8
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	2204      	movs	r2, #4
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <LTC_ADCV+0x88>)
 800091a:	f003 fd6b 	bl	80043f4 <HAL_SPI_Transmit>
  LTC_nCS_High();
 800091e:	f000 fd15 	bl	800134c <LTC_nCS_High>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200002a0 	.word	0x200002a0

08000930 <LTC_PollAdc>:


int32_t LTC_PollAdc()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  uint8_t finished = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	72fb      	strb	r3, [r7, #11]
  uint8_t current_time = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	72bb      	strb	r3, [r7, #10]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = 0x07;
 8000942:	2307      	movs	r3, #7
 8000944:	713b      	strb	r3, [r7, #4]
  cmd[1] = 0x14;
 8000946:	2314      	movs	r3, #20
 8000948:	717b      	strb	r3, [r7, #5]
  cmd_pec = LTC_PEC15_Calc(2, cmd);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff fdf0 	bl	8000534 <LTC_PEC15_Calc>
 8000954:	4603      	mov	r3, r0
 8000956:	813b      	strh	r3, [r7, #8]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000958:	893b      	ldrh	r3, [r7, #8]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	71bb      	strb	r3, [r7, #6]
  cmd[3] = (uint8_t)(cmd_pec);
 8000962:	893b      	ldrh	r3, [r7, #8]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	71fb      	strb	r3, [r7, #7]

  LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000968:	f7ff fe52 	bl	8000610 <LTC_Wakeup_Idle>

  LTC_nCS_Low();
 800096c:	f000 fcfa 	bl	8001364 <LTC_nCS_Low>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8000970:	1d39      	adds	r1, r7, #4
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	2204      	movs	r2, #4
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <LTC_PollAdc+0x84>)
 8000978:	f003 fd3c 	bl	80043f4 <HAL_SPI_Transmit>

  while ((counter<200000)&&(finished == 0))
 800097c:	e00c      	b.n	8000998 <LTC_PollAdc+0x68>
  {
    current_time = HAL_GetTick();
 800097e:	f000 ff49 	bl	8001814 <HAL_GetTick>
 8000982:	4603      	mov	r3, r0
 8000984:	72bb      	strb	r3, [r7, #10]
    if (current_time>0)
 8000986:	7abb      	ldrb	r3, [r7, #10]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <LTC_PollAdc+0x62>
    {
      finished = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	72fb      	strb	r3, [r7, #11]
 8000990:	e002      	b.n	8000998 <LTC_PollAdc+0x68>
    }
    else
    {
      counter = counter + 10;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	330a      	adds	r3, #10
 8000996:	60fb      	str	r3, [r7, #12]
  while ((counter<200000)&&(finished == 0))
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <LTC_PollAdc+0x88>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d802      	bhi.n	80009a6 <LTC_PollAdc+0x76>
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0eb      	beq.n	800097e <LTC_PollAdc+0x4e>
    }
  }
  LTC_nCS_High();
 80009a6:	f000 fcd1 	bl	800134c <LTC_nCS_High>
  return(counter);
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200002a0 	.word	0x200002a0
 80009b8:	00030d3f 	.word	0x00030d3f

080009bc <LTC_CalcPackVoltage>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
int LTC_CalcPackVoltage(uint16_t *read_voltages) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	int packvoltage = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups(); i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	e00b      	b.n	80009e6 <LTC_CalcPackVoltage+0x2a>
		packvoltage += read_voltages[i];
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups(); i++){
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	f7ff fde9 	bl	80005bc <LTC_Get_Num_Devices>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461c      	mov	r4, r3
 80009ee:	f7ff fe05 	bl	80005fc <LTC_Get_Num_Series_Groups>
 80009f2:	4603      	mov	r3, r0
 80009f4:	fb04 f303 	mul.w	r3, r4, r3
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbe7      	blt.n	80009ce <LTC_CalcPackVoltage+0x12>
	}
	return packvoltage;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}

08000a08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a1a:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_ADC1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a46:	f000 ff13 	bl	8001870 <HAL_ADC_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fbf6 	bl	8001240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a54:	230e      	movs	r3, #14
 8000a56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_ADC1_Init+0x74>)
 8000a66:	f000 ffdb 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a70:	f000 fbe6 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200001ec 	.word	0x200001ec
 8000a80:	40012400 	.word	0x40012400

08000a84 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_ADC2_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000aae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ab2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000ac2:	f000 fed5 	bl	8001870 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fbb8 	bl	8001240 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC2_Init+0x74>)
 8000ae2:	f000 ff9d 	bl	8001a20 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000aec:	f000 fba8 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000021c 	.word	0x2000021c
 8000afc:	40012800 	.word	0x40012800

08000b00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <HAL_ADC_MspInit+0xbc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d122      	bne.n	8000b66 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b50:	2330      	movs	r3, #48	; 0x30
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <HAL_ADC_MspInit+0xc4>)
 8000b60:	f001 faa0 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000b64:	e026      	b.n	8000bb4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0xc8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d121      	bne.n	8000bb4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_ADC_MspInit+0xc0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_ADC_MspInit+0xc4>)
 8000bb0:	f001 fa78 	bl	80020a4 <HAL_GPIO_Init>
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40012400 	.word	0x40012400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40011000 	.word	0x40011000
 8000bc8:	40012800 	.word	0x40012800

08000bcc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_CAN1_Init+0x64>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bd8:	2210      	movs	r2, #16
 8000bda:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_CAN1_Init+0x60>)
 8000c1a:	f001 f83a 	bl	8001c92 <HAL_CAN_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f000 fb0c 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000024c 	.word	0x2000024c
 8000c30:	40006400 	.word	0x40006400

08000c34 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <MX_CAN2_Init+0x64>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c40:	2210      	movs	r2, #16
 8000c42:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_CAN2_Init+0x60>)
 8000c82:	f001 f806 	bl	8001c92 <HAL_CAN_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fad8 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000274 	.word	0x20000274
 8000c98:	40006800 	.word	0x40006800

08000c9c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_CAN_MspInit+0x15c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d14d      	bne.n	8000d58 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a4e      	ldr	r2, [pc, #312]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000cc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000cce:	4b4c      	ldr	r3, [pc, #304]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	483c      	ldr	r0, [pc, #240]	; (8000e04 <HAL_CAN_MspInit+0x168>)
 8000d14:	f001 f9c6 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4835      	ldr	r0, [pc, #212]	; (8000e04 <HAL_CAN_MspInit+0x168>)
 8000d2e:	f001 f9b9 	bl	80020a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <HAL_CAN_MspInit+0x16c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d50:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <HAL_CAN_MspInit+0x16c>)
 8000d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000d56:	e04b      	b.n	8000df0 <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a2b      	ldr	r2, [pc, #172]	; (8000e0c <HAL_CAN_MspInit+0x170>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d146      	bne.n	8000df0 <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000d82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_CAN_MspInit+0x160>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10b      	bne.n	8000da4 <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	61d3      	str	r3, [r2, #28]
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_CAN_MspInit+0x164>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <HAL_CAN_MspInit+0x168>)
 8000dd2:	f001 f967 	bl	80020a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_CAN_MspInit+0x168>)
 8000dec:	f001 f95a 	bl	80020a4 <HAL_GPIO_Init>
}
 8000df0:	bf00      	nop
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40006400 	.word	0x40006400
 8000dfc:	2000029c 	.word	0x2000029c
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	40006800 	.word	0x40006800

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_GPIO_Init+0xe4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000e8a:	f001 fa8f 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0xec>)
 8000e94:	f001 fa8a 	bl	80023ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0xe8>)
 8000eb0:	f001 f8f8 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ecc:	f001 f8ea 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0xec>)
 8000ee6:	f001 f8dd 	bl	80020a4 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40011000 	.word	0x40011000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	f5ad 6d09 	sub.w	sp, sp, #2192	; 0x890
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fc2c 	bl	8001764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f8bc 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f7ff ff7e 	bl	8000e10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f14:	f7ff fd78 	bl	8000a08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f18:	f7ff fdb4 	bl	8000a84 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000f1c:	f7ff fe56 	bl	8000bcc <MX_CAN1_Init>
  MX_CAN2_Init();
 8000f20:	f7ff fe88 	bl	8000c34 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000f24:	f000 faca 	bl	80014bc <MX_TIM7_Init>
  MX_SPI1_Init();
 8000f28:	f000 f990 	bl	800124c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f2c:	f000 fb1a 	bl	8001564 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f30:	f000 fb42 	bl	80015b8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f34:	f006 ff3a 	bl	8007dac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin);
 8000f38:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	494f      	ldr	r1, [pc, #316]	; (800107c <main+0x17c>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f90d 	bl	8001160 <GpioTimePacket_Init>
  TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000f46:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8000f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f946 	bl	80011e0 <TimerPacket_Init>

  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8000f54:	f000 f9fa 	bl	800134c <LTC_nCS_High>
  LTC_Set_Num_Devices(NUM_DEVICES);
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff fb1d 	bl	8000598 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f7ff fb36 	bl	80005d0 <LTC_Set_Num_Series_Groups>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8000f64:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8000f68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f914 	bl	800119a <GpioFixedToggle>

		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8000f72:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f945 	bl	8001206 <TimerPacket_FixedPulse>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <main+0x64>
			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8000f82:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8000f86:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fc23 	bl	80087e2 <memset>
			char char_to_str[2];
			int packvoltage = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 3888 	str.w	r3, [r7, #2184]	; 0x888

			LTC_ADCV(MD_7KHZ_3KHZ,DCP_DISABLED,CELL_CH_ALL);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff fc7c 	bl	80008a4 <LTC_ADCV>
			LTC_PollAdc();
 8000fac:	f7ff fcc0 	bl	8000930 <LTC_PollAdc>
			LTC_ReadRawCellVoltages((uint16_t *)read_val);
 8000fb0:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fb63 	bl	8000680 <LTC_ReadRawCellVoltages>
			packvoltage = LTC_CalcPackVoltage((uint16_t *) read_val);
 8000fba:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fcfc 	bl	80009bc <LTC_CalcPackVoltage>
 8000fc4:	f8c7 0888 	str.w	r0, [r7, #2184]	; 0x888
			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
 8000fc8:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000fcc:	f8d7 2888 	ldr.w	r2, [r7, #2184]	; 0x888
 8000fd0:	492b      	ldr	r1, [pc, #172]	; (8001080 <main+0x180>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f007 fbd2 	bl	800877c <siprintf>
			strncat(out_buf, packV, 30);
 8000fd8:	f607 011c 	addw	r1, r7, #2076	; 0x81c
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	221e      	movs	r2, #30
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 fbeb 	bl	80087bc <strncat>
			strncat(out_buf, char_to_str, 2);
 8000fe6:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2202      	movs	r2, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f007 fbe4 	bl	80087bc <strncat>


			char_to_str[0] = '\n';
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	f887 3804 	strb.w	r3, [r7, #2052]	; 0x804
			char_to_str[1] = '\0';
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3805 	strb.w	r3, [r7, #2053]	; 0x805


			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
 8001006:	e022      	b.n	800104e <main+0x14e>
				sprintf(buf, "C%u:%u/10000 V", i+1, read_val[i]);
 8001008:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 8001018:	443b      	add	r3, r7
 800101a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800101e:	f607 0008 	addw	r0, r7, #2056	; 0x808
 8001022:	4918      	ldr	r1, [pc, #96]	; (8001084 <main+0x184>)
 8001024:	f007 fbaa 	bl	800877c <siprintf>
				strncat(out_buf, buf, 20);
 8001028:	f607 0108 	addw	r1, r7, #2056	; 0x808
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2214      	movs	r2, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f007 fbc3 	bl	80087bc <strncat>
				strncat(out_buf, char_to_str, 2);
 8001036:	f607 0104 	addw	r1, r7, #2052	; 0x804
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2202      	movs	r2, #2
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fbbc 	bl	80087bc <strncat>
			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 8001044:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001048:	3301      	adds	r3, #1
 800104a:	f887 388f 	strb.w	r3, [r7, #2191]	; 0x88f
 800104e:	f897 388f 	ldrb.w	r3, [r7, #2191]	; 0x88f
 8001052:	2b17      	cmp	r3, #23
 8001054:	d9d8      	bls.n	8001008 <main+0x108>
			}
			strncat(out_buf, char_to_str, 2);
 8001056:	f607 0104 	addw	r1, r7, #2052	; 0x804
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2202      	movs	r2, #2
 800105e:	4618      	mov	r0, r3
 8001060:	f007 fbac 	bl	80087bc <strncat>

			USB_Transmit(out_buf, strlen(out_buf));
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f8dc 	bl	8000224 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fe8a 	bl	8007d8e <USB_Transmit>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800107a:	e773      	b.n	8000f64 <main+0x64>
 800107c:	40011000 	.word	0x40011000
 8001080:	08009120 	.word	0x08009120
 8001084:	0800913c 	.word	0x0800913c

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09c      	sub	sp, #112	; 0x70
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001092:	2238      	movs	r2, #56	; 0x38
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 fba3 	bl	80087e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2220      	movs	r2, #32
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 fb95 	bl	80087e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80010c2:	2304      	movs	r3, #4
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80010ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80010e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fabc 	bl	8003670 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010fe:	f000 f89f 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fdbc 	bl	8003c9c <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800112a:	f000 f889 	bl	8001240 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800112e:	2312      	movs	r3, #18
 8001130:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001136:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f002 ffa2 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800114a:	f000 f879 	bl	8001240 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <SystemClock_Config+0xd4>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3770      	adds	r7, #112	; 0x70
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	42420070 	.word	0x42420070

08001160 <GpioTimePacket_Init>:
/* USER CODE BEGIN 4 */

//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f001 f919 	bl	80023ac <HAL_GPIO_WritePin>
	gtp->gpio_port	= port;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin	= pin;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev 	= 0; //Init to 0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	gtp->ts_curr 	= 0; //Init to 0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <GpioFixedToggle>:

//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80011a6:	f000 fb35 	bl	8001814 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60da      	str	r2, [r3, #12]

	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	1ad2      	subs	r2, r2, r3
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d90b      	bls.n	80011d8 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	889b      	ldrh	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f001 f906 	bl	80023dc <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
	}
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <TimerPacket_Init>:

//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	tp->ts_prev 	= 0;		//Init to 0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
	tp->ts_curr 	= 0; 		//Init to 0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
	tp->delay		= delay;	//Init to user value
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	609a      	str	r2, [r3, #8]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <TimerPacket_FixedPulse>:

//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800120e:	f000 fb01 	bl	8001814 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	605a      	str	r2, [r3, #4]

	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	429a      	cmp	r2, r3
 8001228:	d905      	bls.n	8001236 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001280:	2228      	movs	r2, #40	; 0x28
 8001282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_SPI1_Init+0x64>)
 8001298:	220a      	movs	r2, #10
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_SPI1_Init+0x64>)
 800129e:	f003 f825 	bl	80042ec <HAL_SPI_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012a8:	f7ff ffca 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200002a0 	.word	0x200002a0
 80012b4:	40013000 	.word	0x40013000

080012b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_SPI_MspInit+0x88>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d12f      	bne.n	8001338 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a13      	ldr	r2, [pc, #76]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_SPI_MspInit+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	480b      	ldr	r0, [pc, #44]	; (8001348 <HAL_SPI_MspInit+0x90>)
 800131c:	f000 fec2 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_SPI_MspInit+0x90>)
 8001334:	f000 feb6 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800

0800134c <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001350:	2201      	movs	r2, #1
 8001352:	2110      	movs	r1, #16
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <LTC_nCS_High+0x14>)
 8001356:	f001 f829 	bl	80023ac <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40010800 	.word	0x40010800

08001364 <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001368:	2200      	movs	r2, #0
 800136a:	2110      	movs	r1, #16
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <LTC_nCS_Low+0x14>)
 800136e:	f001 f81d 	bl	80023ac <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40010800 	.word	0x40010800

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_MspInit+0x5c>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_MspInit+0x5c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_MspInit+0x5c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x60>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_MspInit+0x60>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001426:	f000 f9e3 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <OTG_FS_IRQHandler+0x10>)
 8001436:	f001 f929 	bl	800268c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200010a0 	.word	0x200010a0

08001444 <_sbrk>:
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
 8001474:	f007 f9be 	bl	80087f4 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20010000 	.word	0x20010000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200002f8 	.word	0x200002f8
 80014ac:	20001910 	.word	0x20001910

080014b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c2:	463b      	mov	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_TIM7_Init+0x64>)
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <MX_TIM7_Init+0x68>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_TIM7_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_TIM7_Init+0x64>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_TIM7_Init+0x64>)
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_TIM7_Init+0x64>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_TIM7_Init+0x64>)
 80014ec:	f003 fc86 	bl	8004dfc <HAL_TIM_Base_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80014f6:	f7ff fea3 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <MX_TIM7_Init+0x64>)
 8001508:	f003 fd34 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001512:	f7ff fe95 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002fc 	.word	0x200002fc
 8001524:	40001400 	.word	0x40001400

08001528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0x34>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10b      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 8001540:	f043 0320 	orr.w	r3, r3, #32
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_TIM_Base_MspInit+0x38>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40001400 	.word	0x40001400
 8001560:	40021000 	.word	0x40021000

08001564 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_USART2_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART2_UART_Init+0x4c>)
 800159c:	f003 fd50 	bl	8005040 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f7ff fe4b 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000344 	.word	0x20000344
 80015b4:	40004400 	.word	0x40004400

080015b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART3_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015f0:	f003 fd26 	bl	8005040 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f7ff fe21 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000038c 	.word	0x2000038c
 8001608:	40004800 	.word	0x40004800

0800160c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0318 	add.w	r3, r7, #24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_UART_MspInit+0xf8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d130      	bne.n	800168e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_UART_MspInit+0xfc>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <HAL_UART_MspInit+0xfc>)
 8001632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001636:	61d3      	str	r3, [r2, #28]
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_UART_MspInit+0xfc>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_UART_MspInit+0xfc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a2f      	ldr	r2, [pc, #188]	; (8001708 <HAL_UART_MspInit+0xfc>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_UART_MspInit+0xfc>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800165c:	2304      	movs	r3, #4
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4619      	mov	r1, r3
 800166e:	4827      	ldr	r0, [pc, #156]	; (800170c <HAL_UART_MspInit+0x100>)
 8001670:	f000 fd18 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001674:	2308      	movs	r3, #8
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4619      	mov	r1, r3
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <HAL_UART_MspInit+0x100>)
 8001688:	f000 fd0c 	bl	80020a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800168c:	e036      	b.n	80016fc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_UART_MspInit+0x104>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d131      	bne.n	80016fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_UART_MspInit+0xfc>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	4a1a      	ldr	r2, [pc, #104]	; (8001708 <HAL_UART_MspInit+0xfc>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	61d3      	str	r3, [r2, #28]
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_UART_MspInit+0xfc>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0xfc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_UART_MspInit+0xfc>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_UART_MspInit+0xfc>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	4619      	mov	r1, r3
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <HAL_UART_MspInit+0x108>)
 80016de:	f000 fce1 	bl	80020a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <HAL_UART_MspInit+0x108>)
 80016f8:	f000 fcd4 	bl	80020a4 <HAL_GPIO_Init>
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004400 	.word	0x40004400
 8001708:	40021000 	.word	0x40021000
 800170c:	40010800 	.word	0x40010800
 8001710:	40004800 	.word	0x40004800
 8001714:	40010c00 	.word	0x40010c00

08001718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff feca 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800171e:	490c      	ldr	r1, [pc, #48]	; (8001750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001734:	4c09      	ldr	r4, [pc, #36]	; (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001742:	f007 f85d 	bl	8008800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001746:	f7ff fbdb 	bl	8000f00 <main>
  bx lr
 800174a:	4770      	bx	lr
  ldr r0, =_sdata
 800174c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001750:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001754:	08009618 	.word	0x08009618
  ldr r2, =_sbss
 8001758:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800175c:	2000190c 	.word	0x2000190c

08001760 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001760:	e7fe      	b.n	8001760 <ADC1_2_IRQHandler>
	...

08001764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x28>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x28>)
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fc53 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fdfc 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fc6b 	bl	800208a <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017cc:	f000 fc33 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_IncTick+0x20>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000008 	.word	0x20000008
 8001810:	200003d4 	.word	0x200003d4

08001814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	200003d4 	.word	0x200003d4

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0be      	b.n	8001a10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff f926 	bl	8000b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f9ab 	bl	8001c10 <ADC_ConversionStop_Disable>
 80018ba:	4603      	mov	r3, r0
 80018bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 8099 	bne.w	80019fe <HAL_ADC_Init+0x18e>
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 8095 	bne.w	80019fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018dc:	f023 0302 	bic.w	r3, r3, #2
 80018e0:	f043 0202 	orr.w	r2, r3, #2
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7b1b      	ldrb	r3, [r3, #12]
 80018f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001908:	d003      	beq.n	8001912 <HAL_ADC_Init+0xa2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_ADC_Init+0xa8>
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	e000      	b.n	800191a <HAL_ADC_Init+0xaa>
 8001918:	2300      	movs	r3, #0
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7d1b      	ldrb	r3, [r3, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d119      	bne.n	800195c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	3b01      	subs	r3, #1
 8001936:	035a      	lsls	r2, r3, #13
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e00b      	b.n	800195c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f043 0220 	orr.w	r2, r3, #32
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_ADC_Init+0x1a8>)
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	430b      	orrs	r3, r1
 8001982:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800198c:	d003      	beq.n	8001996 <HAL_ADC_Init+0x126>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d104      	bne.n	80019a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	3b01      	subs	r3, #1
 800199c:	051b      	lsls	r3, r3, #20
 800199e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_ADC_Init+0x1ac>)
 80019bc:	4013      	ands	r3, r2
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10b      	bne.n	80019dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019da:	e018      	b.n	8001a0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f023 0312 	bic.w	r3, r3, #18
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fc:	e007      	b.n	8001a0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f043 0210 	orr.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	ffe1f7fd 	.word	0xffe1f7fd
 8001a1c:	ff1f0efe 	.word	0xff1f0efe

08001a20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x20>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0dc      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1da>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b06      	cmp	r3, #6
 8001a4e:	d81c      	bhi.n	8001a8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b05      	subs	r3, #5
 8001a62:	221f      	movs	r2, #31
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4019      	ands	r1, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b05      	subs	r3, #5
 8001a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	635a      	str	r2, [r3, #52]	; 0x34
 8001a88:	e03c      	b.n	8001b04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d81c      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b23      	subs	r3, #35	; 0x23
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4019      	ands	r1, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b23      	subs	r3, #35	; 0x23
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aca:	e01b      	b.n	8001b04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b41      	subs	r3, #65	; 0x41
 8001ade:	221f      	movs	r2, #31
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b41      	subs	r3, #65	; 0x41
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d91c      	bls.n	8001b46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68d9      	ldr	r1, [r3, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4019      	ands	r1, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6898      	ldr	r0, [r3, #8]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	e019      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6919      	ldr	r1, [r3, #16]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4019      	ands	r1, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6898      	ldr	r0, [r3, #8]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d003      	beq.n	8001b8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b86:	2b11      	cmp	r3, #17
 8001b88:	d132      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d125      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d126      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	0c9a      	lsrs	r2, r3, #18
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd0:	e002      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001bde:	e007      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40012400 	.word	0x40012400
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	431bde83 	.word	0x431bde83

08001c10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12e      	bne.n	8001c88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3a:	f7ff fdeb 	bl	8001814 <HAL_GetTick>
 8001c3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c40:	e01b      	b.n	8001c7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c42:	f7ff fde7 	bl	8001814 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d914      	bls.n	8001c7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d10d      	bne.n	8001c7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	f043 0210 	orr.w	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f043 0201 	orr.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e007      	b.n	8001c8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d0dc      	beq.n	8001c42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ed      	b.n	8001e80 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7fe fff3 	bl	8000c9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc6:	f7ff fda5 	bl	8001814 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ccc:	e012      	b.n	8001cf4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cce:	f7ff fda1 	bl	8001814 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	d90b      	bls.n	8001cf4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0c5      	b.n	8001e80 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0e5      	beq.n	8001cce <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0202 	bic.w	r2, r2, #2
 8001d10:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d12:	f7ff fd7f 	bl	8001814 <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d18:	e012      	b.n	8001d40 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d1a:	f7ff fd7b 	bl	8001814 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b0a      	cmp	r3, #10
 8001d26:	d90b      	bls.n	8001d40 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2205      	movs	r2, #5
 8001d38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e09f      	b.n	8001e80 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e5      	bne.n	8001d1a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	7e1b      	ldrb	r3, [r3, #24]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d108      	bne.n	8001d68 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e007      	b.n	8001d78 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	7e5b      	ldrb	r3, [r3, #25]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d108      	bne.n	8001d92 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e007      	b.n	8001da2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e9b      	ldrb	r3, [r3, #26]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d108      	bne.n	8001dbc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0220 	bic.w	r2, r2, #32
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7edb      	ldrb	r3, [r3, #27]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d108      	bne.n	8001de6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0210 	bic.w	r2, r2, #16
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e007      	b.n	8001df6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0210 	orr.w	r2, r2, #16
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7f1b      	ldrb	r3, [r3, #28]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d108      	bne.n	8001e10 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0208 	orr.w	r2, r2, #8
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e007      	b.n	8001e20 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0208 	bic.w	r2, r2, #8
 8001e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7f5b      	ldrb	r3, [r3, #29]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0204 	orr.w	r2, r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e007      	b.n	8001e4a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0204 	bic.w	r2, r2, #4
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	ea42 0103 	orr.w	r1, r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	db0b      	blt.n	8001f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	f003 021f 	and.w	r2, r3, #31
 8001f04:	4906      	ldr	r1, [pc, #24]	; (8001f20 <__NVIC_EnableIRQ+0x34>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002000:	f7ff ff90 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff2d 	bl	8001e88 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff42 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff90 	bl	8001f78 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5f 	bl	8001f24 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff35 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b6:	e169      	b.n	800238c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b8:	2201      	movs	r2, #1
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f040 8158 	bne.w	8002386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a9a      	ldr	r2, [pc, #616]	; (8002344 <HAL_GPIO_Init+0x2a0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020e0:	4a98      	ldr	r2, [pc, #608]	; (8002344 <HAL_GPIO_Init+0x2a0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d875      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020e6:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d058      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020ec:	4a96      	ldr	r2, [pc, #600]	; (8002348 <HAL_GPIO_Init+0x2a4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d86f      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020f2:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d052      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 80020f8:	4a94      	ldr	r2, [pc, #592]	; (800234c <HAL_GPIO_Init+0x2a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d869      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 80020fe:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2ac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d04c      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002104:	4a92      	ldr	r2, [pc, #584]	; (8002350 <HAL_GPIO_Init+0x2ac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d863      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800210a:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d046      	beq.n	800219e <HAL_GPIO_Init+0xfa>
 8002110:	4a90      	ldr	r2, [pc, #576]	; (8002354 <HAL_GPIO_Init+0x2b0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d85d      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 8002116:	2b12      	cmp	r3, #18
 8002118:	d82a      	bhi.n	8002170 <HAL_GPIO_Init+0xcc>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d859      	bhi.n	80021d2 <HAL_GPIO_Init+0x12e>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_GPIO_Init+0x80>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	0800219f 	.word	0x0800219f
 8002128:	08002179 	.word	0x08002179
 800212c:	0800218b 	.word	0x0800218b
 8002130:	080021cd 	.word	0x080021cd
 8002134:	080021d3 	.word	0x080021d3
 8002138:	080021d3 	.word	0x080021d3
 800213c:	080021d3 	.word	0x080021d3
 8002140:	080021d3 	.word	0x080021d3
 8002144:	080021d3 	.word	0x080021d3
 8002148:	080021d3 	.word	0x080021d3
 800214c:	080021d3 	.word	0x080021d3
 8002150:	080021d3 	.word	0x080021d3
 8002154:	080021d3 	.word	0x080021d3
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021d3 	.word	0x080021d3
 8002160:	080021d3 	.word	0x080021d3
 8002164:	080021d3 	.word	0x080021d3
 8002168:	08002181 	.word	0x08002181
 800216c:	08002195 	.word	0x08002195
 8002170:	4a79      	ldr	r2, [pc, #484]	; (8002358 <HAL_GPIO_Init+0x2b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002176:	e02c      	b.n	80021d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	623b      	str	r3, [r7, #32]
          break;
 800217e:	e029      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	3304      	adds	r3, #4
 8002186:	623b      	str	r3, [r7, #32]
          break;
 8002188:	e024      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	3308      	adds	r3, #8
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e01f      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	330c      	adds	r3, #12
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e01a      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021a6:	2304      	movs	r3, #4
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e013      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b4:	2308      	movs	r3, #8
 80021b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	611a      	str	r2, [r3, #16]
          break;
 80021be:	e009      	b.n	80021d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	615a      	str	r2, [r3, #20]
          break;
 80021ca:	e003      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x130>
          break;
 80021d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2bff      	cmp	r3, #255	; 0xff
 80021d8:	d801      	bhi.n	80021de <HAL_GPIO_Init+0x13a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_Init+0x13e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2bff      	cmp	r3, #255	; 0xff
 80021e8:	d802      	bhi.n	80021f0 <HAL_GPIO_Init+0x14c>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x152>
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	3b08      	subs	r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	210f      	movs	r1, #15
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80b1 	beq.w	8002386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002224:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_GPIO_Init+0x2b8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x2b8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800223c:	4a48      	ldr	r2, [pc, #288]	; (8002360 <HAL_GPIO_Init+0x2bc>)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a40      	ldr	r2, [pc, #256]	; (8002364 <HAL_GPIO_Init+0x2c0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_GPIO_Init+0x1ec>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3f      	ldr	r2, [pc, #252]	; (8002368 <HAL_GPIO_Init+0x2c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00d      	beq.n	800228c <HAL_GPIO_Init+0x1e8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_GPIO_Init+0x2c8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <HAL_GPIO_Init+0x2cc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_GPIO_Init+0x1e0>
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002284:	2304      	movs	r3, #4
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002288:	2302      	movs	r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1ee>
 8002290:	2300      	movs	r3, #0
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a2:	492f      	ldr	r1, [pc, #188]	; (8002360 <HAL_GPIO_Init+0x2bc>)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	492c      	ldr	r1, [pc, #176]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4928      	ldr	r1, [pc, #160]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	491e      	ldr	r1, [pc, #120]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4914      	ldr	r1, [pc, #80]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d021      	beq.n	8002378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e021      	b.n	8002386 <HAL_GPIO_Init+0x2e2>
 8002342:	bf00      	nop
 8002344:	10320000 	.word	0x10320000
 8002348:	10310000 	.word	0x10310000
 800234c:	10220000 	.word	0x10220000
 8002350:	10210000 	.word	0x10210000
 8002354:	10120000 	.word	0x10120000
 8002358:	10110000 	.word	0x10110000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40011400 	.word	0x40011400
 8002374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	43db      	mvns	r3, r3
 8002380:	4909      	ldr	r1, [pc, #36]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002382:	4013      	ands	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	3301      	adds	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f ae8e 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	372c      	adds	r7, #44	; 0x2c
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ca:	887b      	ldrh	r3, [r7, #2]
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	611a      	str	r2, [r3, #16]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43d9      	mvns	r1, r3
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	400b      	ands	r3, r1
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800240e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002410:	b08f      	sub	sp, #60	; 0x3c
 8002412:	af0a      	add	r7, sp, #40	; 0x28
 8002414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e10f      	b.n	8002640 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f005 fea8 	bl	8008190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 ff9a 	bl	8005398 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	687e      	ldr	r6, [r7, #4]
 800246c:	466d      	mov	r5, sp
 800246e:	f106 0410 	add.w	r4, r6, #16
 8002472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800247e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002482:	1d33      	adds	r3, r6, #4
 8002484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f002 feb8 	bl	80051fc <USB_CoreInit>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0d0      	b.n	8002640 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 ff87 	bl	80053b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e04a      	b.n	8002546 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	333d      	adds	r3, #61	; 0x3d
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	333c      	adds	r3, #60	; 0x3c
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	b298      	uxth	r0, r3
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3356      	adds	r3, #86	; 0x56
 80024ec:	4602      	mov	r2, r0
 80024ee:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3340      	adds	r3, #64	; 0x40
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3344      	adds	r3, #68	; 0x44
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3348      	adds	r3, #72	; 0x48
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334c      	adds	r3, #76	; 0x4c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	3301      	adds	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d3af      	bcc.n	80024b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	e044      	b.n	80025e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	3301      	adds	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d3b5      	bcc.n	8002556 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	687e      	ldr	r6, [r7, #4]
 80025f2:	466d      	mov	r5, sp
 80025f4:	f106 0410 	add.w	r4, r6, #16
 80025f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002600:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002604:	e885 0003 	stmia.w	r5, {r0, r1}
 8002608:	1d33      	adds	r3, r6, #4
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f002 ff1f 	bl	8005450 <USB_DevInit>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e00d      	b.n	8002640 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fea9 	bl	8006390 <USB_DevDisconnect>

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002648 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_PCD_Start+0x16>
 800265a:	2302      	movs	r3, #2
 800265c:	e012      	b.n	8002684 <HAL_PCD_Start+0x3c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fe84 	bl	8005378 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 fe6b 	bl	8006350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b08d      	sub	sp, #52	; 0x34
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 ff22 	bl	80064ec <USB_GetMode>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8443 	bne.w	8002f36 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fe8b 	bl	80063d0 <USB_ReadInterrupts>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8439 	beq.w	8002f34 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fe78 	bl	80063d0 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 0202 	and.w	r2, r2, #2
 80026f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fe66 	bl	80063d0 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b10      	cmp	r3, #16
 800270c:	d161      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0210 	bic.w	r2, r2, #16
 800271c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	0c5b      	lsrs	r3, r3, #17
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	2b02      	cmp	r3, #2
 8002748:	d124      	bne.n	8002794 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d035      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002760:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6a38      	ldr	r0, [r7, #32]
 800276a:	f003 fca3 	bl	80060b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800277a:	441a      	add	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800278c:	441a      	add	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	615a      	str	r2, [r3, #20]
 8002792:	e016      	b.n	80027c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	0c5b      	lsrs	r3, r3, #17
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	2b06      	cmp	r3, #6
 800279e:	d110      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027a6:	2208      	movs	r2, #8
 80027a8:	4619      	mov	r1, r3
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f003 fc82 	bl	80060b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027bc:	441a      	add	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0210 	orr.w	r2, r2, #16
 80027d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fdfa 	bl	80063d0 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027e6:	f040 80a7 	bne.w	8002938 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fdfe 	bl	80063f4 <USB_ReadDevAllOutEpInterrupt>
 80027f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027fa:	e099      	b.n	8002930 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 808e 	beq.w	8002924 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fe20 	bl	8006458 <USB_ReadDevOutEPInterrupt>
 8002818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00c      	beq.n	800283e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002830:	461a      	mov	r2, r3
 8002832:	2301      	movs	r3, #1
 8002834:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fe41 	bl	80034c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00c      	beq.n	8002862 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2308      	movs	r3, #8
 8002858:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fe7d 	bl	800355c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	461a      	mov	r2, r3
 800287a:	2310      	movs	r3, #16
 800287c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d030      	beq.n	80028ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d109      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	78db      	ldrb	r3, [r3, #3]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f005 fd4a 	bl	800836c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2302      	movs	r3, #2
 80028e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002900:	461a      	mov	r2, r3
 8002902:	2320      	movs	r3, #32
 8002904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291c:	461a      	mov	r2, r3
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f af62 	bne.w	80027fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 fd47 	bl	80063d0 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800294c:	f040 80a4 	bne.w	8002a98 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f003 fd66 	bl	8006426 <USB_ReadDevAllInEpInterrupt>
 800295a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002960:	e096      	b.n	8002a90 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 808b 	beq.w	8002a84 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fd8a 	bl	8006492 <USB_ReadDevInEPInterrupt>
 800297e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	2201      	movs	r2, #1
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69f9      	ldr	r1, [r7, #28]
 80029a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029aa:	4013      	ands	r3, r2
 80029ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	461a      	mov	r2, r3
 80029bc:	2301      	movs	r3, #1
 80029be:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f005 fc55 	bl	8008276 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	461a      	mov	r2, r3
 80029e4:	2308      	movs	r3, #8
 80029e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2310      	movs	r3, #16
 8002a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2340      	movs	r3, #64	; 0x40
 8002a1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d023      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2c:	6a38      	ldr	r0, [r7, #32]
 8002a2e:	f002 fe31 	bl	8005694 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3338      	adds	r3, #56	; 0x38
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f005 fc98 	bl	8008390 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2302      	movs	r3, #2
 8002a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fc96 	bl	80033b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	3301      	adds	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f47f af65 	bne.w	8002962 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fc97 	bl	80063d0 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aac:	d114      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 fc44 	bl	8008350 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fc77 	bl	80063d0 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aec:	d112      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d102      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f005 fc00 	bl	8008304 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b12:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fc59 	bl	80063d0 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	f040 80b5 	bne.w	8002c96 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2110      	movs	r1, #16
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fda4 	bl	8005694 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b50:	e046      	b.n	8002be0 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b64:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b76:	0151      	lsls	r1, r2, #5
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	440a      	add	r2, r1
 8002b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b92:	461a      	mov	r2, r3
 8002b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b98:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002baa:	0151      	lsls	r1, r2, #5
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	440a      	add	r2, r1
 8002bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bd8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3b3      	bcc.n	8002b52 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002bfc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c16:	f043 030b 	orr.w	r3, r3, #11
 8002c1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2c:	f043 030b 	orr.w	r3, r3, #11
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	e015      	b.n	8002c60 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5a:	f043 030b 	orr.w	r3, r3, #11
 8002c5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f003 fc63 	bl	800654c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fb98 	bl	80063d0 <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d124      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 fc28 	bl	8006506 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fd66 	bl	800578c <USB_GetDevSpeed>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	f001 f98c 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f002 fab0 	bl	8005240 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f005 faf0 	bl	80082c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fb68 	bl	80063d0 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d10a      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f005 facd 	bl	80082aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f002 0208 	and.w	r2, r2, #8
 8002d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fb53 	bl	80063d0 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b80      	cmp	r3, #128	; 0x80
 8002d32:	d122      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e014      	b.n	8002d70 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 faf2 	bl	800334e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3e5      	bcc.n	8002d46 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fb26 	bl	80063d0 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8e:	d13b      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	e02b      	b.n	8002dee <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002daa:	4613      	mov	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3340      	adds	r3, #64	; 0x40
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da12      	bge.n	8002de8 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333f      	adds	r3, #63	; 0x3f
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fab3 	bl	800334e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	3301      	adds	r3, #1
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3ce      	bcc.n	8002d96 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fadf 	bl	80063d0 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1c:	d155      	bne.n	8002eca <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e1e:	2301      	movs	r3, #1
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e045      	b.n	8002eb0 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d12e      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da2b      	bge.n	8002eaa <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002e5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d121      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea6:	6053      	str	r3, [r2, #4]
            break;
 8002ea8:	e007      	b.n	8002eba <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	3301      	adds	r3, #1
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3b4      	bcc.n	8002e24 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fa7e 	bl	80063d0 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d10a      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f005 fa67 	bl	80083b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fa68 	bl	80063d0 <USB_ReadInterrupts>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d115      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f005 fa57 	bl	80083d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	e000      	b.n	8002f36 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8002f34:	bf00      	nop
    }
  }
}
 8002f36:	3734      	adds	r7, #52	; 0x34
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd90      	pop	{r4, r7, pc}

08002f3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_PCD_SetAddress+0x1a>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e013      	b.n	8002f7e <HAL_PCD_SetAddress+0x42>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 f9c9 	bl	8006306 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	4608      	mov	r0, r1
 8002f90:	4611      	mov	r1, r2
 8002f92:	461a      	mov	r2, r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	70fb      	strb	r3, [r7, #3]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	803b      	strh	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	da0f      	bge.n	8002fcc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00f      	b.n	8002fec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ff8:	883a      	ldrh	r2, [r7, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	78ba      	ldrb	r2, [r7, #2]
 8003002:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003016:	78bb      	ldrb	r3, [r7, #2]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d102      	bne.n	8003022 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_Open+0xaa>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_Open+0xc8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fbc2 	bl	80057c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800304c:	7afb      	ldrb	r3, [r7, #11]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	da0f      	bge.n	800308a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3338      	adds	r3, #56	; 0x38
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	705a      	strb	r2, [r3, #1]
 8003088:	e00f      	b.n	80030aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	3304      	adds	r3, #4
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_PCD_EP_Close+0x6e>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e00e      	b.n	80030e2 <HAL_PCD_EP_Close+0x8c>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68f9      	ldr	r1, [r7, #12]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 fbfe 	bl	80058d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	460b      	mov	r3, r1
 80030f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fca4 	bl	8005a8c <USB_EPStartXfer>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003170:	681b      	ldr	r3, [r3, #0]
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	460b      	mov	r3, r1
 800318a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2201      	movs	r2, #1
 80031ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fc5c 	bl	8005a8c <USB_EPStartXfer>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d901      	bls.n	80031fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e04e      	b.n	800329a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da0f      	bge.n	8003224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	; 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00d      	b.n	8003240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_EP_SetStall+0x82>
 800325c:	2302      	movs	r3, #2
 800325e:	e01c      	b.n	800329a <HAL_PCD_EP_SetStall+0xbc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 ff77 	bl	8006162 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f003 f95e 	bl	800654c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d901      	bls.n	80032c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e042      	b.n	8003346 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da0f      	bge.n	80032e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	3338      	adds	r3, #56	; 0x38
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
 80032e6:	e00f      	b.n	8003308 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 020f 	and.w	r2, r3, #15
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	3304      	adds	r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_PCD_EP_ClrStall+0x86>
 8003324:	2302      	movs	r3, #2
 8003326:	e00e      	b.n	8003346 <HAL_PCD_EP_ClrStall+0xa4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68f9      	ldr	r1, [r7, #12]
 8003336:	4618      	mov	r0, r3
 8003338:	f002 ff80 	bl	800623c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800335a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da0c      	bge.n	800337c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e00c      	b.n	8003396 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fda7 	bl	8005ef0 <USB_EPStopXfer>
 80033a2:	4603      	mov	r3, r0
 80033a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80033a6:	7afb      	ldrb	r3, [r7, #11]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d901      	bls.n	80033e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e067      	b.n	80034b8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d902      	bls.n	8003404 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3303      	adds	r3, #3
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800340c:	e026      	b.n	800345c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	d902      	bls.n	800342a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3303      	adds	r3, #3
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68d9      	ldr	r1, [r3, #12]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	b29b      	uxth	r3, r3
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f002 fdff 	bl	8006042 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d809      	bhi.n	8003486 <PCD_WriteEmptyTxFifo+0xd6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800347a:	429a      	cmp	r2, r3
 800347c:	d203      	bcs.n	8003486 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1c3      	bne.n	800340e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	d811      	bhi.n	80034b6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2201      	movs	r2, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b2:	4013      	ands	r3, r2
 80034b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	333c      	adds	r3, #60	; 0x3c
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <PCD_EP_OutXfrComplete_int+0x98>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d124      	bne.n	8003540 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e01a      	b.n	800354c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f004 fe81 	bl	8008240 <HAL_PCD_DataOutStageCallback>
 800353e:	e005      	b.n	800354c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f004 fe7a 	bl	8008240 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	4f54310a 	.word	0x4f54310a

0800355c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	333c      	adds	r3, #60	; 0x3c
 8003574:	3304      	adds	r3, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <PCD_EP_OutSetupPacket_int+0x64>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90e      	bls.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fe33 	bl	800821c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	4f54300a 	.word	0x4f54300a

080035c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
 80035d0:	4613      	mov	r3, r2
 80035d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035e2:	883b      	ldrh	r3, [r7, #0]
 80035e4:	0419      	lsls	r1, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
 80035f0:	e028      	b.n	8003644 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e00d      	b.n	8003622 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3340      	adds	r3, #64	; 0x40
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	3b01      	subs	r3, #1
 8003628:	429a      	cmp	r2, r3
 800362a:	d3ec      	bcc.n	8003606 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800362c:	883b      	ldrh	r3, [r7, #0]
 800362e:	0418      	lsls	r0, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	3b01      	subs	r3, #1
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4302      	orrs	r2, r0
 800363c:	3340      	adds	r3, #64	; 0x40
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e304      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8087 	beq.w	800379e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003690:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 030c 	and.w	r3, r3, #12
 8003698:	2b04      	cmp	r3, #4
 800369a:	d00c      	beq.n	80036b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800369c:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d112      	bne.n	80036ce <HAL_RCC_OscConfig+0x5e>
 80036a8:	4b8c      	ldr	r3, [pc, #560]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d10b      	bne.n	80036ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b6:	4b89      	ldr	r3, [pc, #548]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d06c      	beq.n	800379c <HAL_RCC_OscConfig+0x12c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d168      	bne.n	800379c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e2de      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x76>
 80036d8:	4b80      	ldr	r3, [pc, #512]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7f      	ldr	r2, [pc, #508]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e02e      	b.n	8003744 <HAL_RCC_OscConfig+0xd4>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x98>
 80036ee:	4b7b      	ldr	r3, [pc, #492]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7a      	ldr	r2, [pc, #488]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b78      	ldr	r3, [pc, #480]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a77      	ldr	r2, [pc, #476]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e01d      	b.n	8003744 <HAL_RCC_OscConfig+0xd4>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0xbc>
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a71      	ldr	r2, [pc, #452]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0xd4>
 800372c:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a6a      	ldr	r2, [pc, #424]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a67      	ldr	r2, [pc, #412]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe f862 	bl	8001814 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fe f85e 	bl	8001814 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e292      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0xe4>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe f84e 	bl	8001814 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800377c:	f7fe f84a 	bl	8001814 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e27e      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x10c>
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d063      	beq.n	8003872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037aa:	4b4c      	ldr	r3, [pc, #304]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037b6:	4b49      	ldr	r3, [pc, #292]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d11c      	bne.n	80037fc <HAL_RCC_OscConfig+0x18c>
 80037c2:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d116      	bne.n	80037fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x176>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e252      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4939      	ldr	r1, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	e03a      	b.n	8003872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe f803 	bl	8001814 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003812:	f7fd ffff 	bl	8001814 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e233      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4927      	ldr	r1, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fd ffe2 	bl	8001814 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003854:	f7fd ffde 	bl	8001814 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e212      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d03a      	beq.n	80038f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d019      	beq.n	80038ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_RCC_OscConfig+0x274>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fd ffc2 	bl	8001814 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fd ffbe 	bl	8001814 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1f2      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_RCC_OscConfig+0x26c>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038b2:	2001      	movs	r0, #1
 80038b4:	f000 fbca 	bl	800404c <RCC_Delay>
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_RCC_OscConfig+0x274>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7fd ffa8 	bl	8001814 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c6:	e00f      	b.n	80038e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fd ffa4 	bl	8001814 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d908      	bls.n	80038e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1d8      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	42420000 	.word	0x42420000
 80038e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e8:	4b9b      	ldr	r3, [pc, #620]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e9      	bne.n	80038c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80a6 	beq.w	8003a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4a90      	ldr	r2, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	61d3      	str	r3, [r2, #28]
 800391e:	4b8e      	ldr	r3, [pc, #568]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b8b      	ldr	r3, [pc, #556]	; (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a87      	ldr	r2, [pc, #540]	; (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fd ff65 	bl	8001814 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fd ff61 	bl	8001814 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	; 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e195      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x4ec>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x312>
 8003974:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4a77      	ldr	r2, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6213      	str	r3, [r2, #32]
 8003980:	e02d      	b.n	80039de <HAL_RCC_OscConfig+0x36e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x334>
 800398a:	4b73      	ldr	r3, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4a72      	ldr	r2, [pc, #456]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6213      	str	r3, [r2, #32]
 8003996:	4b70      	ldr	r3, [pc, #448]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4a6f      	ldr	r2, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	6213      	str	r3, [r2, #32]
 80039a2:	e01c      	b.n	80039de <HAL_RCC_OscConfig+0x36e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d10c      	bne.n	80039c6 <HAL_RCC_OscConfig+0x356>
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6213      	str	r3, [r2, #32]
 80039c4:	e00b      	b.n	80039de <HAL_RCC_OscConfig+0x36e>
 80039c6:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4a63      	ldr	r2, [pc, #396]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 80039d8:	f023 0304 	bic.w	r3, r3, #4
 80039dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d015      	beq.n	8003a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fd ff15 	bl	8001814 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fd ff11 	bl	8001814 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e143      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ee      	beq.n	80039ee <HAL_RCC_OscConfig+0x37e>
 8003a10:	e014      	b.n	8003a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a12:	f7fd feff 	bl	8001814 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fd fefb 	bl	8001814 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e12d      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a30:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ee      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a42:	4b45      	ldr	r3, [pc, #276]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4a44      	ldr	r2, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 808c 	beq.w	8003b70 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d10e      	bne.n	8003a84 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d108      	bne.n	8003a84 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003a72:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e103      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d14e      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003a98:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0ef      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003aac:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_RCC_OscConfig+0x4f0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fd feaf 	bl	8001814 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003aba:	f7fd feab 	bl	8001814 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	; 0x64
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e0df      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003acc:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	491c      	ldr	r1, [pc, #112]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4918      	ldr	r1, [pc, #96]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_RCC_OscConfig+0x4f0>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fd fe87 	bl	8001814 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b0a:	f7fd fe83 	bl	8001814 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	; 0x64
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0b7      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x49a>
 8003b28:	e022      	b.n	8003b70 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <HAL_RCC_OscConfig+0x4e8>)
 8003b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_OscConfig+0x4f0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fe6a 	bl	8001814 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b44:	f7fd fe66 	bl	8001814 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d908      	bls.n	8003b64 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e09a      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b64:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e9      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8088 	beq.w	8003c8a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b7a:	4b46      	ldr	r3, [pc, #280]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d068      	beq.n	8003c58 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d14d      	bne.n	8003c2a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fe3e 	bl	8001814 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fe3a 	bl	8001814 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e06e      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d10f      	bne.n	8003be4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4931      	ldr	r1, [pc, #196]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	492d      	ldr	r1, [pc, #180]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	4927      	ldr	r1, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fd fe07 	bl	8001814 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0a:	f7fd fe03 	bl	8001814 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e037      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x59a>
 8003c28:	e02f      	b.n	8003c8a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x628>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fd fdf0 	bl	8001814 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fd fdec 	bl	8001814 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e020      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x5c8>
 8003c56:	e018      	b.n	8003c8a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e013      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x624>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	42420060 	.word	0x42420060

08003c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0d0      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d910      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b67      	ldr	r3, [pc, #412]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	4965      	ldr	r1, [pc, #404]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0b8      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	494d      	ldr	r1, [pc, #308]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d040      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d115      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e073      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e06b      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4936      	ldr	r1, [pc, #216]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fd fd42 	bl	8001814 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd fd3e 	bl	8001814 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e053      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d210      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 0207 	bic.w	r2, r3, #7
 8003dd2:	4922      	ldr	r1, [pc, #136]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4916      	ldr	r1, [pc, #88]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490e      	ldr	r1, [pc, #56]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2a:	f000 f821 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	490a      	ldr	r1, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1cc>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fca0 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800959c 	.word	0x0800959c
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000004 	.word	0x20000004

08003e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b08e      	sub	sp, #56	; 0x38
 8003e76:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e80:	2300      	movs	r3, #0
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e94:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d002      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d003      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea8:	e089      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003eae:	e089      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	0c9b      	lsrs	r3, r3, #18
 8003eb4:	f003 020f 	and.w	r2, r3, #15
 8003eb8:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eba:	5c9b      	ldrb	r3, [r3, r2]
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d072      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003ec8:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x16c>)
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d053      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	3301      	adds	r3, #1
 8003eee:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ef0:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3302      	adds	r3, #2
 8003efc:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2200      	movs	r2, #0
 8003f02:	469a      	mov	sl, r3
 8003f04:	4693      	mov	fp, r2
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	2200      	movs	r2, #0
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	617a      	str	r2, [r7, #20]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	fb03 f20b 	mul.w	r2, r3, fp
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fb0a f303 	mul.w	r3, sl, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	fbaa 0102 	umull	r0, r1, sl, r2
 8003f22:	440b      	add	r3, r1
 8003f24:	4619      	mov	r1, r3
 8003f26:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f28:	fb03 f201 	mul.w	r2, r3, r1
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	fb00 f303 	mul.w	r3, r0, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f36:	fba0 4502 	umull	r4, r5, r0, r2
 8003f3a:	442b      	add	r3, r5
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2200      	movs	r2, #0
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	60fa      	str	r2, [r7, #12]
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	2200      	movs	r2, #0
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f52:	460b      	mov	r3, r1
 8003f54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f58:	4652      	mov	r2, sl
 8003f5a:	fb02 f203 	mul.w	r2, r2, r3
 8003f5e:	465b      	mov	r3, fp
 8003f60:	4684      	mov	ip, r0
 8003f62:	fb0c f303 	mul.w	r3, ip, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	fba2 8901 	umull	r8, r9, r2, r1
 8003f70:	444b      	add	r3, r9
 8003f72:	4699      	mov	r9, r3
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	4620      	mov	r0, r4
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f7fc f95a 	bl	8000234 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
 8003f88:	e007      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f8e:	fb03 f202 	mul.w	r2, r3, r2
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f9c:	7b5b      	ldrb	r3, [r3, #13]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
 8003fac:	e004      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <HAL_RCC_GetSysClockFreq+0x170>)
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8003fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3738      	adds	r7, #56	; 0x38
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	017d7840 	.word	0x017d7840
 8003fd8:	080095b4 	.word	0x080095b4
 8003fdc:	080095c4 	.word	0x080095c4
 8003fe0:	003d0900 	.word	0x003d0900
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000000 	.word	0x20000000

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004000:	f7ff fff2 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	; (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	080095ac 	.word	0x080095ac

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	080095ac 	.word	0x080095ac

0800404c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <RCC_Delay+0x34>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <RCC_Delay+0x38>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004068:	bf00      	nop
  }
  while (Delay --);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	60fa      	str	r2, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f9      	bne.n	8004068 <RCC_Delay+0x1c>
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	20000000 	.word	0x20000000
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d07d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80040a8:	2300      	movs	r3, #0
 80040aa:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ac:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4a87      	ldr	r2, [pc, #540]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
 80040c4:	4b85      	ldr	r3, [pc, #532]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b82      	ldr	r3, [pc, #520]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d118      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e0:	4b7f      	ldr	r3, [pc, #508]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7e      	ldr	r2, [pc, #504]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ec:	f7fd fb92 	bl	8001814 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	e008      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f4:	f7fd fb8e 	bl	8001814 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0e5      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004112:	4b72      	ldr	r3, [pc, #456]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02e      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	429a      	cmp	r2, r3
 800412e:	d027      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004138:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413a:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004140:	4b68      	ldr	r3, [pc, #416]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004146:	4a65      	ldr	r2, [pc, #404]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d014      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd fb5d 	bl	8001814 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fb59 	bl	8001814 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0ae      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ee      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4953      	ldr	r1, [pc, #332]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800418e:	4313      	orrs	r3, r2
 8004190:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004192:	7efb      	ldrb	r3, [r7, #27]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800419e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b0:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4947      	ldr	r1, [pc, #284]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	4938      	ldr	r1, [pc, #224]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004216:	2301      	movs	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d148      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004220:	4b2e      	ldr	r3, [pc, #184]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d138      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e042      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800424c:	4b23      	ldr	r3, [pc, #140]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	4920      	ldr	r1, [pc, #128]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800425a:	4313      	orrs	r3, r2
 800425c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	491c      	ldr	r1, [pc, #112]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800426c:	4313      	orrs	r3, r2
 800426e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd facd 	bl	8001814 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800427e:	f7fd fac9 	bl	8001814 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e020      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800429c:	e009      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	4904      	ldr	r1, [pc, #16]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40007000 	.word	0x40007000
 80042e4:	42420440 	.word	0x42420440
 80042e8:	42420070 	.word	0x42420070

080042ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e076      	b.n	80043ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d108      	bne.n	8004318 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430e:	d009      	beq.n	8004324 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	61da      	str	r2, [r3, #28]
 8004316:	e005      	b.n	8004324 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc ffba 	bl	80012b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	ea42 0103 	orr.w	r1, r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	0c1a      	lsrs	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f002 0204 	and.w	r2, r2, #4
 80043ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_SPI_Transmit+0x22>
 8004412:	2302      	movs	r3, #2
 8004414:	e12d      	b.n	8004672 <HAL_SPI_Transmit+0x27e>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441e:	f7fd f9f9 	bl	8001814 <HAL_GetTick>
 8004422:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004438:	e116      	b.n	8004668 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SPI_Transmit+0x52>
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800444a:	e10d      	b.n	8004668 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2203      	movs	r2, #3
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004492:	d10f      	bne.n	80044b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d007      	beq.n	80044d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044da:	d14f      	bne.n	800457c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_Transmit+0xf6>
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d142      	bne.n	8004570 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800450e:	e02f      	b.n	8004570 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d112      	bne.n	8004544 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	881a      	ldrh	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	86da      	strh	r2, [r3, #54]	; 0x36
 8004542:	e015      	b.n	8004570 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004544:	f7fd f966 	bl	8001814 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d803      	bhi.n	800455c <HAL_SPI_Transmit+0x168>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800455a:	d102      	bne.n	8004562 <HAL_SPI_Transmit+0x16e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800456e:	e07b      	b.n	8004668 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ca      	bne.n	8004510 <HAL_SPI_Transmit+0x11c>
 800457a:	e050      	b.n	800461e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_Transmit+0x196>
 8004584:	8afb      	ldrh	r3, [r7, #22]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d144      	bne.n	8004614 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045b0:	e030      	b.n	8004614 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d113      	bne.n	80045e8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80045e6:	e015      	b.n	8004614 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e8:	f7fd f914 	bl	8001814 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d803      	bhi.n	8004600 <HAL_SPI_Transmit+0x20c>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fe:	d102      	bne.n	8004606 <HAL_SPI_Transmit+0x212>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004612:	e029      	b.n	8004668 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1c9      	bne.n	80045b2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fbcc 	bl	8004dc0 <SPI_EndRxTxTransaction>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e003      	b.n	8004668 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004670:	7ffb      	ldrb	r3, [r7, #31]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b088      	sub	sp, #32
 800467e:	af02      	add	r7, sp, #8
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800469a:	2302      	movs	r3, #2
 800469c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800469e:	e0fb      	b.n	8004898 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a8:	d112      	bne.n	80046d0 <HAL_SPI_Receive+0x56>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10e      	bne.n	80046d0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2204      	movs	r2, #4
 80046b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f8ef 	bl	80048aa <HAL_SPI_TransmitReceive>
 80046cc:	4603      	mov	r3, r0
 80046ce:	e0e8      	b.n	80048a2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_SPI_Receive+0x64>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0e1      	b.n	80048a2 <HAL_SPI_Receive+0x228>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e6:	f7fd f895 	bl	8001814 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_SPI_Receive+0x7e>
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046fc:	e0cc      	b.n	8004898 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2204      	movs	r2, #4
 8004702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	88fa      	ldrh	r2, [r7, #6]
 8004716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	d10f      	bne.n	8004766 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004754:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d007      	beq.n	8004784 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004782:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d16a      	bne.n	8004862 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800478c:	e032      	b.n	80047f4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d115      	bne.n	80047c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f103 020c 	add.w	r2, r3, #12
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c6:	e015      	b.n	80047f4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c8:	f7fd f824 	bl	8001814 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d803      	bhi.n	80047e0 <HAL_SPI_Receive+0x166>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047de:	d102      	bne.n	80047e6 <HAL_SPI_Receive+0x16c>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80047f2:	e051      	b.n	8004898 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1c7      	bne.n	800478e <HAL_SPI_Receive+0x114>
 80047fe:	e035      	b.n	800486c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d113      	bne.n	8004836 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	b292      	uxth	r2, r2
 800481a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	1c9a      	adds	r2, r3, #2
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004834:	e015      	b.n	8004862 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004836:	f7fc ffed 	bl	8001814 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d803      	bhi.n	800484e <HAL_SPI_Receive+0x1d4>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484c:	d102      	bne.n	8004854 <HAL_SPI_Receive+0x1da>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004860:	e01a      	b.n	8004898 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1c9      	bne.n	8004800 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fa53 	bl	8004d1c <SPI_EndRxTransaction>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2220      	movs	r2, #32
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e003      	b.n	8004898 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b08c      	sub	sp, #48	; 0x30
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048b8:	2301      	movs	r3, #1
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x26>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e198      	b.n	8004c02 <HAL_SPI_TransmitReceive+0x358>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048d8:	f7fc ff9c 	bl	8001814 <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048ee:	887b      	ldrh	r3, [r7, #2]
 80048f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d00f      	beq.n	800491a <HAL_SPI_TransmitReceive+0x70>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004900:	d107      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x68>
 800490a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800490e:	2b04      	cmp	r3, #4
 8004910:	d003      	beq.n	800491a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004918:	e16d      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_SPI_TransmitReceive+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_SPI_TransmitReceive+0x82>
 8004926:	887b      	ldrh	r3, [r7, #2]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004932:	e160      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b04      	cmp	r3, #4
 800493e:	d003      	beq.n	8004948 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2205      	movs	r2, #5
 8004944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	887a      	ldrh	r2, [r7, #2]
 800496a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d007      	beq.n	800499c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a4:	d17c      	bne.n	8004aa0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x10a>
 80049ae:	8b7b      	ldrh	r3, [r7, #26]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d16a      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	881a      	ldrh	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	1c9a      	adds	r2, r3, #2
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d8:	e057      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d11b      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x176>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x176>
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d113      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d119      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x1b8>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d014      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	b292      	uxth	r2, r2
 8004a44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	1c9a      	adds	r2, r3, #2
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a62:	f7fc fed7 	bl	8001814 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d80b      	bhi.n	8004a8a <HAL_SPI_TransmitReceive+0x1e0>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a78:	d007      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a88:	e0b5      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1a2      	bne.n	80049da <HAL_SPI_TransmitReceive+0x130>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d19d      	bne.n	80049da <HAL_SPI_TransmitReceive+0x130>
 8004a9e:	e080      	b.n	8004ba2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x204>
 8004aa8:	8b7b      	ldrh	r3, [r7, #26]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d16f      	bne.n	8004b8e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	330c      	adds	r3, #12
 8004ab8:	7812      	ldrb	r2, [r2, #0]
 8004aba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad4:	e05b      	b.n	8004b8e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d11c      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x274>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x274>
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d114      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d119      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x2b6>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d014      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b60:	f7fc fe58 	bl	8001814 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d803      	bhi.n	8004b78 <HAL_SPI_TransmitReceive+0x2ce>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x2d4>
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b8c:	e033      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d19e      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x22c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d199      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f90a 	bl	8004dc0 <SPI_EndRxTxTransaction>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004bbe:	e01a      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bec:	e003      	b.n	8004bf6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3730      	adds	r7, #48	; 0x30
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c1c:	f7fc fdfa 	bl	8001814 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c2c:	f7fc fdf2 	bl	8001814 <HAL_GetTick>
 8004c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	015b      	lsls	r3, r3, #5
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c42:	e054      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4a:	d050      	beq.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c4c:	f7fc fde2 	bl	8001814 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d902      	bls.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13d      	bne.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d111      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	d004      	beq.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d107      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d10f      	bne.n	8004cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e017      	b.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d19b      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000000 	.word	0x20000000

08004d1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d30:	d111      	bne.n	8004d56 <SPI_EndRxTransaction+0x3a>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d004      	beq.n	8004d46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d107      	bne.n	8004d56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d54:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5e:	d117      	bne.n	8004d90 <SPI_EndRxTransaction+0x74>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d112      	bne.n	8004d90 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2101      	movs	r1, #1
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff ff49 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e013      	b.n	8004db8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	2180      	movs	r1, #128	; 0x80
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff36 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e000      	b.n	8004db8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2180      	movs	r1, #128	; 0x80
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff ff18 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e000      	b.n	8004df4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fb80 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 f82e 	bl	8004e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2d      	ldr	r2, [pc, #180]	; (8004f64 <TIM_Base_SetConfig+0xc8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_Base_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d00b      	beq.n	8004ed4 <TIM_Base_SetConfig+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_Base_SetConfig+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_Base_SetConfig+0x38>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_Base_SetConfig+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_Base_SetConfig+0x38>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <TIM_Base_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d108      	bne.n	8004ee6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <TIM_Base_SetConfig+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0x72>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0x72>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <TIM_Base_SetConfig+0xcc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0x72>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <TIM_Base_SetConfig+0xd0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0x72>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <TIM_Base_SetConfig+0xd4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <TIM_Base_SetConfig+0xc8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d103      	bne.n	8004f54 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00

08004f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e04b      	b.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10c      	bne.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00

08005040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e042      	b.n	80050d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc fad0 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2224      	movs	r2, #36	; 0x24
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f82b 	bl	80050e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800511a:	f023 030c 	bic.w	r3, r3, #12
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	430b      	orrs	r3, r1
 8005126:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <UART_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fe ff6c 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	e002      	b.n	8005156 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005150:	f7fe ff54 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8005154:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <UART_SetConfig+0x118>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	0119      	lsls	r1, r3, #4
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fbb2 f2f3 	udiv	r2, r2, r3
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <UART_SetConfig+0x118>)
 800518e:	fba3 0302 	umull	r0, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2064      	movs	r0, #100	; 0x64
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <UART_SetConfig+0x118>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ac:	4419      	add	r1, r3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <UART_SetConfig+0x118>)
 80051c6:	fba3 0302 	umull	r0, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2064      	movs	r0, #100	; 0x64
 80051ce:	fb00 f303 	mul.w	r3, r0, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <UART_SetConfig+0x118>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 020f 	and.w	r2, r3, #15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	440a      	add	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40013800 	.word	0x40013800
 80051f8:	51eb851f 	.word	0x51eb851f

080051fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051fc:	b084      	sub	sp, #16
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	f107 001c 	add.w	r0, r7, #28
 800520a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 f9de 	bl	80065dc <USB_CoreReset>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005228:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800523c:	b004      	add	sp, #16
 800523e:	4770      	bx	lr

08005240 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d165      	bne.n	8005320 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <USB_SetTurnaroundTime+0x110>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d906      	bls.n	800526a <USB_SetTurnaroundTime+0x2a>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a3d      	ldr	r2, [pc, #244]	; (8005354 <USB_SetTurnaroundTime+0x114>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d202      	bcs.n	800526a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005264:	230f      	movs	r3, #15
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e05c      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4a39      	ldr	r2, [pc, #228]	; (8005354 <USB_SetTurnaroundTime+0x114>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d306      	bcc.n	8005280 <USB_SetTurnaroundTime+0x40>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4a38      	ldr	r2, [pc, #224]	; (8005358 <USB_SetTurnaroundTime+0x118>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d202      	bcs.n	8005280 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800527a:	230e      	movs	r3, #14
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e051      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a35      	ldr	r2, [pc, #212]	; (8005358 <USB_SetTurnaroundTime+0x118>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d306      	bcc.n	8005296 <USB_SetTurnaroundTime+0x56>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a34      	ldr	r2, [pc, #208]	; (800535c <USB_SetTurnaroundTime+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d202      	bcs.n	8005296 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005290:	230d      	movs	r3, #13
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e046      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a30      	ldr	r2, [pc, #192]	; (800535c <USB_SetTurnaroundTime+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d306      	bcc.n	80052ac <USB_SetTurnaroundTime+0x6c>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <USB_SetTurnaroundTime+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d802      	bhi.n	80052ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052a6:	230c      	movs	r3, #12
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e03b      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <USB_SetTurnaroundTime+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d906      	bls.n	80052c2 <USB_SetTurnaroundTime+0x82>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <USB_SetTurnaroundTime+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d802      	bhi.n	80052c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052bc:	230b      	movs	r3, #11
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e030      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4a27      	ldr	r2, [pc, #156]	; (8005364 <USB_SetTurnaroundTime+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d906      	bls.n	80052d8 <USB_SetTurnaroundTime+0x98>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <USB_SetTurnaroundTime+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d802      	bhi.n	80052d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052d2:	230a      	movs	r3, #10
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e025      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a23      	ldr	r2, [pc, #140]	; (8005368 <USB_SetTurnaroundTime+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d906      	bls.n	80052ee <USB_SetTurnaroundTime+0xae>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a22      	ldr	r2, [pc, #136]	; (800536c <USB_SetTurnaroundTime+0x12c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d202      	bcs.n	80052ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052e8:	2309      	movs	r3, #9
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	e01a      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a1e      	ldr	r2, [pc, #120]	; (800536c <USB_SetTurnaroundTime+0x12c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d306      	bcc.n	8005304 <USB_SetTurnaroundTime+0xc4>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <USB_SetTurnaroundTime+0x130>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d802      	bhi.n	8005304 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052fe:	2308      	movs	r3, #8
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e00f      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <USB_SetTurnaroundTime+0x130>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d906      	bls.n	800531a <USB_SetTurnaroundTime+0xda>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <USB_SetTurnaroundTime+0x134>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d202      	bcs.n	800531a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005314:	2307      	movs	r3, #7
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800531a:	2306      	movs	r3, #6
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e001      	b.n	8005324 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005320:	2309      	movs	r3, #9
 8005322:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	00d8acbf 	.word	0x00d8acbf
 8005354:	00e4e1c0 	.word	0x00e4e1c0
 8005358:	00f42400 	.word	0x00f42400
 800535c:	01067380 	.word	0x01067380
 8005360:	011a499f 	.word	0x011a499f
 8005364:	01312cff 	.word	0x01312cff
 8005368:	014ca43f 	.word	0x014ca43f
 800536c:	016e3600 	.word	0x016e3600
 8005370:	01a6ab1f 	.word	0x01a6ab1f
 8005374:	01e84800 	.word	0x01e84800

08005378 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f043 0201 	orr.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f023 0201 	bic.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d115      	bne.n	8005406 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7fc fa1e 	bl	8001828 <HAL_Delay>
      ms++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f87a 	bl	80064ec <USB_GetMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d01e      	beq.n	800543c <USB_SetCurrentMode+0x84>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b31      	cmp	r3, #49	; 0x31
 8005402:	d9f0      	bls.n	80053e6 <USB_SetCurrentMode+0x2e>
 8005404:	e01a      	b.n	800543c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005406:	78fb      	ldrb	r3, [r7, #3]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005418:	2001      	movs	r0, #1
 800541a:	f7fc fa05 	bl	8001828 <HAL_Delay>
      ms++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3301      	adds	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 f861 	bl	80064ec <USB_GetMode>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <USB_SetCurrentMode+0x84>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b31      	cmp	r3, #49	; 0x31
 8005434:	d9f0      	bls.n	8005418 <USB_SetCurrentMode+0x60>
 8005436:	e001      	b.n	800543c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e005      	b.n	8005448 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b32      	cmp	r3, #50	; 0x32
 8005440:	d101      	bne.n	8005446 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005450:	b084      	sub	sp, #16
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800545e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	e009      	b.n	8005484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3340      	adds	r3, #64	; 0x40
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	2200      	movs	r2, #0
 800547c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	3301      	adds	r3, #1
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b0e      	cmp	r3, #14
 8005488:	d9f2      	bls.n	8005470 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800549c:	461a      	mov	r2, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054a2:	2103      	movs	r1, #3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f959 	bl	800575c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054aa:	2110      	movs	r1, #16
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f8f1 	bl	8005694 <USB_FlushTxFifo>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f91d 	bl	80056fc <USB_FlushRxFifo>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	461a      	mov	r2, r3
 80054e0:	2300      	movs	r3, #0
 80054e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	461a      	mov	r2, r3
 80054ec:	2300      	movs	r3, #0
 80054ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	e043      	b.n	800557e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800550c:	d118      	bne.n	8005540 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	461a      	mov	r2, r3
 8005522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e013      	b.n	8005552 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	461a      	mov	r2, r3
 8005538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e008      	b.n	8005552 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	461a      	mov	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	461a      	mov	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	461a      	mov	r2, r3
 8005572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005576:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3301      	adds	r3, #1
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d3b7      	bcc.n	80054f6 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e043      	b.n	8005614 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a2:	d118      	bne.n	80055d6 <USB_DevInit+0x186>
    {
      if (i == 0U)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	461a      	mov	r2, r3
 80055b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e013      	b.n	80055e8 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	461a      	mov	r2, r3
 80055ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e008      	b.n	80055e8 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	2300      	movs	r3, #0
 80055f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	461a      	mov	r2, r3
 8005608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800560c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3301      	adds	r3, #1
 8005612:	613b      	str	r3, [r7, #16]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d3b7      	bcc.n	800558c <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800562a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800562e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800563c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f043 0210 	orr.w	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <USB_DevInit+0x240>)
 8005650:	4313      	orrs	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f043 0208 	orr.w	r2, r3, #8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005676:	f043 0304 	orr.w	r3, r3, #4
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800568a:	b004      	add	sp, #16
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	803c3800 	.word	0x803c3800

08005694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <USB_FlushTxFifo+0x64>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e01b      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	daf2      	bge.n	80056a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <USB_FlushTxFifo+0x64>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e006      	b.n	80056ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d0f0      	beq.n	80056cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	00030d40 	.word	0x00030d40

080056fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <USB_FlushRxFifo+0x5c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e018      	b.n	800574c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	daf2      	bge.n	8005708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2210      	movs	r2, #16
 800572a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a08      	ldr	r2, [pc, #32]	; (8005758 <USB_FlushRxFifo+0x5c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b10      	cmp	r3, #16
 8005748:	d0f0      	beq.n	800572c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	00030d40 	.word	0x00030d40

0800575c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f003 0306 	and.w	r3, r3, #6
 80057a4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d002      	beq.n	80057b2 <USB_GetDevSpeed+0x26>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d102      	bne.n	80057b8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057b2:	2302      	movs	r3, #2
 80057b4:	75fb      	strb	r3, [r7, #23]
 80057b6:	e001      	b.n	80057bc <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80057b8:	230f      	movs	r3, #15
 80057ba:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d13a      	bne.n	800585a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d155      	bne.n	80058c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	059b      	lsls	r3, r3, #22
 800583e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005840:	4313      	orrs	r3, r2
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e036      	b.n	80058c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005860:	69da      	ldr	r2, [r3, #28]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005878:	4313      	orrs	r3, r2
 800587a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11a      	bne.n	80058c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ae:	430b      	orrs	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d161      	bne.n	80059b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005906:	d11f      	bne.n	8005948 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	0151      	lsls	r1, r2, #5
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	440a      	add	r2, r1
 800591e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005926:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4013      	ands	r3, r2
 800596a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f303 	lsl.w	r3, r1, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800598c:	4013      	ands	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	0159      	lsls	r1, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	440b      	add	r3, r1
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	4619      	mov	r1, r3
 80059ac:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <USB_DeactivateEndpoint+0x1b0>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
 80059b2:	e060      	b.n	8005a76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ca:	d11f      	bne.n	8005a0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	43db      	mvns	r3, r3
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	2101      	movs	r1, #1
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4013      	ands	r3, r2
 8005a52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	0159      	lsls	r1, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	440b      	add	r3, r1
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <USB_DeactivateEndpoint+0x1b4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	ec337800 	.word	0xec337800
 8005a88:	eff37800 	.word	0xeff37800

08005a8c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 8128 	bne.w	8005cfa <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d132      	bne.n	8005b18 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b10:	0cdb      	lsrs	r3, r3, #19
 8005b12:	04db      	lsls	r3, r3, #19
 8005b14:	6113      	str	r3, [r2, #16]
 8005b16:	e092      	b.n	8005c3e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	0cdb      	lsrs	r3, r3, #19
 8005b34:	04db      	lsls	r3, r3, #19
 8005b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11a      	bne.n	8005b98 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d903      	bls.n	8005b76 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b94:	6113      	str	r3, [r2, #16]
 8005b96:	e01b      	b.n	8005bd0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6919      	ldr	r1, [r3, #16]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	440b      	add	r3, r1
 8005bb0:	1e59      	subs	r1, r3, #1
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bbc:	4b8d      	ldr	r3, [pc, #564]	; (8005df4 <USB_EPStartXfer+0x368>)
 8005bbe:	400b      	ands	r3, r1
 8005bc0:	6939      	ldr	r1, [r7, #16]
 8005bc2:	0148      	lsls	r0, r1, #5
 8005bc4:	6979      	ldr	r1, [r7, #20]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	0148      	lsls	r0, r1, #5
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	4401      	add	r1, r0
 8005bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d11f      	bne.n	8005c3e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c5c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d015      	beq.n	8005c92 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8139 	beq.w	8005ee2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	2101      	movs	r1, #1
 8005c82:	fa01 f303 	lsl.w	r3, r1, r3
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	634b      	str	r3, [r1, #52]	; 0x34
 8005c90:	e127      	b.n	8005ee2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e00f      	b.n	8005ce4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f9a5 	bl	8006042 <USB_WritePacket>
 8005cf8:	e0f3      	b.n	8005ee2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d14:	0cdb      	lsrs	r3, r3, #19
 8005d16:	04db      	lsls	r3, r3, #19
 8005d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d12f      	bne.n	8005da4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d72:	6939      	ldr	r1, [r7, #16]
 8005d74:	0148      	lsls	r0, r1, #5
 8005d76:	6979      	ldr	r1, [r7, #20]
 8005d78:	4401      	add	r1, r0
 8005d7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005da0:	6113      	str	r3, [r2, #16]
 8005da2:	e061      	b.n	8005e68 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d125      	bne.n	8005df8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc2:	6939      	ldr	r1, [r7, #16]
 8005dc4:	0148      	lsls	r0, r1, #5
 8005dc6:	6979      	ldr	r1, [r7, #20]
 8005dc8:	4401      	add	r1, r0
 8005dca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005df0:	6113      	str	r3, [r2, #16]
 8005df2:	e039      	b.n	8005e68 <USB_EPStartXfer+0x3dc>
 8005df4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	89fa      	ldrh	r2, [r7, #14]
 8005e14:	fb03 f202 	mul.w	r2, r3, r2
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	04d9      	lsls	r1, r3, #19
 8005e2e:	4b2f      	ldr	r3, [pc, #188]	; (8005eec <USB_EPStartXfer+0x460>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	6939      	ldr	r1, [r7, #16]
 8005e34:	0148      	lsls	r0, r1, #5
 8005e36:	6979      	ldr	r1, [r7, #20]
 8005e38:	4401      	add	r1, r0
 8005e3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e58:	6939      	ldr	r1, [r7, #16]
 8005e5a:	0148      	lsls	r0, r1, #5
 8005e5c:	6979      	ldr	r1, [r7, #20]
 8005e5e:	4401      	add	r1, r0
 8005e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	791b      	ldrb	r3, [r3, #4]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d128      	bne.n	8005ec2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d110      	bne.n	8005ea2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e00f      	b.n	8005ec2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ee0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	1ff80000 	.word	0x1ff80000

08005ef0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d14a      	bne.n	8005fa4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f26:	f040 8086 	bne.w	8006036 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d902      	bls.n	8005f88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
          break;
 8005f86:	e056      	b.n	8006036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa0:	d0e7      	beq.n	8005f72 <USB_EPStopXfer+0x82>
 8005fa2:	e048      	b.n	8006036 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d13b      	bne.n	8006036 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fe0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006004:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006012:	4293      	cmp	r3, r2
 8006014:	d902      	bls.n	800601c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
          break;
 800601a:	e00c      	b.n	8006036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006034:	d0e7      	beq.n	8006006 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006042:	b480      	push	{r7}
 8006044:	b089      	sub	sp, #36	; 0x24
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	4611      	mov	r1, r2
 800604e:	461a      	mov	r2, r3
 8006050:	460b      	mov	r3, r1
 8006052:	71fb      	strb	r3, [r7, #7]
 8006054:	4613      	mov	r3, r2
 8006056:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006060:	88bb      	ldrh	r3, [r7, #4]
 8006062:	3303      	adds	r3, #3
 8006064:	089b      	lsrs	r3, r3, #2
 8006066:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e018      	b.n	80060a0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	031a      	lsls	r2, r3, #12
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	461a      	mov	r2, r3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3301      	adds	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3301      	adds	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	3301      	adds	r3, #1
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3e2      	bcc.n	800606e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b08b      	sub	sp, #44	; 0x2c
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	e014      	b.n	800610a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	3301      	adds	r3, #1
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3e6      	bcc.n	80060e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006112:	8bfb      	ldrh	r3, [r7, #30]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01e      	beq.n	8006156 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006122:	461a      	mov	r2, r3
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	701a      	strb	r2, [r3, #0]
      i++;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	3301      	adds	r3, #1
 8006142:	623b      	str	r3, [r7, #32]
      pDest++;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	3301      	adds	r3, #1
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800614a:	8bfb      	ldrh	r3, [r7, #30]
 800614c:	3b01      	subs	r3, #1
 800614e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ea      	bne.n	800612c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006158:	4618      	mov	r0, r3
 800615a:	372c      	adds	r7, #44	; 0x2c
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d12c      	bne.n	80061d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	db12      	blt.n	80061b6 <USB_EPSetStall+0x54>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00f      	beq.n	80061b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e02b      	b.n	8006230 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	db12      	blt.n	8006210 <USB_EPSetStall+0xae>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800620e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800622e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d128      	bne.n	80062aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006276:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d003      	beq.n	8006288 <USB_EPClearStall+0x4c>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	791b      	ldrb	r3, [r3, #4]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d138      	bne.n	80062fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e027      	b.n	80062fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	791b      	ldrb	r3, [r3, #4]
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d003      	beq.n	80062da <USB_EPClearStall+0x9e>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d10f      	bne.n	80062fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006324:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006328:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800637e:	f023 0302 	bic.w	r3, r3, #2
 8006382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063be:	f043 0302 	orr.w	r3, r3, #2
 80063c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063e8:	68fb      	ldr	r3, [r7, #12]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr

080063f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4013      	ands	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	0c1b      	lsrs	r3, r3, #16
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	b29b      	uxth	r3, r3
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006486:	68bb      	ldr	r3, [r7, #8]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	fa22 f303 	lsr.w	r3, r2, r3
 80064c2:	01db      	lsls	r3, r3, #7
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4013      	ands	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064e0:	68bb      	ldr	r3, [r7, #8]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f003 0301 	and.w	r3, r3, #1
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006520:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
	...

0800654c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	333c      	adds	r3, #60	; 0x3c
 800655e:	3304      	adds	r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <USB_EP0_OutStart+0x8c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d90a      	bls.n	8006582 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800657c:	d101      	bne.n	8006582 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e024      	b.n	80065cc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b0:	f043 0318 	orr.w	r3, r3, #24
 80065b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065c8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	4f54300a 	.word	0x4f54300a

080065dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a12      	ldr	r2, [pc, #72]	; (800663c <USB_CoreReset+0x60>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e01b      	b.n	8006632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	daf2      	bge.n	80065e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a08      	ldr	r2, [pc, #32]	; (800663c <USB_CoreReset+0x60>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e006      	b.n	8006632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d0f0      	beq.n	8006612 <USB_CoreReset+0x36>

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	00030d40 	.word	0x00030d40

08006640 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7c1b      	ldrb	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d115      	bne.n	8006684 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665c:	2202      	movs	r2, #2
 800665e:	2181      	movs	r1, #129	; 0x81
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 ff22 	bl	80084aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800666c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006670:	2202      	movs	r2, #2
 8006672:	2101      	movs	r1, #1
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 ff18 	bl	80084aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006682:	e012      	b.n	80066aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	2202      	movs	r2, #2
 8006688:	2181      	movs	r1, #129	; 0x81
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 ff0d 	bl	80084aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	2202      	movs	r2, #2
 800669a:	2101      	movs	r1, #1
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 ff04 	bl	80084aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066aa:	2308      	movs	r3, #8
 80066ac:	2203      	movs	r2, #3
 80066ae:	2182      	movs	r1, #130	; 0x82
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fefa 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066c0:	f002 f81a 	bl	80086f8 <USBD_static_malloc>
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80066d6:	2301      	movs	r3, #1
 80066d8:	73fb      	strb	r3, [r7, #15]
 80066da:	e026      	b.n	800672a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7c1b      	ldrb	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800670c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006710:	2101      	movs	r1, #1
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 ffb9 	bl	800868a <USBD_LL_PrepareReceive>
 8006718:	e007      	b.n	800672a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006720:	2340      	movs	r3, #64	; 0x40
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 ffb0 	bl	800868a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006744:	2181      	movs	r1, #129	; 0x81
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fed5 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006752:	2101      	movs	r1, #1
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fece 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006762:	2182      	movs	r1, #130	; 0x82
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fec6 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	4618      	mov	r0, r3
 800678c:	f001 ffc0 	bl	8008710 <USBD_static_free>
    pdev->pClassData = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b086      	sub	sp, #24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d039      	beq.n	8006840 <USBD_CDC_Setup+0x9e>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d17f      	bne.n	80068d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	88db      	ldrh	r3, [r3, #6]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d029      	beq.n	800682c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b25b      	sxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da11      	bge.n	8006806 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80067ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	88d2      	ldrh	r2, [r2, #6]
 80067f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80067f6:	6939      	ldr	r1, [r7, #16]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	88db      	ldrh	r3, [r3, #6]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fa41 	bl	8007c86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006804:	e06b      	b.n	80068de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	785a      	ldrb	r2, [r3, #1]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	88db      	ldrh	r3, [r3, #6]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800681c:	6939      	ldr	r1, [r7, #16]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	88db      	ldrh	r3, [r3, #6]
 8006822:	461a      	mov	r2, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fa5c 	bl	8007ce2 <USBD_CtlPrepareRx>
      break;
 800682a:	e058      	b.n	80068de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	7850      	ldrb	r0, [r2, #1]
 8006838:	2200      	movs	r2, #0
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	4798      	blx	r3
      break;
 800683e:	e04e      	b.n	80068de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b0b      	cmp	r3, #11
 8006846:	d02e      	beq.n	80068a6 <USBD_CDC_Setup+0x104>
 8006848:	2b0b      	cmp	r3, #11
 800684a:	dc38      	bgt.n	80068be <USBD_CDC_Setup+0x11c>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <USBD_CDC_Setup+0xb4>
 8006850:	2b0a      	cmp	r3, #10
 8006852:	d014      	beq.n	800687e <USBD_CDC_Setup+0xdc>
 8006854:	e033      	b.n	80068be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	2b03      	cmp	r3, #3
 800685e:	d107      	bne.n	8006870 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	2202      	movs	r2, #2
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 fa0c 	bl	8007c86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800686e:	e02e      	b.n	80068ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f99d 	bl	8007bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006878:	2302      	movs	r3, #2
 800687a:	75fb      	strb	r3, [r7, #23]
          break;
 800687c:	e027      	b.n	80068ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006884:	2b03      	cmp	r3, #3
 8006886:	d107      	bne.n	8006898 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006888:	f107 030f 	add.w	r3, r7, #15
 800688c:	2201      	movs	r2, #1
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f9f8 	bl	8007c86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006896:	e01a      	b.n	80068ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 f989 	bl	8007bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80068a0:	2302      	movs	r3, #2
 80068a2:	75fb      	strb	r3, [r7, #23]
          break;
 80068a4:	e013      	b.n	80068ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d00d      	beq.n	80068cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f97d 	bl	8007bb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068bc:	e006      	b.n	80068cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f976 	bl	8007bb2 <USBD_CtlError>
          ret = USBD_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	75fb      	strb	r3, [r7, #23]
          break;
 80068ca:	e000      	b.n	80068ce <USBD_CDC_Setup+0x12c>
          break;
 80068cc:	bf00      	nop
      }
      break;
 80068ce:	e006      	b.n	80068de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 f96d 	bl	8007bb2 <USBD_CtlError>
      ret = USBD_FAIL;
 80068d8:	2302      	movs	r3, #2
 80068da:	75fb      	strb	r3, [r7, #23]
      break;
 80068dc:	bf00      	nop
  }

  return ret;
 80068de:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006902:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690a:	2b00      	cmp	r3, #0
 800690c:	d03a      	beq.n	8006984 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800690e:	78fa      	ldrb	r2, [r7, #3]
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	331c      	adds	r3, #28
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d029      	beq.n	8006978 <USBD_CDC_DataIn+0x90>
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	331c      	adds	r3, #28
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	78f9      	ldrb	r1, [r7, #3]
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	460b      	mov	r3, r1
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	440b      	add	r3, r1
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4403      	add	r3, r0
 8006944:	3344      	adds	r3, #68	; 0x44
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	fbb2 f1f3 	udiv	r1, r2, r3
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d110      	bne.n	8006978 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	331c      	adds	r3, #28
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800696a:	78f9      	ldrb	r1, [r7, #3]
 800696c:	2300      	movs	r3, #0
 800696e:	2200      	movs	r2, #0
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fe67 	bl	8008644 <USBD_LL_Transmit>
 8006976:	e003      	b.n	8006980 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	e000      	b.n	8006986 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fe92 	bl	80086d0 <USBD_LL_GetRxDataSize>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80069d2:	4611      	mov	r1, r2
 80069d4:	4798      	blx	r3

    return USBD_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d015      	beq.n	8006a2a <USBD_CDC_EP0_RxReady+0x46>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a04:	2bff      	cmp	r3, #255	; 0xff
 8006a06:	d010      	beq.n	8006a2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2243      	movs	r2, #67	; 0x43
 8006a40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006a42:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000094 	.word	0x20000094

08006a54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2243      	movs	r2, #67	; 0x43
 8006a60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006a62:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000050 	.word	0x20000050

08006a74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2243      	movs	r2, #67	; 0x43
 8006a80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006a82:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	200000d8 	.word	0x200000d8

08006a94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006aa2:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c

08006ab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01c      	beq.n	8006b8c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d115      	bne.n	8006b88 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2181      	movs	r1, #129	; 0x81
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fd60 	bl	8008644 <USBD_LL_Transmit>

      return USBD_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e002      	b.n	8006b8e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006b8c:	2302      	movs	r3, #2
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d017      	beq.n	8006be0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7c1b      	ldrb	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fd60 	bl	800868a <USBD_LL_PrepareReceive>
 8006bca:	e007      	b.n	8006bdc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd2:	2340      	movs	r3, #64	; 0x40
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fd57 	bl	800868a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e000      	b.n	8006be2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006be0:	2302      	movs	r3, #2
  }
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e01a      	b.n	8006c38 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	79fa      	ldrb	r2, [r7, #7]
 8006c2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f001 fbdb 	bl	80083ec <USBD_LL_Init>

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d006      	beq.n	8006c62 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
 8006c60:	e001      	b.n	8006c66 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c62:	2302      	movs	r3, #2
 8006c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr

08006c72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fbfa 	bl	8008474 <USBD_LL_Start>

  return USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr

08006c9e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
 8006cac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00c      	beq.n	8006cd2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	78fa      	ldrb	r2, [r7, #3]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f000 ff10 	bl	8007b3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d016      	beq.n	8006d6c <USBD_LL_SetupStage+0x6a>
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d81c      	bhi.n	8006d7c <USBD_LL_SetupStage+0x7a>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <USBD_LL_SetupStage+0x4a>
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d008      	beq.n	8006d5c <USBD_LL_SetupStage+0x5a>
 8006d4a:	e017      	b.n	8006d7c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fa03 	bl	8007160 <USBD_StdDevReq>
      break;
 8006d5a:	e01a      	b.n	8006d92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa65 	bl	8007234 <USBD_StdItfReq>
      break;
 8006d6a:	e012      	b.n	8006d92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 faa5 	bl	80072c4 <USBD_StdEPReq>
      break;
 8006d7a:	e00a      	b.n	8006d92 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fbd2 	bl	8008534 <USBD_LL_StallEP>
      break;
 8006d90:	bf00      	nop
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	460b      	mov	r3, r1
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d14b      	bne.n	8006e48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006db6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d134      	bne.n	8006e2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d919      	bls.n	8006e02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d203      	bcs.n	8006df0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	e002      	b.n	8006df6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 ff8f 	bl	8007d1e <USBD_CtlContinueRx>
 8006e00:	e038      	b.n	8006e74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d105      	bne.n	8006e24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 ff8c 	bl	8007d42 <USBD_CtlSendStatus>
 8006e2a:	e023      	b.n	8006e74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d11e      	bne.n	8006e74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e3e:	2100      	movs	r1, #0
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f001 fb77 	bl	8008534 <USBD_LL_StallEP>
 8006e46:	e015      	b.n	8006e74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d108      	bne.n	8006e70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	7afa      	ldrb	r2, [r7, #11]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	4798      	blx	r3
 8006e6e:	e001      	b.n	8006e74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e70:	2302      	movs	r3, #2
 8006e72:	e000      	b.n	8006e76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b086      	sub	sp, #24
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	460b      	mov	r3, r1
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d17f      	bne.n	8006f92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3314      	adds	r3, #20
 8006e96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d15c      	bne.n	8006f5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d915      	bls.n	8006eda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 fef9 	bl	8007cbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 fbd9 	bl	800868a <USBD_LL_PrepareReceive>
 8006ed8:	e04e      	b.n	8006f78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	6912      	ldr	r2, [r2, #16]
 8006ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ee6:	fb01 f202 	mul.w	r2, r1, r2
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d11c      	bne.n	8006f2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d316      	bcc.n	8006f2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d20f      	bcs.n	8006f2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 fed5 	bl	8007cbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2100      	movs	r1, #0
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f001 fbb1 	bl	800868a <USBD_LL_PrepareReceive>
 8006f28:	e026      	b.n	8006f78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d105      	bne.n	8006f4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f001 faf0 	bl	8008534 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 ff07 	bl	8007d68 <USBD_CtlReceiveStatus>
 8006f5a:	e00d      	b.n	8006f78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d004      	beq.n	8006f70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f001 fade 	bl	8008534 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d11d      	bne.n	8006fbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff fe81 	bl	8006c8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f90:	e015      	b.n	8006fbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d108      	bne.n	8006fba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	7afa      	ldrb	r2, [r7, #11]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	4798      	blx	r3
 8006fb8:	e001      	b.n	8006fbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e000      	b.n	8006fc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd0:	2340      	movs	r3, #64	; 0x40
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fa67 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2240      	movs	r2, #64	; 0x40
 8006fe8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2180      	movs	r1, #128	; 0x80
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fa59 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2240      	movs	r2, #64	; 0x40
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6852      	ldr	r2, [r2, #4]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	4611      	mov	r1, r2
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
  }

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2204      	movs	r2, #4
 8007080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr

08007090 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d105      	bne.n	80070ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr

080070ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d10b      	bne.n	80070e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	460b      	mov	r3, r1
 8007110:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b082      	sub	sp, #8
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6852      	ldr	r2, [r2, #4]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	4611      	mov	r1, r2
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3

  return USBD_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007176:	2b40      	cmp	r3, #64	; 0x40
 8007178:	d005      	beq.n	8007186 <USBD_StdDevReq+0x26>
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d84f      	bhi.n	800721e <USBD_StdDevReq+0xbe>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <USBD_StdDevReq+0x36>
 8007182:	2b20      	cmp	r3, #32
 8007184:	d14b      	bne.n	800721e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
      break;
 8007194:	e048      	b.n	8007228 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b09      	cmp	r3, #9
 800719c:	d839      	bhi.n	8007212 <USBD_StdDevReq+0xb2>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBD_StdDevReq+0x44>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071f5 	.word	0x080071f5
 80071a8:	08007209 	.word	0x08007209
 80071ac:	08007213 	.word	0x08007213
 80071b0:	080071ff 	.word	0x080071ff
 80071b4:	08007213 	.word	0x08007213
 80071b8:	080071d7 	.word	0x080071d7
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	08007213 	.word	0x08007213
 80071c4:	080071eb 	.word	0x080071eb
 80071c8:	080071e1 	.word	0x080071e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f9dc 	bl	800758c <USBD_GetDescriptor>
          break;
 80071d4:	e022      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb3f 	bl	800785c <USBD_SetAddress>
          break;
 80071de:	e01d      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fb7e 	bl	80078e4 <USBD_SetConfig>
          break;
 80071e8:	e018      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc07 	bl	8007a00 <USBD_GetConfig>
          break;
 80071f2:	e013      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fc37 	bl	8007a6a <USBD_GetStatus>
          break;
 80071fc:	e00e      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc65 	bl	8007ad0 <USBD_SetFeature>
          break;
 8007206:	e009      	b.n	800721c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fc74 	bl	8007af8 <USBD_ClrFeature>
          break;
 8007210:	e004      	b.n	800721c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fccc 	bl	8007bb2 <USBD_CtlError>
          break;
 800721a:	bf00      	nop
      }
      break;
 800721c:	e004      	b.n	8007228 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fcc6 	bl	8007bb2 <USBD_CtlError>
      break;
 8007226:	bf00      	nop
  }

  return ret;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop

08007234 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d005      	beq.n	800725a <USBD_StdItfReq+0x26>
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d82e      	bhi.n	80072b0 <USBD_StdItfReq+0x7c>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <USBD_StdItfReq+0x26>
 8007256:	2b20      	cmp	r3, #32
 8007258:	d12a      	bne.n	80072b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	3b01      	subs	r3, #1
 8007262:	2b02      	cmp	r3, #2
 8007264:	d81d      	bhi.n	80072a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	889b      	ldrh	r3, [r3, #4]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d813      	bhi.n	8007298 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88db      	ldrh	r3, [r3, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d110      	bne.n	80072ac <USBD_StdItfReq+0x78>
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10d      	bne.n	80072ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fd56 	bl	8007d42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007296:	e009      	b.n	80072ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fc89 	bl	8007bb2 <USBD_CtlError>
          break;
 80072a0:	e004      	b.n	80072ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc84 	bl	8007bb2 <USBD_CtlError>
          break;
 80072aa:	e000      	b.n	80072ae <USBD_StdItfReq+0x7a>
          break;
 80072ac:	bf00      	nop
      }
      break;
 80072ae:	e004      	b.n	80072ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fc7d 	bl	8007bb2 <USBD_CtlError>
      break;
 80072b8:	bf00      	nop
  }

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	889b      	ldrh	r3, [r3, #4]
 80072d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e0:	2b40      	cmp	r3, #64	; 0x40
 80072e2:	d007      	beq.n	80072f4 <USBD_StdEPReq+0x30>
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	f200 8146 	bhi.w	8007576 <USBD_StdEPReq+0x2b2>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <USBD_StdEPReq+0x40>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	f040 8141 	bne.w	8007576 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
      break;
 8007302:	e13d      	b.n	8007580 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800730c:	2b20      	cmp	r3, #32
 800730e:	d10a      	bne.n	8007326 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	e12d      	b.n	8007582 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	785b      	ldrb	r3, [r3, #1]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d007      	beq.n	800733e <USBD_StdEPReq+0x7a>
 800732e:	2b03      	cmp	r3, #3
 8007330:	f300 811b 	bgt.w	800756a <USBD_StdEPReq+0x2a6>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d072      	beq.n	800741e <USBD_StdEPReq+0x15a>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d03a      	beq.n	80073b2 <USBD_StdEPReq+0xee>
 800733c:	e115      	b.n	800756a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007344:	2b02      	cmp	r3, #2
 8007346:	d002      	beq.n	800734e <USBD_StdEPReq+0x8a>
 8007348:	2b03      	cmp	r3, #3
 800734a:	d015      	beq.n	8007378 <USBD_StdEPReq+0xb4>
 800734c:	e02b      	b.n	80073a6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <USBD_StdEPReq+0xaa>
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b80      	cmp	r3, #128	; 0x80
 8007358:	d009      	beq.n	800736e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f8e8 	bl	8008534 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007364:	2180      	movs	r1, #128	; 0x80
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f8e4 	bl	8008534 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800736c:	e020      	b.n	80073b0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc1e 	bl	8007bb2 <USBD_CtlError>
              break;
 8007376:	e01b      	b.n	80073b0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	885b      	ldrh	r3, [r3, #2]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10e      	bne.n	800739e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <USBD_StdEPReq+0xda>
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d008      	beq.n	800739e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	88db      	ldrh	r3, [r3, #6]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f8cb 	bl	8008534 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fccf 	bl	8007d42 <USBD_CtlSendStatus>

              break;
 80073a4:	e004      	b.n	80073b0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc02 	bl	8007bb2 <USBD_CtlError>
              break;
 80073ae:	bf00      	nop
          }
          break;
 80073b0:	e0e0      	b.n	8007574 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d002      	beq.n	80073c2 <USBD_StdEPReq+0xfe>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d015      	beq.n	80073ec <USBD_StdEPReq+0x128>
 80073c0:	e026      	b.n	8007410 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <USBD_StdEPReq+0x11e>
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d009      	beq.n	80073e2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 f8ae 	bl	8008534 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073d8:	2180      	movs	r1, #128	; 0x80
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f8aa 	bl	8008534 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e0:	e01c      	b.n	800741c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fbe4 	bl	8007bb2 <USBD_CtlError>
              break;
 80073ea:	e017      	b.n	800741c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d112      	bne.n	800741a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d004      	beq.n	8007408 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 f8b5 	bl	8008572 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc9a 	bl	8007d42 <USBD_CtlSendStatus>
              }
              break;
 800740e:	e004      	b.n	800741a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fbcd 	bl	8007bb2 <USBD_CtlError>
              break;
 8007418:	e000      	b.n	800741c <USBD_StdEPReq+0x158>
              break;
 800741a:	bf00      	nop
          }
          break;
 800741c:	e0aa      	b.n	8007574 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b02      	cmp	r3, #2
 8007426:	d002      	beq.n	800742e <USBD_StdEPReq+0x16a>
 8007428:	2b03      	cmp	r3, #3
 800742a:	d032      	beq.n	8007492 <USBD_StdEPReq+0x1ce>
 800742c:	e097      	b.n	800755e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <USBD_StdEPReq+0x180>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d004      	beq.n	8007444 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fbb8 	bl	8007bb2 <USBD_CtlError>
                break;
 8007442:	e091      	b.n	8007568 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	da0b      	bge.n	8007464 <USBD_StdEPReq+0x1a0>
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	3310      	adds	r3, #16
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	3304      	adds	r3, #4
 8007462:	e00b      	b.n	800747c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	3304      	adds	r3, #4
 800747c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2202      	movs	r2, #2
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fbfb 	bl	8007c86 <USBD_CtlSendData>
              break;
 8007490:	e06a      	b.n	8007568 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	da11      	bge.n	80074be <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3318      	adds	r3, #24
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d117      	bne.n	80074e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fb7b 	bl	8007bb2 <USBD_CtlError>
                  break;
 80074bc:	e054      	b.n	8007568 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb68 	bl	8007bb2 <USBD_CtlError>
                  break;
 80074e2:	e041      	b.n	8007568 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da0b      	bge.n	8007504 <USBD_StdEPReq+0x240>
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	3310      	adds	r3, #16
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	e00b      	b.n	800751c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	4413      	add	r3, r2
 800751a:	3304      	adds	r3, #4
 800751c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <USBD_StdEPReq+0x266>
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b80      	cmp	r3, #128	; 0x80
 8007528:	d103      	bne.n	8007532 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e00e      	b.n	8007550 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f83a 	bl	80085b0 <USBD_LL_IsStallEP>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e002      	b.n	8007550 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2202      	movs	r2, #2
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb95 	bl	8007c86 <USBD_CtlSendData>
              break;
 800755c:	e004      	b.n	8007568 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb26 	bl	8007bb2 <USBD_CtlError>
              break;
 8007566:	bf00      	nop
          }
          break;
 8007568:	e004      	b.n	8007574 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fb20 	bl	8007bb2 <USBD_CtlError>
          break;
 8007572:	bf00      	nop
      }
      break;
 8007574:	e004      	b.n	8007580 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fb1a 	bl	8007bb2 <USBD_CtlError>
      break;
 800757e:	bf00      	nop
  }

  return ret;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	f200 8128 	bhi.w	8007802 <USBD_GetDescriptor+0x276>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <USBD_GetDescriptor+0x2c>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075d5 	.word	0x080075d5
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	08007803 	.word	0x08007803
 80075c8:	08007803 	.word	0x08007803
 80075cc:	080077a3 	.word	0x080077a3
 80075d0:	080077cf 	.word	0x080077cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
      break;
 80075ea:	e112      	b.n	8007812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7c1b      	ldrb	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f107 0208 	add.w	r2, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	2202      	movs	r2, #2
 800760c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800760e:	e100      	b.n	8007812 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	f107 0208 	add.w	r2, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	2202      	movs	r2, #2
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e0f2      	b.n	8007812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b05      	cmp	r3, #5
 8007634:	f200 80ac 	bhi.w	8007790 <USBD_GetDescriptor+0x204>
 8007638:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <USBD_GetDescriptor+0xb4>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007659 	.word	0x08007659
 8007644:	0800768d 	.word	0x0800768d
 8007648:	080076c1 	.word	0x080076c1
 800764c:	080076f5 	.word	0x080076f5
 8007650:	08007729 	.word	0x08007729
 8007654:	0800775d 	.word	0x0800775d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767a:	e091      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa97 	bl	8007bb2 <USBD_CtlError>
            err++;
 8007684:	7afb      	ldrb	r3, [r7, #11]
 8007686:	3301      	adds	r3, #1
 8007688:	72fb      	strb	r3, [r7, #11]
          break;
 800768a:	e089      	b.n	80077a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	7c12      	ldrb	r2, [r2, #16]
 80076a4:	f107 0108 	add.w	r1, r7, #8
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ae:	e077      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa7d 	bl	8007bb2 <USBD_CtlError>
            err++;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3301      	adds	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]
          break;
 80076be:	e06f      	b.n	80077a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	7c12      	ldrb	r2, [r2, #16]
 80076d8:	f107 0108 	add.w	r1, r7, #8
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
 80076e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e2:	e05d      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa63 	bl	8007bb2 <USBD_CtlError>
            err++;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	3301      	adds	r3, #1
 80076f0:	72fb      	strb	r3, [r7, #11]
          break;
 80076f2:	e055      	b.n	80077a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e043      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa49 	bl	8007bb2 <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e03b      	b.n	80077a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e029      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa2f 	bl	8007bb2 <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e021      	b.n	80077a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e00f      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa15 	bl	8007bb2 <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e007      	b.n	80077a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa0d 	bl	8007bb2 <USBD_CtlError>
          err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800779e:	e038      	b.n	8007812 <USBD_GetDescriptor+0x286>
 80077a0:	e037      	b.n	8007812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7c1b      	ldrb	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b2:	f107 0208 	add.w	r2, r7, #8
 80077b6:	4610      	mov	r0, r2
 80077b8:	4798      	blx	r3
 80077ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077bc:	e029      	b.n	8007812 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f9f6 	bl	8007bb2 <USBD_CtlError>
        err++;
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	3301      	adds	r3, #1
 80077ca:	72fb      	strb	r3, [r7, #11]
      break;
 80077cc:	e021      	b.n	8007812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	2207      	movs	r2, #7
 80077ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f0:	e00f      	b.n	8007812 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f9dc 	bl	8007bb2 <USBD_CtlError>
        err++;
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	3301      	adds	r3, #1
 80077fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007800:	e007      	b.n	8007812 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f9d4 	bl	8007bb2 <USBD_CtlError>
      err++;
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	3301      	adds	r3, #1
 800780e:	72fb      	strb	r3, [r7, #11]
      break;
 8007810:	bf00      	nop
  }

  if (err != 0U)
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d11c      	bne.n	8007852 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007818:	893b      	ldrh	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d011      	beq.n	8007842 <USBD_GetDescriptor+0x2b6>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	88db      	ldrh	r3, [r3, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00d      	beq.n	8007842 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	88da      	ldrh	r2, [r3, #6]
 800782a:	893b      	ldrh	r3, [r7, #8]
 800782c:	4293      	cmp	r3, r2
 800782e:	bf28      	it	cs
 8007830:	4613      	movcs	r3, r2
 8007832:	b29b      	uxth	r3, r3
 8007834:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007836:	893b      	ldrh	r3, [r7, #8]
 8007838:	461a      	mov	r2, r3
 800783a:	68f9      	ldr	r1, [r7, #12]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa22 	bl	8007c86 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	88db      	ldrh	r3, [r3, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa79 	bl	8007d42 <USBD_CtlSendStatus>
 8007850:	e000      	b.n	8007854 <USBD_GetDescriptor+0x2c8>
    return;
 8007852:	bf00      	nop
    }
  }
}
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop

0800785c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d130      	bne.n	80078d0 <USBD_SetAddress+0x74>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d12c      	bne.n	80078d0 <USBD_SetAddress+0x74>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	885b      	ldrh	r3, [r3, #2]
 800787a:	2b7f      	cmp	r3, #127	; 0x7f
 800787c:	d828      	bhi.n	80078d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007888:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	2b03      	cmp	r3, #3
 8007892:	d104      	bne.n	800789e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f98b 	bl	8007bb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	e01d      	b.n	80078da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 feab 	bl	8008606 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa46 	bl	8007d42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c4:	e009      	b.n	80078da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	e004      	b.n	80078da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f96d 	bl	8007bb2 <USBD_CtlError>
  }
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b41      	ldr	r3, [pc, #260]	; (80079fc <USBD_SetConfig+0x118>)
 80078f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078f8:	4b40      	ldr	r3, [pc, #256]	; (80079fc <USBD_SetConfig+0x118>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d904      	bls.n	800790a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f955 	bl	8007bb2 <USBD_CtlError>
 8007908:	e075      	b.n	80079f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007910:	2b02      	cmp	r3, #2
 8007912:	d002      	beq.n	800791a <USBD_SetConfig+0x36>
 8007914:	2b03      	cmp	r3, #3
 8007916:	d023      	beq.n	8007960 <USBD_SetConfig+0x7c>
 8007918:	e062      	b.n	80079e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800791a:	4b38      	ldr	r3, [pc, #224]	; (80079fc <USBD_SetConfig+0x118>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01a      	beq.n	8007958 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007922:	4b36      	ldr	r3, [pc, #216]	; (80079fc <USBD_SetConfig+0x118>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007934:	4b31      	ldr	r3, [pc, #196]	; (80079fc <USBD_SetConfig+0x118>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff f9af 	bl	8006c9e <USBD_SetClassConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	2b02      	cmp	r3, #2
 8007944:	d104      	bne.n	8007950 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f932 	bl	8007bb2 <USBD_CtlError>
            return;
 800794e:	e052      	b.n	80079f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f9f6 	bl	8007d42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007956:	e04e      	b.n	80079f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9f2 	bl	8007d42 <USBD_CtlSendStatus>
        break;
 800795e:	e04a      	b.n	80079f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007960:	4b26      	ldr	r3, [pc, #152]	; (80079fc <USBD_SetConfig+0x118>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d112      	bne.n	800798e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007970:	4b22      	ldr	r3, [pc, #136]	; (80079fc <USBD_SetConfig+0x118>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800797a:	4b20      	ldr	r3, [pc, #128]	; (80079fc <USBD_SetConfig+0x118>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff f9ab 	bl	8006cdc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9db 	bl	8007d42 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800798c:	e033      	b.n	80079f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800798e:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <USBD_SetConfig+0x118>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d01d      	beq.n	80079d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f999 	bl	8006cdc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <USBD_SetConfig+0x118>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079b4:	4b11      	ldr	r3, [pc, #68]	; (80079fc <USBD_SetConfig+0x118>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff f96f 	bl	8006c9e <USBD_SetClassConfig>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d104      	bne.n	80079d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8f2 	bl	8007bb2 <USBD_CtlError>
            return;
 80079ce:	e012      	b.n	80079f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f9b6 	bl	8007d42 <USBD_CtlSendStatus>
        break;
 80079d6:	e00e      	b.n	80079f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9b2 	bl	8007d42 <USBD_CtlSendStatus>
        break;
 80079de:	e00a      	b.n	80079f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8e5 	bl	8007bb2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <USBD_SetConfig+0x118>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff f974 	bl	8006cdc <USBD_ClrClassConfig>
        break;
 80079f4:	bf00      	nop
    }
  }
}
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200003d8 	.word	0x200003d8

08007a00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88db      	ldrh	r3, [r3, #6]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d004      	beq.n	8007a1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f8cc 	bl	8007bb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a1a:	e022      	b.n	8007a62 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	dc02      	bgt.n	8007a2c <USBD_GetConfig+0x2c>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dc03      	bgt.n	8007a32 <USBD_GetConfig+0x32>
 8007a2a:	e015      	b.n	8007a58 <USBD_GetConfig+0x58>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetConfig+0x48>
 8007a30:	e012      	b.n	8007a58 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f920 	bl	8007c86 <USBD_CtlSendData>
        break;
 8007a46:	e00c      	b.n	8007a62 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f918 	bl	8007c86 <USBD_CtlSendData>
        break;
 8007a56:	e004      	b.n	8007a62 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8a9 	bl	8007bb2 <USBD_CtlError>
        break;
 8007a60:	bf00      	nop
}
 8007a62:	bf00      	nop
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d81e      	bhi.n	8007abe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	88db      	ldrh	r3, [r3, #6]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d004      	beq.n	8007a92 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f891 	bl	8007bb2 <USBD_CtlError>
        break;
 8007a90:	e01a      	b.n	8007ac8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f043 0202 	orr.w	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8e5 	bl	8007c86 <USBD_CtlSendData>
      break;
 8007abc:	e004      	b.n	8007ac8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f876 	bl	8007bb2 <USBD_CtlError>
      break;
 8007ac6:	bf00      	nop
  }
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	885b      	ldrh	r3, [r3, #2]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d106      	bne.n	8007af0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f929 	bl	8007d42 <USBD_CtlSendStatus>
  }
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d80b      	bhi.n	8007b26 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d10c      	bne.n	8007b30 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f90f 	bl	8007d42 <USBD_CtlSendStatus>
      }
      break;
 8007b24:	e004      	b.n	8007b30 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f842 	bl	8007bb2 <USBD_CtlError>
      break;
 8007b2e:	e000      	b.n	8007b32 <USBD_ClrFeature+0x3a>
      break;
 8007b30:	bf00      	nop
  }
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781a      	ldrb	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	785a      	ldrb	r2, [r3, #1]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	3302      	adds	r3, #2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3303      	adds	r3, #3
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	3304      	adds	r3, #4
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	3305      	adds	r3, #5
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4413      	add	r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3306      	adds	r3, #6
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	3307      	adds	r3, #7
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	80da      	strh	r2, [r3, #6]

}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr

08007bb2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fcb8 	bl	8008534 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fcb4 	bl	8008534 <USBD_LL_StallEP>
}
 8007bcc:	bf00      	nop
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d032      	beq.n	8007c50 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f834 	bl	8007c58 <USBD_GetLen>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	75fa      	strb	r2, [r7, #23]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	7812      	ldrb	r2, [r2, #0]
 8007c0e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	75fa      	strb	r2, [r7, #23]
 8007c16:	461a      	mov	r2, r3
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c20:	e012      	b.n	8007c48 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	60fa      	str	r2, [r7, #12]
 8007c28:	7dfa      	ldrb	r2, [r7, #23]
 8007c2a:	1c51      	adds	r1, r2, #1
 8007c2c:	75f9      	strb	r1, [r7, #23]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	440a      	add	r2, r1
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	75fa      	strb	r2, [r7, #23]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4413      	add	r3, r2
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e8      	bne.n	8007c22 <USBD_GetString+0x4e>
    }
  }
}
 8007c50:	bf00      	nop
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c64:	e005      	b.n	8007c72 <USBD_GetLen+0x1a>
  {
    len++;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f5      	bne.n	8007c66 <USBD_GetLen+0xe>
  }

  return len;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	2100      	movs	r1, #0
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fcc8 	bl	8008644 <USBD_LL_Transmit>

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fcb6 	bl	8008644 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	4613      	mov	r3, r2
 8007cee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cf8:	88fa      	ldrh	r2, [r7, #6]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fcbb 	bl	800868a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fca9 	bl	800868a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d52:	2300      	movs	r3, #0
 8007d54:	2200      	movs	r2, #0
 8007d56:	2100      	movs	r1, #0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fc73 	bl	8008644 <USBD_LL_Transmit>

  return USBD_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2205      	movs	r2, #5
 8007d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fc83 	bl	800868a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USB_Transmit>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USB_Transmit(char* Buf, uint16_t Len)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007d9a:	887b      	ldrh	r3, [r7, #2]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f8c2 	bl	8007f28 <CDC_Transmit_FS>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007db0:	2200      	movs	r2, #0
 8007db2:	4912      	ldr	r1, [pc, #72]	; (8007dfc <MX_USB_DEVICE_Init+0x50>)
 8007db4:	4812      	ldr	r0, [pc, #72]	; (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007db6:	f7fe ff18 	bl	8006bea <USBD_Init>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dc0:	f7f9 fa3e 	bl	8001240 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dc4:	490f      	ldr	r1, [pc, #60]	; (8007e04 <MX_USB_DEVICE_Init+0x58>)
 8007dc6:	480e      	ldr	r0, [pc, #56]	; (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dc8:	f7fe ff3a 	bl	8006c40 <USBD_RegisterClass>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dd2:	f7f9 fa35 	bl	8001240 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007dd6:	490c      	ldr	r1, [pc, #48]	; (8007e08 <MX_USB_DEVICE_Init+0x5c>)
 8007dd8:	4809      	ldr	r0, [pc, #36]	; (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dda:	f7fe fe6b 	bl	8006ab4 <USBD_CDC_RegisterInterface>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007de4:	f7f9 fa2c 	bl	8001240 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007de8:	4805      	ldr	r0, [pc, #20]	; (8007e00 <MX_USB_DEVICE_Init+0x54>)
 8007dea:	f7fe ff42 	bl	8006c72 <USBD_Start>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007df4:	f7f9 fa24 	bl	8001240 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007df8:	bf00      	nop
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	2000012c 	.word	0x2000012c
 8007e00:	200003dc 	.word	0x200003dc
 8007e04:	20000018 	.word	0x20000018
 8007e08:	2000011c 	.word	0x2000011c

08007e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	4905      	ldr	r1, [pc, #20]	; (8007e28 <CDC_Init_FS+0x1c>)
 8007e14:	4805      	ldr	r0, [pc, #20]	; (8007e2c <CDC_Init_FS+0x20>)
 8007e16:	f7fe fe63 	bl	8006ae0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e1a:	4905      	ldr	r1, [pc, #20]	; (8007e30 <CDC_Init_FS+0x24>)
 8007e1c:	4803      	ldr	r0, [pc, #12]	; (8007e2c <CDC_Init_FS+0x20>)
 8007e1e:	f7fe fe78 	bl	8006b12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000aa0 	.word	0x20000aa0
 8007e2c:	200003dc 	.word	0x200003dc
 8007e30:	200006a0 	.word	0x200006a0

08007e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
	...

08007e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b23      	cmp	r3, #35	; 0x23
 8007e58:	d84a      	bhi.n	8007ef0 <CDC_Control_FS+0xac>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <CDC_Control_FS+0x1c>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007ef1 	.word	0x08007ef1
 8007e64:	08007ef1 	.word	0x08007ef1
 8007e68:	08007ef1 	.word	0x08007ef1
 8007e6c:	08007ef1 	.word	0x08007ef1
 8007e70:	08007ef1 	.word	0x08007ef1
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007ef1 	.word	0x08007ef1
 8007e7c:	08007ef1 	.word	0x08007ef1
 8007e80:	08007ef1 	.word	0x08007ef1
 8007e84:	08007ef1 	.word	0x08007ef1
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007ef1 	.word	0x08007ef1
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007ef1 	.word	0x08007ef1
 8007e98:	08007ef1 	.word	0x08007ef1
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ef1 	.word	0x08007ef1
 8007ea8:	08007ef1 	.word	0x08007ef1
 8007eac:	08007ef1 	.word	0x08007ef1
 8007eb0:	08007ef1 	.word	0x08007ef1
 8007eb4:	08007ef1 	.word	0x08007ef1
 8007eb8:	08007ef1 	.word	0x08007ef1
 8007ebc:	08007ef1 	.word	0x08007ef1
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ef1 	.word	0x08007ef1
 8007edc:	08007ef1 	.word	0x08007ef1
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007ef1 	.word	0x08007ef1
 8007ee8:	08007ef1 	.word	0x08007ef1
 8007eec:	08007ef1 	.word	0x08007ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ef0:	bf00      	nop
  }

  return (USBD_OK);
 8007ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4805      	ldr	r0, [pc, #20]	; (8007f24 <CDC_Receive_FS+0x24>)
 8007f0e:	f7fe fe00 	bl	8006b12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f12:	4804      	ldr	r0, [pc, #16]	; (8007f24 <CDC_Receive_FS+0x24>)
 8007f14:	f7fe fe3f 	bl	8006b96 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200003dc 	.word	0x200003dc

08007f28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f38:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <CDC_Transmit_FS+0x48>)
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e00b      	b.n	8007f66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4806      	ldr	r0, [pc, #24]	; (8007f70 <CDC_Transmit_FS+0x48>)
 8007f56:	f7fe fdc3 	bl	8006ae0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <CDC_Transmit_FS+0x48>)
 8007f5c:	f7fe fdec 	bl	8006b38 <USBD_CDC_TransmitPacket>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200003dc 	.word	0x200003dc

08007f74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2212      	movs	r2, #18
 8007f84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f86:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000148 	.word	0x20000148

08007f98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000015c 	.word	0x2000015c

08007fbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	6039      	str	r1, [r7, #0]
 8007fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d105      	bne.n	8007fda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	4907      	ldr	r1, [pc, #28]	; (8007ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fd2:	4808      	ldr	r0, [pc, #32]	; (8007ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fd4:	f7ff fdfe 	bl	8007bd4 <USBD_GetString>
 8007fd8:	e004      	b.n	8007fe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fde:	4805      	ldr	r0, [pc, #20]	; (8007ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fe0:	f7ff fdf8 	bl	8007bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000ea0 	.word	0x20000ea0
 8007ff4:	0800914c 	.word	0x0800914c

08007ff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	4904      	ldr	r1, [pc, #16]	; (8008018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008008:	4804      	ldr	r0, [pc, #16]	; (800801c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800800a:	f7ff fde3 	bl	8007bd4 <USBD_GetString>
  return USBD_StrDesc;
 800800e:	4b02      	ldr	r3, [pc, #8]	; (8008018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000ea0 	.word	0x20000ea0
 800801c:	08009164 	.word	0x08009164

08008020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	221a      	movs	r2, #26
 8008030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008032:	f000 f843 	bl	80080bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008036:	4b02      	ldr	r3, [pc, #8]	; (8008040 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20000160 	.word	0x20000160

08008044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4907      	ldr	r1, [pc, #28]	; (8008078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800805a:	4808      	ldr	r0, [pc, #32]	; (800807c <USBD_FS_ConfigStrDescriptor+0x38>)
 800805c:	f7ff fdba 	bl	8007bd4 <USBD_GetString>
 8008060:	e004      	b.n	800806c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4904      	ldr	r1, [pc, #16]	; (8008078 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008066:	4805      	ldr	r0, [pc, #20]	; (800807c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008068:	f7ff fdb4 	bl	8007bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000ea0 	.word	0x20000ea0
 800807c:	08009178 	.word	0x08009178

08008080 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	4603      	mov	r3, r0
 8008088:	6039      	str	r1, [r7, #0]
 800808a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d105      	bne.n	800809e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4907      	ldr	r1, [pc, #28]	; (80080b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008096:	4808      	ldr	r0, [pc, #32]	; (80080b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008098:	f7ff fd9c 	bl	8007bd4 <USBD_GetString>
 800809c:	e004      	b.n	80080a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080a4:	f7ff fd96 	bl	8007bd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a8:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000ea0 	.word	0x20000ea0
 80080b8:	08009184 	.word	0x08009184

080080bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <Get_SerialNum+0x44>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080c8:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <Get_SerialNum+0x48>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080ce:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <Get_SerialNum+0x4c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d009      	beq.n	80080f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080e2:	2208      	movs	r2, #8
 80080e4:	4909      	ldr	r1, [pc, #36]	; (800810c <Get_SerialNum+0x50>)
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f814 	bl	8008114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080ec:	2204      	movs	r2, #4
 80080ee:	4908      	ldr	r1, [pc, #32]	; (8008110 <Get_SerialNum+0x54>)
 80080f0:	68b8      	ldr	r0, [r7, #8]
 80080f2:	f000 f80f 	bl	8008114 <IntToUnicode>
  }
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	1ffff7e8 	.word	0x1ffff7e8
 8008104:	1ffff7ec 	.word	0x1ffff7ec
 8008108:	1ffff7f0 	.word	0x1ffff7f0
 800810c:	20000162 	.word	0x20000162
 8008110:	20000172 	.word	0x20000172

08008114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]
 800812a:	e027      	b.n	800817c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	0f1b      	lsrs	r3, r3, #28
 8008130:	2b09      	cmp	r3, #9
 8008132:	d80b      	bhi.n	800814c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	0f1b      	lsrs	r3, r3, #28
 8008138:	b2da      	uxtb	r2, r3
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4619      	mov	r1, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	440b      	add	r3, r1
 8008144:	3230      	adds	r2, #48	; 0x30
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e00a      	b.n	8008162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	0f1b      	lsrs	r3, r3, #28
 8008150:	b2da      	uxtb	r2, r3
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	4619      	mov	r1, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	440b      	add	r3, r1
 800815c:	3237      	adds	r2, #55	; 0x37
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	3301      	adds	r3, #1
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4413      	add	r3, r2
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	3301      	adds	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
 800817c:	7dfa      	ldrb	r2, [r7, #23]
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3d3      	bcc.n	800812c <IntToUnicode+0x18>
  }
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008198:	f107 0310 	add.w	r3, r7, #16
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	609a      	str	r2, [r3, #8]
 80081a4:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ae:	d12c      	bne.n	800820a <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b0:	4b18      	ldr	r3, [pc, #96]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	4a17      	ldr	r2, [pc, #92]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081b6:	f043 0304 	orr.w	r3, r3, #4
 80081ba:	6193      	str	r3, [r2, #24]
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80081c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	4619      	mov	r1, r3
 80081dc:	480e      	ldr	r0, [pc, #56]	; (8008218 <HAL_PCD_MspInit+0x88>)
 80081de:	f7f9 ff61 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081ec:	6153      	str	r3, [r2, #20]
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <HAL_PCD_MspInit+0x84>)
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081fa:	2200      	movs	r2, #0
 80081fc:	2100      	movs	r1, #0
 80081fe:	2043      	movs	r0, #67	; 0x43
 8008200:	f7f9 ff19 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008204:	2043      	movs	r0, #67	; 0x43
 8008206:	f7f9 ff32 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800820a:	bf00      	nop
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40021000 	.word	0x40021000
 8008218:	40010800 	.word	0x40010800

0800821c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f7fe fd65 	bl	8006d02 <USBD_LL_SetupStage>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	4619      	mov	r1, r3
 800826a:	f7fe fd97 	bl	8006d9c <USBD_LL_DataOutStage>
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3348      	adds	r3, #72	; 0x48
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4619      	mov	r1, r3
 800829e:	f7fe fdee 	bl	8006e7e <USBD_LL_DataInStage>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fefe 	bl	80070ba <USBD_LL_SOF>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d001      	beq.n	80082de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082da:	f7f8 ffb1 	bl	8001240 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082e4:	7bfa      	ldrb	r2, [r7, #15]
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe feae 	bl	800704a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fe67 	bl	8006fc8 <USBD_LL_Reset>
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fea8 	bl	8007068 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <HAL_PCD_SuspendCallback+0x48>)
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	4a03      	ldr	r2, [pc, #12]	; (800834c <HAL_PCD_SuspendCallback+0x48>)
 800833e:	f043 0306 	orr.w	r3, r3, #6
 8008342:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	e000ed00 	.word	0xe000ed00

08008350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fe96 	bl	8007090 <USBD_LL_Resume>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe febf 	bl	8007106 <USBD_LL_IsoOUTIncomplete>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fea1 	bl	80070ee <USBD_LL_IsoINIncomplete>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe feab 	bl	800711e <USBD_LL_DevConnected>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fea7 	bl	8007132 <USBD_LL_DevDisconnected>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d133      	bne.n	8008464 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083fc:	4a1c      	ldr	r2, [pc, #112]	; (8008470 <USBD_LL_Init+0x84>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <USBD_LL_Init+0x84>)
 8008408:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800840c:	4b18      	ldr	r3, [pc, #96]	; (8008470 <USBD_LL_Init+0x84>)
 800840e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008412:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008414:	4b16      	ldr	r3, [pc, #88]	; (8008470 <USBD_LL_Init+0x84>)
 8008416:	2204      	movs	r2, #4
 8008418:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <USBD_LL_Init+0x84>)
 800841c:	2202      	movs	r2, #2
 800841e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008420:	4b13      	ldr	r3, [pc, #76]	; (8008470 <USBD_LL_Init+0x84>)
 8008422:	2202      	movs	r2, #2
 8008424:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <USBD_LL_Init+0x84>)
 8008428:	2200      	movs	r2, #0
 800842a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <USBD_LL_Init+0x84>)
 800842e:	2200      	movs	r2, #0
 8008430:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <USBD_LL_Init+0x84>)
 8008434:	2201      	movs	r2, #1
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008438:	480d      	ldr	r0, [pc, #52]	; (8008470 <USBD_LL_Init+0x84>)
 800843a:	f7f9 ffe8 	bl	800240e <HAL_PCD_Init>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008444:	f7f8 fefc 	bl	8001240 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	4809      	ldr	r0, [pc, #36]	; (8008470 <USBD_LL_Init+0x84>)
 800844c:	f7fb f900 	bl	8003650 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008450:	2240      	movs	r2, #64	; 0x40
 8008452:	2100      	movs	r1, #0
 8008454:	4806      	ldr	r0, [pc, #24]	; (8008470 <USBD_LL_Init+0x84>)
 8008456:	f7fb f8b5 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800845a:	2280      	movs	r2, #128	; 0x80
 800845c:	2101      	movs	r1, #1
 800845e:	4804      	ldr	r0, [pc, #16]	; (8008470 <USBD_LL_Init+0x84>)
 8008460:	f7fb f8b0 	bl	80035c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	200010a0 	.word	0x200010a0

08008474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800848a:	4618      	mov	r0, r3
 800848c:	f7fa f8dc 	bl	8002648 <HAL_PCD_Start>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f944 	bl	8008724 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	70fb      	strb	r3, [r7, #3]
 80084bc:	460b      	mov	r3, r1
 80084be:	70bb      	strb	r3, [r7, #2]
 80084c0:	4613      	mov	r3, r2
 80084c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084d2:	78bb      	ldrb	r3, [r7, #2]
 80084d4:	883a      	ldrh	r2, [r7, #0]
 80084d6:	78f9      	ldrb	r1, [r7, #3]
 80084d8:	f7fa fd55 	bl	8002f86 <HAL_PCD_EP_Open>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f91e 	bl	8008724 <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fd9e 	bl	8003056 <HAL_PCD_EP_Close>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f8ff 	bl	8008724 <USBD_Get_USB_Status>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852a:	7bbb      	ldrb	r3, [r7, #14]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa fe43 	bl	80031de <HAL_PCD_EP_SetStall>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f8e0 	bl	8008724 <USBD_Get_USB_Status>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008568:	7bbb      	ldrb	r3, [r7, #14]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7fa fe86 	bl	80032a2 <HAL_PCD_EP_ClrStall>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f8c1 	bl	8008724 <USBD_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da0b      	bge.n	80085e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	333e      	adds	r3, #62	; 0x3e
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	e00b      	b.n	80085fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr

08008606 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7fa fc89 	bl	8002f3c <HAL_PCD_SetAddress>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f877 	bl	8008724 <USBD_Get_USB_Status>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863a:	7bbb      	ldrb	r3, [r7, #14]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	461a      	mov	r2, r3
 8008650:	460b      	mov	r3, r1
 8008652:	72fb      	strb	r3, [r7, #11]
 8008654:	4613      	mov	r3, r2
 8008656:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008666:	893b      	ldrh	r3, [r7, #8]
 8008668:	7af9      	ldrb	r1, [r7, #11]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	f7fa fd86 	bl	800317c <HAL_PCD_EP_Transmit>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f854 	bl	8008724 <USBD_Get_USB_Status>
 800867c:	4603      	mov	r3, r0
 800867e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008680:	7dbb      	ldrb	r3, [r7, #22]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b086      	sub	sp, #24
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	461a      	mov	r2, r3
 8008696:	460b      	mov	r3, r1
 8008698:	72fb      	strb	r3, [r7, #11]
 800869a:	4613      	mov	r3, r2
 800869c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086ac:	893b      	ldrh	r3, [r7, #8]
 80086ae:	7af9      	ldrb	r1, [r7, #11]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	f7fa fd1a 	bl	80030ea <HAL_PCD_EP_Receive>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f831 	bl	8008724 <USBD_Get_USB_Status>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fa fd31 	bl	800314e <HAL_PCD_EP_GetRxCount>
 80086ec:	4603      	mov	r3, r0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_static_malloc+0x14>)
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr
 800870c:	200015a4 	.word	0x200015a4

08008710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]

}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
	...

08008724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d817      	bhi.n	8008768 <USBD_Get_USB_Status+0x44>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBD_Get_USB_Status+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop

0800877c <siprintf>:
 800877c:	b40e      	push	{r1, r2, r3}
 800877e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008782:	b500      	push	{lr}
 8008784:	b09c      	sub	sp, #112	; 0x70
 8008786:	ab1d      	add	r3, sp, #116	; 0x74
 8008788:	9002      	str	r0, [sp, #8]
 800878a:	9006      	str	r0, [sp, #24]
 800878c:	9107      	str	r1, [sp, #28]
 800878e:	9104      	str	r1, [sp, #16]
 8008790:	4808      	ldr	r0, [pc, #32]	; (80087b4 <siprintf+0x38>)
 8008792:	4909      	ldr	r1, [pc, #36]	; (80087b8 <siprintf+0x3c>)
 8008794:	f853 2b04 	ldr.w	r2, [r3], #4
 8008798:	9105      	str	r1, [sp, #20]
 800879a:	6800      	ldr	r0, [r0, #0]
 800879c:	a902      	add	r1, sp, #8
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	f000 f8bc 	bl	800891c <_svfiprintf_r>
 80087a4:	2200      	movs	r2, #0
 80087a6:	9b02      	ldr	r3, [sp, #8]
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	b01c      	add	sp, #112	; 0x70
 80087ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b0:	b003      	add	sp, #12
 80087b2:	4770      	bx	lr
 80087b4:	200001c8 	.word	0x200001c8
 80087b8:	ffff0208 	.word	0xffff0208

080087bc <strncat>:
 80087bc:	b530      	push	{r4, r5, lr}
 80087be:	4604      	mov	r4, r0
 80087c0:	7825      	ldrb	r5, [r4, #0]
 80087c2:	4623      	mov	r3, r4
 80087c4:	3401      	adds	r4, #1
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	d1fa      	bne.n	80087c0 <strncat+0x4>
 80087ca:	3a01      	subs	r2, #1
 80087cc:	d304      	bcc.n	80087d8 <strncat+0x1c>
 80087ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d2:	f803 4b01 	strb.w	r4, [r3], #1
 80087d6:	b904      	cbnz	r4, 80087da <strncat+0x1e>
 80087d8:	bd30      	pop	{r4, r5, pc}
 80087da:	2a00      	cmp	r2, #0
 80087dc:	d1f5      	bne.n	80087ca <strncat+0xe>
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e7f3      	b.n	80087ca <strncat+0xe>

080087e2 <memset>:
 80087e2:	4603      	mov	r3, r0
 80087e4:	4402      	add	r2, r0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d100      	bne.n	80087ec <memset+0xa>
 80087ea:	4770      	bx	lr
 80087ec:	f803 1b01 	strb.w	r1, [r3], #1
 80087f0:	e7f9      	b.n	80087e6 <memset+0x4>
	...

080087f4 <__errno>:
 80087f4:	4b01      	ldr	r3, [pc, #4]	; (80087fc <__errno+0x8>)
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	200001c8 	.word	0x200001c8

08008800 <__libc_init_array>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	2600      	movs	r6, #0
 8008804:	4d0c      	ldr	r5, [pc, #48]	; (8008838 <__libc_init_array+0x38>)
 8008806:	4c0d      	ldr	r4, [pc, #52]	; (800883c <__libc_init_array+0x3c>)
 8008808:	1b64      	subs	r4, r4, r5
 800880a:	10a4      	asrs	r4, r4, #2
 800880c:	42a6      	cmp	r6, r4
 800880e:	d109      	bne.n	8008824 <__libc_init_array+0x24>
 8008810:	f000 fc7a 	bl	8009108 <_init>
 8008814:	2600      	movs	r6, #0
 8008816:	4d0a      	ldr	r5, [pc, #40]	; (8008840 <__libc_init_array+0x40>)
 8008818:	4c0a      	ldr	r4, [pc, #40]	; (8008844 <__libc_init_array+0x44>)
 800881a:	1b64      	subs	r4, r4, r5
 800881c:	10a4      	asrs	r4, r4, #2
 800881e:	42a6      	cmp	r6, r4
 8008820:	d105      	bne.n	800882e <__libc_init_array+0x2e>
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	f855 3b04 	ldr.w	r3, [r5], #4
 8008828:	4798      	blx	r3
 800882a:	3601      	adds	r6, #1
 800882c:	e7ee      	b.n	800880c <__libc_init_array+0xc>
 800882e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008832:	4798      	blx	r3
 8008834:	3601      	adds	r6, #1
 8008836:	e7f2      	b.n	800881e <__libc_init_array+0x1e>
 8008838:	08009610 	.word	0x08009610
 800883c:	08009610 	.word	0x08009610
 8008840:	08009610 	.word	0x08009610
 8008844:	08009614 	.word	0x08009614

08008848 <__retarget_lock_acquire_recursive>:
 8008848:	4770      	bx	lr

0800884a <__retarget_lock_release_recursive>:
 800884a:	4770      	bx	lr

0800884c <memcpy>:
 800884c:	440a      	add	r2, r1
 800884e:	4291      	cmp	r1, r2
 8008850:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008854:	d100      	bne.n	8008858 <memcpy+0xc>
 8008856:	4770      	bx	lr
 8008858:	b510      	push	{r4, lr}
 800885a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885e:	4291      	cmp	r1, r2
 8008860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008864:	d1f9      	bne.n	800885a <memcpy+0xe>
 8008866:	bd10      	pop	{r4, pc}

08008868 <__ssputs_r>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	461f      	mov	r7, r3
 800886e:	688e      	ldr	r6, [r1, #8]
 8008870:	4682      	mov	sl, r0
 8008872:	42be      	cmp	r6, r7
 8008874:	460c      	mov	r4, r1
 8008876:	4690      	mov	r8, r2
 8008878:	680b      	ldr	r3, [r1, #0]
 800887a:	d82c      	bhi.n	80088d6 <__ssputs_r+0x6e>
 800887c:	898a      	ldrh	r2, [r1, #12]
 800887e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008882:	d026      	beq.n	80088d2 <__ssputs_r+0x6a>
 8008884:	6965      	ldr	r5, [r4, #20]
 8008886:	6909      	ldr	r1, [r1, #16]
 8008888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800888c:	eba3 0901 	sub.w	r9, r3, r1
 8008890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008894:	1c7b      	adds	r3, r7, #1
 8008896:	444b      	add	r3, r9
 8008898:	106d      	asrs	r5, r5, #1
 800889a:	429d      	cmp	r5, r3
 800889c:	bf38      	it	cc
 800889e:	461d      	movcc	r5, r3
 80088a0:	0553      	lsls	r3, r2, #21
 80088a2:	d527      	bpl.n	80088f4 <__ssputs_r+0x8c>
 80088a4:	4629      	mov	r1, r5
 80088a6:	f000 f957 	bl	8008b58 <_malloc_r>
 80088aa:	4606      	mov	r6, r0
 80088ac:	b360      	cbz	r0, 8008908 <__ssputs_r+0xa0>
 80088ae:	464a      	mov	r2, r9
 80088b0:	6921      	ldr	r1, [r4, #16]
 80088b2:	f7ff ffcb 	bl	800884c <memcpy>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c0:	81a3      	strh	r3, [r4, #12]
 80088c2:	6126      	str	r6, [r4, #16]
 80088c4:	444e      	add	r6, r9
 80088c6:	6026      	str	r6, [r4, #0]
 80088c8:	463e      	mov	r6, r7
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	eba5 0509 	sub.w	r5, r5, r9
 80088d0:	60a5      	str	r5, [r4, #8]
 80088d2:	42be      	cmp	r6, r7
 80088d4:	d900      	bls.n	80088d8 <__ssputs_r+0x70>
 80088d6:	463e      	mov	r6, r7
 80088d8:	4632      	mov	r2, r6
 80088da:	4641      	mov	r1, r8
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	f000 fb8a 	bl	8008ff6 <memmove>
 80088e2:	2000      	movs	r0, #0
 80088e4:	68a3      	ldr	r3, [r4, #8]
 80088e6:	1b9b      	subs	r3, r3, r6
 80088e8:	60a3      	str	r3, [r4, #8]
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	4433      	add	r3, r6
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f4:	462a      	mov	r2, r5
 80088f6:	f000 fb4f 	bl	8008f98 <_realloc_r>
 80088fa:	4606      	mov	r6, r0
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d1e0      	bne.n	80088c2 <__ssputs_r+0x5a>
 8008900:	4650      	mov	r0, sl
 8008902:	6921      	ldr	r1, [r4, #16]
 8008904:	f000 fbb0 	bl	8009068 <_free_r>
 8008908:	230c      	movs	r3, #12
 800890a:	f8ca 3000 	str.w	r3, [sl]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	e7e9      	b.n	80088f0 <__ssputs_r+0x88>

0800891c <_svfiprintf_r>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	4698      	mov	r8, r3
 8008922:	898b      	ldrh	r3, [r1, #12]
 8008924:	4607      	mov	r7, r0
 8008926:	061b      	lsls	r3, r3, #24
 8008928:	460d      	mov	r5, r1
 800892a:	4614      	mov	r4, r2
 800892c:	b09d      	sub	sp, #116	; 0x74
 800892e:	d50e      	bpl.n	800894e <_svfiprintf_r+0x32>
 8008930:	690b      	ldr	r3, [r1, #16]
 8008932:	b963      	cbnz	r3, 800894e <_svfiprintf_r+0x32>
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	f000 f90f 	bl	8008b58 <_malloc_r>
 800893a:	6028      	str	r0, [r5, #0]
 800893c:	6128      	str	r0, [r5, #16]
 800893e:	b920      	cbnz	r0, 800894a <_svfiprintf_r+0x2e>
 8008940:	230c      	movs	r3, #12
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008948:	e0d0      	b.n	8008aec <_svfiprintf_r+0x1d0>
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	616b      	str	r3, [r5, #20]
 800894e:	2300      	movs	r3, #0
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	2320      	movs	r3, #32
 8008954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008958:	2330      	movs	r3, #48	; 0x30
 800895a:	f04f 0901 	mov.w	r9, #1
 800895e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008962:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008b04 <_svfiprintf_r+0x1e8>
 8008966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800896a:	4623      	mov	r3, r4
 800896c:	469a      	mov	sl, r3
 800896e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008972:	b10a      	cbz	r2, 8008978 <_svfiprintf_r+0x5c>
 8008974:	2a25      	cmp	r2, #37	; 0x25
 8008976:	d1f9      	bne.n	800896c <_svfiprintf_r+0x50>
 8008978:	ebba 0b04 	subs.w	fp, sl, r4
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x7a>
 800897e:	465b      	mov	r3, fp
 8008980:	4622      	mov	r2, r4
 8008982:	4629      	mov	r1, r5
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ff6f 	bl	8008868 <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80a9 	beq.w	8008ae2 <_svfiprintf_r+0x1c6>
 8008990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008992:	445a      	add	r2, fp
 8008994:	9209      	str	r2, [sp, #36]	; 0x24
 8008996:	f89a 3000 	ldrb.w	r3, [sl]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80a1 	beq.w	8008ae2 <_svfiprintf_r+0x1c6>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089aa:	f10a 0a01 	add.w	sl, sl, #1
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b6:	931a      	str	r3, [sp, #104]	; 0x68
 80089b8:	4654      	mov	r4, sl
 80089ba:	2205      	movs	r2, #5
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	4850      	ldr	r0, [pc, #320]	; (8008b04 <_svfiprintf_r+0x1e8>)
 80089c2:	f000 fb43 	bl	800904c <memchr>
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	b9d8      	cbnz	r0, 8008a02 <_svfiprintf_r+0xe6>
 80089ca:	06d0      	lsls	r0, r2, #27
 80089cc:	bf44      	itt	mi
 80089ce:	2320      	movmi	r3, #32
 80089d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d4:	0711      	lsls	r1, r2, #28
 80089d6:	bf44      	itt	mi
 80089d8:	232b      	movmi	r3, #43	; 0x2b
 80089da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089de:	f89a 3000 	ldrb.w	r3, [sl]
 80089e2:	2b2a      	cmp	r3, #42	; 0x2a
 80089e4:	d015      	beq.n	8008a12 <_svfiprintf_r+0xf6>
 80089e6:	4654      	mov	r4, sl
 80089e8:	2000      	movs	r0, #0
 80089ea:	f04f 0c0a 	mov.w	ip, #10
 80089ee:	9a07      	ldr	r2, [sp, #28]
 80089f0:	4621      	mov	r1, r4
 80089f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f6:	3b30      	subs	r3, #48	; 0x30
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	d94d      	bls.n	8008a98 <_svfiprintf_r+0x17c>
 80089fc:	b1b0      	cbz	r0, 8008a2c <_svfiprintf_r+0x110>
 80089fe:	9207      	str	r2, [sp, #28]
 8008a00:	e014      	b.n	8008a2c <_svfiprintf_r+0x110>
 8008a02:	eba0 0308 	sub.w	r3, r0, r8
 8008a06:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	46a2      	mov	sl, r4
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	e7d2      	b.n	80089b8 <_svfiprintf_r+0x9c>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9103      	str	r1, [sp, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfbb      	ittet	lt
 8008a1e:	425b      	neglt	r3, r3
 8008a20:	f042 0202 	orrlt.w	r2, r2, #2
 8008a24:	9307      	strge	r3, [sp, #28]
 8008a26:	9307      	strlt	r3, [sp, #28]
 8008a28:	bfb8      	it	lt
 8008a2a:	9204      	strlt	r2, [sp, #16]
 8008a2c:	7823      	ldrb	r3, [r4, #0]
 8008a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a30:	d10c      	bne.n	8008a4c <_svfiprintf_r+0x130>
 8008a32:	7863      	ldrb	r3, [r4, #1]
 8008a34:	2b2a      	cmp	r3, #42	; 0x2a
 8008a36:	d134      	bne.n	8008aa2 <_svfiprintf_r+0x186>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	3402      	adds	r4, #2
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008b08 <_svfiprintf_r+0x1ec>
 8008a50:	2203      	movs	r2, #3
 8008a52:	4650      	mov	r0, sl
 8008a54:	7821      	ldrb	r1, [r4, #0]
 8008a56:	f000 faf9 	bl	800904c <memchr>
 8008a5a:	b138      	cbz	r0, 8008a6c <_svfiprintf_r+0x150>
 8008a5c:	2240      	movs	r2, #64	; 0x40
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	eba0 000a 	sub.w	r0, r0, sl
 8008a64:	4082      	lsls	r2, r0
 8008a66:	4313      	orrs	r3, r2
 8008a68:	3401      	adds	r4, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a70:	2206      	movs	r2, #6
 8008a72:	4826      	ldr	r0, [pc, #152]	; (8008b0c <_svfiprintf_r+0x1f0>)
 8008a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a78:	f000 fae8 	bl	800904c <memchr>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d038      	beq.n	8008af2 <_svfiprintf_r+0x1d6>
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <_svfiprintf_r+0x1f4>)
 8008a82:	bb1b      	cbnz	r3, 8008acc <_svfiprintf_r+0x1b0>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	3307      	adds	r3, #7
 8008a88:	f023 0307 	bic.w	r3, r3, #7
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a92:	4433      	add	r3, r6
 8008a94:	9309      	str	r3, [sp, #36]	; 0x24
 8008a96:	e768      	b.n	800896a <_svfiprintf_r+0x4e>
 8008a98:	460c      	mov	r4, r1
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa0:	e7a6      	b.n	80089f0 <_svfiprintf_r+0xd4>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f04f 0c0a 	mov.w	ip, #10
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	3401      	adds	r4, #1
 8008aac:	9305      	str	r3, [sp, #20]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab4:	3a30      	subs	r2, #48	; 0x30
 8008ab6:	2a09      	cmp	r2, #9
 8008ab8:	d903      	bls.n	8008ac2 <_svfiprintf_r+0x1a6>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0c6      	beq.n	8008a4c <_svfiprintf_r+0x130>
 8008abe:	9105      	str	r1, [sp, #20]
 8008ac0:	e7c4      	b.n	8008a4c <_svfiprintf_r+0x130>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aca:	e7f0      	b.n	8008aae <_svfiprintf_r+0x192>
 8008acc:	ab03      	add	r3, sp, #12
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <_svfiprintf_r+0x1f8>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	f3af 8000 	nop.w
 8008adc:	1c42      	adds	r2, r0, #1
 8008ade:	4606      	mov	r6, r0
 8008ae0:	d1d6      	bne.n	8008a90 <_svfiprintf_r+0x174>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	065b      	lsls	r3, r3, #25
 8008ae6:	f53f af2d 	bmi.w	8008944 <_svfiprintf_r+0x28>
 8008aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aec:	b01d      	add	sp, #116	; 0x74
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	ab03      	add	r3, sp, #12
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	462a      	mov	r2, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <_svfiprintf_r+0x1f8>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	f000 f91d 	bl	8008d3c <_printf_i>
 8008b02:	e7eb      	b.n	8008adc <_svfiprintf_r+0x1c0>
 8008b04:	080095d4 	.word	0x080095d4
 8008b08:	080095da 	.word	0x080095da
 8008b0c:	080095de 	.word	0x080095de
 8008b10:	00000000 	.word	0x00000000
 8008b14:	08008869 	.word	0x08008869

08008b18 <sbrk_aligned>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4e0e      	ldr	r6, [pc, #56]	; (8008b54 <sbrk_aligned+0x3c>)
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	6831      	ldr	r1, [r6, #0]
 8008b20:	4605      	mov	r5, r0
 8008b22:	b911      	cbnz	r1, 8008b2a <sbrk_aligned+0x12>
 8008b24:	f000 fa82 	bl	800902c <_sbrk_r>
 8008b28:	6030      	str	r0, [r6, #0]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 fa7d 	bl	800902c <_sbrk_r>
 8008b32:	1c43      	adds	r3, r0, #1
 8008b34:	d00a      	beq.n	8008b4c <sbrk_aligned+0x34>
 8008b36:	1cc4      	adds	r4, r0, #3
 8008b38:	f024 0403 	bic.w	r4, r4, #3
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d007      	beq.n	8008b50 <sbrk_aligned+0x38>
 8008b40:	1a21      	subs	r1, r4, r0
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 fa72 	bl	800902c <_sbrk_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d101      	bne.n	8008b50 <sbrk_aligned+0x38>
 8008b4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b50:	4620      	mov	r0, r4
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	20001904 	.word	0x20001904

08008b58 <_malloc_r>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	1ccd      	adds	r5, r1, #3
 8008b5e:	f025 0503 	bic.w	r5, r5, #3
 8008b62:	3508      	adds	r5, #8
 8008b64:	2d0c      	cmp	r5, #12
 8008b66:	bf38      	it	cc
 8008b68:	250c      	movcc	r5, #12
 8008b6a:	2d00      	cmp	r5, #0
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	db01      	blt.n	8008b74 <_malloc_r+0x1c>
 8008b70:	42a9      	cmp	r1, r5
 8008b72:	d905      	bls.n	8008b80 <_malloc_r+0x28>
 8008b74:	230c      	movs	r3, #12
 8008b76:	2600      	movs	r6, #0
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c54 <_malloc_r+0xfc>
 8008b84:	f000 f9fc 	bl	8008f80 <__malloc_lock>
 8008b88:	f8d8 3000 	ldr.w	r3, [r8]
 8008b8c:	461c      	mov	r4, r3
 8008b8e:	bb5c      	cbnz	r4, 8008be8 <_malloc_r+0x90>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7ff ffc0 	bl	8008b18 <sbrk_aligned>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	d155      	bne.n	8008c4a <_malloc_r+0xf2>
 8008b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8008ba2:	4626      	mov	r6, r4
 8008ba4:	2e00      	cmp	r6, #0
 8008ba6:	d145      	bne.n	8008c34 <_malloc_r+0xdc>
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d048      	beq.n	8008c3e <_malloc_r+0xe6>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	eb04 0903 	add.w	r9, r4, r3
 8008bb6:	f000 fa39 	bl	800902c <_sbrk_r>
 8008bba:	4581      	cmp	r9, r0
 8008bbc:	d13f      	bne.n	8008c3e <_malloc_r+0xe6>
 8008bbe:	6821      	ldr	r1, [r4, #0]
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	1a6d      	subs	r5, r5, r1
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7ff ffa7 	bl	8008b18 <sbrk_aligned>
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d037      	beq.n	8008c3e <_malloc_r+0xe6>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	442b      	add	r3, r5
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d038      	beq.n	8008c4e <_malloc_r+0xf6>
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	42a2      	cmp	r2, r4
 8008be0:	d12b      	bne.n	8008c3a <_malloc_r+0xe2>
 8008be2:	2200      	movs	r2, #0
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	e00f      	b.n	8008c08 <_malloc_r+0xb0>
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	1b52      	subs	r2, r2, r5
 8008bec:	d41f      	bmi.n	8008c2e <_malloc_r+0xd6>
 8008bee:	2a0b      	cmp	r2, #11
 8008bf0:	d917      	bls.n	8008c22 <_malloc_r+0xca>
 8008bf2:	1961      	adds	r1, r4, r5
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	6025      	str	r5, [r4, #0]
 8008bf8:	bf18      	it	ne
 8008bfa:	6059      	strne	r1, [r3, #4]
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	bf08      	it	eq
 8008c00:	f8c8 1000 	streq.w	r1, [r8]
 8008c04:	5162      	str	r2, [r4, r5]
 8008c06:	604b      	str	r3, [r1, #4]
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f104 060b 	add.w	r6, r4, #11
 8008c0e:	f000 f9bd 	bl	8008f8c <__malloc_unlock>
 8008c12:	f026 0607 	bic.w	r6, r6, #7
 8008c16:	1d23      	adds	r3, r4, #4
 8008c18:	1af2      	subs	r2, r6, r3
 8008c1a:	d0ae      	beq.n	8008b7a <_malloc_r+0x22>
 8008c1c:	1b9b      	subs	r3, r3, r6
 8008c1e:	50a3      	str	r3, [r4, r2]
 8008c20:	e7ab      	b.n	8008b7a <_malloc_r+0x22>
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	6862      	ldr	r2, [r4, #4]
 8008c26:	d1dd      	bne.n	8008be4 <_malloc_r+0x8c>
 8008c28:	f8c8 2000 	str.w	r2, [r8]
 8008c2c:	e7ec      	b.n	8008c08 <_malloc_r+0xb0>
 8008c2e:	4623      	mov	r3, r4
 8008c30:	6864      	ldr	r4, [r4, #4]
 8008c32:	e7ac      	b.n	8008b8e <_malloc_r+0x36>
 8008c34:	4634      	mov	r4, r6
 8008c36:	6876      	ldr	r6, [r6, #4]
 8008c38:	e7b4      	b.n	8008ba4 <_malloc_r+0x4c>
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	e7cc      	b.n	8008bd8 <_malloc_r+0x80>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	4638      	mov	r0, r7
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	f000 f9a2 	bl	8008f8c <__malloc_unlock>
 8008c48:	e797      	b.n	8008b7a <_malloc_r+0x22>
 8008c4a:	6025      	str	r5, [r4, #0]
 8008c4c:	e7dc      	b.n	8008c08 <_malloc_r+0xb0>
 8008c4e:	605b      	str	r3, [r3, #4]
 8008c50:	deff      	udf	#255	; 0xff
 8008c52:	bf00      	nop
 8008c54:	20001900 	.word	0x20001900

08008c58 <_printf_common>:
 8008c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	4616      	mov	r6, r2
 8008c5e:	4699      	mov	r9, r3
 8008c60:	688a      	ldr	r2, [r1, #8]
 8008c62:	690b      	ldr	r3, [r1, #16]
 8008c64:	4607      	mov	r7, r0
 8008c66:	4293      	cmp	r3, r2
 8008c68:	bfb8      	it	lt
 8008c6a:	4613      	movlt	r3, r2
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c72:	460c      	mov	r4, r1
 8008c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c78:	b10a      	cbz	r2, 8008c7e <_printf_common+0x26>
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	6033      	str	r3, [r6, #0]
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	0699      	lsls	r1, r3, #26
 8008c82:	bf42      	ittt	mi
 8008c84:	6833      	ldrmi	r3, [r6, #0]
 8008c86:	3302      	addmi	r3, #2
 8008c88:	6033      	strmi	r3, [r6, #0]
 8008c8a:	6825      	ldr	r5, [r4, #0]
 8008c8c:	f015 0506 	ands.w	r5, r5, #6
 8008c90:	d106      	bne.n	8008ca0 <_printf_common+0x48>
 8008c92:	f104 0a19 	add.w	sl, r4, #25
 8008c96:	68e3      	ldr	r3, [r4, #12]
 8008c98:	6832      	ldr	r2, [r6, #0]
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	42ab      	cmp	r3, r5
 8008c9e:	dc2b      	bgt.n	8008cf8 <_printf_common+0xa0>
 8008ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ca4:	1e13      	subs	r3, r2, #0
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	bf18      	it	ne
 8008caa:	2301      	movne	r3, #1
 8008cac:	0692      	lsls	r2, r2, #26
 8008cae:	d430      	bmi.n	8008d12 <_printf_common+0xba>
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d023      	beq.n	8008d06 <_printf_common+0xae>
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	6922      	ldr	r2, [r4, #16]
 8008cc2:	f003 0306 	and.w	r3, r3, #6
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	bf14      	ite	ne
 8008cca:	2500      	movne	r5, #0
 8008ccc:	6833      	ldreq	r3, [r6, #0]
 8008cce:	f04f 0600 	mov.w	r6, #0
 8008cd2:	bf08      	it	eq
 8008cd4:	68e5      	ldreq	r5, [r4, #12]
 8008cd6:	f104 041a 	add.w	r4, r4, #26
 8008cda:	bf08      	it	eq
 8008cdc:	1aed      	subeq	r5, r5, r3
 8008cde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ce2:	bf08      	it	eq
 8008ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	bfc4      	itt	gt
 8008cec:	1a9b      	subgt	r3, r3, r2
 8008cee:	18ed      	addgt	r5, r5, r3
 8008cf0:	42b5      	cmp	r5, r6
 8008cf2:	d11a      	bne.n	8008d2a <_printf_common+0xd2>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e008      	b.n	8008d0a <_printf_common+0xb2>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c0      	blx	r8
 8008d02:	3001      	adds	r0, #1
 8008d04:	d103      	bne.n	8008d0e <_printf_common+0xb6>
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	3501      	adds	r5, #1
 8008d10:	e7c1      	b.n	8008c96 <_printf_common+0x3e>
 8008d12:	2030      	movs	r0, #48	; 0x30
 8008d14:	18e1      	adds	r1, r4, r3
 8008d16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d20:	4422      	add	r2, r4
 8008d22:	3302      	adds	r3, #2
 8008d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d28:	e7c2      	b.n	8008cb0 <_printf_common+0x58>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4649      	mov	r1, r9
 8008d30:	4638      	mov	r0, r7
 8008d32:	47c0      	blx	r8
 8008d34:	3001      	adds	r0, #1
 8008d36:	d0e6      	beq.n	8008d06 <_printf_common+0xae>
 8008d38:	3601      	adds	r6, #1
 8008d3a:	e7d9      	b.n	8008cf0 <_printf_common+0x98>

08008d3c <_printf_i>:
 8008d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	7e0f      	ldrb	r7, [r1, #24]
 8008d42:	4691      	mov	r9, r2
 8008d44:	2f78      	cmp	r7, #120	; 0x78
 8008d46:	4680      	mov	r8, r0
 8008d48:	460c      	mov	r4, r1
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d52:	d807      	bhi.n	8008d64 <_printf_i+0x28>
 8008d54:	2f62      	cmp	r7, #98	; 0x62
 8008d56:	d80a      	bhi.n	8008d6e <_printf_i+0x32>
 8008d58:	2f00      	cmp	r7, #0
 8008d5a:	f000 80d5 	beq.w	8008f08 <_printf_i+0x1cc>
 8008d5e:	2f58      	cmp	r7, #88	; 0x58
 8008d60:	f000 80c1 	beq.w	8008ee6 <_printf_i+0x1aa>
 8008d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d6c:	e03a      	b.n	8008de4 <_printf_i+0xa8>
 8008d6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d72:	2b15      	cmp	r3, #21
 8008d74:	d8f6      	bhi.n	8008d64 <_printf_i+0x28>
 8008d76:	a101      	add	r1, pc, #4	; (adr r1, 8008d7c <_printf_i+0x40>)
 8008d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d7c:	08008dd5 	.word	0x08008dd5
 8008d80:	08008de9 	.word	0x08008de9
 8008d84:	08008d65 	.word	0x08008d65
 8008d88:	08008d65 	.word	0x08008d65
 8008d8c:	08008d65 	.word	0x08008d65
 8008d90:	08008d65 	.word	0x08008d65
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008d65 	.word	0x08008d65
 8008d9c:	08008d65 	.word	0x08008d65
 8008da0:	08008d65 	.word	0x08008d65
 8008da4:	08008d65 	.word	0x08008d65
 8008da8:	08008eef 	.word	0x08008eef
 8008dac:	08008e15 	.word	0x08008e15
 8008db0:	08008ea9 	.word	0x08008ea9
 8008db4:	08008d65 	.word	0x08008d65
 8008db8:	08008d65 	.word	0x08008d65
 8008dbc:	08008f11 	.word	0x08008f11
 8008dc0:	08008d65 	.word	0x08008d65
 8008dc4:	08008e15 	.word	0x08008e15
 8008dc8:	08008d65 	.word	0x08008d65
 8008dcc:	08008d65 	.word	0x08008d65
 8008dd0:	08008eb1 	.word	0x08008eb1
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	1d1a      	adds	r2, r3, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	602a      	str	r2, [r5, #0]
 8008ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0a0      	b.n	8008f2a <_printf_i+0x1ee>
 8008de8:	6820      	ldr	r0, [r4, #0]
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	0607      	lsls	r7, r0, #24
 8008dee:	f103 0104 	add.w	r1, r3, #4
 8008df2:	6029      	str	r1, [r5, #0]
 8008df4:	d501      	bpl.n	8008dfa <_printf_i+0xbe>
 8008df6:	681e      	ldr	r6, [r3, #0]
 8008df8:	e003      	b.n	8008e02 <_printf_i+0xc6>
 8008dfa:	0646      	lsls	r6, r0, #25
 8008dfc:	d5fb      	bpl.n	8008df6 <_printf_i+0xba>
 8008dfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	da03      	bge.n	8008e0e <_printf_i+0xd2>
 8008e06:	232d      	movs	r3, #45	; 0x2d
 8008e08:	4276      	negs	r6, r6
 8008e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0e:	230a      	movs	r3, #10
 8008e10:	4859      	ldr	r0, [pc, #356]	; (8008f78 <_printf_i+0x23c>)
 8008e12:	e012      	b.n	8008e3a <_printf_i+0xfe>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	1d19      	adds	r1, r3, #4
 8008e1a:	6029      	str	r1, [r5, #0]
 8008e1c:	0605      	lsls	r5, r0, #24
 8008e1e:	d501      	bpl.n	8008e24 <_printf_i+0xe8>
 8008e20:	681e      	ldr	r6, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <_printf_i+0xee>
 8008e24:	0641      	lsls	r1, r0, #25
 8008e26:	d5fb      	bpl.n	8008e20 <_printf_i+0xe4>
 8008e28:	881e      	ldrh	r6, [r3, #0]
 8008e2a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e2c:	bf0c      	ite	eq
 8008e2e:	2308      	moveq	r3, #8
 8008e30:	230a      	movne	r3, #10
 8008e32:	4851      	ldr	r0, [pc, #324]	; (8008f78 <_printf_i+0x23c>)
 8008e34:	2100      	movs	r1, #0
 8008e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e3a:	6865      	ldr	r5, [r4, #4]
 8008e3c:	2d00      	cmp	r5, #0
 8008e3e:	bfa8      	it	ge
 8008e40:	6821      	ldrge	r1, [r4, #0]
 8008e42:	60a5      	str	r5, [r4, #8]
 8008e44:	bfa4      	itt	ge
 8008e46:	f021 0104 	bicge.w	r1, r1, #4
 8008e4a:	6021      	strge	r1, [r4, #0]
 8008e4c:	b90e      	cbnz	r6, 8008e52 <_printf_i+0x116>
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	d04b      	beq.n	8008eea <_printf_i+0x1ae>
 8008e52:	4615      	mov	r5, r2
 8008e54:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e58:	fb03 6711 	mls	r7, r3, r1, r6
 8008e5c:	5dc7      	ldrb	r7, [r0, r7]
 8008e5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e62:	4637      	mov	r7, r6
 8008e64:	42bb      	cmp	r3, r7
 8008e66:	460e      	mov	r6, r1
 8008e68:	d9f4      	bls.n	8008e54 <_printf_i+0x118>
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d10b      	bne.n	8008e86 <_printf_i+0x14a>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07de      	lsls	r6, r3, #31
 8008e72:	d508      	bpl.n	8008e86 <_printf_i+0x14a>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	6861      	ldr	r1, [r4, #4]
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	bfde      	ittt	le
 8008e7c:	2330      	movle	r3, #48	; 0x30
 8008e7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e86:	1b52      	subs	r2, r2, r5
 8008e88:	6122      	str	r2, [r4, #16]
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f8cd a000 	str.w	sl, [sp]
 8008e94:	aa03      	add	r2, sp, #12
 8008e96:	f7ff fedf 	bl	8008c58 <_printf_common>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d14a      	bne.n	8008f34 <_printf_i+0x1f8>
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea2:	b004      	add	sp, #16
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	f043 0320 	orr.w	r3, r3, #32
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	2778      	movs	r7, #120	; 0x78
 8008eb2:	4832      	ldr	r0, [pc, #200]	; (8008f7c <_printf_i+0x240>)
 8008eb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	6829      	ldr	r1, [r5, #0]
 8008ebc:	061f      	lsls	r7, r3, #24
 8008ebe:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ec2:	d402      	bmi.n	8008eca <_printf_i+0x18e>
 8008ec4:	065f      	lsls	r7, r3, #25
 8008ec6:	bf48      	it	mi
 8008ec8:	b2b6      	uxthmi	r6, r6
 8008eca:	07df      	lsls	r7, r3, #31
 8008ecc:	bf48      	it	mi
 8008ece:	f043 0320 	orrmi.w	r3, r3, #32
 8008ed2:	6029      	str	r1, [r5, #0]
 8008ed4:	bf48      	it	mi
 8008ed6:	6023      	strmi	r3, [r4, #0]
 8008ed8:	b91e      	cbnz	r6, 8008ee2 <_printf_i+0x1a6>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f023 0320 	bic.w	r3, r3, #32
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	2310      	movs	r3, #16
 8008ee4:	e7a6      	b.n	8008e34 <_printf_i+0xf8>
 8008ee6:	4824      	ldr	r0, [pc, #144]	; (8008f78 <_printf_i+0x23c>)
 8008ee8:	e7e4      	b.n	8008eb4 <_printf_i+0x178>
 8008eea:	4615      	mov	r5, r2
 8008eec:	e7bd      	b.n	8008e6a <_printf_i+0x12e>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	6826      	ldr	r6, [r4, #0]
 8008ef2:	1d18      	adds	r0, r3, #4
 8008ef4:	6961      	ldr	r1, [r4, #20]
 8008ef6:	6028      	str	r0, [r5, #0]
 8008ef8:	0635      	lsls	r5, r6, #24
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	d501      	bpl.n	8008f02 <_printf_i+0x1c6>
 8008efe:	6019      	str	r1, [r3, #0]
 8008f00:	e002      	b.n	8008f08 <_printf_i+0x1cc>
 8008f02:	0670      	lsls	r0, r6, #25
 8008f04:	d5fb      	bpl.n	8008efe <_printf_i+0x1c2>
 8008f06:	8019      	strh	r1, [r3, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4615      	mov	r5, r2
 8008f0c:	6123      	str	r3, [r4, #16]
 8008f0e:	e7bc      	b.n	8008e8a <_printf_i+0x14e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	2100      	movs	r1, #0
 8008f14:	1d1a      	adds	r2, r3, #4
 8008f16:	602a      	str	r2, [r5, #0]
 8008f18:	681d      	ldr	r5, [r3, #0]
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f000 f895 	bl	800904c <memchr>
 8008f22:	b108      	cbz	r0, 8008f28 <_printf_i+0x1ec>
 8008f24:	1b40      	subs	r0, r0, r5
 8008f26:	6060      	str	r0, [r4, #4]
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f32:	e7aa      	b.n	8008e8a <_printf_i+0x14e>
 8008f34:	462a      	mov	r2, r5
 8008f36:	4649      	mov	r1, r9
 8008f38:	4640      	mov	r0, r8
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	47d0      	blx	sl
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d0ad      	beq.n	8008e9e <_printf_i+0x162>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	079b      	lsls	r3, r3, #30
 8008f46:	d413      	bmi.n	8008f70 <_printf_i+0x234>
 8008f48:	68e0      	ldr	r0, [r4, #12]
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	4298      	cmp	r0, r3
 8008f4e:	bfb8      	it	lt
 8008f50:	4618      	movlt	r0, r3
 8008f52:	e7a6      	b.n	8008ea2 <_printf_i+0x166>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4632      	mov	r2, r6
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	47d0      	blx	sl
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d09d      	beq.n	8008e9e <_printf_i+0x162>
 8008f62:	3501      	adds	r5, #1
 8008f64:	68e3      	ldr	r3, [r4, #12]
 8008f66:	9903      	ldr	r1, [sp, #12]
 8008f68:	1a5b      	subs	r3, r3, r1
 8008f6a:	42ab      	cmp	r3, r5
 8008f6c:	dcf2      	bgt.n	8008f54 <_printf_i+0x218>
 8008f6e:	e7eb      	b.n	8008f48 <_printf_i+0x20c>
 8008f70:	2500      	movs	r5, #0
 8008f72:	f104 0619 	add.w	r6, r4, #25
 8008f76:	e7f5      	b.n	8008f64 <_printf_i+0x228>
 8008f78:	080095e5 	.word	0x080095e5
 8008f7c:	080095f6 	.word	0x080095f6

08008f80 <__malloc_lock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_lock+0x8>)
 8008f82:	f7ff bc61 	b.w	8008848 <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	200018fc 	.word	0x200018fc

08008f8c <__malloc_unlock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_unlock+0x8>)
 8008f8e:	f7ff bc5c 	b.w	800884a <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	200018fc 	.word	0x200018fc

08008f98 <_realloc_r>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	4614      	mov	r4, r2
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	b921      	cbnz	r1, 8008fae <_realloc_r+0x16>
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	f7ff bdd5 	b.w	8008b58 <_malloc_r>
 8008fae:	b92a      	cbnz	r2, 8008fbc <_realloc_r+0x24>
 8008fb0:	f000 f85a 	bl	8009068 <_free_r>
 8008fb4:	4625      	mov	r5, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbc:	f000 f89c 	bl	80090f8 <_malloc_usable_size_r>
 8008fc0:	4284      	cmp	r4, r0
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	d802      	bhi.n	8008fcc <_realloc_r+0x34>
 8008fc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fca:	d812      	bhi.n	8008ff2 <_realloc_r+0x5a>
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fdc2 	bl	8008b58 <_malloc_r>
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0ed      	beq.n	8008fb6 <_realloc_r+0x1e>
 8008fda:	42bc      	cmp	r4, r7
 8008fdc:	4622      	mov	r2, r4
 8008fde:	4631      	mov	r1, r6
 8008fe0:	bf28      	it	cs
 8008fe2:	463a      	movcs	r2, r7
 8008fe4:	f7ff fc32 	bl	800884c <memcpy>
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4640      	mov	r0, r8
 8008fec:	f000 f83c 	bl	8009068 <_free_r>
 8008ff0:	e7e1      	b.n	8008fb6 <_realloc_r+0x1e>
 8008ff2:	4635      	mov	r5, r6
 8008ff4:	e7df      	b.n	8008fb6 <_realloc_r+0x1e>

08008ff6 <memmove>:
 8008ff6:	4288      	cmp	r0, r1
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	eb01 0402 	add.w	r4, r1, r2
 8008ffe:	d902      	bls.n	8009006 <memmove+0x10>
 8009000:	4284      	cmp	r4, r0
 8009002:	4623      	mov	r3, r4
 8009004:	d807      	bhi.n	8009016 <memmove+0x20>
 8009006:	1e43      	subs	r3, r0, #1
 8009008:	42a1      	cmp	r1, r4
 800900a:	d008      	beq.n	800901e <memmove+0x28>
 800900c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009010:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009014:	e7f8      	b.n	8009008 <memmove+0x12>
 8009016:	4601      	mov	r1, r0
 8009018:	4402      	add	r2, r0
 800901a:	428a      	cmp	r2, r1
 800901c:	d100      	bne.n	8009020 <memmove+0x2a>
 800901e:	bd10      	pop	{r4, pc}
 8009020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009024:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009028:	e7f7      	b.n	800901a <memmove+0x24>
	...

0800902c <_sbrk_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	2300      	movs	r3, #0
 8009030:	4d05      	ldr	r5, [pc, #20]	; (8009048 <_sbrk_r+0x1c>)
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f8 fa04 	bl	8001444 <_sbrk>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_sbrk_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_sbrk_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20001908 	.word	0x20001908

0800904c <memchr>:
 800904c:	4603      	mov	r3, r0
 800904e:	b510      	push	{r4, lr}
 8009050:	b2c9      	uxtb	r1, r1
 8009052:	4402      	add	r2, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	4618      	mov	r0, r3
 8009058:	d101      	bne.n	800905e <memchr+0x12>
 800905a:	2000      	movs	r0, #0
 800905c:	e003      	b.n	8009066 <memchr+0x1a>
 800905e:	7804      	ldrb	r4, [r0, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	428c      	cmp	r4, r1
 8009064:	d1f6      	bne.n	8009054 <memchr+0x8>
 8009066:	bd10      	pop	{r4, pc}

08009068 <_free_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4605      	mov	r5, r0
 800906c:	2900      	cmp	r1, #0
 800906e:	d040      	beq.n	80090f2 <_free_r+0x8a>
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f0c      	subs	r4, r1, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfb8      	it	lt
 800907a:	18e4      	addlt	r4, r4, r3
 800907c:	f7ff ff80 	bl	8008f80 <__malloc_lock>
 8009080:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <_free_r+0x8c>)
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	b933      	cbnz	r3, 8009094 <_free_r+0x2c>
 8009086:	6063      	str	r3, [r4, #4]
 8009088:	6014      	str	r4, [r2, #0]
 800908a:	4628      	mov	r0, r5
 800908c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009090:	f7ff bf7c 	b.w	8008f8c <__malloc_unlock>
 8009094:	42a3      	cmp	r3, r4
 8009096:	d908      	bls.n	80090aa <_free_r+0x42>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	1821      	adds	r1, r4, r0
 800909c:	428b      	cmp	r3, r1
 800909e:	bf01      	itttt	eq
 80090a0:	6819      	ldreq	r1, [r3, #0]
 80090a2:	685b      	ldreq	r3, [r3, #4]
 80090a4:	1809      	addeq	r1, r1, r0
 80090a6:	6021      	streq	r1, [r4, #0]
 80090a8:	e7ed      	b.n	8009086 <_free_r+0x1e>
 80090aa:	461a      	mov	r2, r3
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b10b      	cbz	r3, 80090b4 <_free_r+0x4c>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d9fa      	bls.n	80090aa <_free_r+0x42>
 80090b4:	6811      	ldr	r1, [r2, #0]
 80090b6:	1850      	adds	r0, r2, r1
 80090b8:	42a0      	cmp	r0, r4
 80090ba:	d10b      	bne.n	80090d4 <_free_r+0x6c>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	4401      	add	r1, r0
 80090c0:	1850      	adds	r0, r2, r1
 80090c2:	4283      	cmp	r3, r0
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	d1e0      	bne.n	800908a <_free_r+0x22>
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4408      	add	r0, r1
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	6053      	str	r3, [r2, #4]
 80090d2:	e7da      	b.n	800908a <_free_r+0x22>
 80090d4:	d902      	bls.n	80090dc <_free_r+0x74>
 80090d6:	230c      	movs	r3, #12
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	e7d6      	b.n	800908a <_free_r+0x22>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf01      	itttt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	1809      	addeq	r1, r1, r0
 80090ea:	6021      	streq	r1, [r4, #0]
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	6054      	str	r4, [r2, #4]
 80090f0:	e7cb      	b.n	800908a <_free_r+0x22>
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	20001900 	.word	0x20001900

080090f8 <_malloc_usable_size_r>:
 80090f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fc:	1f18      	subs	r0, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfbc      	itt	lt
 8009102:	580b      	ldrlt	r3, [r1, r0]
 8009104:	18c0      	addlt	r0, r0, r3
 8009106:	4770      	bx	lr

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
