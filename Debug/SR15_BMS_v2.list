
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009708  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db4  08009db4  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dbc  08009dbc  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  20000238  08009ffc  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018b8  08009ffc  000218b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170a1  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047aa  00000000  00000000  00037345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114b  00000000  00000000  0003d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f90  00000000  00000000  0003e313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e805  00000000  00000000  000622a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf1b2  00000000  00000000  00080aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000630c  00000000  00000000  0013fc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00145f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000238 	.word	0x20000238
 8000200:	00000000 	.word	0x00000000
 8000204:	080098d4 	.word	0x080098d4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000023c 	.word	0x2000023c
 8000220:	080098d4 	.word	0x080098d4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <wakeup_idle>:
#define LTC_SERIES_GROUPS_PER_RDCV 3 // Number of cell voltage groups per 8 byte register
#define LTC_SERIES_GROUPS_PER_RDAUX 3
#define NUM_AUX_SERIES_GROUPS 6 // Number of series groups

/* Wake LTC up from IDLE state into READY state */
void wakeup_idle(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800053a:	23ff      	movs	r3, #255	; 0xff
 800053c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < NUM_DEVICES; i++) {
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e00c      	b.n	800055e <wakeup_idle+0x2a>
		LTC_nCS_Low();							   // Pull CS low
 8000544:	f001 fb8c 	bl	8001c60 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 8000548:	1cf9      	adds	r1, r7, #3
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2201      	movs	r2, #1
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <wakeup_idle+0x3c>)
 8000550:	f004 fc04 	bl	8004d5c <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 8000554:	f001 fb78 	bl	8001c48 <LTC_nCS_High>
	for (int i = 0; i < NUM_DEVICES; i++) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3301      	adds	r3, #1
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	ddef      	ble.n	8000544 <wakeup_idle+0x10>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200002dc 	.word	0x200002dc

08000574 <wakeup_sleep>:

// wake up sleep
void wakeup_sleep(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_DEVICES; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e00e      	b.n	800059e <wakeup_sleep+0x2a>
		LTC_nCS_Low();
 8000580:	f001 fb6e 	bl	8001c60 <LTC_nCS_Low>
		HAL_Delay(300);
 8000584:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000588:	f001 fcf2 	bl	8001f70 <HAL_Delay>
		LTC_nCS_High();
 800058c:	f001 fb5c 	bl	8001c48 <LTC_nCS_High>
		HAL_Delay(300);
 8000590:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000594:	f001 fcec 	bl	8001f70 <HAL_Delay>
	for (int i = 0; i < NUM_DEVICES; i++) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dded      	ble.n	8000580 <wakeup_sleep+0xc>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <read_cell_volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef read_cell_volt(uint16_t *read_voltages) {
 80005b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005b4:	b089      	sub	sp, #36	; 0x24
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	466b      	mov	r3, sp
 80005bc:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80005c2:	2308      	movs	r3, #8
 80005c4:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80005c6:	7f3b      	ldrb	r3, [r7, #28]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	7f3b      	ldrb	r3, [r7, #28]
 80005ce:	2200      	movs	r2, #0
 80005d0:	4698      	mov	r8, r3
 80005d2:	4691      	mov	r9, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005e8:	7f3b      	ldrb	r3, [r7, #28]
 80005ea:	2200      	movs	r2, #0
 80005ec:	461c      	mov	r4, r3
 80005ee:	4615      	mov	r5, r2
 80005f0:	f04f 0200 	mov.w	r2, #0
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	00eb      	lsls	r3, r5, #3
 80005fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005fe:	00e2      	lsls	r2, r4, #3
 8000600:	7f3b      	ldrb	r3, [r7, #28]
 8000602:	3307      	adds	r3, #7
 8000604:	08db      	lsrs	r3, r3, #3
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	ebad 0d03 	sub.w	sp, sp, r3
 800060c:	466b      	mov	r3, sp
 800060e:	3300      	adds	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8000612:	2300      	movs	r3, #0
 8000614:	77bb      	strb	r3, [r7, #30]
 8000616:	e074      	b.n	8000702 <read_cell_volt+0x152>
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8000618:	7fbb      	ldrb	r3, [r7, #30]
 800061a:	4a3f      	ldr	r2, [pc, #252]	; (8000718 <read_cell_volt+0x168>)
 800061c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	b29b      	uxth	r3, r3
 8000624:	b2db      	uxtb	r3, r3
 8000626:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8000628:	7fbb      	ldrb	r3, [r7, #30]
 800062a:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <read_cell_volt+0x168>)
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fab0 	bl	8000ba0 <ltc_pec15_calc>
 8000640:	4603      	mov	r3, r0
 8000642:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000644:	8a7b      	ldrh	r3, [r7, #18]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	b29b      	uxth	r3, r3
 800064a:	b2db      	uxtb	r3, r3
 800064c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800064e:	8a7b      	ldrh	r3, [r7, #18]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8000654:	f7ff ff6e 	bl	8000534 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8000658:	f001 fb02 	bl	8001c60 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2204      	movs	r2, #4
 8000664:	482d      	ldr	r0, [pc, #180]	; (800071c <read_cell_volt+0x16c>)
 8000666:	f004 fb79 	bl	8004d5c <HAL_SPI_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 800066e:	7c7b      	ldrb	r3, [r7, #17]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d009      	beq.n	8000688 <read_cell_volt+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8000674:	7c7b      	ldrb	r3, [r7, #17]
 8000676:	2201      	movs	r2, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	b25a      	sxtb	r2, r3
 800067e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 8000688:	7f3b      	ldrb	r3, [r7, #28]
 800068a:	b29a      	uxth	r2, r3
 800068c:	2364      	movs	r3, #100	; 0x64
 800068e:	6979      	ldr	r1, [r7, #20]
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <read_cell_volt+0x16c>)
 8000692:	f004 fca6 	bl	8004fe2 <HAL_SPI_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 800069a:	7c7b      	ldrb	r3, [r7, #17]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00a      	beq.n	80006b6 <read_cell_volt+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80006a0:	7c7b      	ldrb	r3, [r7, #17]
 80006a2:	3304      	adds	r3, #4
 80006a4:	2201      	movs	r2, #1
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	b25a      	sxtb	r2, r3
 80006ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	777b      	strb	r3, [r7, #29]
 80006ba:	e01a      	b.n	80006f2 <read_cell_volt+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80006bc:	7f7b      	ldrb	r3, [r7, #29]
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	4413      	add	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 80006c6:	7f7a      	ldrb	r2, [r7, #29]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 80006d2:	7fba      	ldrb	r2, [r7, #30]
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	440b      	add	r3, r1
					&read_voltages[dev_idx * NUM_CELL_SERIES_GROUP
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
			memcpy(
 80006e2:	2206      	movs	r2, #6
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f008 fd52 	bl	8009190 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80006ec:	7f7b      	ldrb	r3, [r7, #29]
 80006ee:	3301      	adds	r3, #1
 80006f0:	777b      	strb	r3, [r7, #29]
 80006f2:	7f7b      	ldrb	r3, [r7, #29]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e1      	beq.n	80006bc <read_cell_volt+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 80006f8:	f001 faa6 	bl	8001c48 <LTC_nCS_High>
			i++) {
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	3301      	adds	r3, #1
 8000700:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (NUM_CELL_SERIES_GROUP / LTC_SERIES_GROUPS_PER_RDCV);
 8000702:	7fbb      	ldrb	r3, [r7, #30]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d987      	bls.n	8000618 <read_cell_volt+0x68>
	}

	return ret;
 8000708:	7ffb      	ldrb	r3, [r7, #31]
 800070a:	46b5      	mov	sp, r6
}
 800070c:	4618      	mov	r0, r3
 800070e:	3724      	adds	r7, #36	; 0x24
 8000710:	46bd      	mov	sp, r7
 8000712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000716:	bf00      	nop
 8000718:	08009944 	.word	0x08009944
 800071c:	200002dc 	.word	0x200002dc

08000720 <ltc_wrcomm>:
/**
 * 
 * @param total_ic	The number of ICs being written to
 * @param comm[6]	A two dimensional array of the comm data that will be written
 */
void ltc_wrcomm(uint8_t total_ic, uint8_t comm[6]) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800072c:	2306      	movs	r3, #6
 800072e:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	3304      	adds	r3, #4
 8000738:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t*) malloc(CMD_LEN * sizeof(uint8_t));
 800073a:	7cfb      	ldrb	r3, [r7, #19]
 800073c:	4618      	mov	r0, r3
 800073e:	f008 fbf3 	bl	8008f28 <malloc>
 8000742:	4603      	mov	r3, r0
 8000744:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2207      	movs	r2, #7
 800074a:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	2221      	movs	r2, #33	; 0x21
 8000752:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000754:	68f9      	ldr	r1, [r7, #12]
 8000756:	2002      	movs	r0, #2
 8000758:	f000 fa22 	bl	8000ba0 <ltc_pec15_calc>
 800075c:	4603      	mov	r3, r0
 800075e:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3302      	adds	r3, #2
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t) (cmd_pec);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3303      	adds	r3, #3
 8000772:	897a      	ldrh	r2, [r7, #10]
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	75bb      	strb	r3, [r7, #22]
 8000780:	e030      	b.n	80007e4 <ltc_wrcomm+0xc4>
			{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 8000782:	2300      	movs	r3, #0
 8000784:	757b      	strb	r3, [r7, #21]
 8000786:	e00d      	b.n	80007a4 <ltc_wrcomm+0x84>
				current_byte++) // executes for each of the 6 bytes in the CFGR register
				{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 8000788:	7d7b      	ldrb	r3, [r7, #21]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	441a      	add	r2, r3
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	68f9      	ldr	r1, [r7, #12]
 8000792:	440b      	add	r3, r1
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	3301      	adds	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]
				current_byte++) // executes for each of the 6 bytes in the CFGR register
 800079e:	7d7b      	ldrb	r3, [r7, #21]
 80007a0:	3301      	adds	r3, #1
 80007a2:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80007a4:	7d7a      	ldrb	r2, [r7, #21]
 80007a6:	7d3b      	ldrb	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d3ed      	bcc.n	8000788 <ltc_wrcomm+0x68>
		}
		comm_pec = (uint16_t) ltc_pec15_calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80007ac:	7d3b      	ldrb	r3, [r7, #20]
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f9f5 	bl	8000ba0 <ltc_pec15_calc>
 80007b6:	4603      	mov	r3, r0
 80007b8:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t) (comm_pec >> 8);
 80007ba:	893b      	ldrh	r3, [r7, #8]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	b299      	uxth	r1, r3
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t) comm_pec;
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
 80007cc:	3301      	adds	r3, #1
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4413      	add	r3, r2
 80007d2:	893a      	ldrh	r2, [r7, #8]
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	3302      	adds	r3, #2
 80007dc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	75bb      	strb	r3, [r7, #22]
 80007e4:	7dbb      	ldrb	r3, [r7, #22]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1cb      	bne.n	8000782 <ltc_wrcomm+0x62>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 80007ea:	f7ff fea3 	bl	8000534 <wakeup_idle>
	LTC_nCS_Low();
 80007ee:	f001 fa37 	bl	8001c60 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, CMD_LEN, 100);
 80007f2:	7cfb      	ldrb	r3, [r7, #19]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	2364      	movs	r3, #100	; 0x64
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <ltc_wrcomm+0xf4>)
 80007fc:	f004 faae 	bl	8004d5c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000800:	f001 fa22 	bl	8001c48 <LTC_nCS_High>
	free(cmd);
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f008 fb97 	bl	8008f38 <free>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200002dc 	.word	0x200002dc

08000818 <ltc_stcomm>:

/**
 * Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc_stcomm(uint8_t len) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000822:	2307      	movs	r3, #7
 8000824:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 8000826:	2323      	movs	r3, #35	; 0x23
 8000828:	737b      	strb	r3, [r7, #13]
	cmd_pec = ltc_pec15_calc(2, cmd);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f9b5 	bl	8000ba0 <ltc_pec15_calc>
 8000836:	4603      	mov	r3, r0
 8000838:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800083a:	8a7b      	ldrh	r3, [r7, #18]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t) (cmd_pec);
 8000844:	8a7b      	ldrh	r3, [r7, #18]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73fb      	strb	r3, [r7, #15]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800084a:	f7ff fe73 	bl	8000534 <wakeup_idle>
	LTC_nCS_Low();
 800084e:	f001 fa07 	bl	8001c60 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000852:	f107 010c 	add.w	r1, r7, #12
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	2204      	movs	r2, #4
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <ltc_stcomm+0x7c>)
 800085c:	f004 fa7e 	bl	8004d5c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e008      	b.n	8000878 <ltc_stcomm+0x60>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) 0xFF, 1, 100);
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	2201      	movs	r2, #1
 800086a:	21ff      	movs	r1, #255	; 0xff
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <ltc_stcomm+0x7c>)
 800086e:	f004 fa75 	bl	8004d5c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	429a      	cmp	r2, r3
 8000884:	dbef      	blt.n	8000866 <ltc_stcomm+0x4e>
	}
	LTC_nCS_High();
 8000886:	f001 f9df 	bl	8001c48 <LTC_nCS_High>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200002dc 	.word	0x200002dc

08000898 <read_cell_temps>:

LTC_SPI_StatusTypeDef read_cell_temps(uint16_t *read_auxiliary) {
 8000898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800089c:	b089      	sub	sp, #36	; 0x24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	466b      	mov	r3, sp
 80008a4:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = NUM_DEVICES * REG_LEN;
 80008aa:	2308      	movs	r3, #8
 80008ac:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80008ae:	7f3b      	ldrb	r3, [r7, #28]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	7f3b      	ldrb	r3, [r7, #28]
 80008b6:	2200      	movs	r2, #0
 80008b8:	4698      	mov	r8, r3
 80008ba:	4691      	mov	r9, r2
 80008bc:	f04f 0200 	mov.w	r2, #0
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008d0:	7f3b      	ldrb	r3, [r7, #28]
 80008d2:	2200      	movs	r2, #0
 80008d4:	461c      	mov	r4, r3
 80008d6:	4615      	mov	r5, r2
 80008d8:	f04f 0200 	mov.w	r2, #0
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	00eb      	lsls	r3, r5, #3
 80008e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008e6:	00e2      	lsls	r2, r4, #3
 80008e8:	7f3b      	ldrb	r3, [r7, #28]
 80008ea:	3307      	adds	r3, #7
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	ebad 0d03 	sub.w	sp, sp, r3
 80008f4:	466b      	mov	r3, sp
 80008f6:	3300      	adds	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	77bb      	strb	r3, [r7, #30]
 80008fe:	e074      	b.n	80009ea <read_cell_temps+0x152>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8000900:	7fbb      	ldrb	r3, [r7, #30]
 8000902:	4a3f      	ldr	r2, [pc, #252]	; (8000a00 <read_cell_temps+0x168>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8000910:	7fbb      	ldrb	r3, [r7, #30]
 8000912:	4a3b      	ldr	r2, [pc, #236]	; (8000a00 <read_cell_temps+0x168>)
 8000914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4619      	mov	r1, r3
 8000922:	2002      	movs	r0, #2
 8000924:	f000 f93c 	bl	8000ba0 <ltc_pec15_calc>
 8000928:	4603      	mov	r3, r0
 800092a:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 800092c:	8a7b      	ldrh	r3, [r7, #18]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b29b      	uxth	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8000936:	8a7b      	ldrh	r3, [r7, #18]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 800093c:	f7ff fdfa 	bl	8000534 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8000940:	f001 f98e 	bl	8001c60 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000944:	f107 0108 	add.w	r1, r7, #8
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	2204      	movs	r2, #4
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <read_cell_temps+0x16c>)
 800094e:	f004 fa05 	bl	8004d5c <HAL_SPI_Transmit>
 8000952:	4603      	mov	r3, r0
 8000954:	747b      	strb	r3, [r7, #17]
		if (hal_ret) {									// Non-zero means error
 8000956:	7c7b      	ldrb	r3, [r7, #17]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <read_cell_temps+0xd8>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 800095c:	7c7b      	ldrb	r3, [r7, #17]
 800095e:	2201      	movs	r2, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	b25a      	sxtb	r2, r3
 8000966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800096a:	4313      	orrs	r3, r2
 800096c:	b25b      	sxtb	r3, r3
 800096e:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8000970:	7f3b      	ldrb	r3, [r7, #28]
 8000972:	b29a      	uxth	r2, r3
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	6979      	ldr	r1, [r7, #20]
 8000978:	4822      	ldr	r0, [pc, #136]	; (8000a04 <read_cell_temps+0x16c>)
 800097a:	f004 fb32 	bl	8004fe2 <HAL_SPI_Receive>
 800097e:	4603      	mov	r3, r0
 8000980:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) {									// Non-zero means error
 8000982:	7c7b      	ldrb	r3, [r7, #17]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00a      	beq.n	800099e <read_cell_temps+0x106>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 8000988:	7c7b      	ldrb	r3, [r7, #17]
 800098a:	3304      	adds	r3, #4
 800098c:	2201      	movs	r2, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	b25a      	sxtb	r2, r3
 8000994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000998:	4313      	orrs	r3, r2
 800099a:	b25b      	sxtb	r3, r3
 800099c:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	777b      	strb	r3, [r7, #29]
 80009a2:	e01a      	b.n	80009da <read_cell_temps+0x142>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80009a4:	7f7b      	ldrb	r3, [r7, #29]
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80009ae:	7f7a      	ldrb	r2, [r7, #29]
 80009b0:	4613      	mov	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4619      	mov	r1, r3
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80009ba:	7fba      	ldrb	r2, [r7, #30]
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	440b      	add	r3, r1
					&read_auxiliary[dev_idx * NUM_AUX_SERIES_GROUPS
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
			memcpy(
 80009ca:	2206      	movs	r2, #6
 80009cc:	68f9      	ldr	r1, [r7, #12]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f008 fbde 	bl	8009190 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 80009d4:	7f7b      	ldrb	r3, [r7, #29]
 80009d6:	3301      	adds	r3, #1
 80009d8:	777b      	strb	r3, [r7, #29]
 80009da:	7f7b      	ldrb	r3, [r7, #29]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0e1      	beq.n	80009a4 <read_cell_temps+0x10c>
					REG_LEN - 2);
		}

		LTC_nCS_High(); // Pull CS high
 80009e0:	f001 f932 	bl	8001c48 <LTC_nCS_High>
			i < (NUM_AUX_SERIES_GROUPS / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 80009e4:	7fbb      	ldrb	r3, [r7, #30]
 80009e6:	3301      	adds	r3, #1
 80009e8:	77bb      	strb	r3, [r7, #30]
 80009ea:	7fbb      	ldrb	r3, [r7, #30]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d987      	bls.n	8000900 <read_cell_temps+0x68>
	}

	return ret;
 80009f0:	7ffb      	ldrb	r3, [r7, #31]
 80009f2:	46b5      	mov	sp, r6
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3724      	adds	r7, #36	; 0x24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009fe:	bf00      	nop
 8000a00:	0800994c 	.word	0x0800994c
 8000a04:	200002dc 	.word	0x200002dc

08000a08 <ltc_adcv>:
 Starts cell voltage conversion
 */
void ltc_adcv(uint8_t MD,  // ADC Mode
		uint8_t DCP, // Discharge Permit
		uint8_t CH   // Cell Channels to be measured
		) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	460b      	mov	r3, r1
 8000a14:	71bb      	strb	r3, [r7, #6]
 8000a16:	4613      	mov	r3, r2
 8000a18:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	105b      	asrs	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	3302      	adds	r3, #2
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	797b      	ldrb	r3, [r7, #5]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3360      	adds	r3, #96	; 0x60
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	2002      	movs	r0, #2
 8000a54:	f000 f8a4 	bl	8000ba0 <ltc_pec15_calc>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000a5c:	89bb      	ldrh	r3, [r7, #12]
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	72fb      	strb	r3, [r7, #11]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000a6c:	f7ff fd62 	bl	8000534 <wakeup_idle>
	LTC_nCS_Low();
 8000a70:	f001 f8f6 	bl	8001c60 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000a74:	f107 0108 	add.w	r1, r7, #8
 8000a78:	2364      	movs	r3, #100	; 0x64
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <ltc_adcv+0x88>)
 8000a7e:	f004 f96d 	bl	8004d5c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000a82:	f001 f8e1 	bl	8001c48 <LTC_nCS_High>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200002dc 	.word	0x200002dc

08000a94 <ltc_adax>:

void ltc_adax(uint8_t MD, // ADC Mode
		uint8_t CHG // GPIO Channels to be measured)
		) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	105b      	asrs	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8000abe:	7bfa      	ldrb	r2, [r7, #15]
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3360      	adds	r3, #96	; 0x60
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f000 f864 	bl	8000ba0 <ltc_pec15_calc>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000adc:	89bb      	ldrh	r3, [r7, #12]
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8000ae6:	89bb      	ldrh	r3, [r7, #12]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000aec:	f7ff fd22 	bl	8000534 <wakeup_idle>
	LTC_nCS_Low();
 8000af0:	f001 f8b6 	bl	8001c60 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000af4:	f107 0108 	add.w	r1, r7, #8
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	2204      	movs	r2, #4
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <ltc_adax+0x7c>)
 8000afe:	f004 f92d 	bl	8004d5c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8000b02:	f001 f8a1 	bl	8001c48 <LTC_nCS_High>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002dc 	.word	0x200002dc

08000b14 <ltc_polladc>:

int32_t ltc_polladc() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8000b26:	2307      	movs	r3, #7
 8000b28:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	717b      	strb	r3, [r7, #5]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	2002      	movs	r0, #2
 8000b34:	f000 f834 	bl	8000ba0 <ltc_pec15_calc>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8000b3c:	893b      	ldrh	r3, [r7, #8]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8000b46:	893b      	ldrh	r3, [r7, #8]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	71fb      	strb	r3, [r7, #7]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8000b4c:	f7ff fcf2 	bl	8000534 <wakeup_idle>

	LTC_nCS_Low();
 8000b50:	f001 f886 	bl	8001c60 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8000b54:	1d39      	adds	r1, r7, #4
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2204      	movs	r2, #4
 8000b5a:	480f      	ldr	r0, [pc, #60]	; (8000b98 <ltc_polladc+0x84>)
 8000b5c:	f004 f8fe 	bl	8004d5c <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8000b60:	e00c      	b.n	8000b7c <ltc_polladc+0x68>
		current_time = HAL_GetTick();
 8000b62:	f001 f9fb 	bl	8001f5c <HAL_GetTick>
 8000b66:	4603      	mov	r3, r0
 8000b68:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8000b6a:	7abb      	ldrb	r3, [r7, #10]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <ltc_polladc+0x62>
			finished = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	72fb      	strb	r3, [r7, #11]
 8000b74:	e002      	b.n	8000b7c <ltc_polladc+0x68>
		} else {
			counter = counter + 10;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	330a      	adds	r3, #10
 8000b7a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <ltc_polladc+0x88>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d802      	bhi.n	8000b8a <ltc_polladc+0x76>
 8000b84:	7afb      	ldrb	r3, [r7, #11]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0eb      	beq.n	8000b62 <ltc_polladc+0x4e>
		}
	}
	LTC_nCS_High();
 8000b8a:	f001 f85d 	bl	8001c48 <LTC_nCS_High>
	return (counter);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200002dc 	.word	0x200002dc
 8000b9c:	00030d3f 	.word	0x00030d3f

08000ba0 <ltc_pec15_calc>:
/**
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
 */
uint16_t ltc_pec15_calc(uint8_t len, uint8_t *data) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8000bac:	2310      	movs	r3, #16
 8000bae:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	737b      	strb	r3, [r7, #13]
 8000bb4:	e018      	b.n	8000be8 <ltc_pec15_calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	09db      	lsrs	r3, r3, #7
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	4053      	eors	r3, r2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	897b      	ldrh	r3, [r7, #10]
 8000bd6:	490a      	ldr	r1, [pc, #40]	; (8000c00 <ltc_pec15_calc+0x60>)
 8000bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4053      	eors	r3, r2
 8000be0:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	3301      	adds	r3, #1
 8000be6:	737b      	strb	r3, [r7, #13]
 8000be8:	7b7a      	ldrb	r2, [r7, #13]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3e2      	bcc.n	8000bb6 <ltc_pec15_calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b29b      	uxth	r3, r3
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	08009950 	.word	0x08009950

08000c04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c16:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <MX_ADC1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c42:	f001 f9b9 	bl	8001fb8 <HAL_ADC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f000 fda6 	bl	800179c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c50:	230e      	movs	r3, #14
 8000c52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC1_Init+0x74>)
 8000c62:	f001 fa81 	bl	8002168 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c6c:	f000 fd96 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000254 	.word	0x20000254
 8000c7c:	40012400 	.word	0x40012400

08000c80 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000c92:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <MX_ADC2_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000caa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000cbe:	f001 f97b 	bl	8001fb8 <HAL_ADC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 fd68 	bl	800179c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ccc:	230a      	movs	r3, #10
 8000cce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_ADC2_Init+0x74>)
 8000cde:	f001 fa43 	bl	8002168 <HAL_ADC_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8000ce8:	f000 fd58 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000284 	.word	0x20000284
 8000cf8:	40012800 	.word	0x40012800

08000cfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <HAL_ADC_MspInit+0xbc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d122      	bne.n	8000d62 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d4c:	2330      	movs	r3, #48	; 0x30
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d50:	2303      	movs	r3, #3
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0318 	add.w	r3, r7, #24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <HAL_ADC_MspInit+0xc4>)
 8000d5c:	f001 fe7e 	bl	8002a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d60:	e026      	b.n	8000db0 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_ADC_MspInit+0xc8>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d121      	bne.n	8000db0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_ADC_MspInit+0xc0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 0318 	add.w	r3, r7, #24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_ADC_MspInit+0xc4>)
 8000dac:	f001 fe56 	bl	8002a5c <HAL_GPIO_Init>
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40012400 	.word	0x40012400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40012800 	.word	0x40012800

08000dc8 <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_CAN2_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dd4:	2209      	movs	r2, #9
 8000dd6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dea:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dee:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000df2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_CAN2_Init+0x64>)
 8000e1a:	f001 fade 	bl	80023da <HAL_CAN_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_CAN2_Init+0x60>
		Error_Handler();
 8000e24:	f000 fcba 	bl	800179c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200002b4 	.word	0x200002b4
 8000e30:	40006800 	.word	0x40006800

08000e34 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_CAN_MspInit+0xa4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d13d      	bne.n	8000ed0 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e5e:	61d3      	str	r3, [r2, #28]
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_CAN_MspInit+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <HAL_CAN_MspInit+0xac>)
 8000eb2:	f001 fdd3 	bl	8002a5c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eba:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_CAN_MspInit+0xac>)
 8000ecc:	f001 fdc6 	bl	8002a5c <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40006800 	.word	0x40006800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <CAN_Start+0x10>)
 8000eea:	f001 fb71 	bl	80025d0 <HAL_CAN_Start>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002b4 	.word	0x200002b4

08000ef8 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000efc:	2102      	movs	r1, #2
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <CAN_Activate+0x14>)
 8000f00:	f001 fc79 	bl	80027f6 <HAL_CAN_ActivateNotification>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200002b4 	.word	0x200002b4

08000f10 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f103 021c 	add.w	r2, r3, #28
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3318      	adds	r3, #24
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <CAN_Send+0x24>)
 8000f26:	f001 fb97 	bl	8002658 <HAL_CAN_AddTxMessage>
 8000f2a:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200002b4 	.word	0x200002b4

08000f38 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8000f40:	f7ff ffd0 	bl	8000ee4 <CAN_Start>
	CAN_Activate();
 8000f44:	f7ff ffd8 	bl	8000ef8 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <setCANId>:

void setCANId(struct CANMessage *ptr, uint32_t id) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8000f8c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8000f90:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffe6 	bl	8000f68 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e074      	b.n	800108c <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d156      	bne.n	800105a <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4413      	add	r3, r2
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b29b      	uxth	r3, r3
 8001024:	b2da      	uxtb	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	4413      	add	r3, r2
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dd0c      	ble.n	800107a <CAN_Send_Voltage+0xf8>
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 800106a:	8afb      	ldrh	r3, [r7, #22]
 800106c:	3301      	adds	r3, #1
 800106e:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 8001070:	8afb      	ldrh	r3, [r7, #22]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff77 	bl	8000f68 <setCANId>
		}
		HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 ff78 	bl	8001f70 <HAL_Delay>
		CAN_Send(ptr);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff45 	bl	8000f10 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3301      	adds	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b0b      	cmp	r3, #11
 8001090:	dd87      	ble.n	8000fa2 <CAN_Send_Voltage+0x20>
	}

}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 80010a6:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80010aa:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff59 	bl	8000f68 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	737b      	strb	r3, [r7, #13]
 80010ba:	e076      	b.n	80011aa <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 80010bc:	7b7b      	ldrb	r3, [r7, #13]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d156      	bne.n	8001176 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 80010f0:	7b3b      	ldrb	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8001106:	7b3b      	ldrb	r3, [r7, #12]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4413      	add	r3, r2
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 800111a:	7b3b      	ldrb	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8001120:	7b3b      	ldrb	r3, [r7, #12]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b29b      	uxth	r3, r3
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8001148:	7b3b      	ldrb	r3, [r7, #12]
 800114a:	3301      	adds	r3, #1
 800114c:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b29b      	uxth	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00d      	beq.n	8001198 <CAN_Send_Temperature+0xfc>
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d107      	bne.n	8001198 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	3301      	adds	r3, #1
 800118c:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	4619      	mov	r1, r3
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fee8 	bl	8000f68 <setCANId>
		}
		HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f000 fee9 	bl	8001f70 <HAL_Delay>
		CAN_Send(ptr);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff feb6 	bl	8000f10 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	3301      	adds	r3, #1
 80011a8:	737b      	strb	r3, [r7, #13]
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	2b0b      	cmp	r3, #11
 80011ae:	d985      	bls.n	80010bc <CAN_Send_Temperature+0x20>
	}

}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr,
		struct batteryModuleVoltage *batt) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 80011c4:	f240 6322 	movw	r3, #1570	; 0x622
 80011c8:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff feca 	bl	8000f68 <setCANId>

	ptr->data[0] = batt->cell_volt_highest;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	895b      	ldrh	r3, [r3, #10]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	895b      	ldrh	r3, [r3, #10]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	891b      	ldrh	r3, [r3, #8]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	89db      	ldrh	r3, [r3, #14]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	89db      	ldrh	r3, [r3, #14]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	b29b      	uxth	r3, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	899b      	ldrh	r3, [r3, #12]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	899b      	ldrh	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f000 fe97 	bl	8001f70 <HAL_Delay>
	CAN_Send(ptr);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fe64 	bl	8000f10 <CAN_Send>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, uint8_t* faults, uint8_t* warnings){
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	uint16_t CAN_ID = 0x600;
 800125c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001260:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8001262:	8afb      	ldrh	r3, [r7, #22]
 8001264:	4619      	mov	r1, r3
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fe7e 	bl	8000f68 <setCANId>
	ptr->data[0] = *faults;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	775a      	strb	r2, [r3, #29]
	HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f000 fe77 	bl	8001f70 <HAL_Delay>
	CAN_Send(ptr);
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fe44 	bl	8000f10 <CAN_Send>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <MX_GPIO_Init+0x160>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2110      	movs	r1, #16
 8001308:	483a      	ldr	r0, [pc, #232]	; (80013f4 <MX_GPIO_Init+0x164>)
 800130a:	f001 fd2b 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	4839      	ldr	r0, [pc, #228]	; (80013f8 <MX_GPIO_Init+0x168>)
 8001314:	f001 fd26 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	4837      	ldr	r0, [pc, #220]	; (80013fc <MX_GPIO_Init+0x16c>)
 800131e:	f001 fd21 	bl	8002d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001322:	2310      	movs	r3, #16
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	4619      	mov	r1, r3
 8001338:	482e      	ldr	r0, [pc, #184]	; (80013f4 <MX_GPIO_Init+0x164>)
 800133a:	f001 fb8f 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800133e:	2302      	movs	r3, #2
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4828      	ldr	r0, [pc, #160]	; (80013f8 <MX_GPIO_Init+0x168>)
 8001356:	f001 fb81 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 800135a:	2340      	movs	r3, #64	; 0x40
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <MX_GPIO_Init+0x16c>)
 8001372:	f001 fb73 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0x16c>)
 800138c:	f001 fb66 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4814      	ldr	r0, [pc, #80]	; (80013f8 <MX_GPIO_Init+0x168>)
 80013a6:	f001 fb59 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <MX_GPIO_Init+0x168>)
 80013c0:	f001 fb4c 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_GPIO_Init+0x170>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <MX_GPIO_Init+0x170>)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	6053      	str	r3, [r2, #4]

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40010000 	.word	0x40010000

08001404 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b098      	sub	sp, #96	; 0x60
 8001408:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	GpioTimePacket tp_led_heartbeat;
	TimerPacket timerpacket_ltc;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	2018      	movs	r0, #24
 800141e:	f007 fd83 	bl	8008f28 <malloc>
 8001422:	4603      	mov	r3, r0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 8001426:	2018      	movs	r0, #24
 8001428:	f007 fd7e 	bl	8008f28 <malloc>
 800142c:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 8001430:	200c      	movs	r0, #12
 8001432:	f007 fd79 	bl	8008f28 <malloc>
 8001436:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
	NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	70fb      	strb	r3, [r7, #3]
	uint8_t safetyWarnings = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	70bb      	strb	r3, [r7, #2]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001442:	f000 fd33 	bl	8001eac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001446:	f000 f8cd 	bl	80015e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800144a:	f7ff ff21 	bl	8001290 <MX_GPIO_Init>
	MX_ADC1_Init();
 800144e:	f7ff fbd9 	bl	8000c04 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001452:	f7ff fc15 	bl	8000c80 <MX_ADC2_Init>
	MX_TIM7_Init();
 8001456:	f000 fcaf 	bl	8001db8 <MX_TIM7_Init>
	MX_SPI1_Init();
 800145a:	f000 fb75 	bl	8001b48 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800145e:	f007 f87b 	bl	8008558 <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 8001462:	f7ff fcb1 	bl	8000dc8 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd65 	bl	8000f38 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 800146e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	4957      	ldr	r1, [pc, #348]	; (80015d4 <main+0x1d0>)
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f920 	bl	80016bc <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 800147c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f959 	bl	800173c <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 800148a:	f000 fbdd 	bl	8001c48 <LTC_nCS_High>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t indexpause = 8;
 8001494:	2308      	movs	r3, #8
 8001496:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t loop_count = 3;
 800149a:	2303      	movs	r3, #3
 800149c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80014a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f924 	bl	80016f6 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 80014ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f955 	bl	8001762 <TimerPacket_FixedPulse>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <main+0x9c>
			wakeup_sleep();
 80014be:	f7ff f859 	bl	8000574 <wakeup_sleep>
			readVolt(modVoltage.cell_volt);
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f96e 	bl	80017a6 <readVolt>
			//print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);

			//related to reading temperatures
			wakeup_sleep();
 80014ca:	f7ff f853 	bl	8000574 <wakeup_sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80014ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80014d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80014d6:	e00e      	b.n	80014f6 <main+0xf2>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 80014d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014dc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f975 	bl	80017d0 <readTemp>
				HAL_Delay(100);
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f000 fd42 	bl	8001f70 <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 80014ec:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80014f6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80014fa:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3ea      	bcc.n	80014d8 <main+0xd4>
			}
			if (indexpause == 8) {
 8001502:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001506:	2b08      	cmp	r3, #8
 8001508:	d111      	bne.n	800152e <main+0x12a>
				tempindex = 8;
 800150a:	2308      	movs	r3, #8
 800150c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				indexpause = NUM_THERM_PER_MOD;
 8001510:	230c      	movs	r3, #12
 8001512:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				wakeup_idle();
 8001516:	f7ff f80d 	bl	8000534 <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_SWT[0]);
 800151a:	492f      	ldr	r1, [pc, #188]	; (80015d8 <main+0x1d4>)
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff f8ff 	bl	8000720 <ltc_wrcomm>
				wakeup_idle();
 8001522:	f7ff f807 	bl	8000534 <wakeup_idle>
				ltc_stcomm(2);
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff f976 	bl	8000818 <ltc_stcomm>
 800152c:	e014      	b.n	8001558 <main+0x154>
			} else if (indexpause == NUM_THERM_PER_MOD) {
 800152e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d110      	bne.n	8001558 <main+0x154>
				wakeup_idle();
 8001536:	f7fe fffd 	bl	8000534 <wakeup_idle>
				ltc_wrcomm(NUM_DEVICES, BMS_SWT[1]);
 800153a:	4928      	ldr	r1, [pc, #160]	; (80015dc <main+0x1d8>)
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff f8ef 	bl	8000720 <ltc_wrcomm>
				wakeup_idle();
 8001542:	f7fe fff7 	bl	8000534 <wakeup_idle>
				ltc_stcomm(2);
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff f966 	bl	8000818 <ltc_stcomm>
				indexpause = 8;
 800154c:	2308      	movs	r3, #8
 800154e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				tempindex = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	200c      	movs	r0, #12
 800155e:	f000 f985 	bl	800186c <print>

			//getting the summary of all cells in the pack
			cellSummary(&modVoltage);
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f9fa 	bl	8001960 <cellSummary>

			//waiting for 3 loops of the while look to occur before checking for faults
			if (loop_count == 0) {
 800156c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <main+0x190>
				faultAndWarning(&modVoltage, &safetyFaults, &safetyWarnings);
 8001574:	1cba      	adds	r2, r7, #2
 8001576:	1cf9      	adds	r1, r7, #3
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fa76 	bl	8001a6e <faultAndWarning>
				if (safetyFaults != 0) {
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00a      	beq.n	800159e <main+0x19a>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2102      	movs	r1, #2
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <main+0x1dc>)
 800158e:	f001 fbe9 	bl	8002d64 <HAL_GPIO_WritePin>
 8001592:	e004      	b.n	800159e <main+0x19a>
				}

			} else {
				loop_count--;
 8001594:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001598:	3b01      	subs	r3, #1
 800159a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
//				startBalance((uint16_t*) modVoltage.cell_volt, NUM_DEVICES,
//									modVoltage.cell_volt_lowest);
//			}

			//calling all CAN realated methods
			CAN_Send_Safety_Checker(&msg, &safetyFaults, &safetyWarnings);
 800159e:	1cba      	adds	r2, r7, #2
 80015a0:	1cf9      	adds	r1, r7, #3
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fe53 	bl	8001250 <CAN_Send_Safety_Checker>
			CAN_Send_Cell_Summary(&msg, &modVoltage);
 80015aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fe01 	bl	80011ba <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modVoltage.cell_volt);
 80015b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fcdf 	bl	8000f82 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modVoltage.cell_temp);
 80015c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd66 	bl	800109c <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 80015d0:	e766      	b.n	80014a0 <main+0x9c>
 80015d2:	bf00      	nop
 80015d4:	40011000 	.word	0x40011000
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000006 	.word	0x20000006
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09c      	sub	sp, #112	; 0x70
 80015e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ee:	2238      	movs	r2, #56	; 0x38
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 fd74 	bl	80090e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2220      	movs	r2, #32
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f007 fd66 	bl	80090e0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800161e:	2304      	movs	r3, #4
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162c:	2302      	movs	r3, #2
 800162e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001634:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001636:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800163a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800163c:	2302      	movs	r3, #2
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001640:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001644:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800164a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fcea 	bl	8004028 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x7a>
		Error_Handler();
 800165a:	f000 f89f 	bl	800179c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2102      	movs	r1, #2
 800167a:	4618      	mov	r0, r3
 800167c:	f002 ffea 	bl	8004654 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xa6>
		Error_Handler();
 8001686:	f000 f889 	bl	800179c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800168a:	2312      	movs	r3, #18
 800168c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800168e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001692:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f003 f9a8 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xc6>
		Error_Handler();
 80016a6:	f000 f879 	bl	800179c <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <SystemClock_Config+0xd4>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3770      	adds	r7, #112	; 0x70
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	42420070 	.word	0x42420070

080016bc <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f001 fb47 	bl	8002d64 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001702:	f000 fc2b 	bl	8001f5c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	429a      	cmp	r2, r3
 800171a:	d90b      	bls.n	8001734 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	889b      	ldrh	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f001 fb34 	bl	8002d94 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
	}
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800176a:	f000 fbf7 	bl	8001f5c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d905      	bls.n	8001792 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017a4:	e7fe      	b.n	80017a4 <Error_Handler+0x8>

080017a6 <readVolt>:

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;

}

void readVolt(uint16_t *read_volt) {
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	wakeup_idle();
 80017ae:	f7fe fec1 	bl	8000534 <wakeup_idle>
	ltc_adcv(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff f926 	bl	8000a08 <ltc_adcv>
	ltc_polladc();
 80017bc:	f7ff f9aa 	bl	8000b14 <ltc_polladc>
	read_cell_volt((uint16_t*) read_volt);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7fe fef5 	bl	80005b0 <read_cell_volt>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <readTemp>:

void readTemp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	73fb      	strb	r3, [r7, #15]
	wakeup_idle();
 80017de:	f7fe fea9 	bl	8000534 <wakeup_idle>
	ltc_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <readTemp+0x98>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7fe ff94 	bl	8000720 <ltc_wrcomm>
	wakeup_idle();
 80017f8:	f7fe fe9c 	bl	8000534 <wakeup_idle>
	ltc_stcomm(2);
 80017fc:	2002      	movs	r0, #2
 80017fe:	f7ff f80b 	bl	8000818 <ltc_stcomm>
	//end sending to mux to read temperatures

	wakeup_idle();
 8001802:	f7fe fe97 	bl	8000534 <wakeup_idle>
	ltc_adax(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 8001806:	2101      	movs	r1, #1
 8001808:	2002      	movs	r0, #2
 800180a:	f7ff f943 	bl	8000a94 <ltc_adax>
	ltc_polladc();
 800180e:	f7ff f981 	bl	8000b14 <ltc_polladc>
	if (!read_cell_temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f840 	bl	8000898 <read_cell_temps>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11f      	bne.n	800185e <readTemp+0x8e>
			{
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
 8001822:	e019      	b.n	8001858 <readTemp+0x88>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 8001824:	7dfa      	ldrb	r2, [r7, #23]
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	82bb      	strh	r3, [r7, #20]
			read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
 8001838:	7dfa      	ldrb	r2, [r7, #23]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4413      	add	r3, r2
 800184e:	8aba      	ldrh	r2, [r7, #20]
 8001850:	801a      	strh	r2, [r3, #0]
		for (uint8_t dev_idx = 0; dev_idx < NUM_DEVICES; dev_idx++) {
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	3301      	adds	r3, #1
 8001856:	75fb      	strb	r3, [r7, #23]
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0e2      	beq.n	8001824 <readTemp+0x54>
			//getActualTemps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg

		}
	}
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000000c 	.word	0x2000000c

0800186c <print>:
#include "print.h"

void print(uint8_t len, uint16_t *read_temp) {
 800186c:	b580      	push	{r7, lr}
 800186e:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8001872:	af00      	add	r7, sp, #0
 8001874:	4602      	mov	r2, r0
 8001876:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800187a:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 800187e:	6019      	str	r1, [r3, #0]
 8001880:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001884:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8001888:	701a      	strb	r2, [r3, #0]
	char buf[20];
	char out_buf[2048] = "";
 800188a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800188e:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	3304      	adds	r3, #4
 8001898:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 fc1e 	bl	80090e0 <memset>
	char char_to_str[2];
	char_to_str[0] = '\n';
 80018a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80018a8:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80018ac:	220a      	movs	r2, #10
 80018ae:	701a      	strb	r2, [r3, #0]
	char_to_str[1] = '\0';
 80018b0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80018b4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]

	for (uint8_t i = 0; i < len; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 80018c2:	e027      	b.n	8001914 <print+0xa8>
		sprintf(buf, "C%u:%u/10000", i + 1, read_temp[i]);
 80018c4:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80018c8:	1c59      	adds	r1, r3, #1
 80018ca:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80018d4:	f6a2 0228 	subw	r2, r2, #2088	; 0x828
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 80018e2:	460a      	mov	r2, r1
 80018e4:	491d      	ldr	r1, [pc, #116]	; (800195c <print+0xf0>)
 80018e6:	f007 fbdb 	bl	80090a0 <siprintf>
		strncat(out_buf, buf, 20);
 80018ea:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2214      	movs	r2, #20
 80018f4:	4618      	mov	r0, r3
 80018f6:	f007 fbfb 	bl	80090f0 <strncat>
		strncat(out_buf, char_to_str, 2);
 80018fa:	f107 010c 	add.w	r1, r7, #12
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	2202      	movs	r2, #2
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fbf3 	bl	80090f0 <strncat>
	for (uint8_t i = 0; i < len; i++) {
 800190a:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 800190e:	3301      	adds	r3, #1
 8001910:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8001914:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001918:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 800191c:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d3ce      	bcc.n	80018c4 <print+0x58>
	}
	strncat(out_buf, char_to_str, 2);
 8001926:	f107 010c 	add.w	r1, r7, #12
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2202      	movs	r2, #2
 8001930:	4618      	mov	r0, r3
 8001932:	f007 fbdd 	bl	80090f0 <strncat>
	USB_Transmit(out_buf, strlen(out_buf));
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc72 	bl	8000224 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f006 fdf5 	bl	800853a <USB_Transmit>
}
 8001950:	bf00      	nop
 8001952:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	080098ec 	.word	0x080098ec

08001960 <cellSummary>:
#define CELL_HIGH_TEMP_WARNING		55
#define CELL_LOW_TEMP_WARNING		0

#define CELL_VOLT_IMBALANCE_WARNING	    500

void cellSummary(struct batteryModuleVoltage *batt){
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	881a      	ldrh	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	881a      	ldrh	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	819a      	strh	r2, [r3, #12]
	batt->pack_voltage = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	821a      	strh	r2, [r3, #16]

	for(int i = 1; i < NUM_CELLS; i++){
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e032      	b.n	8001a02 <cellSummary+0xa2>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	895b      	ldrh	r3, [r3, #10]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d907      	bls.n	80019c0 <cellSummary+0x60>
			batt->cell_volt_highest = batt->cell_volt[i];
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	891b      	ldrh	r3, [r3, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <cellSummary+0x84>
			batt->cell_volt_lowest = batt->cell_volt[i];
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	811a      	strh	r2, [r3, #8]
		}

		batt->pack_voltage += batt->cell_volt[i];
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8a1a      	ldrh	r2, [r3, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b0b      	cmp	r3, #11
 8001a06:	ddc9      	ble.n	800199c <cellSummary+0x3c>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e026      	b.n	8001a5c <cellSummary+0xfc>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	89da      	ldrh	r2, [r3, #14]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d207      	bcs.n	8001a32 <cellSummary+0xd2>
			batt->cell_temp_highest = batt->cell_temp[i];
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881a      	ldrh	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	899a      	ldrh	r2, [r3, #12]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d907      	bls.n	8001a56 <cellSummary+0xf6>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	881a      	ldrh	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b0b      	cmp	r3, #11
 8001a60:	ddd5      	ble.n	8001a0e <cellSummary+0xae>
		}
	}

}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <faultAndWarning>:


void faultAndWarning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
	if(batt->pack_voltage >= PACK_HIGH_VOLT_FAULT){
		*fault |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_FAULT){
		*fault |= 0b01000000;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT){
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	891b      	ldrh	r3, [r3, #8]
 8001a8c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d806      	bhi.n	8001aa2 <faultAndWarning+0x34>
		*fault |= 0b00100000;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f043 0320 	orr.w	r3, r3, #32
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	701a      	strb	r2, [r3, #0]
	}

		if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	895b      	ldrh	r3, [r3, #10]
 8001aa6:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d906      	bls.n	8001abc <faultAndWarning+0x4e>
		*fault |= 0b00010000;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f043 0310 	orr.w	r3, r3, #16
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	89db      	ldrh	r3, [r3, #14]
 8001ac0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac2:	d906      	bls.n	8001ad2 <faultAndWarning+0x64>
		*fault |= 0b00001000;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	891b      	ldrh	r3, [r3, #8]
 8001ae4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001ae8:	d806      	bhi.n	8001af8 <faultAndWarning+0x8a>
		*warnings |= 0b00100000;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	895b      	ldrh	r3, [r3, #10]
 8001afc:	f24a 6203 	movw	r2, #42499	; 0xa603
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d906      	bls.n	8001b12 <faultAndWarning+0xa4>
		*warnings |= 0b00010000;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	89db      	ldrh	r3, [r3, #14]
 8001b16:	2b36      	cmp	r3, #54	; 0x36
 8001b18:	d906      	bls.n	8001b28 <faultAndWarning+0xba>
		*warnings |= 0b00001000;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	899b      	ldrh	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <faultAndWarning+0xd0>
		*warnings |= 0b00000100;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <MX_SPI1_Init+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b7c:	2228      	movs	r2, #40	; 0x28
 8001b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_SPI1_Init+0x64>)
 8001b9a:	f003 f85b 	bl	8004c54 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8001ba4:	f7ff fdfa 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002dc 	.word	0x200002dc
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_SPI_MspInit+0x88>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d12f      	bne.n	8001c34 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_SPI_MspInit+0x8c>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c04:	23a0      	movs	r3, #160	; 0xa0
 8001c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480b      	ldr	r0, [pc, #44]	; (8001c44 <HAL_SPI_MspInit+0x90>)
 8001c18:	f000 ff20 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c1c:	2340      	movs	r3, #64	; 0x40
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_SPI_MspInit+0x90>)
 8001c30:	f000 ff14 	bl	8002a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40013000 	.word	0x40013000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010800 	.word	0x40010800

08001c48 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2110      	movs	r1, #16
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <LTC_nCS_High+0x14>)
 8001c52:	f001 f887 	bl	8002d64 <HAL_GPIO_WritePin>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010800 	.word	0x40010800

08001c60 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001c64:	2200      	movs	r2, #0
 8001c66:	2110      	movs	r1, #16
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <LTC_nCS_Low+0x14>)
 8001c6a:	f001 f87b 	bl	8002d64 <HAL_GPIO_WritePin>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40010800 	.word	0x40010800

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d22:	f000 f909 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <OTG_FS_IRQHandler+0x10>)
 8001d32:	f001 f987 	bl	8003044 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000104c 	.word	0x2000104c

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f007 f9e2 	bl	8009138 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20010000 	.word	0x20010000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000334 	.word	0x20000334
 8001da8:	200018b8 	.word	0x200018b8

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <MX_TIM7_Init+0x68>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001de8:	f003 fcbc 	bl	8005764 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001df2:	f7ff fcd3 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_TIM7_Init+0x64>)
 8001e04:	f003 fd6a 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e0e:	f7ff fcc5 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000338 	.word	0x20000338
 8001e20:	40001400 	.word	0x40001400

08001e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_TIM_Base_MspInit+0x34>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10b      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_TIM_Base_MspInit+0x38>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_TIM_Base_MspInit+0x38>)
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_TIM_Base_MspInit+0x38>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40001400 	.word	0x40001400
 8001e5c:	40021000 	.word	0x40021000

08001e60 <Reset_Handler>:
 8001e60:	f7ff ffa4 	bl	8001dac <SystemInit>
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <LoopFillZerobss+0xe>)
 8001e66:	490c      	ldr	r1, [pc, #48]	; (8001e98 <LoopFillZerobss+0x12>)
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <LoopFillZerobss+0x16>)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:
 8001e6e:	58d4      	ldr	r4, [r2, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:
 8001e74:	18c4      	adds	r4, r0, r3
 8001e76:	428c      	cmp	r4, r1
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
 8001e7a:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <LoopFillZerobss+0x1a>)
 8001e7c:	4c09      	ldr	r4, [pc, #36]	; (8001ea4 <LoopFillZerobss+0x1e>)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:
 8001e86:	42a2      	cmp	r2, r4
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>
 8001e8a:	f007 f95b 	bl	8009144 <__libc_init_array>
 8001e8e:	f7ff fab9 	bl	8001404 <main>
 8001e92:	4770      	bx	lr
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000238 	.word	0x20000238
 8001e9c:	08009dc4 	.word	0x08009dc4
 8001ea0:	20000238 	.word	0x20000238
 8001ea4:	200018b8 	.word	0x200018b8

08001ea8 <ADC1_2_IRQHandler>:
 8001ea8:	e7fe      	b.n	8001ea8 <ADC1_2_IRQHandler>
	...

08001eac <HAL_Init>:
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x28>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x28>)
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 fd8b 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>
 8001ec8:	f7ff fed6 	bl	8001c78 <HAL_MspInit>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_InitTick>:
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fda3 	bl	8002a42 <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f000 fd6b 	bl	80029ee <HAL_NVIC_SetPriority>
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
 8001f22:	2301      	movs	r3, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000006c 	.word	0x2000006c
 8001f30:	20000074 	.word	0x20000074
 8001f34:	20000070 	.word	0x20000070

08001f38 <HAL_IncTick>:
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x20>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <HAL_IncTick+0x20>)
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000074 	.word	0x20000074
 8001f58:	20000380 	.word	0x20000380

08001f5c <HAL_GetTick>:
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <HAL_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	20000380 	.word	0x20000380

08001f70 <HAL_Delay>:
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	bf00      	nop
 8001f98:	f7ff ffe0 	bl	8001f5c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000074 	.word	0x20000074

08001fb8 <HAL_ADC_Init>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	75fb      	strb	r3, [r7, #23]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x22>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0be      	b.n	8002158 <HAL_ADC_Init+0x1a0>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_Init+0x44>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fe80 	bl	8000cfc <HAL_ADC_MspInit>
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f9ab 	bl	8002358 <ADC_ConversionStop_Disable>
 8002002:	4603      	mov	r3, r0
 8002004:	75fb      	strb	r3, [r7, #23]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 8099 	bne.w	8002146 <HAL_ADC_Init+0x18e>
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8095 	bne.w	8002146 <HAL_ADC_Init+0x18e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7b1b      	ldrb	r3, [r3, #12]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4313      	orrs	r3, r2
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002050:	d003      	beq.n	800205a <HAL_ADC_Init+0xa2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_ADC_Init+0xa8>
 800205a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205e:	e000      	b.n	8002062 <HAL_ADC_Init+0xaa>
 8002060:	2300      	movs	r3, #0
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7d1b      	ldrb	r3, [r3, #20]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d119      	bne.n	80020a4 <HAL_ADC_Init+0xec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7b1b      	ldrb	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0xd4>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	3b01      	subs	r3, #1
 800207e:	035a      	lsls	r2, r3, #13
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	e00b      	b.n	80020a4 <HAL_ADC_Init+0xec>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f043 0220 	orr.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_ADC_Init+0x1a8>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d4:	d003      	beq.n	80020de <HAL_ADC_Init+0x126>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d104      	bne.n	80020e8 <HAL_ADC_Init+0x130>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_ADC_Init+0x1ac>)
 8002104:	4013      	ands	r3, r2
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	429a      	cmp	r2, r3
 800210a:	d10b      	bne.n	8002124 <HAL_ADC_Init+0x16c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
 8002122:	e018      	b.n	8002156 <HAL_ADC_Init+0x19e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	f023 0312 	bic.w	r3, r3, #18
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002140:	2301      	movs	r3, #1
 8002142:	75fb      	strb	r3, [r7, #23]
 8002144:	e007      	b.n	8002156 <HAL_ADC_Init+0x19e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	ffe1f7fd 	.word	0xffe1f7fd
 8002164:	ff1f0efe 	.word	0xff1f0efe

08002168 <HAL_ADC_ConfigChannel>:
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x20>
 8002184:	2302      	movs	r3, #2
 8002186:	e0dc      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1da>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b06      	cmp	r3, #6
 8002196:	d81c      	bhi.n	80021d2 <HAL_ADC_ConfigChannel+0x6a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b05      	subs	r3, #5
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4019      	ands	r1, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b05      	subs	r3, #5
 80021c4:	fa00 f203 	lsl.w	r2, r0, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
 80021d0:	e03c      	b.n	800224c <HAL_ADC_ConfigChannel+0xe4>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d81c      	bhi.n	8002214 <HAL_ADC_ConfigChannel+0xac>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b23      	subs	r3, #35	; 0x23
 80021ec:	221f      	movs	r2, #31
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4019      	ands	r1, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b23      	subs	r3, #35	; 0x23
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
 8002212:	e01b      	b.n	800224c <HAL_ADC_ConfigChannel+0xe4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b41      	subs	r3, #65	; 0x41
 8002226:	221f      	movs	r2, #31
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	4019      	ands	r1, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b41      	subs	r3, #65	; 0x41
 8002240:	fa00 f203 	lsl.w	r2, r0, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d91c      	bls.n	800228e <HAL_ADC_ConfigChannel+0x126>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	3b1e      	subs	r3, #30
 8002266:	2207      	movs	r2, #7
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	4019      	ands	r1, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6898      	ldr	r0, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	3b1e      	subs	r3, #30
 8002280:	fa00 f203 	lsl.w	r2, r0, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	e019      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x15a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4019      	ands	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6898      	ldr	r0, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	611a      	str	r2, [r3, #16]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d003      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x16a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b11      	cmp	r3, #17
 80022d0:	d132      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1d0>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_ADC_ConfigChannel+0x1e4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d125      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1c0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d126      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1d0>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d11a      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1d0>
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_ADC_ConfigChannel+0x1e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <HAL_ADC_ConfigChannel+0x1ec>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	0c9a      	lsrs	r2, r3, #18
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	e002      	b.n	8002320 <HAL_ADC_ConfigChannel+0x1b8>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_ConfigChannel+0x1b2>
 8002326:	e007      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1d0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012400 	.word	0x40012400
 8002350:	2000006c 	.word	0x2000006c
 8002354:	431bde83 	.word	0x431bde83

08002358 <ADC_ConversionStop_Disable>:
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d12e      	bne.n	80023d0 <ADC_ConversionStop_Disable+0x78>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	f7ff fdeb 	bl	8001f5c <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	e01b      	b.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
 800238a:	f7ff fde7 	bl	8001f5c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d914      	bls.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10d      	bne.n	80023c2 <ADC_ConversionStop_Disable+0x6a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023be:	2301      	movs	r3, #1
 80023c0:	e007      	b.n	80023d2 <ADC_ConversionStop_Disable+0x7a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d0dc      	beq.n	800238a <ADC_ConversionStop_Disable+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_CAN_Init>:
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_CAN_Init+0x12>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0ed      	b.n	80025c8 <HAL_CAN_Init+0x1ee>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <HAL_CAN_Init+0x24>
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7fe fd1b 	bl	8000e34 <HAL_CAN_MspInit>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f7ff fda5 	bl	8001f5c <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	e012      	b.n	800243c <HAL_CAN_Init+0x62>
 8002416:	f7ff fda1 	bl	8001f5c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b0a      	cmp	r3, #10
 8002422:	d90b      	bls.n	800243c <HAL_CAN_Init+0x62>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	f883 2020 	strb.w	r2, [r3, #32]
 8002438:	2301      	movs	r3, #1
 800243a:	e0c5      	b.n	80025c8 <HAL_CAN_Init+0x1ee>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0e5      	beq.n	8002416 <HAL_CAN_Init+0x3c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0202 	bic.w	r2, r2, #2
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f7ff fd7f 	bl	8001f5c <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	e012      	b.n	8002488 <HAL_CAN_Init+0xae>
 8002462:	f7ff fd7b 	bl	8001f5c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b0a      	cmp	r3, #10
 800246e:	d90b      	bls.n	8002488 <HAL_CAN_Init+0xae>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2205      	movs	r2, #5
 8002480:	f883 2020 	strb.w	r2, [r3, #32]
 8002484:	2301      	movs	r3, #1
 8002486:	e09f      	b.n	80025c8 <HAL_CAN_Init+0x1ee>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1e5      	bne.n	8002462 <HAL_CAN_Init+0x88>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7e1b      	ldrb	r3, [r3, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_CAN_Init+0xd6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e007      	b.n	80024c0 <HAL_CAN_Init+0xe6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7e5b      	ldrb	r3, [r3, #25]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_CAN_Init+0x100>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_CAN_Init+0x110>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7e9b      	ldrb	r3, [r3, #26]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_CAN_Init+0x12a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e007      	b.n	8002514 <HAL_CAN_Init+0x13a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0220 	bic.w	r2, r2, #32
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7edb      	ldrb	r3, [r3, #27]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_CAN_Init+0x154>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0210 	bic.w	r2, r2, #16
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e007      	b.n	800253e <HAL_CAN_Init+0x164>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0210 	orr.w	r2, r2, #16
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7f1b      	ldrb	r3, [r3, #28]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_CAN_Init+0x17e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0208 	orr.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <HAL_CAN_Init+0x18e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0208 	bic.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7f5b      	ldrb	r3, [r3, #29]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <HAL_CAN_Init+0x1a8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0204 	orr.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <HAL_CAN_Init+0x1b8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0204 	bic.w	r2, r2, #4
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	ea42 0103 	orr.w	r1, r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	61da      	str	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2020 	strb.w	r2, [r3, #32]
 80025c6:	2300      	movs	r3, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_CAN_Start>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d12e      	bne.n	8002642 <HAL_CAN_Start+0x72>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2020 	strb.w	r2, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	f7ff fcae 	bl	8001f5c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	e012      	b.n	800262a <HAL_CAN_Start+0x5a>
 8002604:	f7ff fcaa 	bl	8001f5c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Start+0x5a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]
 8002626:	2301      	movs	r3, #1
 8002628:	e012      	b.n	8002650 <HAL_CAN_Start+0x80>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <HAL_CAN_Start+0x34>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
 800263e:	2300      	movs	r3, #0
 8002640:	e006      	b.n	8002650 <HAL_CAN_Start+0x80>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
 800264e:	2301      	movs	r3, #1
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_CAN_AddTxMessage>:
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d003      	beq.n	8002684 <HAL_CAN_AddTxMessage+0x2c>
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 80ad 	bne.w	80027de <HAL_CAN_AddTxMessage+0x186>
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <HAL_CAN_AddTxMessage+0x4c>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_CAN_AddTxMessage+0x4c>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8095 	beq.w	80027ce <HAL_CAN_AddTxMessage+0x176>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	0e1b      	lsrs	r3, r3, #24
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	2201      	movs	r2, #1
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10d      	bne.n	80026dc <HAL_CAN_AddTxMessage+0x84>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	055a      	lsls	r2, r3, #21
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	6809      	ldr	r1, [r1, #0]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3318      	adds	r3, #24
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	440b      	add	r3, r1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00f      	b.n	80026fc <HAL_CAN_AddTxMessage+0xa4>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	00da      	lsls	r2, r3, #3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	6809      	ldr	r1, [r1, #0]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3318      	adds	r3, #24
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	440b      	add	r3, r1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3318      	adds	r3, #24
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	440b      	add	r3, r1
 800270c:	3304      	adds	r3, #4
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	7d1b      	ldrb	r3, [r3, #20]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d111      	bne.n	800273c <HAL_CAN_AddTxMessage+0xe4>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3318      	adds	r3, #24
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	6811      	ldr	r1, [r2, #0]
 800272c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3318      	adds	r3, #24
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	440b      	add	r3, r1
 8002738:	3304      	adds	r3, #4
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3307      	adds	r3, #7
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	061a      	lsls	r2, r3, #24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3306      	adds	r3, #6
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	041b      	lsls	r3, r3, #16
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3305      	adds	r3, #5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	4313      	orrs	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	3204      	adds	r2, #4
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4610      	mov	r0, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	ea43 0200 	orr.w	r2, r3, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	440b      	add	r3, r1
 800276e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3303      	adds	r3, #3
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	061a      	lsls	r2, r3, #24
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3302      	adds	r3, #2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	041b      	lsls	r3, r3, #16
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	4313      	orrs	r3, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	4610      	mov	r0, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6811      	ldr	r1, [r2, #0]
 800279a:	ea43 0200 	orr.w	r2, r3, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3318      	adds	r3, #24
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4413      	add	r3, r2
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3318      	adds	r3, #24
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	440b      	add	r3, r1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	2300      	movs	r3, #0
 80027cc:	e00e      	b.n	80027ec <HAL_CAN_AddTxMessage+0x194>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
 80027da:	2301      	movs	r3, #1
 80027dc:	e006      	b.n	80027ec <HAL_CAN_AddTxMessage+0x194>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
 80027ea:	2301      	movs	r3, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	3724      	adds	r7, #36	; 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_CAN_ActivateNotification>:
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d002      	beq.n	8002814 <HAL_CAN_ActivateNotification+0x1e>
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d109      	bne.n	8002828 <HAL_CAN_ActivateNotification+0x32>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6959      	ldr	r1, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]
 8002824:	2300      	movs	r3, #0
 8002826:	e006      	b.n	8002836 <HAL_CAN_ActivateNotification+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
 8002834:	2301      	movs	r3, #1
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <__NVIC_SetPriorityGrouping>:
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4906      	ldr	r1, [pc, #24]	; (80028d8 <__NVIC_EnableIRQ+0x34>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100

080028dc <__NVIC_SetPriority>:
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0a      	blt.n	8002906 <__NVIC_SetPriority+0x2a>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	490c      	ldr	r1, [pc, #48]	; (8002928 <__NVIC_SetPriority+0x4c>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	440b      	add	r3, r1
 8002900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002904:	e00a      	b.n	800291c <__NVIC_SetPriority+0x40>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4908      	ldr	r1, [pc, #32]	; (800292c <__NVIC_SetPriority+0x50>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3b04      	subs	r3, #4
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	440b      	add	r3, r1
 800291a:	761a      	strb	r2, [r3, #24]
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <NVIC_EncodePriority>:
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f1c3 0307 	rsb	r3, r3, #7
 800294a:	2b04      	cmp	r3, #4
 800294c:	bf28      	it	cs
 800294e:	2304      	movcs	r3, #4
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3304      	adds	r3, #4
 8002956:	2b06      	cmp	r3, #6
 8002958:	d902      	bls.n	8002960 <NVIC_EncodePriority+0x30>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3b03      	subs	r3, #3
 800295e:	e000      	b.n	8002962 <NVIC_EncodePriority+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	f04f 32ff 	mov.w	r2, #4294967295
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	409a      	lsls	r2, r3
 8002978:	f04f 31ff 	mov.w	r1, #4294967295
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43d9      	mvns	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	400b      	ands	r3, r1
 8002988:	4313      	orrs	r3, r2
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <SysTick_Config>:
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f7ff ff90 	bl	80028dc <__NVIC_SetPriority>
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff2d 	bl	8002840 <__NVIC_SetPriorityGrouping>
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	f7ff ff42 	bl	8002888 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff90 	bl	8002930 <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5f 	bl	80028dc <__NVIC_SetPriority>
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff35 	bl	80028a4 <__NVIC_EnableIRQ>
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa2 	bl	8002994 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_GPIO_Init>:
 8002a5c:	b480      	push	{r7}
 8002a5e:	b08b      	sub	sp, #44	; 0x2c
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
 8002a6e:	e169      	b.n	8002d44 <HAL_GPIO_Init+0x2e8>
 8002a70:	2201      	movs	r2, #1
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f040 8158 	bne.w	8002d3e <HAL_GPIO_Init+0x2e2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a9a      	ldr	r2, [pc, #616]	; (8002cfc <HAL_GPIO_Init+0x2a0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d05e      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002a98:	4a98      	ldr	r2, [pc, #608]	; (8002cfc <HAL_GPIO_Init+0x2a0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d875      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002a9e:	4a98      	ldr	r2, [pc, #608]	; (8002d00 <HAL_GPIO_Init+0x2a4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d058      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002aa4:	4a96      	ldr	r2, [pc, #600]	; (8002d00 <HAL_GPIO_Init+0x2a4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d86f      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002aaa:	4a96      	ldr	r2, [pc, #600]	; (8002d04 <HAL_GPIO_Init+0x2a8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d052      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002ab0:	4a94      	ldr	r2, [pc, #592]	; (8002d04 <HAL_GPIO_Init+0x2a8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d869      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002ab6:	4a94      	ldr	r2, [pc, #592]	; (8002d08 <HAL_GPIO_Init+0x2ac>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04c      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002abc:	4a92      	ldr	r2, [pc, #584]	; (8002d08 <HAL_GPIO_Init+0x2ac>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d863      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002ac2:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <HAL_GPIO_Init+0x2b0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d046      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002ac8:	4a90      	ldr	r2, [pc, #576]	; (8002d0c <HAL_GPIO_Init+0x2b0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d85d      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002ace:	2b12      	cmp	r3, #18
 8002ad0:	d82a      	bhi.n	8002b28 <HAL_GPIO_Init+0xcc>
 8002ad2:	2b12      	cmp	r3, #18
 8002ad4:	d859      	bhi.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <HAL_GPIO_Init+0x80>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002b57 	.word	0x08002b57
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b43 	.word	0x08002b43
 8002ae8:	08002b85 	.word	0x08002b85
 8002aec:	08002b8b 	.word	0x08002b8b
 8002af0:	08002b8b 	.word	0x08002b8b
 8002af4:	08002b8b 	.word	0x08002b8b
 8002af8:	08002b8b 	.word	0x08002b8b
 8002afc:	08002b8b 	.word	0x08002b8b
 8002b00:	08002b8b 	.word	0x08002b8b
 8002b04:	08002b8b 	.word	0x08002b8b
 8002b08:	08002b8b 	.word	0x08002b8b
 8002b0c:	08002b8b 	.word	0x08002b8b
 8002b10:	08002b8b 	.word	0x08002b8b
 8002b14:	08002b8b 	.word	0x08002b8b
 8002b18:	08002b8b 	.word	0x08002b8b
 8002b1c:	08002b8b 	.word	0x08002b8b
 8002b20:	08002b39 	.word	0x08002b39
 8002b24:	08002b4d 	.word	0x08002b4d
 8002b28:	4a79      	ldr	r2, [pc, #484]	; (8002d10 <HAL_GPIO_Init+0x2b4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0xfa>
 8002b2e:	e02c      	b.n	8002b8a <HAL_GPIO_Init+0x12e>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	e029      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	e024      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	3308      	adds	r3, #8
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	e01f      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	330c      	adds	r3, #12
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	e01a      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <HAL_GPIO_Init+0x108>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	e013      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_GPIO_Init+0x11c>
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	623b      	str	r3, [r7, #32]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e009      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b78:	2308      	movs	r3, #8
 8002b7a:	623b      	str	r3, [r7, #32]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	e003      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
 8002b88:	e000      	b.n	8002b8c <HAL_GPIO_Init+0x130>
 8002b8a:	bf00      	nop
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	d801      	bhi.n	8002b96 <HAL_GPIO_Init+0x13a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	e001      	b.n	8002b9a <HAL_GPIO_Init+0x13e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	d802      	bhi.n	8002ba8 <HAL_GPIO_Init+0x14c>
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x152>
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	3b08      	subs	r3, #8
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	210f      	movs	r1, #15
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80b1 	beq.w	8002d3e <HAL_GPIO_Init+0x2e2>
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_GPIO_Init+0x2b8>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	; (8002d14 <HAL_GPIO_Init+0x2b8>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_GPIO_Init+0x2b8>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <HAL_GPIO_Init+0x2bc>)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <HAL_GPIO_Init+0x2c0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <HAL_GPIO_Init+0x1ec>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3f      	ldr	r2, [pc, #252]	; (8002d20 <HAL_GPIO_Init+0x2c4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00d      	beq.n	8002c44 <HAL_GPIO_Init+0x1e8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3e      	ldr	r2, [pc, #248]	; (8002d24 <HAL_GPIO_Init+0x2c8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <HAL_GPIO_Init+0x1e4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3d      	ldr	r2, [pc, #244]	; (8002d28 <HAL_GPIO_Init+0x2cc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_GPIO_Init+0x1e0>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_Init+0x1ee>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e004      	b.n	8002c4a <HAL_GPIO_Init+0x1ee>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x1ee>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_GPIO_Init+0x1ee>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	4093      	lsls	r3, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	492f      	ldr	r1, [pc, #188]	; (8002d18 <HAL_GPIO_Init+0x2bc>)
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x226>
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	492c      	ldr	r1, [pc, #176]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x234>
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	4928      	ldr	r1, [pc, #160]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_GPIO_Init+0x24e>
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x25c>
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	491e      	ldr	r1, [pc, #120]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60cb      	str	r3, [r1, #12]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_GPIO_Init+0x276>
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4918      	ldr	r1, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x284>
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	4914      	ldr	r1, [pc, #80]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d021      	beq.n	8002d30 <HAL_GPIO_Init+0x2d4>
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	490e      	ldr	r1, [pc, #56]	; (8002d2c <HAL_GPIO_Init+0x2d0>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e021      	b.n	8002d3e <HAL_GPIO_Init+0x2e2>
 8002cfa:	bf00      	nop
 8002cfc:	10320000 	.word	0x10320000
 8002d00:	10310000 	.word	0x10310000
 8002d04:	10220000 	.word	0x10220000
 8002d08:	10210000 	.word	0x10210000
 8002d0c:	10120000 	.word	0x10120000
 8002d10:	10110000 	.word	0x10110000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40010800 	.word	0x40010800
 8002d20:	40010c00 	.word	0x40010c00
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40011400 	.word	0x40011400
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	4909      	ldr	r1, [pc, #36]	; (8002d60 <HAL_GPIO_Init+0x304>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	3301      	adds	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f47f ae8e 	bne.w	8002a70 <HAL_GPIO_Init+0x14>
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	372c      	adds	r7, #44	; 0x2c
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_WritePin>:
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
 8002d70:	4613      	mov	r3, r2
 8002d72:	707b      	strb	r3, [r7, #1]
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_WritePin+0x1e>
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]
 8002d80:	e003      	b.n	8002d8a <HAL_GPIO_WritePin+0x26>
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	041a      	lsls	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_TogglePin>:
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4013      	ands	r3, r2
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43d9      	mvns	r1, r3
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	400b      	ands	r3, r1
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_PCD_Init>:
 8002dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc8:	b08f      	sub	sp, #60	; 0x3c
 8002dca:	af0a      	add	r7, sp, #40	; 0x28
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_Init+0x12>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e10f      	b.n	8002ff8 <HAL_PCD_Init+0x232>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_PCD_Init+0x32>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f005 fda2 	bl	800893c <HAL_PCD_MspInit>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_PCD_Init+0x4c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fe94 	bl	8005b44 <USB_DisableGlobalInt>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	687e      	ldr	r6, [r7, #4]
 8002e24:	466d      	mov	r5, sp
 8002e26:	f106 0410 	add.w	r4, r6, #16
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e3a:	1d33      	adds	r3, r6, #4
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f002 fdb2 	bl	80059a8 <USB_CoreInit>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_PCD_Init+0x90>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0d0      	b.n	8002ff8 <HAL_PCD_Init+0x232>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fe81 	bl	8005b64 <USB_SetCurrentMode>
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e04a      	b.n	8002efe <HAL_PCD_Init+0x138>
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333d      	adds	r3, #61	; 0x3d
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333c      	adds	r3, #60	; 0x3c
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	b298      	uxth	r0, r3
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3356      	adds	r3, #86	; 0x56
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3340      	adds	r3, #64	; 0x40
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3344      	adds	r3, #68	; 0x44
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3348      	adds	r3, #72	; 0x48
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334c      	adds	r3, #76	; 0x4c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3af      	bcc.n	8002e68 <HAL_PCD_Init+0xa2>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e044      	b.n	8002f98 <HAL_PCD_Init+0x1d2>
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3301      	adds	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3b5      	bcc.n	8002f0e <HAL_PCD_Init+0x148>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	687e      	ldr	r6, [r7, #4]
 8002faa:	466d      	mov	r5, sp
 8002fac:	f106 0410 	add.w	r4, r6, #16
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc0:	1d33      	adds	r3, r6, #4
 8002fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc4:	6838      	ldr	r0, [r7, #0]
 8002fc6:	f002 fe19 	bl	8005bfc <USB_DevInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x216>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e00d      	b.n	8002ff8 <HAL_PCD_Init+0x232>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fda3 	bl	8006b3c <USB_DevDisconnect>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003000 <HAL_PCD_Start>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_PCD_Start+0x16>
 8003012:	2302      	movs	r3, #2
 8003014:	e012      	b.n	800303c <HAL_PCD_Start+0x3c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 fd7e 	bl	8005b24 <USB_EnableGlobalInt>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fd65 	bl	8006afc <USB_DevConnect>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800303a:	2300      	movs	r3, #0
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_PCD_IRQHandler>:
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08d      	sub	sp, #52	; 0x34
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fe1c 	bl	8006c98 <USB_GetMode>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 8443 	bne.w	80038ee <HAL_PCD_IRQHandler+0x8aa>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fd85 	bl	8006b7c <USB_ReadInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8439 	beq.w	80038ec <HAL_PCD_IRQHandler+0x8a8>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fd72 	bl	8006b7c <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d107      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x6e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 0202 	and.w	r2, r2, #2
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fd60 	bl	8006b7c <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d161      	bne.n	800318a <HAL_PCD_IRQHandler+0x146>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0210 	bic.w	r2, r2, #16
 80030d4:	619a      	str	r2, [r3, #24]
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	0c5b      	lsrs	r3, r3, #17
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d124      	bne.n	800314c <HAL_PCD_IRQHandler+0x108>
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d035      	beq.n	800317a <HAL_PCD_IRQHandler+0x136>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	b29b      	uxth	r3, r3
 8003118:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6a38      	ldr	r0, [r7, #32]
 8003122:	f003 fb9d 	bl	8006860 <USB_ReadPacket>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003132:	441a      	add	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003144:	441a      	add	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	e016      	b.n	800317a <HAL_PCD_IRQHandler+0x136>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	2b06      	cmp	r3, #6
 8003156:	d110      	bne.n	800317a <HAL_PCD_IRQHandler+0x136>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315e:	2208      	movs	r2, #8
 8003160:	4619      	mov	r1, r3
 8003162:	6a38      	ldr	r0, [r7, #32]
 8003164:	f003 fb7c 	bl	8006860 <USB_ReadPacket>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003174:	441a      	add	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0210 	orr.w	r2, r2, #16
 8003188:	619a      	str	r2, [r3, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fcf4 	bl	8006b7c <USB_ReadInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800319e:	f040 80a7 	bne.w	80032f0 <HAL_PCD_IRQHandler+0x2ac>
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fcf8 	bl	8006ba0 <USB_ReadDevAllOutEpInterrupt>
 80031b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80031b2:	e099      	b.n	80032e8 <HAL_PCD_IRQHandler+0x2a4>
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808e 	beq.w	80032dc <HAL_PCD_IRQHandler+0x298>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fd1a 	bl	8006c04 <USB_ReadDevOutEPInterrupt>
 80031d0:	6138      	str	r0, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x1b2>
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	461a      	mov	r2, r3
 80031ea:	2301      	movs	r3, #1
 80031ec:	6093      	str	r3, [r2, #8]
 80031ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fe41 	bl	8003e78 <PCD_EP_OutXfrComplete_int>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_PCD_IRQHandler+0x1d6>
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	2308      	movs	r3, #8
 8003210:	6093      	str	r3, [r2, #8]
 8003212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fe7d 	bl	8003f14 <PCD_EP_OutSetupPacket_int>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_PCD_IRQHandler+0x1f2>
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	2310      	movs	r3, #16
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d030      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x25e>
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d109      	bne.n	8003260 <HAL_PCD_IRQHandler+0x21c>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325e:	6053      	str	r3, [r2, #4]
 8003260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_PCD_IRQHandler+0x24c>
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	70da      	strb	r2, [r3, #3]
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f005 fc44 	bl	8008b18 <HAL_PCD_ISOOUTIncompleteCallback>
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	2302      	movs	r3, #2
 80032a0:	6093      	str	r3, [r2, #8]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_PCD_IRQHandler+0x27a>
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b8:	461a      	mov	r2, r3
 80032ba:	2320      	movs	r3, #32
 80032bc:	6093      	str	r3, [r2, #8]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_PCD_IRQHandler+0x298>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	3301      	adds	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f47f af62 	bne.w	80031b4 <HAL_PCD_IRQHandler+0x170>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fc41 	bl	8006b7c <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003304:	f040 80a4 	bne.w	8003450 <HAL_PCD_IRQHandler+0x40c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 fc60 	bl	8006bd2 <USB_ReadDevAllInEpInterrupt>
 8003312:	62b8      	str	r0, [r7, #40]	; 0x28
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	e096      	b.n	8003448 <HAL_PCD_IRQHandler+0x404>
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 808b 	beq.w	800343c <HAL_PCD_IRQHandler+0x3f8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fc84 	bl	8006c3e <USB_ReadDevInEPInterrupt>
 8003336:	6138      	str	r0, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_PCD_IRQHandler+0x340>
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43db      	mvns	r3, r3
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003362:	4013      	ands	r3, r2
 8003364:	634b      	str	r3, [r1, #52]	; 0x34
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	4413      	add	r3, r2
 800336e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003372:	461a      	mov	r2, r3
 8003374:	2301      	movs	r3, #1
 8003376:	6093      	str	r3, [r2, #8]
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f005 fb4f 	bl	8008a22 <HAL_PCD_DataInStageCallback>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_PCD_IRQHandler+0x35c>
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339a:	461a      	mov	r2, r3
 800339c:	2308      	movs	r3, #8
 800339e:	6093      	str	r3, [r2, #8]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_PCD_IRQHandler+0x378>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	461a      	mov	r2, r3
 80033b8:	2310      	movs	r3, #16
 80033ba:	6093      	str	r3, [r2, #8]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x394>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d2:	461a      	mov	r2, r3
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	6093      	str	r3, [r2, #8]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d023      	beq.n	800342a <HAL_PCD_IRQHandler+0x3e6>
 80033e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e4:	6a38      	ldr	r0, [r7, #32]
 80033e6:	f002 fd2b 	bl	8005e40 <USB_FlushTxFifo>
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	3338      	adds	r3, #56	; 0x38
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	3304      	adds	r3, #4
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	78db      	ldrb	r3, [r3, #3]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_PCD_IRQHandler+0x3d4>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	70da      	strb	r2, [r3, #3]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f005 fb92 	bl	8008b3c <HAL_PCD_ISOINIncompleteCallback>
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	461a      	mov	r2, r3
 8003426:	2302      	movs	r3, #2
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_PCD_IRQHandler+0x3f8>
 8003434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fc96 	bl	8003d68 <PCD_WriteEmptyTxFifo>
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	3301      	adds	r3, #1
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	f47f af65 	bne.w	800331a <HAL_PCD_IRQHandler+0x2d6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fb91 	bl	8006b7c <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003464:	d114      	bne.n	8003490 <HAL_PCD_IRQHandler+0x44c>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6053      	str	r3, [r2, #4]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f005 fb3e 	bl	8008afc <HAL_PCD_ResumeCallback>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800348e:	615a      	str	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fb71 	bl	8006b7c <USB_ReadInterrupts>
 800349a:	4603      	mov	r3, r0
 800349c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a4:	d112      	bne.n	80034cc <HAL_PCD_IRQHandler+0x488>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_IRQHandler+0x478>
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f005 fafa 	bl	8008ab0 <HAL_PCD_SuspendCallback>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 fb53 	bl	8006b7c <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	f040 80b5 	bne.w	800364e <HAL_PCD_IRQHandler+0x60a>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6053      	str	r3, [r2, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2110      	movs	r1, #16
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fc9e 	bl	8005e40 <USB_FlushTxFifo>
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003508:	e046      	b.n	8003598 <HAL_PCD_IRQHandler+0x554>
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003516:	461a      	mov	r2, r3
 8003518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352e:	0151      	lsls	r1, r2, #5
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	440a      	add	r2, r1
 8003534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354a:	461a      	mov	r2, r3
 800354c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800356c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	440a      	add	r2, r1
 8003588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800358c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	3301      	adds	r3, #1
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3b3      	bcc.n	800350a <HAL_PCD_IRQHandler+0x4c6>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035b4:	61d3      	str	r3, [r2, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_PCD_IRQHandler+0x5a8>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ce:	f043 030b 	orr.w	r3, r3, #11
 80035d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e4:	f043 030b 	orr.w	r3, r3, #11
 80035e8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ea:	e015      	b.n	8003618 <HAL_PCD_IRQHandler+0x5d4>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003602:	6153      	str	r3, [r2, #20]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003612:	f043 030b 	orr.w	r3, r3, #11
 8003616:	6113      	str	r3, [r2, #16]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f003 fb5d 	bl	8006cf8 <USB_EP0_OutStart>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800364c:	615a      	str	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fa92 	bl	8006b7c <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d124      	bne.n	80036ae <HAL_PCD_IRQHandler+0x66a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f003 fb22 	bl	8006cb2 <USB_ActivateSetup>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fc60 	bl	8005f38 <USB_GetDevSpeed>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	611a      	str	r2, [r3, #16]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681c      	ldr	r4, [r3, #0]
 8003684:	f001 f98c 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 8003688:	4601      	mov	r1, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	4620      	mov	r0, r4
 8003694:	f002 f9aa 	bl	80059ec <USB_SetTurnaroundTime>
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f005 f9ea 	bl	8008a72 <HAL_PCD_ResetCallback>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036ac:	615a      	str	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fa62 	bl	8006b7c <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d10a      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x694>
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 f9c7 	bl	8008a56 <HAL_PCD_SOFCallback>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f002 0208 	and.w	r2, r2, #8
 80036d6:	615a      	str	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fa4d 	bl	8006b7c <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d122      	bne.n	8003732 <HAL_PCD_IRQHandler+0x6ee>
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
 80036fc:	e014      	b.n	8003728 <HAL_PCD_IRQHandler+0x6e4>
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_PCD_IRQHandler+0x6de>
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 faf2 	bl	8003d06 <HAL_PCD_EP_Abort>
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	3301      	adds	r3, #1
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372e:	429a      	cmp	r2, r3
 8003730:	d3e5      	bcc.n	80036fe <HAL_PCD_IRQHandler+0x6ba>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fa20 	bl	8006b7c <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003746:	d13b      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x77c>
 8003748:	2301      	movs	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	e02b      	b.n	80037a6 <HAL_PCD_IRQHandler+0x762>
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d115      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x75c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da12      	bge.n	80037a0 <HAL_PCD_IRQHandler+0x75c>
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	333f      	adds	r3, #63	; 0x3f
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fab3 	bl	8003d06 <HAL_PCD_EP_Abort>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	3301      	adds	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3ce      	bcc.n	800374e <HAL_PCD_IRQHandler+0x70a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037be:	615a      	str	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 f9d9 	bl	8006b7c <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d4:	d155      	bne.n	8003882 <HAL_PCD_IRQHandler+0x83e>
 80037d6:	2301      	movs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e045      	b.n	8003868 <HAL_PCD_IRQHandler+0x824>
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d12e      	bne.n	8003862 <HAL_PCD_IRQHandler+0x81e>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da2b      	bge.n	8003862 <HAL_PCD_IRQHandler+0x81e>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	429a      	cmp	r2, r3
 800381c:	d121      	bne.n	8003862 <HAL_PCD_IRQHandler+0x81e>
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	619a      	str	r2, [r3, #24]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_PCD_IRQHandler+0x81e>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385e:	6053      	str	r3, [r2, #4]
 8003860:	e007      	b.n	8003872 <HAL_PCD_IRQHandler+0x82e>
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	429a      	cmp	r2, r3
 8003870:	d3b4      	bcc.n	80037dc <HAL_PCD_IRQHandler+0x798>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003880:	615a      	str	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 f978 	bl	8006b7c <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d10a      	bne.n	80038ae <HAL_PCD_IRQHandler+0x86a>
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f005 f961 	bl	8008b60 <HAL_PCD_ConnectCallback>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038ac:	615a      	str	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 f962 	bl	8006b7c <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d115      	bne.n	80038ee <HAL_PCD_IRQHandler+0x8aa>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_PCD_IRQHandler+0x896>
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f005 f951 	bl	8008b7c <HAL_PCD_DisconnectCallback>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	e000      	b.n	80038ee <HAL_PCD_IRQHandler+0x8aa>
 80038ec:	bf00      	nop
 80038ee:	3734      	adds	r7, #52	; 0x34
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd90      	pop	{r4, r7, pc}

080038f4 <HAL_PCD_SetAddress>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_PCD_SetAddress+0x1a>
 800390a:	2302      	movs	r3, #2
 800390c:	e013      	b.n	8003936 <HAL_PCD_SetAddress+0x42>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f003 f8c3 	bl	8006ab2 <USB_SetDevAddress>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003934:	2300      	movs	r3, #0
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_PCD_EP_Open>:
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	4608      	mov	r0, r1
 8003948:	4611      	mov	r1, r2
 800394a:	461a      	mov	r2, r3
 800394c:	4603      	mov	r3, r0
 800394e:	70fb      	strb	r3, [r7, #3]
 8003950:	460b      	mov	r3, r1
 8003952:	803b      	strh	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	70bb      	strb	r3, [r7, #2]
 8003958:	2300      	movs	r3, #0
 800395a:	72fb      	strb	r3, [r7, #11]
 800395c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	da0f      	bge.n	8003984 <HAL_PCD_EP_Open+0x46>
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 020f 	and.w	r2, r3, #15
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3338      	adds	r3, #56	; 0x38
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	705a      	strb	r2, [r3, #1]
 8003982:	e00f      	b.n	80039a4 <HAL_PCD_EP_Open+0x66>
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	f003 020f 	and.w	r2, r3, #15
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	705a      	strb	r2, [r3, #1]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	883a      	ldrh	r2, [r7, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	609a      	str	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	78ba      	ldrb	r2, [r7, #2]
 80039ba:	711a      	strb	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <HAL_PCD_EP_Open+0x90>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	835a      	strh	r2, [r3, #26]
 80039ce:	78bb      	ldrb	r3, [r7, #2]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d102      	bne.n	80039da <HAL_PCD_EP_Open+0x9c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	715a      	strb	r2, [r3, #5]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_PCD_EP_Open+0xaa>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e00e      	b.n	8003a06 <HAL_PCD_EP_Open+0xc8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fabc 	bl	8005f74 <USB_ActivateEndpoint>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_PCD_EP_Close>:
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	70fb      	strb	r3, [r7, #3]
 8003a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	da0f      	bge.n	8003a42 <HAL_PCD_EP_Close+0x34>
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	f003 020f 	and.w	r2, r3, #15
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	3338      	adds	r3, #56	; 0x38
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3304      	adds	r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	705a      	strb	r2, [r3, #1]
 8003a40:	e00f      	b.n	8003a62 <HAL_PCD_EP_Close+0x54>
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 020f 	and.w	r2, r3, #15
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	3304      	adds	r3, #4
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	705a      	strb	r2, [r3, #1]
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_PCD_EP_Close+0x6e>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e00e      	b.n	8003a9a <HAL_PCD_EP_Close+0x8c>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68f9      	ldr	r1, [r7, #12]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f002 faf8 	bl	8006080 <USB_DeactivateEndpoint>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003a98:	2300      	movs	r3, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_PCD_EP_Receive>:
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	72fb      	strb	r3, [r7, #11]
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2200      	movs	r2, #0
 8003adc:	615a      	str	r2, [r3, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	705a      	strb	r2, [r3, #1]
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 fb9e 	bl	8006238 <USB_EPStartXfer>
 8003afc:	2300      	movs	r3, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_PCD_EP_GetRxCount>:
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 020f 	and.w	r2, r3, #15
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCD_EP_Transmit>:
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	72fb      	strb	r3, [r7, #11]
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3338      	adds	r3, #56	; 0x38
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	611a      	str	r2, [r3, #16]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 fb56 	bl	8006238 <USB_EPStartXfer>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_PCD_EP_SetStall>:
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d901      	bls.n	8003bb4 <HAL_PCD_EP_SetStall+0x1e>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04e      	b.n	8003c52 <HAL_PCD_EP_SetStall+0xbc>
 8003bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da0f      	bge.n	8003bdc <HAL_PCD_EP_SetStall+0x46>
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	3338      	adds	r3, #56	; 0x38
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	705a      	strb	r2, [r3, #1]
 8003bda:	e00d      	b.n	8003bf8 <HAL_PCD_EP_SetStall+0x62>
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	3304      	adds	r3, #4
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	705a      	strb	r2, [r3, #1]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	709a      	strb	r2, [r3, #2]
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_PCD_EP_SetStall+0x82>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e01c      	b.n	8003c52 <HAL_PCD_EP_SetStall+0xbc>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68f9      	ldr	r1, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 fe71 	bl	800690e <USB_EPSetStall>
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_PCD_EP_SetStall+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f003 f858 	bl	8006cf8 <USB_EP0_OutStart>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003c50:	2300      	movs	r3, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_ClrStall>:
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d901      	bls.n	8003c78 <HAL_PCD_EP_ClrStall+0x1e>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e042      	b.n	8003cfe <HAL_PCD_EP_ClrStall+0xa4>
 8003c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da0f      	bge.n	8003ca0 <HAL_PCD_EP_ClrStall+0x46>
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	3338      	adds	r3, #56	; 0x38
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	705a      	strb	r2, [r3, #1]
 8003c9e:	e00f      	b.n	8003cc0 <HAL_PCD_EP_ClrStall+0x66>
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	705a      	strb	r2, [r3, #1]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	709a      	strb	r2, [r3, #2]
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_PCD_EP_ClrStall+0x86>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e00e      	b.n	8003cfe <HAL_PCD_EP_ClrStall+0xa4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 fe7a 	bl	80069e8 <USB_EPClearStall>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_PCD_EP_Abort>:
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da0c      	bge.n	8003d34 <HAL_PCD_EP_Abort+0x2e>
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	3338      	adds	r3, #56	; 0x38
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3304      	adds	r3, #4
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e00c      	b.n	8003d4e <HAL_PCD_EP_Abort+0x48>
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 fca1 	bl	800669c <USB_EPStopXfer>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	72fb      	strb	r3, [r7, #11]
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <PCD_WriteEmptyTxFifo>:
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3338      	adds	r3, #56	; 0x38
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d901      	bls.n	8003da0 <PCD_WriteEmptyTxFifo+0x38>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e067      	b.n	8003e70 <PCD_WriteEmptyTxFifo+0x108>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d902      	bls.n	8003dbc <PCD_WriteEmptyTxFifo+0x54>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3303      	adds	r3, #3
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e026      	b.n	8003e14 <PCD_WriteEmptyTxFifo+0xac>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d902      	bls.n	8003de2 <PCD_WriteEmptyTxFifo+0x7a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3303      	adds	r3, #3
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68d9      	ldr	r1, [r3, #12]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f002 fcf9 	bl	80067ee <USB_WritePacket>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	441a      	add	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	615a      	str	r2, [r3, #20]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d809      	bhi.n	8003e3e <PCD_WriteEmptyTxFifo+0xd6>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d203      	bcs.n	8003e3e <PCD_WriteEmptyTxFifo+0xd6>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1c3      	bne.n	8003dc6 <PCD_WriteEmptyTxFifo+0x5e>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d811      	bhi.n	8003e6e <PCD_WriteEmptyTxFifo+0x106>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <PCD_EP_OutXfrComplete_int>:
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	333c      	adds	r3, #60	; 0x3c
 8003e90:	3304      	adds	r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <PCD_EP_OutXfrComplete_int+0x98>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d124      	bne.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x80>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <PCD_EP_OutXfrComplete_int+0x56>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	e01a      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x8c>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <PCD_EP_OutXfrComplete_int+0x72>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f004 fd7b 	bl	80089ec <HAL_PCD_DataOutStageCallback>
 8003ef6:	e005      	b.n	8003f04 <PCD_EP_OutXfrComplete_int+0x8c>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f004 fd74 	bl	80089ec <HAL_PCD_DataOutStageCallback>
 8003f04:	2300      	movs	r3, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	4f54310a 	.word	0x4f54310a

08003f14 <PCD_EP_OutSetupPacket_int>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	333c      	adds	r3, #60	; 0x3c
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x64>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d90e      	bls.n	8003f68 <PCD_EP_OutSetupPacket_int+0x54>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <PCD_EP_OutSetupPacket_int+0x54>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	461a      	mov	r2, r3
 8003f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f66:	6093      	str	r3, [r2, #8]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f004 fd2d 	bl	80089c8 <HAL_PCD_SetupStageCallback>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	4f54300a 	.word	0x4f54300a

08003f7c <HAL_PCDEx_SetTxFiFo>:
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	803b      	strh	r3, [r7, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_PCDEx_SetTxFiFo+0x2e>
 8003f9a:	883b      	ldrh	r3, [r7, #0]
 8003f9c:	0419      	lsls	r1, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e028      	b.n	8003ffc <HAL_PCDEx_SetTxFiFo+0x80>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e00d      	b.n	8003fda <HAL_PCDEx_SetTxFiFo+0x5e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3ec      	bcc.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x42>
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	0418      	lsls	r0, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4302      	orrs	r2, r0
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <HAL_PCDEx_SetRxFiFo>:
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	887a      	ldrh	r2, [r7, #2]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24
 800401c:	2300      	movs	r3, #0
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <HAL_RCC_OscConfig>:
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x12>
 8004036:	2301      	movs	r3, #1
 8004038:	e304      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8087 	beq.w	8004156 <HAL_RCC_OscConfig+0x12e>
 8004048:	4b92      	ldr	r3, [pc, #584]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b04      	cmp	r3, #4
 8004052:	d00c      	beq.n	800406e <HAL_RCC_OscConfig+0x46>
 8004054:	4b8f      	ldr	r3, [pc, #572]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d112      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
 8004060:	4b8c      	ldr	r3, [pc, #560]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d10b      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
 800406e:	4b89      	ldr	r3, [pc, #548]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06c      	beq.n	8004154 <HAL_RCC_OscConfig+0x12c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d168      	bne.n	8004154 <HAL_RCC_OscConfig+0x12c>
 8004082:	2301      	movs	r3, #1
 8004084:	e2de      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x76>
 8004090:	4b80      	ldr	r3, [pc, #512]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7f      	ldr	r2, [pc, #508]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e02e      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x98>
 80040a6:	4b7b      	ldr	r3, [pc, #492]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7a      	ldr	r2, [pc, #488]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b78      	ldr	r3, [pc, #480]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a77      	ldr	r2, [pc, #476]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0xbc>
 80040ca:	4b72      	ldr	r3, [pc, #456]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a71      	ldr	r2, [pc, #452]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6e      	ldr	r2, [pc, #440]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040e4:	4b6b      	ldr	r3, [pc, #428]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a67      	ldr	r2, [pc, #412]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0x104>
 8004104:	f7fd ff2a 	bl	8001f5c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xf6>
 800410c:	f7fd ff26 	bl	8001f5c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	; 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xf6>
 800411a:	2303      	movs	r3, #3
 800411c:	e292      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800411e:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xe4>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
 800412c:	f7fd ff16 	bl	8001f5c <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x11e>
 8004134:	f7fd ff12 	bl	8001f5c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x11e>
 8004142:	2303      	movs	r3, #3
 8004144:	e27e      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004146:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x10c>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
 8004154:	bf00      	nop
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_OscConfig+0x202>
 8004162:	4b4c      	ldr	r3, [pc, #304]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x15e>
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
 8004186:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
 800419a:	2301      	movs	r3, #1
 800419c:	e252      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800419e:	4b3d      	ldr	r3, [pc, #244]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4939      	ldr	r1, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x202>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1d6>
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <HAL_RCC_OscConfig+0x270>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	f7fd fecb 	bl	8001f5c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x1b4>
 80041ca:	f7fd fec7 	bl	8001f5c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x1b4>
 80041d8:	2303      	movs	r3, #3
 80041da:	e233      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x1a2>
 80041e8:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4927      	ldr	r1, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x202>
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCC_OscConfig+0x270>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	f7fd feaa 	bl	8001f5c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1f6>
 800420c:	f7fd fea6 	bl	8001f5c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1f6>
 800421a:	2303      	movs	r3, #3
 800421c:	e212      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1e4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03a      	beq.n	80042ac <HAL_RCC_OscConfig+0x284>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <HAL_RCC_OscConfig+0x24a>
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_RCC_OscConfig+0x274>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f7fd fe8a 	bl	8001f5c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x236>
 800424c:	f7fd fe86 	bl	8001f5c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x236>
 800425a:	2303      	movs	r3, #3
 800425c:	e1f2      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x224>
 800426a:	2001      	movs	r0, #1
 800426c:	f000 fba2 	bl	80049b4 <RCC_Delay>
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x284>
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x274>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f7fd fe70 	bl	8001f5c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x278>
 8004280:	f7fd fe6c 	bl	8001f5c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d908      	bls.n	80042a0 <HAL_RCC_OscConfig+0x278>
 800428e:	2303      	movs	r3, #3
 8004290:	e1d8      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	42420000 	.word	0x42420000
 800429c:	42420480 	.word	0x42420480
 80042a0:	4b9b      	ldr	r3, [pc, #620]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e9      	bne.n	8004280 <HAL_RCC_OscConfig+0x258>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a6 	beq.w	8004406 <HAL_RCC_OscConfig+0x3de>
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
 80042be:	4b94      	ldr	r3, [pc, #592]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2be>
 80042ca:	4b91      	ldr	r3, [pc, #580]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a90      	ldr	r2, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]
 80042d6:	4b8e      	ldr	r3, [pc, #568]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
 80042e6:	4b8b      	ldr	r3, [pc, #556]	; (8004514 <HAL_RCC_OscConfig+0x4ec>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2fc>
 80042f2:	4b88      	ldr	r3, [pc, #544]	; (8004514 <HAL_RCC_OscConfig+0x4ec>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a87      	ldr	r2, [pc, #540]	; (8004514 <HAL_RCC_OscConfig+0x4ec>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	f7fd fe2d 	bl	8001f5c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2f0>
 8004306:	f7fd fe29 	bl	8001f5c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	; 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2f0>
 8004314:	2303      	movs	r3, #3
 8004316:	e195      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004318:	4b7e      	ldr	r3, [pc, #504]	; (8004514 <HAL_RCC_OscConfig+0x4ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2de>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x312>
 800432c:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6213      	str	r3, [r2, #32]
 8004338:	e02d      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x334>
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a72      	ldr	r2, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a6f      	ldr	r2, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	e01c      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x356>
 8004364:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a69      	ldr	r2, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4b67      	ldr	r3, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800437e:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a63      	ldr	r2, [pc, #396]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b61      	ldr	r3, [pc, #388]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d015      	beq.n	80043ca <HAL_RCC_OscConfig+0x3a2>
 800439e:	f7fd fddd 	bl	8001f5c <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x394>
 80043a6:	f7fd fdd9 	bl	8001f5c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x394>
 80043b8:	2303      	movs	r3, #3
 80043ba:	e143      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 80043bc:	4b54      	ldr	r3, [pc, #336]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ee      	beq.n	80043a6 <HAL_RCC_OscConfig+0x37e>
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x3cc>
 80043ca:	f7fd fdc7 	bl	8001f5c <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
 80043d2:	f7fd fdc3 	bl	8001f5c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
 80043e4:	2303      	movs	r3, #3
 80043e6:	e12d      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ee      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3aa>
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCC_OscConfig+0x3de>
 80043fa:	4b45      	ldr	r3, [pc, #276]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4a44      	ldr	r2, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004404:	61d3      	str	r3, [r2, #28]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 808c 	beq.w	8004528 <HAL_RCC_OscConfig+0x500>
 8004410:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d10e      	bne.n	800443c <HAL_RCC_OscConfig+0x414>
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d108      	bne.n	800443c <HAL_RCC_OscConfig+0x414>
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x414>
 8004438:	2301      	movs	r3, #1
 800443a:	e103      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	2b02      	cmp	r3, #2
 8004442:	d14e      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4ba>
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d009      	beq.n	8004464 <HAL_RCC_OscConfig+0x43c>
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_OscConfig+0x43c>
 8004460:	2301      	movs	r3, #1
 8004462:	e0ef      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004464:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCC_OscConfig+0x4f0>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f7fd fd77 	bl	8001f5c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x45c>
 8004472:	f7fd fd73 	bl	8001f5c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x45c>
 8004480:	2303      	movs	r3, #3
 8004482:	e0df      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004484:	4b22      	ldr	r3, [pc, #136]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x44a>
 8004490:	4b1f      	ldr	r3, [pc, #124]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	491c      	ldr	r1, [pc, #112]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4918      	ldr	r1, [pc, #96]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80044b4:	4b18      	ldr	r3, [pc, #96]	; (8004518 <HAL_RCC_OscConfig+0x4f0>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f7fd fd4f 	bl	8001f5c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x4ac>
 80044c2:	f7fd fd4b 	bl	8001f5c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x4ac>
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0b7      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 80044d4:	4b0e      	ldr	r3, [pc, #56]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x49a>
 80044e0:	e022      	b.n	8004528 <HAL_RCC_OscConfig+0x500>
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_OscConfig+0x4f0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f7fd fd32 	bl	8001f5c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]
 80044fa:	e00f      	b.n	800451c <HAL_RCC_OscConfig+0x4f4>
 80044fc:	f7fd fd2e 	bl	8001f5c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d908      	bls.n	800451c <HAL_RCC_OscConfig+0x4f4>
 800450a:	2303      	movs	r3, #3
 800450c:	e09a      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
 8004518:	42420068 	.word	0x42420068
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x624>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e9      	bne.n	80044fc <HAL_RCC_OscConfig+0x4d4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8088 	beq.w	8004642 <HAL_RCC_OscConfig+0x61a>
 8004532:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCC_OscConfig+0x624>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b08      	cmp	r3, #8
 800453c:	d068      	beq.n	8004610 <HAL_RCC_OscConfig+0x5e8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d14d      	bne.n	80045e2 <HAL_RCC_OscConfig+0x5ba>
 8004546:	4b42      	ldr	r3, [pc, #264]	; (8004650 <HAL_RCC_OscConfig+0x628>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f7fd fd06 	bl	8001f5c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x53e>
 8004554:	f7fd fd02 	bl	8001f5c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x53e>
 8004562:	2303      	movs	r3, #3
 8004564:	e06e      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <HAL_RCC_OscConfig+0x624>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x52c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457a:	d10f      	bne.n	800459c <HAL_RCC_OscConfig+0x574>
 800457c:	4b33      	ldr	r3, [pc, #204]	; (800464c <HAL_RCC_OscConfig+0x624>)
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4931      	ldr	r1, [pc, #196]	; (800464c <HAL_RCC_OscConfig+0x624>)
 8004586:	4313      	orrs	r3, r2
 8004588:	62cb      	str	r3, [r1, #44]	; 0x2c
 800458a:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCC_OscConfig+0x624>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f023 020f 	bic.w	r2, r3, #15
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	492d      	ldr	r1, [pc, #180]	; (800464c <HAL_RCC_OscConfig+0x624>)
 8004598:	4313      	orrs	r3, r2
 800459a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800459c:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_RCC_OscConfig+0x624>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	430b      	orrs	r3, r1
 80045ae:	4927      	ldr	r1, [pc, #156]	; (800464c <HAL_RCC_OscConfig+0x624>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <HAL_RCC_OscConfig+0x628>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f7fd fccf 	bl	8001f5c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x5ac>
 80045c2:	f7fd fccb 	bl	8001f5c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x5ac>
 80045d0:	2303      	movs	r3, #3
 80045d2:	e037      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCC_OscConfig+0x624>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x59a>
 80045e0:	e02f      	b.n	8004642 <HAL_RCC_OscConfig+0x61a>
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x628>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f7fd fcb8 	bl	8001f5c <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x5da>
 80045f0:	f7fd fcb4 	bl	8001f5c <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x5da>
 80045fe:	2303      	movs	r3, #3
 8004600:	e020      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCC_OscConfig+0x624>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x5c8>
 800460e:	e018      	b.n	8004642 <HAL_RCC_OscConfig+0x61a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x5f4>
 8004618:	2301      	movs	r3, #1
 800461a:	e013      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x624>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	429a      	cmp	r2, r3
 800462e:	d106      	bne.n	800463e <HAL_RCC_OscConfig+0x616>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	429a      	cmp	r2, r3
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x61a>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_RCC_OscConfig+0x61c>
 8004642:	2300      	movs	r3, #0
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	42420060 	.word	0x42420060

08004654 <HAL_RCC_ClockConfig>:
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x14>
 8004664:	2301      	movs	r3, #1
 8004666:	e0d0      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d910      	bls.n	8004698 <HAL_RCC_ClockConfig+0x44>
 8004676:	4b67      	ldr	r3, [pc, #412]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 0207 	bic.w	r2, r3, #7
 800467e:	4965      	ldr	r1, [pc, #404]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
 8004686:	4b63      	ldr	r3, [pc, #396]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x44>
 8004694:	2301      	movs	r3, #1
 8004696:	e0b8      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x92>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x68>
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ba:	6053      	str	r3, [r2, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x80>
 80046c8:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046d2:	6053      	str	r3, [r2, #4]
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d040      	beq.n	8004774 <HAL_RCC_ClockConfig+0x120>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xb6>
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d115      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
 8004706:	2301      	movs	r3, #1
 8004708:	e07f      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xce>
 8004712:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
 800471e:	2301      	movs	r3, #1
 8004720:	e073      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_RCC_ClockConfig+0xde>
 800472e:	2301      	movs	r3, #1
 8004730:	e06b      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f023 0203 	bic.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4936      	ldr	r1, [pc, #216]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
 8004744:	f7fd fc0a 	bl	8001f5c <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x10e>
 800474c:	f7fd fc06 	bl	8001f5c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x10e>
 800475e:	2303      	movs	r3, #3
 8004760:	e053      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 020c 	and.w	r2, r3, #12
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	429a      	cmp	r2, r3
 8004772:	d1eb      	bne.n	800474c <HAL_RCC_ClockConfig+0xf8>
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d210      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x150>
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 0207 	bic.w	r2, r3, #7
 800478a:	4922      	ldr	r1, [pc, #136]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x150>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e032      	b.n	800480a <HAL_RCC_ClockConfig+0x1b6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x16e>
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4916      	ldr	r1, [pc, #88]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	604b      	str	r3, [r1, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x18e>
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
 80047e2:	f000 f821 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490a      	ldr	r1, [pc, #40]	; (800481c <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	fa22 f303 	lsr.w	r3, r2, r3
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_RCC_ClockConfig+0x1cc>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fb68 	bl	8001ed8 <HAL_InitTick>
 8004808:	2300      	movs	r3, #0
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40022000 	.word	0x40022000
 8004818:	40021000 	.word	0x40021000
 800481c:	08009d50 	.word	0x08009d50
 8004820:	2000006c 	.word	0x2000006c
 8004824:	20000070 	.word	0x20000070

08004828 <HAL_RCC_GetSysClockFreq>:
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b08e      	sub	sp, #56	; 0x38
 800482e:	af00      	add	r7, sp, #0
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	2300      	movs	r3, #0
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
 800483c:	2300      	movs	r3, #0
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	2300      	movs	r3, #0
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
 8004844:	2300      	movs	r3, #0
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	4b4e      	ldr	r3, [pc, #312]	; (8004988 <HAL_RCC_GetSysClockFreq+0x160>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b04      	cmp	r3, #4
 800485a:	d002      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x3a>
 800485c:	2b08      	cmp	r3, #8
 800485e:	d003      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x40>
 8004860:	e089      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x14e>
 8004862:	4b4a      	ldr	r3, [pc, #296]	; (800498c <HAL_RCC_GetSysClockFreq+0x164>)
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	e089      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x154>
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	0c9b      	lsrs	r3, r3, #18
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_GetSysClockFreq+0x168>)
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d072      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x13e>
 8004880:	4b41      	ldr	r3, [pc, #260]	; (8004988 <HAL_RCC_GetSysClockFreq+0x160>)
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCC_GetSysClockFreq+0x16c>)
 800488a:	5c9b      	ldrb	r3, [r3, r2]
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
 800488e:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <HAL_RCC_GetSysClockFreq+0x160>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d053      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x11a>
 800489a:	4b3b      	ldr	r3, [pc, #236]	; (8004988 <HAL_RCC_GetSysClockFreq+0x160>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	3301      	adds	r3, #1
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	4b37      	ldr	r3, [pc, #220]	; (8004988 <HAL_RCC_GetSysClockFreq+0x160>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	3302      	adds	r3, #2
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2200      	movs	r2, #0
 80048ba:	469a      	mov	sl, r3
 80048bc:	4693      	mov	fp, r2
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	2200      	movs	r2, #0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	617a      	str	r2, [r7, #20]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	fb03 f20b 	mul.w	r2, r3, fp
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fb0a f303 	mul.w	r3, sl, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	fbaa 0102 	umull	r0, r1, sl, r2
 80048da:	440b      	add	r3, r1
 80048dc:	4619      	mov	r1, r3
 80048de:	4b2b      	ldr	r3, [pc, #172]	; (800498c <HAL_RCC_GetSysClockFreq+0x164>)
 80048e0:	fb03 f201 	mul.w	r2, r3, r1
 80048e4:	2300      	movs	r3, #0
 80048e6:	fb00 f303 	mul.w	r3, r0, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	4a27      	ldr	r2, [pc, #156]	; (800498c <HAL_RCC_GetSysClockFreq+0x164>)
 80048ee:	fba0 4502 	umull	r4, r5, r0, r2
 80048f2:	442b      	add	r3, r5
 80048f4:	461d      	mov	r5, r3
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	2200      	movs	r2, #0
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	60fa      	str	r2, [r7, #12]
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	2200      	movs	r2, #0
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800490a:	460b      	mov	r3, r1
 800490c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004910:	4652      	mov	r2, sl
 8004912:	fb02 f203 	mul.w	r2, r2, r3
 8004916:	465b      	mov	r3, fp
 8004918:	4684      	mov	ip, r0
 800491a:	fb0c f303 	mul.w	r3, ip, r3
 800491e:	4413      	add	r3, r2
 8004920:	4602      	mov	r2, r0
 8004922:	4651      	mov	r1, sl
 8004924:	fba2 8901 	umull	r8, r9, r2, r1
 8004928:	444b      	add	r3, r9
 800492a:	4699      	mov	r9, r3
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	4620      	mov	r0, r4
 8004932:	4629      	mov	r1, r5
 8004934:	f7fb fc7e 	bl	8000234 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4613      	mov	r3, r2
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
 8004940:	e007      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x12a>
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <HAL_RCC_GetSysClockFreq+0x164>)
 8004946:	fb03 f202 	mul.w	r2, r3, r2
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_RCC_GetSysClockFreq+0x168>)
 8004954:	7b5b      	ldrb	r3, [r3, #13]
 8004956:	461a      	mov	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0x148>
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
 8004964:	e004      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x148>
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_RCC_GetSysClockFreq+0x170>)
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
 8004974:	e002      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x154>
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCC_GetSysClockFreq+0x174>)
 8004978:	633b      	str	r3, [r7, #48]	; 0x30
 800497a:	bf00      	nop
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	4618      	mov	r0, r3
 8004980:	3738      	adds	r7, #56	; 0x38
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	017d7840 	.word	0x017d7840
 8004990:	08009d60 	.word	0x08009d60
 8004994:	08009d70 	.word	0x08009d70
 8004998:	003d0900 	.word	0x003d0900
 800499c:	007a1200 	.word	0x007a1200

080049a0 <HAL_RCC_GetHCLKFreq>:
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	2000006c 	.word	0x2000006c

080049b4 <RCC_Delay>:
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <RCC_Delay+0x34>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <RCC_Delay+0x38>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	bf00      	nop
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e5a      	subs	r2, r3, #1
 80049d6:	60fa      	str	r2, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f9      	bne.n	80049d0 <RCC_Delay+0x1c>
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	2000006c 	.word	0x2000006c
 80049ec:	10624dd3 	.word	0x10624dd3

080049f0 <HAL_RCCEx_PeriphCLKConfig>:
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d07d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004a10:	2300      	movs	r3, #0
 8004a12:	76fb      	strb	r3, [r7, #27]
 8004a14:	4b8b      	ldr	r3, [pc, #556]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8004a20:	4b88      	ldr	r3, [pc, #544]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4a87      	ldr	r2, [pc, #540]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	61d3      	str	r3, [r2, #28]
 8004a2c:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	76fb      	strb	r3, [r7, #27]
 8004a3c:	4b82      	ldr	r3, [pc, #520]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d118      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004a48:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a7e      	ldr	r2, [pc, #504]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	f7fd fa82 	bl	8001f5c <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004a5c:	f7fd fa7e 	bl	8001f5c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0e5      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004a6e:	4b76      	ldr	r3, [pc, #472]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004a7a:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02e      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d027      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004a98:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	4a65      	ldr	r2, [pc, #404]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6213      	str	r3, [r2, #32]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004abe:	f7fd fa4d 	bl	8001f5c <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]
 8004ac4:	e00a      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ac6:	f7fd fa49 	bl	8001f5c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e0ae      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004adc:	4b59      	ldr	r3, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ee      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4953      	ldr	r1, [pc, #332]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	620b      	str	r3, [r1, #32]
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4a4f      	ldr	r2, [pc, #316]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	61d3      	str	r3, [r2, #28]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4947      	ldr	r1, [pc, #284]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	4940      	ldr	r1, [pc, #256]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004b54:	4b3b      	ldr	r3, [pc, #236]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	4938      	ldr	r1, [pc, #224]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004b66:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004b72:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d148      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b88:	4b2e      	ldr	r3, [pc, #184]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d138      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8004b94:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004ba0:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e042      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4920      	ldr	r1, [pc, #128]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	491c      	ldr	r1, [pc, #112]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f7fd f9bd 	bl	8001f5c <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004be6:	f7fd f9b9 	bl	8001f5c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e020      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004c04:	e009      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	4904      	ldr	r1, [pc, #16]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	42420440 	.word	0x42420440
 8004c50:	42420070 	.word	0x42420070

08004c54 <HAL_SPI_Init>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_Init+0x12>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e076      	b.n	8004d54 <HAL_SPI_Init+0x100>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <HAL_SPI_Init+0x2c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c76:	d009      	beq.n	8004c8c <HAL_SPI_Init+0x38>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
 8004c7e:	e005      	b.n	8004c8c <HAL_SPI_Init+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_SPI_Init+0x58>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc ff84 	bl	8001bb4 <HAL_SPI_MspInit>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	0c1a      	lsrs	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f002 0204 	and.w	r2, r2, #4
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d42:	61da      	str	r2, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	655a      	str	r2, [r3, #84]	; 0x54
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d52:	2300      	movs	r3, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_SPI_Transmit>:
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	80fb      	strh	r3, [r7, #6]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_SPI_Transmit+0x22>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e12d      	b.n	8004fda <HAL_SPI_Transmit+0x27e>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d86:	f7fd f8e9 	bl	8001f5c <HAL_GetTick>
 8004d8a:	61b8      	str	r0, [r7, #24]
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	82fb      	strh	r3, [r7, #22]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Transmit+0x46>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e116      	b.n	8004fd0 <HAL_SPI_Transmit+0x274>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_Transmit+0x52>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_Transmit+0x58>
 8004dae:	2301      	movs	r3, #1
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e10d      	b.n	8004fd0 <HAL_SPI_Transmit+0x274>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2203      	movs	r2, #3
 8004db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	869a      	strh	r2, [r3, #52]	; 0x34
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfa:	d10f      	bne.n	8004e1c <HAL_SPI_Transmit+0xc0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d007      	beq.n	8004e3a <HAL_SPI_Transmit+0xde>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d14f      	bne.n	8004ee4 <HAL_SPI_Transmit+0x188>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Transmit+0xf6>
 8004e4c:	8afb      	ldrh	r3, [r7, #22]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d142      	bne.n	8004ed8 <HAL_SPI_Transmit+0x17c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e76:	e02f      	b.n	8004ed8 <HAL_SPI_Transmit+0x17c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d112      	bne.n	8004eac <HAL_SPI_Transmit+0x150>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	881a      	ldrh	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eaa:	e015      	b.n	8004ed8 <HAL_SPI_Transmit+0x17c>
 8004eac:	f7fd f856 	bl	8001f5c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d803      	bhi.n	8004ec4 <HAL_SPI_Transmit+0x168>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_Transmit+0x16e>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_SPI_Transmit+0x17c>
 8004eca:	2303      	movs	r3, #3
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ed6:	e07b      	b.n	8004fd0 <HAL_SPI_Transmit+0x274>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ca      	bne.n	8004e78 <HAL_SPI_Transmit+0x11c>
 8004ee2:	e050      	b.n	8004f86 <HAL_SPI_Transmit+0x22a>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Transmit+0x196>
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d144      	bne.n	8004f7c <HAL_SPI_Transmit+0x220>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f18:	e030      	b.n	8004f7c <HAL_SPI_Transmit+0x220>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d113      	bne.n	8004f50 <HAL_SPI_Transmit+0x1f4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f4e:	e015      	b.n	8004f7c <HAL_SPI_Transmit+0x220>
 8004f50:	f7fd f804 	bl	8001f5c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d803      	bhi.n	8004f68 <HAL_SPI_Transmit+0x20c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d102      	bne.n	8004f6e <HAL_SPI_Transmit+0x212>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_SPI_Transmit+0x220>
 8004f6e:	2303      	movs	r3, #3
 8004f70:	77fb      	strb	r3, [r7, #31]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004f7a:	e029      	b.n	8004fd0 <HAL_SPI_Transmit+0x274>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1c9      	bne.n	8004f1a <HAL_SPI_Transmit+0x1be>
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fbcc 	bl	8005728 <SPI_EndRxTxTransaction>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Transmit+0x240>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <HAL_SPI_Transmit+0x25e>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0x26c>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e003      	b.n	8004fd0 <HAL_SPI_Transmit+0x274>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004fd8:	7ffb      	ldrb	r3, [r7, #31]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_SPI_Receive>:
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b088      	sub	sp, #32
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d002      	beq.n	8005008 <HAL_SPI_Receive+0x26>
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
 8005006:	e0fb      	b.n	8005200 <HAL_SPI_Receive+0x21e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005010:	d112      	bne.n	8005038 <HAL_SPI_Receive+0x56>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10e      	bne.n	8005038 <HAL_SPI_Receive+0x56>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2204      	movs	r2, #4
 800501e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f8ef 	bl	8005212 <HAL_SPI_TransmitReceive>
 8005034:	4603      	mov	r3, r0
 8005036:	e0e8      	b.n	800520a <HAL_SPI_Receive+0x228>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_SPI_Receive+0x64>
 8005042:	2302      	movs	r3, #2
 8005044:	e0e1      	b.n	800520a <HAL_SPI_Receive+0x228>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800504e:	f7fc ff85 	bl	8001f5c <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Receive+0x7e>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_SPI_Receive+0x84>
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
 8005064:	e0cc      	b.n	8005200 <HAL_SPI_Receive+0x21e>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2204      	movs	r2, #4
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	869a      	strh	r2, [r3, #52]	; 0x34
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	d10f      	bne.n	80050ce <HAL_SPI_Receive+0xec>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d007      	beq.n	80050ec <HAL_SPI_Receive+0x10a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d16a      	bne.n	80051ca <HAL_SPI_Receive+0x1e8>
 80050f4:	e032      	b.n	800515c <HAL_SPI_Receive+0x17a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d115      	bne.n	8005130 <HAL_SPI_Receive+0x14e>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f103 020c 	add.w	r2, r3, #12
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800512e:	e015      	b.n	800515c <HAL_SPI_Receive+0x17a>
 8005130:	f7fc ff14 	bl	8001f5c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d803      	bhi.n	8005148 <HAL_SPI_Receive+0x166>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d102      	bne.n	800514e <HAL_SPI_Receive+0x16c>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_Receive+0x17a>
 800514e:	2303      	movs	r3, #3
 8005150:	75fb      	strb	r3, [r7, #23]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800515a:	e051      	b.n	8005200 <HAL_SPI_Receive+0x21e>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1c7      	bne.n	80050f6 <HAL_SPI_Receive+0x114>
 8005166:	e035      	b.n	80051d4 <HAL_SPI_Receive+0x1f2>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	d113      	bne.n	800519e <HAL_SPI_Receive+0x1bc>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	b292      	uxth	r2, r2
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800519c:	e015      	b.n	80051ca <HAL_SPI_Receive+0x1e8>
 800519e:	f7fc fedd 	bl	8001f5c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d803      	bhi.n	80051b6 <HAL_SPI_Receive+0x1d4>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d102      	bne.n	80051bc <HAL_SPI_Receive+0x1da>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_SPI_Receive+0x1e8>
 80051bc:	2303      	movs	r3, #3
 80051be:	75fb      	strb	r3, [r7, #23]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80051c8:	e01a      	b.n	8005200 <HAL_SPI_Receive+0x21e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1c9      	bne.n	8005168 <HAL_SPI_Receive+0x186>
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fa53 	bl	8005684 <SPI_EndRxTransaction>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_SPI_Receive+0x208>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Receive+0x216>
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
 80051f6:	e003      	b.n	8005200 <HAL_SPI_Receive+0x21e>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005208:	7dfb      	ldrb	r3, [r7, #23]
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_SPI_TransmitReceive>:
 8005212:	b580      	push	{r7, lr}
 8005214:	b08c      	sub	sp, #48	; 0x30
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	807b      	strh	r3, [r7, #2]
 8005220:	2301      	movs	r3, #1
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005224:	2300      	movs	r3, #0
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x26>
 8005234:	2302      	movs	r3, #2
 8005236:	e198      	b.n	800556a <HAL_SPI_TransmitReceive+0x358>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005240:	f7fc fe8c 	bl	8001f5c <HAL_GetTick>
 8005244:	6278      	str	r0, [r7, #36]	; 0x24
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	837b      	strh	r3, [r7, #26]
 800525a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800525e:	2b01      	cmp	r3, #1
 8005260:	d00f      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x70>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005268:	d107      	bne.n	800527a <HAL_SPI_TransmitReceive+0x68>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_SPI_TransmitReceive+0x68>
 8005272:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005276:	2b04      	cmp	r3, #4
 8005278:	d003      	beq.n	8005282 <HAL_SPI_TransmitReceive+0x70>
 800527a:	2302      	movs	r3, #2
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005280:	e16d      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x82>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x82>
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <HAL_SPI_TransmitReceive+0x8a>
 8005294:	2301      	movs	r3, #1
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e160      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d003      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x9e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2205      	movs	r2, #5
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	887a      	ldrh	r2, [r7, #2]
 80052c6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	887a      	ldrh	r2, [r7, #2]
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	869a      	strh	r2, [r3, #52]	; 0x34
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d007      	beq.n	8005304 <HAL_SPI_TransmitReceive+0xf2>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530c:	d17c      	bne.n	8005408 <HAL_SPI_TransmitReceive+0x1f6>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_SPI_TransmitReceive+0x10a>
 8005316:	8b7b      	ldrh	r3, [r7, #26]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d16a      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x1e0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005340:	e057      	b.n	80053f2 <HAL_SPI_TransmitReceive+0x1e0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x176>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d016      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x176>
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d113      	bne.n	8005388 <HAL_SPI_TransmitReceive+0x176>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	86da      	strh	r2, [r3, #54]	; 0x36
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d119      	bne.n	80053ca <HAL_SPI_TransmitReceive+0x1b8>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_SPI_TransmitReceive+0x1b8>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	b292      	uxth	r2, r2
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053c6:	2301      	movs	r3, #1
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	f7fc fdc7 	bl	8001f5c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d80b      	bhi.n	80053f2 <HAL_SPI_TransmitReceive+0x1e0>
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d007      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x1e0>
 80053e2:	2303      	movs	r3, #3
 80053e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80053f0:	e0b5      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1a2      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x130>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d19d      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x130>
 8005406:	e080      	b.n	800550a <HAL_SPI_TransmitReceive+0x2f8>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x204>
 8005410:	8b7b      	ldrh	r3, [r7, #26]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d16f      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x2e4>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
 800543c:	e05b      	b.n	80054f6 <HAL_SPI_TransmitReceive+0x2e4>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d11c      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x274>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x274>
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b01      	cmp	r3, #1
 800545a:	d114      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x274>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	7812      	ldrb	r2, [r2, #0]
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
 8005482:	2300      	movs	r3, #0
 8005484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d119      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x2b6>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d014      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x2b6>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054c4:	2301      	movs	r3, #1
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c8:	f7fc fd48 	bl	8001f5c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d803      	bhi.n	80054e0 <HAL_SPI_TransmitReceive+0x2ce>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d102      	bne.n	80054e6 <HAL_SPI_TransmitReceive+0x2d4>
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x2e4>
 80054e6:	2303      	movs	r3, #3
 80054e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054f4:	e033      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d19e      	bne.n	800543e <HAL_SPI_TransmitReceive+0x22c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d199      	bne.n	800543e <HAL_SPI_TransmitReceive+0x22c>
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f90a 	bl	8005728 <SPI_EndRxTxTransaction>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x316>
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
 8005526:	e01a      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x334>
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x344>
 800554e:	2301      	movs	r3, #1
 8005550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005554:	e003      	b.n	800555e <HAL_SPI_TransmitReceive+0x34c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800556a:	4618      	mov	r0, r3
 800556c:	3730      	adds	r7, #48	; 0x30
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <SPI_WaitFlagStateUntilTimeout>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
 8005584:	f7fc fcea 	bl	8001f5c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	f7fc fce2 	bl	8001f5c <HAL_GetTick>
 8005598:	61b8      	str	r0, [r7, #24]
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	015b      	lsls	r3, r3, #5
 80055a0:	0d1b      	lsrs	r3, r3, #20
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e054      	b.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d050      	beq.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80055b4:	f7fc fcd2 	bl	8001f5c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d902      	bls.n	80055ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d13d      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e2:	d111      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d004      	beq.n	80055f8 <SPI_WaitFlagStateUntilTimeout+0x84>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f6:	d107      	bne.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005610:	d10f      	bne.n	8005632 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005642:	2303      	movs	r3, #3
 8005644:	e017      	b.n	8005676 <SPI_WaitFlagStateUntilTimeout+0x102>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3b01      	subs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d19b      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x38>
 8005674:	2300      	movs	r3, #0
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	2000006c 	.word	0x2000006c

08005684 <SPI_EndRxTransaction>:
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005698:	d111      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d004      	beq.n	80056ae <SPI_EndRxTransaction+0x2a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d107      	bne.n	80056be <SPI_EndRxTransaction+0x3a>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c6:	d117      	bne.n	80056f8 <SPI_EndRxTransaction+0x74>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d112      	bne.n	80056f8 <SPI_EndRxTransaction+0x74>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	2101      	movs	r1, #1
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff49 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <SPI_EndRxTransaction+0x9a>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
 80056f4:	2303      	movs	r3, #3
 80056f6:	e013      	b.n	8005720 <SPI_EndRxTransaction+0x9c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2200      	movs	r2, #0
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff ff36 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <SPI_EndRxTransaction+0x9a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
 800571a:	2303      	movs	r3, #3
 800571c:	e000      	b.n	8005720 <SPI_EndRxTransaction+0x9c>
 800571e:	2300      	movs	r3, #0
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <SPI_EndRxTxTransaction>:
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff18 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <SPI_EndRxTxTransaction+0x32>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f043 0220 	orr.w	r2, r3, #32
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
 8005756:	2303      	movs	r3, #3
 8005758:	e000      	b.n	800575c <SPI_EndRxTxTransaction+0x34>
 800575a:	2300      	movs	r3, #0
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_Base_Init>:
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_Base_Init+0x96>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc fb4a 	bl	8001e24 <HAL_TIM_Base_MspInit>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 f82e 	bl	8005804 <TIM_Base_SetConfig>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057f8:	2300      	movs	r3, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <TIM_Base_SetConfig>:
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <TIM_Base_SetConfig+0xc8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005822:	d00b      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_Base_SetConfig+0xcc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_Base_SetConfig+0xd0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_Base_SetConfig+0xd4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <TIM_Base_SetConfig+0x4a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <TIM_Base_SetConfig+0xc8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0x72>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0x72>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <TIM_Base_SetConfig+0xcc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0x72>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <TIM_Base_SetConfig+0xd0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0x72>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <TIM_Base_SetConfig+0xd4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0x84>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <TIM_Base_SetConfig+0xc8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0xb8>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e04b      	b.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a19      	ldr	r2, [pc, #100]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005940:	d00e      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10c      	bne.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	60bb      	str	r3, [r7, #8]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4313      	orrs	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800598a:	2300      	movs	r3, #0
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00

080059a8 <USB_CoreInit>:
 80059a8:	b084      	sub	sp, #16
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	f107 001c 	add.w	r0, r7, #28
 80059b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 f9de 	bl	8006d88 <USB_CoreReset>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e8:	b004      	add	sp, #16
 80059ea:	4770      	bx	lr

080059ec <USB_SetTurnaroundTime>:
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d165      	bne.n	8005acc <USB_SetTurnaroundTime+0xe0>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <USB_SetTurnaroundTime+0x110>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d906      	bls.n	8005a16 <USB_SetTurnaroundTime+0x2a>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a3d      	ldr	r2, [pc, #244]	; (8005b00 <USB_SetTurnaroundTime+0x114>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d202      	bcs.n	8005a16 <USB_SetTurnaroundTime+0x2a>
 8005a10:	230f      	movs	r3, #15
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e05c      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4a39      	ldr	r2, [pc, #228]	; (8005b00 <USB_SetTurnaroundTime+0x114>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d306      	bcc.n	8005a2c <USB_SetTurnaroundTime+0x40>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4a38      	ldr	r2, [pc, #224]	; (8005b04 <USB_SetTurnaroundTime+0x118>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d202      	bcs.n	8005a2c <USB_SetTurnaroundTime+0x40>
 8005a26:	230e      	movs	r3, #14
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	e051      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a35      	ldr	r2, [pc, #212]	; (8005b04 <USB_SetTurnaroundTime+0x118>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d306      	bcc.n	8005a42 <USB_SetTurnaroundTime+0x56>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4a34      	ldr	r2, [pc, #208]	; (8005b08 <USB_SetTurnaroundTime+0x11c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d202      	bcs.n	8005a42 <USB_SetTurnaroundTime+0x56>
 8005a3c:	230d      	movs	r3, #13
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e046      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a30      	ldr	r2, [pc, #192]	; (8005b08 <USB_SetTurnaroundTime+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d306      	bcc.n	8005a58 <USB_SetTurnaroundTime+0x6c>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <USB_SetTurnaroundTime+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d802      	bhi.n	8005a58 <USB_SetTurnaroundTime+0x6c>
 8005a52:	230c      	movs	r3, #12
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e03b      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <USB_SetTurnaroundTime+0x120>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d906      	bls.n	8005a6e <USB_SetTurnaroundTime+0x82>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <USB_SetTurnaroundTime+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d802      	bhi.n	8005a6e <USB_SetTurnaroundTime+0x82>
 8005a68:	230b      	movs	r3, #11
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e030      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <USB_SetTurnaroundTime+0x124>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d906      	bls.n	8005a84 <USB_SetTurnaroundTime+0x98>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <USB_SetTurnaroundTime+0x128>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d802      	bhi.n	8005a84 <USB_SetTurnaroundTime+0x98>
 8005a7e:	230a      	movs	r3, #10
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e025      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a23      	ldr	r2, [pc, #140]	; (8005b14 <USB_SetTurnaroundTime+0x128>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d906      	bls.n	8005a9a <USB_SetTurnaroundTime+0xae>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <USB_SetTurnaroundTime+0x12c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d202      	bcs.n	8005a9a <USB_SetTurnaroundTime+0xae>
 8005a94:	2309      	movs	r3, #9
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e01a      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <USB_SetTurnaroundTime+0x12c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d306      	bcc.n	8005ab0 <USB_SetTurnaroundTime+0xc4>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <USB_SetTurnaroundTime+0x130>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d802      	bhi.n	8005ab0 <USB_SetTurnaroundTime+0xc4>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e00f      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <USB_SetTurnaroundTime+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d906      	bls.n	8005ac6 <USB_SetTurnaroundTime+0xda>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <USB_SetTurnaroundTime+0x134>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d202      	bcs.n	8005ac6 <USB_SetTurnaroundTime+0xda>
 8005ac0:	2307      	movs	r3, #7
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e004      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005ac6:	2306      	movs	r3, #6
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e001      	b.n	8005ad0 <USB_SetTurnaroundTime+0xe4>
 8005acc:	2309      	movs	r3, #9
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	2300      	movs	r3, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	00d8acbf 	.word	0x00d8acbf
 8005b00:	00e4e1c0 	.word	0x00e4e1c0
 8005b04:	00f42400 	.word	0x00f42400
 8005b08:	01067380 	.word	0x01067380
 8005b0c:	011a499f 	.word	0x011a499f
 8005b10:	01312cff 	.word	0x01312cff
 8005b14:	014ca43f 	.word	0x014ca43f
 8005b18:	016e3600 	.word	0x016e3600
 8005b1c:	01a6ab1f 	.word	0x01a6ab1f
 8005b20:	01e84800 	.word	0x01e84800

08005b24 <USB_EnableGlobalInt>:
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr

08005b44 <USB_DisableGlobalInt>:
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f023 0201 	bic.w	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <USB_SetCurrentMode>:
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d115      	bne.n	8005bb2 <USB_SetCurrentMode+0x4e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	2001      	movs	r0, #1
 8005b94:	f7fc f9ec 	bl	8001f70 <HAL_Delay>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f87a 	bl	8006c98 <USB_GetMode>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d01e      	beq.n	8005be8 <USB_SetCurrentMode+0x84>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b31      	cmp	r3, #49	; 0x31
 8005bae:	d9f0      	bls.n	8005b92 <USB_SetCurrentMode+0x2e>
 8005bb0:	e01a      	b.n	8005be8 <USB_SetCurrentMode+0x84>
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d115      	bne.n	8005be4 <USB_SetCurrentMode+0x80>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	f7fc f9d3 	bl	8001f70 <HAL_Delay>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f861 	bl	8006c98 <USB_GetMode>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <USB_SetCurrentMode+0x84>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b31      	cmp	r3, #49	; 0x31
 8005be0:	d9f0      	bls.n	8005bc4 <USB_SetCurrentMode+0x60>
 8005be2:	e001      	b.n	8005be8 <USB_SetCurrentMode+0x84>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e005      	b.n	8005bf4 <USB_SetCurrentMode+0x90>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b32      	cmp	r3, #50	; 0x32
 8005bec:	d101      	bne.n	8005bf2 <USB_SetCurrentMode+0x8e>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <USB_SetCurrentMode+0x90>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USB_DevInit>:
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e009      	b.n	8005c30 <USB_DevInit+0x34>
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	3340      	adds	r3, #64	; 0x40
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b0e      	cmp	r3, #14
 8005c34:	d9f2      	bls.n	8005c1c <USB_DevInit+0x20>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	2103      	movs	r1, #3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f959 	bl	8005f08 <USB_SetDevSpeed>
 8005c56:	2110      	movs	r1, #16
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8f1 	bl	8005e40 <USB_FlushTxFifo>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USB_DevInit+0x6c>
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f91d 	bl	8005ea8 <USB_FlushRxFifo>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <USB_DevInit+0x7c>
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6113      	str	r3, [r2, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6153      	str	r3, [r2, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61d3      	str	r3, [r2, #28]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e043      	b.n	8005d2a <USB_DevInit+0x12e>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb8:	d118      	bne.n	8005cec <USB_DevInit+0xf0>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_DevInit+0xda>
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e013      	b.n	8005cfe <USB_DevInit+0x102>
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e008      	b.n	8005cfe <USB_DevInit+0x102>
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d22:	6093      	str	r3, [r2, #8]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3b7      	bcc.n	8005ca2 <USB_DevInit+0xa6>
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	e043      	b.n	8005dc0 <USB_DevInit+0x1c4>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4e:	d118      	bne.n	8005d82 <USB_DevInit+0x186>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <USB_DevInit+0x170>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e013      	b.n	8005d94 <USB_DevInit+0x198>
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e008      	b.n	8005d94 <USB_DevInit+0x198>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	6113      	str	r3, [r2, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	461a      	mov	r2, r3
 8005db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db8:	6093      	str	r3, [r2, #8]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d3b7      	bcc.n	8005d38 <USB_DevInit+0x13c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dda:	6113      	str	r3, [r2, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005de8:	615a      	str	r2, [r3, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f043 0210 	orr.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	619a      	str	r2, [r3, #24]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	4b10      	ldr	r3, [pc, #64]	; (8005e3c <USB_DevInit+0x240>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6193      	str	r3, [r2, #24]
 8005e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <USB_DevInit+0x218>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f043 0208 	orr.w	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	619a      	str	r2, [r3, #24]
 8005e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d107      	bne.n	8005e2a <USB_DevInit+0x22e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6193      	str	r3, [r2, #24]
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e36:	b004      	add	sp, #16
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	803c3800 	.word	0x803c3800

08005e40 <USB_FlushTxFifo>:
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <USB_FlushTxFifo+0x64>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <USB_FlushTxFifo+0x20>
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e01b      	b.n	8005e98 <USB_FlushTxFifo+0x58>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	daf2      	bge.n	8005e4e <USB_FlushTxFifo+0xe>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	019b      	lsls	r3, r3, #6
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	611a      	str	r2, [r3, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a08      	ldr	r2, [pc, #32]	; (8005ea4 <USB_FlushTxFifo+0x64>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <USB_FlushTxFifo+0x4a>
 8005e86:	2303      	movs	r3, #3
 8005e88:	e006      	b.n	8005e98 <USB_FlushTxFifo+0x58>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d0f0      	beq.n	8005e78 <USB_FlushTxFifo+0x38>
 8005e96:	2300      	movs	r3, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	00030d40 	.word	0x00030d40

08005ea8 <USB_FlushRxFifo>:
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <USB_FlushRxFifo+0x5c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <USB_FlushRxFifo+0x1e>
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e018      	b.n	8005ef8 <USB_FlushRxFifo+0x50>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	daf2      	bge.n	8005eb4 <USB_FlushRxFifo+0xc>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	611a      	str	r2, [r3, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <USB_FlushRxFifo+0x5c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <USB_FlushRxFifo+0x42>
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <USB_FlushRxFifo+0x50>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d0f0      	beq.n	8005ed8 <USB_FlushRxFifo+0x30>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	00030d40 	.word	0x00030d40

08005f08 <USB_SetDevSpeed>:
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <USB_GetDevSpeed>:
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0306 	and.w	r3, r3, #6
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d002      	beq.n	8005f5e <USB_GetDevSpeed+0x26>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d102      	bne.n	8005f64 <USB_GetDevSpeed+0x2c>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	75fb      	strb	r3, [r7, #23]
 8005f62:	e001      	b.n	8005f68 <USB_GetDevSpeed+0x30>
 8005f64:	230f      	movs	r3, #15
 8005f66:	75fb      	strb	r3, [r7, #23]
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <USB_ActivateEndpoint>:
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d13a      	bne.n	8006006 <USB_ActivateEndpoint+0x92>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	68f9      	ldr	r1, [r7, #12]
 8005faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61cb      	str	r3, [r1, #28]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d155      	bne.n	8006074 <USB_ActivateEndpoint+0x100>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	049b      	lsls	r3, r3, #18
 8005fe4:	4319      	orrs	r1, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	059b      	lsls	r3, r3, #22
 8005fea:	430b      	orrs	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e036      	b.n	8006074 <USB_ActivateEndpoint+0x100>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006024:	4313      	orrs	r3, r2
 8006026:	61cb      	str	r3, [r1, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11a      	bne.n	8006074 <USB_ActivateEndpoint+0x100>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	791b      	ldrb	r3, [r3, #4]
 8006058:	049b      	lsls	r3, r3, #18
 800605a:	430b      	orrs	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr

08006080 <USB_DeactivateEndpoint>:
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d161      	bne.n	8006160 <USB_DeactivateEndpoint+0xe0>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b2:	d11f      	bne.n	80060f4 <USB_DeactivateEndpoint+0x74>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006114:	4013      	ands	r3, r2
 8006116:	63cb      	str	r3, [r1, #60]	; 0x3c
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006138:	4013      	ands	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	0159      	lsls	r1, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	440b      	add	r3, r1
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	4619      	mov	r1, r3
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <USB_DeactivateEndpoint+0x1b0>)
 800615a:	4013      	ands	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	e060      	b.n	8006222 <USB_DeactivateEndpoint+0x1a2>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006176:	d11f      	bne.n	80061b8 <USB_DeactivateEndpoint+0x138>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	43db      	mvns	r3, r3
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d8:	4013      	ands	r3, r2
 80061da:	63cb      	str	r3, [r1, #60]	; 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	43db      	mvns	r3, r3
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061fc:	4013      	ands	r3, r2
 80061fe:	61cb      	str	r3, [r1, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	0159      	lsls	r1, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	440b      	add	r3, r1
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	4619      	mov	r1, r3
 800621c:	4b05      	ldr	r3, [pc, #20]	; (8006234 <USB_DeactivateEndpoint+0x1b4>)
 800621e:	4013      	ands	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	ec337800 	.word	0xec337800
 8006234:	eff37800 	.word	0xeff37800

08006238 <USB_EPStartXfer>:
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 8128 	bne.w	80064a6 <USB_EPStartXfer+0x26e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d132      	bne.n	80062c4 <USB_EPStartXfer+0x8c>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800627c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006280:	6113      	str	r3, [r2, #16]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a0:	6113      	str	r3, [r2, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062bc:	0cdb      	lsrs	r3, r3, #19
 80062be:	04db      	lsls	r3, r3, #19
 80062c0:	6113      	str	r3, [r2, #16]
 80062c2:	e092      	b.n	80063ea <USB_EPStartXfer+0x1b2>
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	0cdb      	lsrs	r3, r3, #19
 80062e0:	04db      	lsls	r3, r3, #19
 80062e2:	6113      	str	r3, [r2, #16]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006302:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006306:	6113      	str	r3, [r2, #16]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11a      	bne.n	8006344 <USB_EPStartXfer+0x10c>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d903      	bls.n	8006322 <USB_EPStartXfer+0xea>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	611a      	str	r2, [r3, #16]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006340:	6113      	str	r3, [r2, #16]
 8006342:	e01b      	b.n	800637c <USB_EPStartXfer+0x144>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6919      	ldr	r1, [r3, #16]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	440b      	add	r3, r1
 800635c:	1e59      	subs	r1, r3, #1
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	fbb1 f3f3 	udiv	r3, r1, r3
 8006366:	04d9      	lsls	r1, r3, #19
 8006368:	4b8d      	ldr	r3, [pc, #564]	; (80065a0 <USB_EPStartXfer+0x368>)
 800636a:	400b      	ands	r3, r1
 800636c:	6939      	ldr	r1, [r7, #16]
 800636e:	0148      	lsls	r0, r1, #5
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	4401      	add	r1, r0
 8006374:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006378:	4313      	orrs	r3, r2
 800637a:	610b      	str	r3, [r1, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006392:	6939      	ldr	r1, [r7, #16]
 8006394:	0148      	lsls	r0, r1, #5
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	4401      	add	r1, r0
 800639a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800639e:	4313      	orrs	r3, r2
 80063a0:	610b      	str	r3, [r1, #16]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	791b      	ldrb	r3, [r3, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d11f      	bne.n	80063ea <USB_EPStartXfer+0x1b2>
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063c8:	6113      	str	r3, [r2, #16]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063e8:	6113      	str	r3, [r2, #16]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	791b      	ldrb	r3, [r3, #4]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d015      	beq.n	800643e <USB_EPStartXfer+0x206>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 8139 	beq.w	800668e <USB_EPStartXfer+0x456>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006438:	4313      	orrs	r3, r2
 800643a:	634b      	str	r3, [r1, #52]	; 0x34
 800643c:	e127      	b.n	800668e <USB_EPStartXfer+0x456>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d110      	bne.n	8006470 <USB_EPStartXfer+0x238>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00f      	b.n	8006490 <USB_EPStartXfer+0x258>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68d9      	ldr	r1, [r3, #12]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	b29b      	uxth	r3, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9a5 	bl	80067ee <USB_WritePacket>
 80064a4:	e0f3      	b.n	800668e <USB_EPStartXfer+0x456>
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	0cdb      	lsrs	r3, r3, #19
 80064c2:	04db      	lsls	r3, r3, #19
 80064c4:	6113      	str	r3, [r2, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064e8:	6113      	str	r3, [r2, #16]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12f      	bne.n	8006550 <USB_EPStartXfer+0x318>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <USB_EPStartXfer+0x2c8>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	621a      	str	r2, [r3, #32]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651e:	6939      	ldr	r1, [r7, #16]
 8006520:	0148      	lsls	r0, r1, #5
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	4401      	add	r1, r0
 8006526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006548:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654c:	6113      	str	r3, [r2, #16]
 800654e:	e061      	b.n	8006614 <USB_EPStartXfer+0x3dc>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d125      	bne.n	80065a4 <USB_EPStartXfer+0x36c>
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656e:	6939      	ldr	r1, [r7, #16]
 8006570:	0148      	lsls	r0, r1, #5
 8006572:	6979      	ldr	r1, [r7, #20]
 8006574:	4401      	add	r1, r0
 8006576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800657a:	4313      	orrs	r3, r2
 800657c:	610b      	str	r3, [r1, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800659c:	6113      	str	r3, [r2, #16]
 800659e:	e039      	b.n	8006614 <USB_EPStartXfer+0x3dc>
 80065a0:	1ff80000 	.word	0x1ff80000
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4413      	add	r3, r2
 80065ae:	1e5a      	subs	r2, r3, #1
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b8:	81fb      	strh	r3, [r7, #14]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	89fa      	ldrh	r2, [r7, #14]
 80065c0:	fb03 f202 	mul.w	r2, r3, r2
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	621a      	str	r2, [r3, #32]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	04d9      	lsls	r1, r3, #19
 80065da:	4b2f      	ldr	r3, [pc, #188]	; (8006698 <USB_EPStartXfer+0x460>)
 80065dc:	400b      	ands	r3, r1
 80065de:	6939      	ldr	r1, [r7, #16]
 80065e0:	0148      	lsls	r0, r1, #5
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	4401      	add	r1, r0
 80065e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ea:	4313      	orrs	r3, r2
 80065ec:	610b      	str	r3, [r1, #16]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	6939      	ldr	r1, [r7, #16]
 8006606:	0148      	lsls	r0, r1, #5
 8006608:	6979      	ldr	r1, [r7, #20]
 800660a:	4401      	add	r1, r0
 800660c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006610:	4313      	orrs	r3, r2
 8006612:	610b      	str	r3, [r1, #16]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d128      	bne.n	800666e <USB_EPStartXfer+0x436>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d110      	bne.n	800664e <USB_EPStartXfer+0x416>
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e00f      	b.n	800666e <USB_EPStartXfer+0x436>
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	1ff80000 	.word	0x1ff80000

0800669c <USB_EPStopXfer>:
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d14a      	bne.n	8006750 <USB_EPStopXfer+0xb4>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d2:	f040 8086 	bne.w	80067e2 <USB_EPStopXfer+0x146>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f242 7210 	movw	r2, #10000	; 0x2710
 800672a:	4293      	cmp	r3, r2
 800672c:	d902      	bls.n	8006734 <USB_EPStopXfer+0x98>
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e056      	b.n	80067e2 <USB_EPStopXfer+0x146>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674c:	d0e7      	beq.n	800671e <USB_EPStopXfer+0x82>
 800674e:	e048      	b.n	80067e2 <USB_EPStopXfer+0x146>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d13b      	bne.n	80067e2 <USB_EPStopXfer+0x146>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80067be:	4293      	cmp	r3, r2
 80067c0:	d902      	bls.n	80067c8 <USB_EPStopXfer+0x12c>
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
 80067c6:	e00c      	b.n	80067e2 <USB_EPStopXfer+0x146>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e0:	d0e7      	beq.n	80067b2 <USB_EPStopXfer+0x116>
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr

080067ee <USB_WritePacket>:
 80067ee:	b480      	push	{r7}
 80067f0:	b089      	sub	sp, #36	; 0x24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	4611      	mov	r1, r2
 80067fa:	461a      	mov	r2, r3
 80067fc:	460b      	mov	r3, r1
 80067fe:	71fb      	strb	r3, [r7, #7]
 8006800:	4613      	mov	r3, r2
 8006802:	80bb      	strh	r3, [r7, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	88bb      	ldrh	r3, [r7, #4]
 800680e:	3303      	adds	r3, #3
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	e018      	b.n	800684c <USB_WritePacket+0x5e>
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	031a      	lsls	r2, r3, #12
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006826:	461a      	mov	r2, r3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3301      	adds	r3, #1
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3301      	adds	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	3301      	adds	r3, #1
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	3301      	adds	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	3301      	adds	r3, #1
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d3e2      	bcc.n	800681a <USB_WritePacket+0x2c>
 8006854:	2300      	movs	r3, #0
 8006856:	4618      	mov	r0, r3
 8006858:	3724      	adds	r7, #36	; 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USB_ReadPacket>:
 8006860:	b480      	push	{r7}
 8006862:	b08b      	sub	sp, #44	; 0x2c
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	089b      	lsrs	r3, r3, #2
 800687a:	b29b      	uxth	r3, r3
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	83fb      	strh	r3, [r7, #30]
 8006886:	2300      	movs	r3, #0
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e014      	b.n	80068b6 <USB_ReadPacket+0x56>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	3301      	adds	r3, #1
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	3301      	adds	r3, #1
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	3301      	adds	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	3301      	adds	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	3301      	adds	r3, #1
 80068b4:	623b      	str	r3, [r7, #32]
 80068b6:	6a3a      	ldr	r2, [r7, #32]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d3e6      	bcc.n	800688c <USB_ReadPacket+0x2c>
 80068be:	8bfb      	ldrh	r3, [r7, #30]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01e      	beq.n	8006902 <USB_ReadPacket+0xa2>
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ce:	461a      	mov	r2, r3
 80068d0:	f107 0310 	add.w	r3, r7, #16
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	3301      	adds	r3, #1
 80068ee:	623b      	str	r3, [r7, #32]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	3301      	adds	r3, #1
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
 80068f6:	8bfb      	ldrh	r3, [r7, #30]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	83fb      	strh	r3, [r7, #30]
 80068fc:	8bfb      	ldrh	r3, [r7, #30]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1ea      	bne.n	80068d8 <USB_ReadPacket+0x78>
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	372c      	adds	r7, #44	; 0x2c
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <USB_EPSetStall>:
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	60bb      	str	r3, [r7, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d12c      	bne.n	8006984 <USB_EPSetStall+0x76>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db12      	blt.n	8006962 <USB_EPSetStall+0x54>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00f      	beq.n	8006962 <USB_EPSetStall+0x54>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e02b      	b.n	80069dc <USB_EPSetStall+0xce>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	db12      	blt.n	80069bc <USB_EPSetStall+0xae>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00f      	beq.n	80069bc <USB_EPSetStall+0xae>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_EPClearStall>:
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d128      	bne.n	8006a56 <USB_EPClearStall+0x6e>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	791b      	ldrb	r3, [r3, #4]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d003      	beq.n	8006a34 <USB_EPClearStall+0x4c>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d138      	bne.n	8006aa6 <USB_EPClearStall+0xbe>
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e027      	b.n	8006aa6 <USB_EPClearStall+0xbe>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	791b      	ldrb	r3, [r3, #4]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d003      	beq.n	8006a86 <USB_EPClearStall+0x9e>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	791b      	ldrb	r3, [r3, #4]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d10f      	bne.n	8006aa6 <USB_EPClearStall+0xbe>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bc80      	pop	{r7}
 8006ab0:	4770      	bx	lr

08006ab2 <USB_SetDevAddress>:
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	460b      	mov	r3, r1
 8006abc:	70fb      	strb	r3, [r7, #3]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ad0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aec:	4313      	orrs	r3, r2
 8006aee:	600b      	str	r3, [r1, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <USB_DevConnect>:
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2a:	f023 0302 	bic.w	r3, r3, #2
 8006b2e:	6053      	str	r3, [r2, #4]
 8006b30:	2300      	movs	r3, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <USB_DevDisconnect>:
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b6a:	f043 0302 	orr.w	r3, r3, #2
 8006b6e:	6053      	str	r3, [r2, #4]
 8006b70:	2300      	movs	r3, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <USB_ReadInterrupts>:
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4013      	ands	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <USB_ReadDevAllOutEpInterrupt>:
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USB_ReadDevAllInEpInterrupt>:
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <USB_ReadDevOutEPInterrupt>:
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60bb      	str	r3, [r7, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <USB_ReadDevInEPInterrupt>:
 8006c3e:	b480      	push	{r7}
 8006c40:	b087      	sub	sp, #28
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6e:	01db      	lsls	r3, r3, #7
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USB_GetMode>:
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <USB_ActivateSetup>:
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cd0:	f023 0307 	bic.w	r3, r3, #7
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	2300      	movs	r3, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr
	...

08006cf8 <USB_EP0_OutStart>:
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	333c      	adds	r3, #60	; 0x3c
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <USB_EP0_OutStart+0x8c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d90a      	bls.n	8006d2e <USB_EP0_OutStart+0x36>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d28:	d101      	bne.n	8006d2e <USB_EP0_OutStart+0x36>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e024      	b.n	8006d78 <USB_EP0_OutStart+0x80>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	461a      	mov	r2, r3
 8006d36:	2300      	movs	r3, #0
 8006d38:	6113      	str	r3, [r2, #16]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d4c:	6113      	str	r3, [r2, #16]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5c:	f043 0318 	orr.w	r3, r3, #24
 8006d60:	6113      	str	r3, [r2, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d74:	6113      	str	r3, [r2, #16]
 8006d76:	2300      	movs	r3, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	4f54300a 	.word	0x4f54300a

08006d88 <USB_CoreReset>:
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <USB_CoreReset+0x60>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <USB_CoreReset+0x1e>
 8006da2:	2303      	movs	r3, #3
 8006da4:	e01b      	b.n	8006dde <USB_CoreReset+0x56>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	daf2      	bge.n	8006d94 <USB_CoreReset+0xc>
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f043 0201 	orr.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <USB_CoreReset+0x60>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <USB_CoreReset+0x48>
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e006      	b.n	8006dde <USB_CoreReset+0x56>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d0f0      	beq.n	8006dbe <USB_CoreReset+0x36>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr
 8006de8:	00030d40 	.word	0x00030d40

08006dec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d115      	bne.n	8006e30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e08:	2202      	movs	r2, #2
 8006e0a:	2181      	movs	r1, #129	; 0x81
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 ff22 	bl	8008c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	2101      	movs	r1, #1
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 ff18 	bl	8008c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e2e:	e012      	b.n	8006e56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e30:	2340      	movs	r3, #64	; 0x40
 8006e32:	2202      	movs	r2, #2
 8006e34:	2181      	movs	r1, #129	; 0x81
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 ff0d 	bl	8008c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	2202      	movs	r2, #2
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 ff04 	bl	8008c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e56:	2308      	movs	r3, #8
 8006e58:	2203      	movs	r2, #3
 8006e5a:	2182      	movs	r1, #130	; 0x82
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fefa 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e6c:	f002 f81a 	bl	8008ea4 <USBD_static_malloc>
 8006e70:	4602      	mov	r2, r0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e82:	2301      	movs	r3, #1
 8006e84:	73fb      	strb	r3, [r7, #15]
 8006e86:	e026      	b.n	8006ed6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 ffb9 	bl	8008e36 <USBD_LL_PrepareReceive>
 8006ec4:	e007      	b.n	8006ed6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2101      	movs	r1, #1
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 ffb0 	bl	8008e36 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ef0:	2181      	movs	r1, #129	; 0x81
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fed5 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006efe:	2101      	movs	r1, #1
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fece 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f0e:	2182      	movs	r1, #130	; 0x82
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fec6 	bl	8008ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 ffc0 	bl	8008ebc <USBD_static_free>
    pdev->pClassData = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d039      	beq.n	8006fec <USBD_CDC_Setup+0x9e>
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d17f      	bne.n	800707c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	88db      	ldrh	r3, [r3, #6]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d029      	beq.n	8006fd8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	b25b      	sxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da11      	bge.n	8006fb2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	88d2      	ldrh	r2, [r2, #6]
 8006fa0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fa2:	6939      	ldr	r1, [r7, #16]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	88db      	ldrh	r3, [r3, #6]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fa41 	bl	8008432 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006fb0:	e06b      	b.n	800708a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	785a      	ldrb	r2, [r3, #1]
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fc8:	6939      	ldr	r1, [r7, #16]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	88db      	ldrh	r3, [r3, #6]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 fa5c 	bl	800848e <USBD_CtlPrepareRx>
      break;
 8006fd6:	e058      	b.n	800708a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	7850      	ldrb	r0, [r2, #1]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	4798      	blx	r3
      break;
 8006fea:	e04e      	b.n	800708a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b0b      	cmp	r3, #11
 8006ff2:	d02e      	beq.n	8007052 <USBD_CDC_Setup+0x104>
 8006ff4:	2b0b      	cmp	r3, #11
 8006ff6:	dc38      	bgt.n	800706a <USBD_CDC_Setup+0x11c>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <USBD_CDC_Setup+0xb4>
 8006ffc:	2b0a      	cmp	r3, #10
 8006ffe:	d014      	beq.n	800702a <USBD_CDC_Setup+0xdc>
 8007000:	e033      	b.n	800706a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	2b03      	cmp	r3, #3
 800700a:	d107      	bne.n	800701c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800700c:	f107 030c 	add.w	r3, r7, #12
 8007010:	2202      	movs	r2, #2
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 fa0c 	bl	8008432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800701a:	e02e      	b.n	800707a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f99d 	bl	800835e <USBD_CtlError>
            ret = USBD_FAIL;
 8007024:	2302      	movs	r3, #2
 8007026:	75fb      	strb	r3, [r7, #23]
          break;
 8007028:	e027      	b.n	800707a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	2b03      	cmp	r3, #3
 8007032:	d107      	bne.n	8007044 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007034:	f107 030f 	add.w	r3, r7, #15
 8007038:	2201      	movs	r2, #1
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f9f8 	bl	8008432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007042:	e01a      	b.n	800707a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f989 	bl	800835e <USBD_CtlError>
            ret = USBD_FAIL;
 800704c:	2302      	movs	r3, #2
 800704e:	75fb      	strb	r3, [r7, #23]
          break;
 8007050:	e013      	b.n	800707a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	2b03      	cmp	r3, #3
 800705a:	d00d      	beq.n	8007078 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 f97d 	bl	800835e <USBD_CtlError>
            ret = USBD_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007068:	e006      	b.n	8007078 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f001 f976 	bl	800835e <USBD_CtlError>
          ret = USBD_FAIL;
 8007072:	2302      	movs	r3, #2
 8007074:	75fb      	strb	r3, [r7, #23]
          break;
 8007076:	e000      	b.n	800707a <USBD_CDC_Setup+0x12c>
          break;
 8007078:	bf00      	nop
      }
      break;
 800707a:	e006      	b.n	800708a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f96d 	bl	800835e <USBD_CtlError>
      ret = USBD_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	bf00      	nop
  }

  return ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ae:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d03a      	beq.n	8007130 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	331c      	adds	r3, #28
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d029      	beq.n	8007124 <USBD_CDC_DataIn+0x90>
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	331c      	adds	r3, #28
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	78f9      	ldrb	r1, [r7, #3]
 80070e4:	68b8      	ldr	r0, [r7, #8]
 80070e6:	460b      	mov	r3, r1
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	440b      	add	r3, r1
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4403      	add	r3, r0
 80070f0:	3344      	adds	r3, #68	; 0x44
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d110      	bne.n	8007124 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	331c      	adds	r3, #28
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007116:	78f9      	ldrb	r1, [r7, #3]
 8007118:	2300      	movs	r3, #0
 800711a:	2200      	movs	r2, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fe67 	bl	8008df0 <USBD_LL_Transmit>
 8007122:	e003      	b.n	800712c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e000      	b.n	8007132 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007130:	2302      	movs	r3, #2
  }
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fe92 	bl	8008e7c <USBD_LL_GetRxDataSize>
 8007158:	4602      	mov	r2, r0
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800717e:	4611      	mov	r1, r2
 8007180:	4798      	blx	r3

    return USBD_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007186:	2302      	movs	r3, #2
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d015      	beq.n	80071d6 <USBD_CDC_EP0_RxReady+0x46>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071b0:	2bff      	cmp	r3, #255	; 0xff
 80071b2:	d010      	beq.n	80071d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071ca:	b292      	uxth	r2, r2
 80071cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2243      	movs	r2, #67	; 0x43
 80071ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80071ee:	4b03      	ldr	r3, [pc, #12]	; (80071fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	20000100 	.word	0x20000100

08007200 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2243      	movs	r2, #67	; 0x43
 800720c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	200000bc 	.word	0x200000bc

08007220 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2243      	movs	r2, #67	; 0x43
 800722c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007230:	4618      	mov	r0, r3
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	20000144 	.word	0x20000144

08007240 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	220a      	movs	r2, #10
 800724c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800724e:	4b03      	ldr	r3, [pc, #12]	; (800725c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000078 	.word	0x20000078

08007260 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr

080072be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d01c      	beq.n	8007338 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007326:	b29b      	uxth	r3, r3
 8007328:	2181      	movs	r1, #129	; 0x81
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fd60 	bl	8008df0 <USBD_LL_Transmit>

      return USBD_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	e002      	b.n	800733a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7c1b      	ldrb	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800736a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800736e:	2101      	movs	r1, #1
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fd60 	bl	8008e36 <USBD_LL_PrepareReceive>
 8007376:	e007      	b.n	8007388 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	2101      	movs	r1, #1
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fd57 	bl	8008e36 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	4613      	mov	r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073aa:	2302      	movs	r3, #2
 80073ac:	e01a      	b.n	80073e4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f001 fbdb 	bl	8008b98 <USBD_LL_Init>

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
 800740c:	e001      	b.n	8007412 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800740e:	2302      	movs	r3, #2
 8007410:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fbfa 	bl	8008c20 <USBD_LL_Start>

  return USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007456:	2302      	movs	r3, #2
 8007458:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	78fa      	ldrb	r2, [r7, #3]
 800746e:	4611      	mov	r1, r2
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	4611      	mov	r1, r2
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ff10 	bl	80082e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d016      	beq.n	8007518 <USBD_LL_SetupStage+0x6a>
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d81c      	bhi.n	8007528 <USBD_LL_SetupStage+0x7a>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <USBD_LL_SetupStage+0x4a>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d008      	beq.n	8007508 <USBD_LL_SetupStage+0x5a>
 80074f6:	e017      	b.n	8007528 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa03 	bl	800790c <USBD_StdDevReq>
      break;
 8007506:	e01a      	b.n	800753e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fa65 	bl	80079e0 <USBD_StdItfReq>
      break;
 8007516:	e012      	b.n	800753e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 faa5 	bl	8007a70 <USBD_StdEPReq>
      break;
 8007526:	e00a      	b.n	800753e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800752e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fbd2 	bl	8008ce0 <USBD_LL_StallEP>
      break;
 800753c:	bf00      	nop
  }

  return USBD_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	460b      	mov	r3, r1
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d14b      	bne.n	80075f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007562:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756a:	2b03      	cmp	r3, #3
 800756c:	d134      	bne.n	80075d8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	d919      	bls.n	80075ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007590:	429a      	cmp	r2, r3
 8007592:	d203      	bcs.n	800759c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007598:	b29b      	uxth	r3, r3
 800759a:	e002      	b.n	80075a2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 ff8f 	bl	80084ca <USBD_CtlContinueRx>
 80075ac:	e038      	b.n	8007620 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d105      	bne.n	80075d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 ff8c 	bl	80084ee <USBD_CtlSendStatus>
 80075d6:	e023      	b.n	8007620 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d11e      	bne.n	8007620 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f001 fb77 	bl	8008ce0 <USBD_LL_StallEP>
 80075f2:	e015      	b.n	8007620 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00d      	beq.n	800761c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007606:	2b03      	cmp	r3, #3
 8007608:	d108      	bne.n	800761c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	7afa      	ldrb	r2, [r7, #11]
 8007614:	4611      	mov	r1, r2
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	4798      	blx	r3
 800761a:	e001      	b.n	8007620 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800761c:	2302      	movs	r3, #2
 800761e:	e000      	b.n	8007622 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b086      	sub	sp, #24
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	460b      	mov	r3, r1
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d17f      	bne.n	800773e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3314      	adds	r3, #20
 8007642:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764a:	2b02      	cmp	r3, #2
 800764c:	d15c      	bne.n	8007708 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	429a      	cmp	r2, r3
 8007658:	d915      	bls.n	8007686 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	1ad2      	subs	r2, r2, r3
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	b29b      	uxth	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fef9 	bl	800846a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007678:	2300      	movs	r3, #0
 800767a:	2200      	movs	r2, #0
 800767c:	2100      	movs	r1, #0
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f001 fbd9 	bl	8008e36 <USBD_LL_PrepareReceive>
 8007684:	e04e      	b.n	8007724 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6912      	ldr	r2, [r2, #16]
 800768e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007692:	fb01 f202 	mul.w	r2, r1, r2
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11c      	bne.n	80076d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d316      	bcc.n	80076d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d20f      	bcs.n	80076d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076b6:	2200      	movs	r2, #0
 80076b8:	2100      	movs	r1, #0
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fed5 	bl	800846a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c8:	2300      	movs	r3, #0
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f001 fbb1 	bl	8008e36 <USBD_LL_PrepareReceive>
 80076d4:	e026      	b.n	8007724 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d105      	bne.n	80076f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076f8:	2180      	movs	r1, #128	; 0x80
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f001 faf0 	bl	8008ce0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 ff07 	bl	8008514 <USBD_CtlReceiveStatus>
 8007706:	e00d      	b.n	8007724 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800770e:	2b04      	cmp	r3, #4
 8007710:	d004      	beq.n	800771c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800771c:	2180      	movs	r1, #128	; 0x80
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f001 fade 	bl	8008ce0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800772a:	2b01      	cmp	r3, #1
 800772c:	d11d      	bne.n	800776a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fe81 	bl	8007436 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800773c:	e015      	b.n	800776a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007750:	2b03      	cmp	r3, #3
 8007752:	d108      	bne.n	8007766 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	7afa      	ldrb	r2, [r7, #11]
 800775e:	4611      	mov	r1, r2
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	4798      	blx	r3
 8007764:	e001      	b.n	800776a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007766:	2302      	movs	r3, #2
 8007768:	e000      	b.n	800776c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	2200      	movs	r2, #0
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fa67 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2240      	movs	r2, #64	; 0x40
 8007794:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	2200      	movs	r2, #0
 800779c:	2180      	movs	r1, #128	; 0x80
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fa59 	bl	8008c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d009      	beq.n	80077ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6852      	ldr	r2, [r2, #4]
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	4611      	mov	r1, r2
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
  }

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2204      	movs	r2, #4
 800782c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784a:	2b04      	cmp	r3, #4
 800784c:	d105      	bne.n	800785a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007874:	2b03      	cmp	r3, #3
 8007876:	d10b      	bne.n	8007890 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr

080078ca <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6852      	ldr	r2, [r2, #4]
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	4611      	mov	r1, r2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007922:	2b40      	cmp	r3, #64	; 0x40
 8007924:	d005      	beq.n	8007932 <USBD_StdDevReq+0x26>
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	d84f      	bhi.n	80079ca <USBD_StdDevReq+0xbe>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <USBD_StdDevReq+0x36>
 800792e:	2b20      	cmp	r3, #32
 8007930:	d14b      	bne.n	80079ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
      break;
 8007940:	e048      	b.n	80079d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b09      	cmp	r3, #9
 8007948:	d839      	bhi.n	80079be <USBD_StdDevReq+0xb2>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <USBD_StdDevReq+0x44>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	080079a1 	.word	0x080079a1
 8007954:	080079b5 	.word	0x080079b5
 8007958:	080079bf 	.word	0x080079bf
 800795c:	080079ab 	.word	0x080079ab
 8007960:	080079bf 	.word	0x080079bf
 8007964:	08007983 	.word	0x08007983
 8007968:	08007979 	.word	0x08007979
 800796c:	080079bf 	.word	0x080079bf
 8007970:	08007997 	.word	0x08007997
 8007974:	0800798d 	.word	0x0800798d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9dc 	bl	8007d38 <USBD_GetDescriptor>
          break;
 8007980:	e022      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fb3f 	bl	8008008 <USBD_SetAddress>
          break;
 800798a:	e01d      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fb7e 	bl	8008090 <USBD_SetConfig>
          break;
 8007994:	e018      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc07 	bl	80081ac <USBD_GetConfig>
          break;
 800799e:	e013      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fc37 	bl	8008216 <USBD_GetStatus>
          break;
 80079a8:	e00e      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fc65 	bl	800827c <USBD_SetFeature>
          break;
 80079b2:	e009      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fc74 	bl	80082a4 <USBD_ClrFeature>
          break;
 80079bc:	e004      	b.n	80079c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fccc 	bl	800835e <USBD_CtlError>
          break;
 80079c6:	bf00      	nop
      }
      break;
 80079c8:	e004      	b.n	80079d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fcc6 	bl	800835e <USBD_CtlError>
      break;
 80079d2:	bf00      	nop
  }

  return ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop

080079e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d005      	beq.n	8007a06 <USBD_StdItfReq+0x26>
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d82e      	bhi.n	8007a5c <USBD_StdItfReq+0x7c>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <USBD_StdItfReq+0x26>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d12a      	bne.n	8007a5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d81d      	bhi.n	8007a4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d813      	bhi.n	8007a44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	88db      	ldrh	r3, [r3, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d110      	bne.n	8007a58 <USBD_StdItfReq+0x78>
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10d      	bne.n	8007a58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fd56 	bl	80084ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a42:	e009      	b.n	8007a58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc89 	bl	800835e <USBD_CtlError>
          break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc84 	bl	800835e <USBD_CtlError>
          break;
 8007a56:	e000      	b.n	8007a5a <USBD_StdItfReq+0x7a>
          break;
 8007a58:	bf00      	nop
      }
      break;
 8007a5a:	e004      	b.n	8007a66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fc7d 	bl	800835e <USBD_CtlError>
      break;
 8007a64:	bf00      	nop
  }

  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d007      	beq.n	8007aa0 <USBD_StdEPReq+0x30>
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	f200 8146 	bhi.w	8007d22 <USBD_StdEPReq+0x2b2>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <USBD_StdEPReq+0x40>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f040 8141 	bne.w	8007d22 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
      break;
 8007aae:	e13d      	b.n	8007d2c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	d10a      	bne.n	8007ad2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	4603      	mov	r3, r0
 8007acc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	e12d      	b.n	8007d2e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d007      	beq.n	8007aea <USBD_StdEPReq+0x7a>
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	f300 811b 	bgt.w	8007d16 <USBD_StdEPReq+0x2a6>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d072      	beq.n	8007bca <USBD_StdEPReq+0x15a>
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d03a      	beq.n	8007b5e <USBD_StdEPReq+0xee>
 8007ae8:	e115      	b.n	8007d16 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d002      	beq.n	8007afa <USBD_StdEPReq+0x8a>
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d015      	beq.n	8007b24 <USBD_StdEPReq+0xb4>
 8007af8:	e02b      	b.n	8007b52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00c      	beq.n	8007b1a <USBD_StdEPReq+0xaa>
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d009      	beq.n	8007b1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f8e8 	bl	8008ce0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b10:	2180      	movs	r1, #128	; 0x80
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 f8e4 	bl	8008ce0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b18:	e020      	b.n	8007b5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fc1e 	bl	800835e <USBD_CtlError>
              break;
 8007b22:	e01b      	b.n	8007b5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10e      	bne.n	8007b4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <USBD_StdEPReq+0xda>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d008      	beq.n	8007b4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	88db      	ldrh	r3, [r3, #6]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f8cb 	bl	8008ce0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fccf 	bl	80084ee <USBD_CtlSendStatus>

              break;
 8007b50:	e004      	b.n	8007b5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fc02 	bl	800835e <USBD_CtlError>
              break;
 8007b5a:	bf00      	nop
          }
          break;
 8007b5c:	e0e0      	b.n	8007d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d002      	beq.n	8007b6e <USBD_StdEPReq+0xfe>
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d015      	beq.n	8007b98 <USBD_StdEPReq+0x128>
 8007b6c:	e026      	b.n	8007bbc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00c      	beq.n	8007b8e <USBD_StdEPReq+0x11e>
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d009      	beq.n	8007b8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f8ae 	bl	8008ce0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b84:	2180      	movs	r1, #128	; 0x80
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 f8aa 	bl	8008ce0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b8c:	e01c      	b.n	8007bc8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbe4 	bl	800835e <USBD_CtlError>
              break;
 8007b96:	e017      	b.n	8007bc8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	885b      	ldrh	r3, [r3, #2]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d112      	bne.n	8007bc6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 f8b5 	bl	8008d1e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fc9a 	bl	80084ee <USBD_CtlSendStatus>
              }
              break;
 8007bba:	e004      	b.n	8007bc6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fbcd 	bl	800835e <USBD_CtlError>
              break;
 8007bc4:	e000      	b.n	8007bc8 <USBD_StdEPReq+0x158>
              break;
 8007bc6:	bf00      	nop
          }
          break;
 8007bc8:	e0aa      	b.n	8007d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d002      	beq.n	8007bda <USBD_StdEPReq+0x16a>
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d032      	beq.n	8007c3e <USBD_StdEPReq+0x1ce>
 8007bd8:	e097      	b.n	8007d0a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <USBD_StdEPReq+0x180>
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d004      	beq.n	8007bf0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fbb8 	bl	800835e <USBD_CtlError>
                break;
 8007bee:	e091      	b.n	8007d14 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da0b      	bge.n	8007c10 <USBD_StdEPReq+0x1a0>
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	3310      	adds	r3, #16
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	e00b      	b.n	8007c28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4413      	add	r3, r2
 8007c26:	3304      	adds	r3, #4
 8007c28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2202      	movs	r2, #2
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fbfb 	bl	8008432 <USBD_CtlSendData>
              break;
 8007c3c:	e06a      	b.n	8007d14 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da11      	bge.n	8007c6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	f003 020f 	and.w	r2, r3, #15
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	3318      	adds	r3, #24
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d117      	bne.n	8007c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb7b 	bl	800835e <USBD_CtlError>
                  break;
 8007c68:	e054      	b.n	8007d14 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fb68 	bl	800835e <USBD_CtlError>
                  break;
 8007c8e:	e041      	b.n	8007d14 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da0b      	bge.n	8007cb0 <USBD_StdEPReq+0x240>
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	3310      	adds	r3, #16
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	3304      	adds	r3, #4
 8007cae:	e00b      	b.n	8007cc8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <USBD_StdEPReq+0x266>
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b80      	cmp	r3, #128	; 0x80
 8007cd4:	d103      	bne.n	8007cde <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e00e      	b.n	8007cfc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f83a 	bl	8008d5c <USBD_LL_IsStallEP>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e002      	b.n	8007cfc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb95 	bl	8008432 <USBD_CtlSendData>
              break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb26 	bl	800835e <USBD_CtlError>
              break;
 8007d12:	bf00      	nop
          }
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fb20 	bl	800835e <USBD_CtlError>
          break;
 8007d1e:	bf00      	nop
      }
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fb1a 	bl	800835e <USBD_CtlError>
      break;
 8007d2a:	bf00      	nop
  }

  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	f200 8128 	bhi.w	8007fae <USBD_GetDescriptor+0x276>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <USBD_GetDescriptor+0x2c>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007dd9 	.word	0x08007dd9
 8007d70:	08007faf 	.word	0x08007faf
 8007d74:	08007faf 	.word	0x08007faf
 8007d78:	08007f4f 	.word	0x08007f4f
 8007d7c:	08007f7b 	.word	0x08007f7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
      break;
 8007d96:	e112      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7c1b      	ldrb	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10d      	bne.n	8007dbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f107 0208 	add.w	r2, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3301      	adds	r3, #1
 8007db6:	2202      	movs	r2, #2
 8007db8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dba:	e100      	b.n	8007fbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f107 0208 	add.w	r2, r7, #8
 8007dc8:	4610      	mov	r0, r2
 8007dca:	4798      	blx	r3
 8007dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e0f2      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	f200 80ac 	bhi.w	8007f3c <USBD_GetDescriptor+0x204>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <USBD_GetDescriptor+0xb4>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007e39 	.word	0x08007e39
 8007df4:	08007e6d 	.word	0x08007e6d
 8007df8:	08007ea1 	.word	0x08007ea1
 8007dfc:	08007ed5 	.word	0x08007ed5
 8007e00:	08007f09 	.word	0x08007f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	7c12      	ldrb	r2, [r2, #16]
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e26:	e091      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa97 	bl	800835e <USBD_CtlError>
            err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
          break;
 8007e36:	e089      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e077      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa7d 	bl	800835e <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e06f      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7c12      	ldrb	r2, [r2, #16]
 8007e84:	f107 0108 	add.w	r1, r7, #8
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8e:	e05d      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa63 	bl	800835e <USBD_CtlError>
            err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9e:	e055      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec2:	e043      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa49 	bl	800835e <USBD_CtlError>
            err++;
 8007ecc:	7afb      	ldrb	r3, [r7, #11]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed2:	e03b      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 0108 	add.w	r1, r7, #8
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef6:	e029      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa2f 	bl	800835e <USBD_CtlError>
            err++;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	3301      	adds	r3, #1
 8007f04:	72fb      	strb	r3, [r7, #11]
          break;
 8007f06:	e021      	b.n	8007f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2a:	e00f      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa15 	bl	800835e <USBD_CtlError>
            err++;
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	3301      	adds	r3, #1
 8007f38:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3a:	e007      	b.n	8007f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa0d 	bl	800835e <USBD_CtlError>
          err++;
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	3301      	adds	r3, #1
 8007f48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f4a:	e038      	b.n	8007fbe <USBD_GetDescriptor+0x286>
 8007f4c:	e037      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7c1b      	ldrb	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d109      	bne.n	8007f6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5e:	f107 0208 	add.w	r2, r7, #8
 8007f62:	4610      	mov	r0, r2
 8007f64:	4798      	blx	r3
 8007f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f68:	e029      	b.n	8007fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9f6 	bl	800835e <USBD_CtlError>
        err++;
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	3301      	adds	r3, #1
 8007f76:	72fb      	strb	r3, [r7, #11]
      break;
 8007f78:	e021      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7c1b      	ldrb	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f107 0208 	add.w	r2, r7, #8
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4798      	blx	r3
 8007f92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3301      	adds	r3, #1
 8007f98:	2207      	movs	r2, #7
 8007f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f9c:	e00f      	b.n	8007fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9dc 	bl	800835e <USBD_CtlError>
        err++;
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	72fb      	strb	r3, [r7, #11]
      break;
 8007fac:	e007      	b.n	8007fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f9d4 	bl	800835e <USBD_CtlError>
      err++;
 8007fb6:	7afb      	ldrb	r3, [r7, #11]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	72fb      	strb	r3, [r7, #11]
      break;
 8007fbc:	bf00      	nop
  }

  if (err != 0U)
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11c      	bne.n	8007ffe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007fc4:	893b      	ldrh	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d011      	beq.n	8007fee <USBD_GetDescriptor+0x2b6>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88da      	ldrh	r2, [r3, #6]
 8007fd6:	893b      	ldrh	r3, [r7, #8]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	bf28      	it	cs
 8007fdc:	4613      	movcs	r3, r2
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fe2:	893b      	ldrh	r3, [r7, #8]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa22 	bl	8008432 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	88db      	ldrh	r3, [r3, #6]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d104      	bne.n	8008000 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa79 	bl	80084ee <USBD_CtlSendStatus>
 8007ffc:	e000      	b.n	8008000 <USBD_GetDescriptor+0x2c8>
    return;
 8007ffe:	bf00      	nop
    }
  }
}
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop

08008008 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	889b      	ldrh	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d130      	bne.n	800807c <USBD_SetAddress+0x74>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88db      	ldrh	r3, [r3, #6]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12c      	bne.n	800807c <USBD_SetAddress+0x74>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	2b7f      	cmp	r3, #127	; 0x7f
 8008028:	d828      	bhi.n	800807c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803c:	2b03      	cmp	r3, #3
 800803e:	d104      	bne.n	800804a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f98b 	bl	800835e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	e01d      	b.n	8008086 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 feab 	bl	8008db2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa46 	bl	80084ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008070:	e009      	b.n	8008086 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	e004      	b.n	8008086 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f96d 	bl	800835e <USBD_CtlError>
  }
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	4b41      	ldr	r3, [pc, #260]	; (80081a8 <USBD_SetConfig+0x118>)
 80080a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080a4:	4b40      	ldr	r3, [pc, #256]	; (80081a8 <USBD_SetConfig+0x118>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d904      	bls.n	80080b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f955 	bl	800835e <USBD_CtlError>
 80080b4:	e075      	b.n	80081a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d002      	beq.n	80080c6 <USBD_SetConfig+0x36>
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d023      	beq.n	800810c <USBD_SetConfig+0x7c>
 80080c4:	e062      	b.n	800818c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080c6:	4b38      	ldr	r3, [pc, #224]	; (80081a8 <USBD_SetConfig+0x118>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01a      	beq.n	8008104 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80080ce:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <USBD_SetConfig+0x118>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2203      	movs	r2, #3
 80080dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080e0:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <USBD_SetConfig+0x118>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff f9af 	bl	800744a <USBD_SetClassConfig>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d104      	bne.n	80080fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f932 	bl	800835e <USBD_CtlError>
            return;
 80080fa:	e052      	b.n	80081a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f9f6 	bl	80084ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008102:	e04e      	b.n	80081a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f9f2 	bl	80084ee <USBD_CtlSendStatus>
        break;
 800810a:	e04a      	b.n	80081a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800810c:	4b26      	ldr	r3, [pc, #152]	; (80081a8 <USBD_SetConfig+0x118>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d112      	bne.n	800813a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800811c:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <USBD_SetConfig+0x118>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008126:	4b20      	ldr	r3, [pc, #128]	; (80081a8 <USBD_SetConfig+0x118>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff f9ab 	bl	8007488 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9db 	bl	80084ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008138:	e033      	b.n	80081a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <USBD_SetConfig+0x118>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d01d      	beq.n	8008184 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff f999 	bl	8007488 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008156:	4b14      	ldr	r3, [pc, #80]	; (80081a8 <USBD_SetConfig+0x118>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008160:	4b11      	ldr	r3, [pc, #68]	; (80081a8 <USBD_SetConfig+0x118>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff f96f 	bl	800744a <USBD_SetClassConfig>
 800816c:	4603      	mov	r3, r0
 800816e:	2b02      	cmp	r3, #2
 8008170:	d104      	bne.n	800817c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8f2 	bl	800835e <USBD_CtlError>
            return;
 800817a:	e012      	b.n	80081a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f9b6 	bl	80084ee <USBD_CtlSendStatus>
        break;
 8008182:	e00e      	b.n	80081a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9b2 	bl	80084ee <USBD_CtlSendStatus>
        break;
 800818a:	e00a      	b.n	80081a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8e5 	bl	800835e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <USBD_SetConfig+0x118>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7ff f974 	bl	8007488 <USBD_ClrClassConfig>
        break;
 80081a0:	bf00      	nop
    }
  }
}
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000384 	.word	0x20000384

080081ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d004      	beq.n	80081c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f8cc 	bl	800835e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081c6:	e022      	b.n	800820e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	dc02      	bgt.n	80081d8 <USBD_GetConfig+0x2c>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dc03      	bgt.n	80081de <USBD_GetConfig+0x32>
 80081d6:	e015      	b.n	8008204 <USBD_GetConfig+0x58>
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d00b      	beq.n	80081f4 <USBD_GetConfig+0x48>
 80081dc:	e012      	b.n	8008204 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3308      	adds	r3, #8
 80081e8:	2201      	movs	r2, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f920 	bl	8008432 <USBD_CtlSendData>
        break;
 80081f2:	e00c      	b.n	800820e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	2201      	movs	r2, #1
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f918 	bl	8008432 <USBD_CtlSendData>
        break;
 8008202:	e004      	b.n	800820e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8a9 	bl	800835e <USBD_CtlError>
        break;
 800820c:	bf00      	nop
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008226:	3b01      	subs	r3, #1
 8008228:	2b02      	cmp	r3, #2
 800822a:	d81e      	bhi.n	800826a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d004      	beq.n	800823e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f891 	bl	800835e <USBD_CtlError>
        break;
 800823c:	e01a      	b.n	8008274 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f043 0202 	orr.w	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	330c      	adds	r3, #12
 800825e:	2202      	movs	r2, #2
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8e5 	bl	8008432 <USBD_CtlSendData>
      break;
 8008268:	e004      	b.n	8008274 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f876 	bl	800835e <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	885b      	ldrh	r3, [r3, #2]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d106      	bne.n	800829c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f929 	bl	80084ee <USBD_CtlSendStatus>
  }
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b4:	3b01      	subs	r3, #1
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d80b      	bhi.n	80082d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d10c      	bne.n	80082dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f90f 	bl	80084ee <USBD_CtlSendStatus>
      }
      break;
 80082d0:	e004      	b.n	80082dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f842 	bl	800835e <USBD_CtlError>
      break;
 80082da:	e000      	b.n	80082de <USBD_ClrFeature+0x3a>
      break;
 80082dc:	bf00      	nop
  }
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	785a      	ldrb	r2, [r3, #1]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	3302      	adds	r3, #2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	3303      	adds	r3, #3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	4413      	add	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	3304      	adds	r3, #4
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	b29a      	uxth	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	3305      	adds	r3, #5
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	b29b      	uxth	r3, r3
 8008330:	4413      	add	r3, r2
 8008332:	b29a      	uxth	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	3306      	adds	r3, #6
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b29a      	uxth	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	3307      	adds	r3, #7
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b29b      	uxth	r3, r3
 800834c:	4413      	add	r3, r2
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	80da      	strh	r2, [r3, #6]

}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fcb8 	bl	8008ce0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008370:	2100      	movs	r1, #0
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fcb4 	bl	8008ce0 <USBD_LL_StallEP>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d032      	beq.n	80083fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f834 	bl	8008404 <USBD_GetLen>
 800839c:	4603      	mov	r3, r0
 800839e:	3301      	adds	r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	75fa      	strb	r2, [r7, #23]
 80083b0:	461a      	mov	r2, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	4413      	add	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	7812      	ldrb	r2, [r2, #0]
 80083ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	75fa      	strb	r2, [r7, #23]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4413      	add	r3, r2
 80083c8:	2203      	movs	r2, #3
 80083ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083cc:	e012      	b.n	80083f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	60fa      	str	r2, [r7, #12]
 80083d4:	7dfa      	ldrb	r2, [r7, #23]
 80083d6:	1c51      	adds	r1, r2, #1
 80083d8:	75f9      	strb	r1, [r7, #23]
 80083da:	4611      	mov	r1, r2
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	440a      	add	r2, r1
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	75fa      	strb	r2, [r7, #23]
 80083ea:	461a      	mov	r2, r3
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e8      	bne.n	80083ce <USBD_GetString+0x4e>
    }
  }
}
 80083fc:	bf00      	nop
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008410:	e005      	b.n	800841e <USBD_GetLen+0x1a>
  {
    len++;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	3301      	adds	r3, #1
 8008416:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3301      	adds	r3, #1
 800841c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f5      	bne.n	8008412 <USBD_GetLen+0xe>
  }

  return len;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr

08008432 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	4613      	mov	r3, r2
 800843e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2202      	movs	r2, #2
 8008444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008448:	88fa      	ldrh	r2, [r7, #6]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800844e:	88fa      	ldrh	r2, [r7, #6]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	2100      	movs	r1, #0
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fcc8 	bl	8008df0 <USBD_LL_Transmit>

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	4613      	mov	r3, r2
 8008476:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008478:	88fb      	ldrh	r3, [r7, #6]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	2100      	movs	r1, #0
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f000 fcb6 	bl	8008df0 <USBD_LL_Transmit>

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2203      	movs	r2, #3
 80084a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80084ac:	88fa      	ldrh	r2, [r7, #6]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fcbb 	bl	8008e36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084d8:	88fb      	ldrh	r3, [r7, #6]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	2100      	movs	r1, #0
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fca9 	bl	8008e36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2204      	movs	r2, #4
 80084fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fc73 	bl	8008df0 <USBD_LL_Transmit>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2205      	movs	r2, #5
 8008520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fc83 	bl	8008e36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USB_Transmit>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void USB_Transmit(char* Buf, uint16_t Len)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8008546:	887b      	ldrh	r3, [r7, #2]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f8c2 	bl	80086d4 <CDC_Transmit_FS>
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800855c:	2200      	movs	r2, #0
 800855e:	4912      	ldr	r1, [pc, #72]	; (80085a8 <MX_USB_DEVICE_Init+0x50>)
 8008560:	4812      	ldr	r0, [pc, #72]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe ff18 	bl	8007396 <USBD_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800856c:	f7f9 f916 	bl	800179c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008570:	490f      	ldr	r1, [pc, #60]	; (80085b0 <MX_USB_DEVICE_Init+0x58>)
 8008572:	480e      	ldr	r0, [pc, #56]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008574:	f7fe ff3a 	bl	80073ec <USBD_RegisterClass>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800857e:	f7f9 f90d 	bl	800179c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008582:	490c      	ldr	r1, [pc, #48]	; (80085b4 <MX_USB_DEVICE_Init+0x5c>)
 8008584:	4809      	ldr	r0, [pc, #36]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008586:	f7fe fe6b 	bl	8007260 <USBD_CDC_RegisterInterface>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008590:	f7f9 f904 	bl	800179c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008594:	4805      	ldr	r0, [pc, #20]	; (80085ac <MX_USB_DEVICE_Init+0x54>)
 8008596:	f7fe ff42 	bl	800741e <USBD_Start>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a0:	f7f9 f8fc 	bl	800179c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000198 	.word	0x20000198
 80085ac:	20000388 	.word	0x20000388
 80085b0:	20000084 	.word	0x20000084
 80085b4:	20000188 	.word	0x20000188

080085b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	4905      	ldr	r1, [pc, #20]	; (80085d4 <CDC_Init_FS+0x1c>)
 80085c0:	4805      	ldr	r0, [pc, #20]	; (80085d8 <CDC_Init_FS+0x20>)
 80085c2:	f7fe fe63 	bl	800728c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085c6:	4905      	ldr	r1, [pc, #20]	; (80085dc <CDC_Init_FS+0x24>)
 80085c8:	4803      	ldr	r0, [pc, #12]	; (80085d8 <CDC_Init_FS+0x20>)
 80085ca:	f7fe fe78 	bl	80072be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000a4c 	.word	0x20000a4c
 80085d8:	20000388 	.word	0x20000388
 80085dc:	2000064c 	.word	0x2000064c

080085e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr
	...

080085f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
 80085fc:	4613      	mov	r3, r2
 80085fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b23      	cmp	r3, #35	; 0x23
 8008604:	d84a      	bhi.n	800869c <CDC_Control_FS+0xac>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <CDC_Control_FS+0x1c>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	0800869d 	.word	0x0800869d
 8008610:	0800869d 	.word	0x0800869d
 8008614:	0800869d 	.word	0x0800869d
 8008618:	0800869d 	.word	0x0800869d
 800861c:	0800869d 	.word	0x0800869d
 8008620:	0800869d 	.word	0x0800869d
 8008624:	0800869d 	.word	0x0800869d
 8008628:	0800869d 	.word	0x0800869d
 800862c:	0800869d 	.word	0x0800869d
 8008630:	0800869d 	.word	0x0800869d
 8008634:	0800869d 	.word	0x0800869d
 8008638:	0800869d 	.word	0x0800869d
 800863c:	0800869d 	.word	0x0800869d
 8008640:	0800869d 	.word	0x0800869d
 8008644:	0800869d 	.word	0x0800869d
 8008648:	0800869d 	.word	0x0800869d
 800864c:	0800869d 	.word	0x0800869d
 8008650:	0800869d 	.word	0x0800869d
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800869d 	.word	0x0800869d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	0800869d 	.word	0x0800869d
 8008664:	0800869d 	.word	0x0800869d
 8008668:	0800869d 	.word	0x0800869d
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800869d 	.word	0x0800869d
 8008674:	0800869d 	.word	0x0800869d
 8008678:	0800869d 	.word	0x0800869d
 800867c:	0800869d 	.word	0x0800869d
 8008680:	0800869d 	.word	0x0800869d
 8008684:	0800869d 	.word	0x0800869d
 8008688:	0800869d 	.word	0x0800869d
 800868c:	0800869d 	.word	0x0800869d
 8008690:	0800869d 	.word	0x0800869d
 8008694:	0800869d 	.word	0x0800869d
 8008698:	0800869d 	.word	0x0800869d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800869c:	bf00      	nop
  }

  return (USBD_OK);
 800869e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop

080086ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4805      	ldr	r0, [pc, #20]	; (80086d0 <CDC_Receive_FS+0x24>)
 80086ba:	f7fe fe00 	bl	80072be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086be:	4804      	ldr	r0, [pc, #16]	; (80086d0 <CDC_Receive_FS+0x24>)
 80086c0:	f7fe fe3f 	bl	8007342 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000388 	.word	0x20000388

080086d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086e4:	4b0d      	ldr	r3, [pc, #52]	; (800871c <CDC_Transmit_FS+0x48>)
 80086e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e00b      	b.n	8008712 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	4806      	ldr	r0, [pc, #24]	; (800871c <CDC_Transmit_FS+0x48>)
 8008702:	f7fe fdc3 	bl	800728c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008706:	4805      	ldr	r0, [pc, #20]	; (800871c <CDC_Transmit_FS+0x48>)
 8008708:	f7fe fdec 	bl	80072e4 <USBD_CDC_TransmitPacket>
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008710:	7bfb      	ldrb	r3, [r7, #15]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000388 	.word	0x20000388

08008720 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2212      	movs	r2, #18
 8008730:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008732:	4b03      	ldr	r3, [pc, #12]	; (8008740 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	200001b4 	.word	0x200001b4

08008744 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	2204      	movs	r2, #4
 8008754:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008756:	4b03      	ldr	r3, [pc, #12]	; (8008764 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	200001c8 	.word	0x200001c8

08008768 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4907      	ldr	r1, [pc, #28]	; (800879c <USBD_FS_ProductStrDescriptor+0x34>)
 800877e:	4808      	ldr	r0, [pc, #32]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008780:	f7ff fdfe 	bl	8008380 <USBD_GetString>
 8008784:	e004      	b.n	8008790 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	4904      	ldr	r1, [pc, #16]	; (800879c <USBD_FS_ProductStrDescriptor+0x34>)
 800878a:	4805      	ldr	r0, [pc, #20]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800878c:	f7ff fdf8 	bl	8008380 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008790:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008792:	4618      	mov	r0, r3
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000e4c 	.word	0x20000e4c
 80087a0:	080098fc 	.word	0x080098fc

080087a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	4904      	ldr	r1, [pc, #16]	; (80087c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087b4:	4804      	ldr	r0, [pc, #16]	; (80087c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087b6:	f7ff fde3 	bl	8008380 <USBD_GetString>
  return USBD_StrDesc;
 80087ba:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000e4c 	.word	0x20000e4c
 80087c8:	08009914 	.word	0x08009914

080087cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	221a      	movs	r2, #26
 80087dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087de:	f000 f843 	bl	8008868 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087e2:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	200001cc 	.word	0x200001cc

080087f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	4907      	ldr	r1, [pc, #28]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008806:	4808      	ldr	r0, [pc, #32]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008808:	f7ff fdba 	bl	8008380 <USBD_GetString>
 800880c:	e004      	b.n	8008818 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	4904      	ldr	r1, [pc, #16]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008812:	4805      	ldr	r0, [pc, #20]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008814:	f7ff fdb4 	bl	8008380 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000e4c 	.word	0x20000e4c
 8008828:	08009928 	.word	0x08009928

0800882c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d105      	bne.n	800884a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	4907      	ldr	r1, [pc, #28]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008842:	4808      	ldr	r0, [pc, #32]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008844:	f7ff fd9c 	bl	8008380 <USBD_GetString>
 8008848:	e004      	b.n	8008854 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4904      	ldr	r1, [pc, #16]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800884e:	4805      	ldr	r0, [pc, #20]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008850:	f7ff fd96 	bl	8008380 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008854:	4b02      	ldr	r3, [pc, #8]	; (8008860 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000e4c 	.word	0x20000e4c
 8008864:	08009934 	.word	0x08009934

08008868 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <Get_SerialNum+0x44>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <Get_SerialNum+0x48>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800887a:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <Get_SerialNum+0x4c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800888e:	2208      	movs	r2, #8
 8008890:	4909      	ldr	r1, [pc, #36]	; (80088b8 <Get_SerialNum+0x50>)
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 f814 	bl	80088c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008898:	2204      	movs	r2, #4
 800889a:	4908      	ldr	r1, [pc, #32]	; (80088bc <Get_SerialNum+0x54>)
 800889c:	68b8      	ldr	r0, [r7, #8]
 800889e:	f000 f80f 	bl	80088c0 <IntToUnicode>
  }
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	1ffff7e8 	.word	0x1ffff7e8
 80088b0:	1ffff7ec 	.word	0x1ffff7ec
 80088b4:	1ffff7f0 	.word	0x1ffff7f0
 80088b8:	200001ce 	.word	0x200001ce
 80088bc:	200001de 	.word	0x200001de

080088c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088d2:	2300      	movs	r3, #0
 80088d4:	75fb      	strb	r3, [r7, #23]
 80088d6:	e027      	b.n	8008928 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	0f1b      	lsrs	r3, r3, #28
 80088dc:	2b09      	cmp	r3, #9
 80088de:	d80b      	bhi.n	80088f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0f1b      	lsrs	r3, r3, #28
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	4619      	mov	r1, r3
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	440b      	add	r3, r1
 80088f0:	3230      	adds	r2, #48	; 0x30
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	e00a      	b.n	800890e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	0f1b      	lsrs	r3, r3, #28
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4619      	mov	r1, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	440b      	add	r3, r1
 8008908:	3237      	adds	r2, #55	; 0x37
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	3301      	adds	r3, #1
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	4413      	add	r3, r2
 800891e:	2200      	movs	r2, #0
 8008920:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	3301      	adds	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
 8008928:	7dfa      	ldrb	r2, [r7, #23]
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	429a      	cmp	r2, r3
 800892e:	d3d3      	bcc.n	80088d8 <IntToUnicode+0x18>
  }
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr

0800893c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895a:	d12c      	bne.n	80089b6 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800895c:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	4a17      	ldr	r2, [pc, #92]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 8008962:	f043 0304 	orr.w	r3, r3, #4
 8008966:	6193      	str	r3, [r2, #24]
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	60fb      	str	r3, [r7, #12]
 8008972:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	4619      	mov	r1, r3
 8008988:	480e      	ldr	r0, [pc, #56]	; (80089c4 <HAL_PCD_MspInit+0x88>)
 800898a:	f7fa f867 	bl	8002a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	4a0b      	ldr	r2, [pc, #44]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 8008994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008998:	6153      	str	r3, [r2, #20]
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_PCD_MspInit+0x84>)
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	2043      	movs	r0, #67	; 0x43
 80089ac:	f7fa f81f 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089b0:	2043      	movs	r0, #67	; 0x43
 80089b2:	f7fa f838 	bl	8002a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089b6:	bf00      	nop
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40021000 	.word	0x40021000
 80089c4:	40010800 	.word	0x40010800

080089c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fd65 	bl	80074ae <USBD_LL_SetupStage>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	440b      	add	r3, r1
 8008a0c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	4619      	mov	r1, r3
 8008a16:	f7fe fd97 	bl	8007548 <USBD_LL_DataOutStage>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	6879      	ldr	r1, [r7, #4]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	440b      	add	r3, r1
 8008a42:	3348      	adds	r3, #72	; 0x48
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7fe fdee 	bl	800762a <USBD_LL_DataInStage>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe fefe 	bl	8007866 <USBD_LL_SOF>
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d001      	beq.n	8008a8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a86:	f7f8 fe89 	bl	800179c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008a90:	7bfa      	ldrb	r2, [r7, #15]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe feae 	bl	80077f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fe67 	bl	8007774 <USBD_LL_Reset>
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fea8 	bl	8007814 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <HAL_PCD_SuspendCallback+0x48>)
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <HAL_PCD_SuspendCallback+0x48>)
 8008aea:	f043 0306 	orr.w	r3, r3, #6
 8008aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fe96 	bl	800783c <USBD_LL_Resume>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe febf 	bl	80078b2 <USBD_LL_IsoOUTIncomplete>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fea1 	bl	800789a <USBD_LL_IsoINIncomplete>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe feab 	bl	80078ca <USBD_LL_DevConnected>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fea7 	bl	80078de <USBD_LL_DevDisconnected>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d133      	bne.n	8008c10 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ba8:	4a1c      	ldr	r2, [pc, #112]	; (8008c1c <USBD_LL_Init+0x84>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bb8:	4b18      	ldr	r3, [pc, #96]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bc0:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bc6:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bc8:	2202      	movs	r2, #2
 8008bca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bcc:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bce:	2202      	movs	r2, #2
 8008bd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bd8:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <USBD_LL_Init+0x84>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008be4:	480d      	ldr	r0, [pc, #52]	; (8008c1c <USBD_LL_Init+0x84>)
 8008be6:	f7fa f8ee 	bl	8002dc6 <HAL_PCD_Init>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008bf0:	f7f8 fdd4 	bl	800179c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bf4:	2180      	movs	r1, #128	; 0x80
 8008bf6:	4809      	ldr	r0, [pc, #36]	; (8008c1c <USBD_LL_Init+0x84>)
 8008bf8:	f7fb fa06 	bl	8004008 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bfc:	2240      	movs	r2, #64	; 0x40
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4806      	ldr	r0, [pc, #24]	; (8008c1c <USBD_LL_Init+0x84>)
 8008c02:	f7fb f9bb 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	2101      	movs	r1, #1
 8008c0a:	4804      	ldr	r0, [pc, #16]	; (8008c1c <USBD_LL_Init+0x84>)
 8008c0c:	f7fb f9b6 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2000104c 	.word	0x2000104c

08008c20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fa f9e2 	bl	8003000 <HAL_PCD_Start>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f944 	bl	8008ed0 <USBD_Get_USB_Status>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	70fb      	strb	r3, [r7, #3]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70bb      	strb	r3, [r7, #2]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c7e:	78bb      	ldrb	r3, [r7, #2]
 8008c80:	883a      	ldrh	r2, [r7, #0]
 8008c82:	78f9      	ldrb	r1, [r7, #3]
 8008c84:	f7fa fe5b 	bl	800393e <HAL_PCD_EP_Open>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f91e 	bl	8008ed0 <USBD_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fa fea4 	bl	8003a0e <HAL_PCD_EP_Close>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f8ff 	bl	8008ed0 <USBD_Get_USB_Status>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa ff49 	bl	8003b96 <HAL_PCD_EP_SetStall>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f8e0 	bl	8008ed0 <USBD_Get_USB_Status>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fa ff8c 	bl	8003c5a <HAL_PCD_EP_ClrStall>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f8c1 	bl	8008ed0 <USBD_Get_USB_Status>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da0b      	bge.n	8008d90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d7e:	68f9      	ldr	r1, [r7, #12]
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	333e      	adds	r3, #62	; 0x3e
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	e00b      	b.n	8008da8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008da6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa fd8f 	bl	80038f4 <HAL_PCD_SetAddress>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 f877 	bl	8008ed0 <USBD_Get_USB_Status>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	72fb      	strb	r3, [r7, #11]
 8008e00:	4613      	mov	r3, r2
 8008e02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	7af9      	ldrb	r1, [r7, #11]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	f7fa fe8c 	bl	8003b34 <HAL_PCD_EP_Transmit>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f854 	bl	8008ed0 <USBD_Get_USB_Status>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	461a      	mov	r2, r3
 8008e42:	460b      	mov	r3, r1
 8008e44:	72fb      	strb	r3, [r7, #11]
 8008e46:	4613      	mov	r3, r2
 8008e48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e58:	893b      	ldrh	r3, [r7, #8]
 8008e5a:	7af9      	ldrb	r1, [r7, #11]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	f7fa fe20 	bl	8003aa2 <HAL_PCD_EP_Receive>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f831 	bl	8008ed0 <USBD_Get_USB_Status>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e72:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fa fe37 	bl	8003b06 <HAL_PCD_EP_GetRxCount>
 8008e98:	4603      	mov	r3, r0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <USBD_static_malloc+0x14>)
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bc80      	pop	{r7}
 8008eb6:	4770      	bx	lr
 8008eb8:	20001550 	.word	0x20001550

08008ebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]

}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr
	...

08008ed0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d817      	bhi.n	8008f14 <USBD_Get_USB_Status+0x44>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <USBD_Get_USB_Status+0x1c>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	08008f03 	.word	0x08008f03
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f0f 	.word	0x08008f0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e00b      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f02:	2302      	movs	r3, #2
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e008      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	e005      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	73fb      	strb	r3, [r7, #15]
    break;
 8008f12:	e002      	b.n	8008f1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	73fb      	strb	r3, [r7, #15]
    break;
 8008f18:	bf00      	nop
  }
  return usb_status;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop

08008f28 <malloc>:
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <malloc+0xc>)
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f000 b82b 	b.w	8008f88 <_malloc_r>
 8008f32:	bf00      	nop
 8008f34:	20000234 	.word	0x20000234

08008f38 <free>:
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <free+0xc>)
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	f000 b935 	b.w	80091ac <_free_r>
 8008f42:	bf00      	nop
 8008f44:	20000234 	.word	0x20000234

08008f48 <sbrk_aligned>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4e0e      	ldr	r6, [pc, #56]	; (8008f84 <sbrk_aligned+0x3c>)
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	6831      	ldr	r1, [r6, #0]
 8008f50:	4605      	mov	r5, r0
 8008f52:	b911      	cbnz	r1, 8008f5a <sbrk_aligned+0x12>
 8008f54:	f000 f8e0 	bl	8009118 <_sbrk_r>
 8008f58:	6030      	str	r0, [r6, #0]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f000 f8db 	bl	8009118 <_sbrk_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	d00a      	beq.n	8008f7c <sbrk_aligned+0x34>
 8008f66:	1cc4      	adds	r4, r0, #3
 8008f68:	f024 0403 	bic.w	r4, r4, #3
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d007      	beq.n	8008f80 <sbrk_aligned+0x38>
 8008f70:	1a21      	subs	r1, r4, r0
 8008f72:	4628      	mov	r0, r5
 8008f74:	f000 f8d0 	bl	8009118 <_sbrk_r>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d101      	bne.n	8008f80 <sbrk_aligned+0x38>
 8008f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f80:	4620      	mov	r0, r4
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	20001774 	.word	0x20001774

08008f88 <_malloc_r>:
 8008f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	1ccd      	adds	r5, r1, #3
 8008f8e:	f025 0503 	bic.w	r5, r5, #3
 8008f92:	3508      	adds	r5, #8
 8008f94:	2d0c      	cmp	r5, #12
 8008f96:	bf38      	it	cc
 8008f98:	250c      	movcc	r5, #12
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	db01      	blt.n	8008fa4 <_malloc_r+0x1c>
 8008fa0:	42a9      	cmp	r1, r5
 8008fa2:	d905      	bls.n	8008fb0 <_malloc_r+0x28>
 8008fa4:	230c      	movs	r3, #12
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	603b      	str	r3, [r7, #0]
 8008faa:	4630      	mov	r0, r6
 8008fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009084 <_malloc_r+0xfc>
 8008fb4:	f000 f868 	bl	8009088 <__malloc_lock>
 8008fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fbc:	461c      	mov	r4, r3
 8008fbe:	bb5c      	cbnz	r4, 8009018 <_malloc_r+0x90>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff ffc0 	bl	8008f48 <sbrk_aligned>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	4604      	mov	r4, r0
 8008fcc:	d155      	bne.n	800907a <_malloc_r+0xf2>
 8008fce:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd2:	4626      	mov	r6, r4
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	d145      	bne.n	8009064 <_malloc_r+0xdc>
 8008fd8:	2c00      	cmp	r4, #0
 8008fda:	d048      	beq.n	800906e <_malloc_r+0xe6>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	eb04 0903 	add.w	r9, r4, r3
 8008fe6:	f000 f897 	bl	8009118 <_sbrk_r>
 8008fea:	4581      	cmp	r9, r0
 8008fec:	d13f      	bne.n	800906e <_malloc_r+0xe6>
 8008fee:	6821      	ldr	r1, [r4, #0]
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	1a6d      	subs	r5, r5, r1
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7ff ffa7 	bl	8008f48 <sbrk_aligned>
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d037      	beq.n	800906e <_malloc_r+0xe6>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	442b      	add	r3, r5
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	f8d8 3000 	ldr.w	r3, [r8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d038      	beq.n	800907e <_malloc_r+0xf6>
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	42a2      	cmp	r2, r4
 8009010:	d12b      	bne.n	800906a <_malloc_r+0xe2>
 8009012:	2200      	movs	r2, #0
 8009014:	605a      	str	r2, [r3, #4]
 8009016:	e00f      	b.n	8009038 <_malloc_r+0xb0>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	1b52      	subs	r2, r2, r5
 800901c:	d41f      	bmi.n	800905e <_malloc_r+0xd6>
 800901e:	2a0b      	cmp	r2, #11
 8009020:	d917      	bls.n	8009052 <_malloc_r+0xca>
 8009022:	1961      	adds	r1, r4, r5
 8009024:	42a3      	cmp	r3, r4
 8009026:	6025      	str	r5, [r4, #0]
 8009028:	bf18      	it	ne
 800902a:	6059      	strne	r1, [r3, #4]
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	bf08      	it	eq
 8009030:	f8c8 1000 	streq.w	r1, [r8]
 8009034:	5162      	str	r2, [r4, r5]
 8009036:	604b      	str	r3, [r1, #4]
 8009038:	4638      	mov	r0, r7
 800903a:	f104 060b 	add.w	r6, r4, #11
 800903e:	f000 f829 	bl	8009094 <__malloc_unlock>
 8009042:	f026 0607 	bic.w	r6, r6, #7
 8009046:	1d23      	adds	r3, r4, #4
 8009048:	1af2      	subs	r2, r6, r3
 800904a:	d0ae      	beq.n	8008faa <_malloc_r+0x22>
 800904c:	1b9b      	subs	r3, r3, r6
 800904e:	50a3      	str	r3, [r4, r2]
 8009050:	e7ab      	b.n	8008faa <_malloc_r+0x22>
 8009052:	42a3      	cmp	r3, r4
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	d1dd      	bne.n	8009014 <_malloc_r+0x8c>
 8009058:	f8c8 2000 	str.w	r2, [r8]
 800905c:	e7ec      	b.n	8009038 <_malloc_r+0xb0>
 800905e:	4623      	mov	r3, r4
 8009060:	6864      	ldr	r4, [r4, #4]
 8009062:	e7ac      	b.n	8008fbe <_malloc_r+0x36>
 8009064:	4634      	mov	r4, r6
 8009066:	6876      	ldr	r6, [r6, #4]
 8009068:	e7b4      	b.n	8008fd4 <_malloc_r+0x4c>
 800906a:	4613      	mov	r3, r2
 800906c:	e7cc      	b.n	8009008 <_malloc_r+0x80>
 800906e:	230c      	movs	r3, #12
 8009070:	4638      	mov	r0, r7
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	f000 f80e 	bl	8009094 <__malloc_unlock>
 8009078:	e797      	b.n	8008faa <_malloc_r+0x22>
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	e7dc      	b.n	8009038 <_malloc_r+0xb0>
 800907e:	605b      	str	r3, [r3, #4]
 8009080:	deff      	udf	#255	; 0xff
 8009082:	bf00      	nop
 8009084:	20001770 	.word	0x20001770

08009088 <__malloc_lock>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__malloc_lock+0x8>)
 800908a:	f000 b87f 	b.w	800918c <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	200018b4 	.word	0x200018b4

08009094 <__malloc_unlock>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__malloc_unlock+0x8>)
 8009096:	f000 b87a 	b.w	800918e <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	200018b4 	.word	0x200018b4

080090a0 <siprintf>:
 80090a0:	b40e      	push	{r1, r2, r3}
 80090a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090a6:	b500      	push	{lr}
 80090a8:	b09c      	sub	sp, #112	; 0x70
 80090aa:	ab1d      	add	r3, sp, #116	; 0x74
 80090ac:	9002      	str	r0, [sp, #8]
 80090ae:	9006      	str	r0, [sp, #24]
 80090b0:	9107      	str	r1, [sp, #28]
 80090b2:	9104      	str	r1, [sp, #16]
 80090b4:	4808      	ldr	r0, [pc, #32]	; (80090d8 <siprintf+0x38>)
 80090b6:	4909      	ldr	r1, [pc, #36]	; (80090dc <siprintf+0x3c>)
 80090b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090bc:	9105      	str	r1, [sp, #20]
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	a902      	add	r1, sp, #8
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f000 f914 	bl	80092f0 <_svfiprintf_r>
 80090c8:	2200      	movs	r2, #0
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	b01c      	add	sp, #112	; 0x70
 80090d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d4:	b003      	add	sp, #12
 80090d6:	4770      	bx	lr
 80090d8:	20000234 	.word	0x20000234
 80090dc:	ffff0208 	.word	0xffff0208

080090e0 <memset>:
 80090e0:	4603      	mov	r3, r0
 80090e2:	4402      	add	r2, r0
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d100      	bne.n	80090ea <memset+0xa>
 80090e8:	4770      	bx	lr
 80090ea:	f803 1b01 	strb.w	r1, [r3], #1
 80090ee:	e7f9      	b.n	80090e4 <memset+0x4>

080090f0 <strncat>:
 80090f0:	b530      	push	{r4, r5, lr}
 80090f2:	4604      	mov	r4, r0
 80090f4:	7825      	ldrb	r5, [r4, #0]
 80090f6:	4623      	mov	r3, r4
 80090f8:	3401      	adds	r4, #1
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	d1fa      	bne.n	80090f4 <strncat+0x4>
 80090fe:	3a01      	subs	r2, #1
 8009100:	d304      	bcc.n	800910c <strncat+0x1c>
 8009102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009106:	f803 4b01 	strb.w	r4, [r3], #1
 800910a:	b904      	cbnz	r4, 800910e <strncat+0x1e>
 800910c:	bd30      	pop	{r4, r5, pc}
 800910e:	2a00      	cmp	r2, #0
 8009110:	d1f5      	bne.n	80090fe <strncat+0xe>
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	e7f3      	b.n	80090fe <strncat+0xe>
	...

08009118 <_sbrk_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	2300      	movs	r3, #0
 800911c:	4d05      	ldr	r5, [pc, #20]	; (8009134 <_sbrk_r+0x1c>)
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f8 fe0c 	bl	8001d40 <_sbrk>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_sbrk_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_sbrk_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	200018b0 	.word	0x200018b0

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	20000234 	.word	0x20000234

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	2600      	movs	r6, #0
 8009148:	4d0c      	ldr	r5, [pc, #48]	; (800917c <__libc_init_array+0x38>)
 800914a:	4c0d      	ldr	r4, [pc, #52]	; (8009180 <__libc_init_array+0x3c>)
 800914c:	1b64      	subs	r4, r4, r5
 800914e:	10a4      	asrs	r4, r4, #2
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	f000 fbbe 	bl	80098d4 <_init>
 8009158:	2600      	movs	r6, #0
 800915a:	4d0a      	ldr	r5, [pc, #40]	; (8009184 <__libc_init_array+0x40>)
 800915c:	4c0a      	ldr	r4, [pc, #40]	; (8009188 <__libc_init_array+0x44>)
 800915e:	1b64      	subs	r4, r4, r5
 8009160:	10a4      	asrs	r4, r4, #2
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	08009dbc 	.word	0x08009dbc
 8009180:	08009dbc 	.word	0x08009dbc
 8009184:	08009dbc 	.word	0x08009dbc
 8009188:	08009dc0 	.word	0x08009dc0

0800918c <__retarget_lock_acquire_recursive>:
 800918c:	4770      	bx	lr

0800918e <__retarget_lock_release_recursive>:
 800918e:	4770      	bx	lr

08009190 <memcpy>:
 8009190:	440a      	add	r2, r1
 8009192:	4291      	cmp	r1, r2
 8009194:	f100 33ff 	add.w	r3, r0, #4294967295
 8009198:	d100      	bne.n	800919c <memcpy+0xc>
 800919a:	4770      	bx	lr
 800919c:	b510      	push	{r4, lr}
 800919e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a8:	d1f9      	bne.n	800919e <memcpy+0xe>
 80091aa:	bd10      	pop	{r4, pc}

080091ac <_free_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4605      	mov	r5, r0
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d040      	beq.n	8009236 <_free_r+0x8a>
 80091b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b8:	1f0c      	subs	r4, r1, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfb8      	it	lt
 80091be:	18e4      	addlt	r4, r4, r3
 80091c0:	f7ff ff62 	bl	8009088 <__malloc_lock>
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <_free_r+0x8c>)
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	b933      	cbnz	r3, 80091d8 <_free_r+0x2c>
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	6014      	str	r4, [r2, #0]
 80091ce:	4628      	mov	r0, r5
 80091d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d4:	f7ff bf5e 	b.w	8009094 <__malloc_unlock>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d908      	bls.n	80091ee <_free_r+0x42>
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	1821      	adds	r1, r4, r0
 80091e0:	428b      	cmp	r3, r1
 80091e2:	bf01      	itttt	eq
 80091e4:	6819      	ldreq	r1, [r3, #0]
 80091e6:	685b      	ldreq	r3, [r3, #4]
 80091e8:	1809      	addeq	r1, r1, r0
 80091ea:	6021      	streq	r1, [r4, #0]
 80091ec:	e7ed      	b.n	80091ca <_free_r+0x1e>
 80091ee:	461a      	mov	r2, r3
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	b10b      	cbz	r3, 80091f8 <_free_r+0x4c>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d9fa      	bls.n	80091ee <_free_r+0x42>
 80091f8:	6811      	ldr	r1, [r2, #0]
 80091fa:	1850      	adds	r0, r2, r1
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d10b      	bne.n	8009218 <_free_r+0x6c>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	4401      	add	r1, r0
 8009204:	1850      	adds	r0, r2, r1
 8009206:	4283      	cmp	r3, r0
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	d1e0      	bne.n	80091ce <_free_r+0x22>
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4408      	add	r0, r1
 8009212:	6010      	str	r0, [r2, #0]
 8009214:	6053      	str	r3, [r2, #4]
 8009216:	e7da      	b.n	80091ce <_free_r+0x22>
 8009218:	d902      	bls.n	8009220 <_free_r+0x74>
 800921a:	230c      	movs	r3, #12
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	e7d6      	b.n	80091ce <_free_r+0x22>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	1821      	adds	r1, r4, r0
 8009224:	428b      	cmp	r3, r1
 8009226:	bf01      	itttt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	6054      	str	r4, [r2, #4]
 8009234:	e7cb      	b.n	80091ce <_free_r+0x22>
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20001770 	.word	0x20001770

0800923c <__ssputs_r>:
 800923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009240:	461f      	mov	r7, r3
 8009242:	688e      	ldr	r6, [r1, #8]
 8009244:	4682      	mov	sl, r0
 8009246:	42be      	cmp	r6, r7
 8009248:	460c      	mov	r4, r1
 800924a:	4690      	mov	r8, r2
 800924c:	680b      	ldr	r3, [r1, #0]
 800924e:	d82c      	bhi.n	80092aa <__ssputs_r+0x6e>
 8009250:	898a      	ldrh	r2, [r1, #12]
 8009252:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009256:	d026      	beq.n	80092a6 <__ssputs_r+0x6a>
 8009258:	6965      	ldr	r5, [r4, #20]
 800925a:	6909      	ldr	r1, [r1, #16]
 800925c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009260:	eba3 0901 	sub.w	r9, r3, r1
 8009264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009268:	1c7b      	adds	r3, r7, #1
 800926a:	444b      	add	r3, r9
 800926c:	106d      	asrs	r5, r5, #1
 800926e:	429d      	cmp	r5, r3
 8009270:	bf38      	it	cc
 8009272:	461d      	movcc	r5, r3
 8009274:	0553      	lsls	r3, r2, #21
 8009276:	d527      	bpl.n	80092c8 <__ssputs_r+0x8c>
 8009278:	4629      	mov	r1, r5
 800927a:	f7ff fe85 	bl	8008f88 <_malloc_r>
 800927e:	4606      	mov	r6, r0
 8009280:	b360      	cbz	r0, 80092dc <__ssputs_r+0xa0>
 8009282:	464a      	mov	r2, r9
 8009284:	6921      	ldr	r1, [r4, #16]
 8009286:	f7ff ff83 	bl	8009190 <memcpy>
 800928a:	89a3      	ldrh	r3, [r4, #12]
 800928c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	6126      	str	r6, [r4, #16]
 8009298:	444e      	add	r6, r9
 800929a:	6026      	str	r6, [r4, #0]
 800929c:	463e      	mov	r6, r7
 800929e:	6165      	str	r5, [r4, #20]
 80092a0:	eba5 0509 	sub.w	r5, r5, r9
 80092a4:	60a5      	str	r5, [r4, #8]
 80092a6:	42be      	cmp	r6, r7
 80092a8:	d900      	bls.n	80092ac <__ssputs_r+0x70>
 80092aa:	463e      	mov	r6, r7
 80092ac:	4632      	mov	r2, r6
 80092ae:	4641      	mov	r1, r8
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	f000 faaf 	bl	8009814 <memmove>
 80092b6:	2000      	movs	r0, #0
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	1b9b      	subs	r3, r3, r6
 80092bc:	60a3      	str	r3, [r4, #8]
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4433      	add	r3, r6
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	462a      	mov	r2, r5
 80092ca:	f000 facb 	bl	8009864 <_realloc_r>
 80092ce:	4606      	mov	r6, r0
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1e0      	bne.n	8009296 <__ssputs_r+0x5a>
 80092d4:	4650      	mov	r0, sl
 80092d6:	6921      	ldr	r1, [r4, #16]
 80092d8:	f7ff ff68 	bl	80091ac <_free_r>
 80092dc:	230c      	movs	r3, #12
 80092de:	f8ca 3000 	str.w	r3, [sl]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ec:	81a3      	strh	r3, [r4, #12]
 80092ee:	e7e9      	b.n	80092c4 <__ssputs_r+0x88>

080092f0 <_svfiprintf_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	4698      	mov	r8, r3
 80092f6:	898b      	ldrh	r3, [r1, #12]
 80092f8:	4607      	mov	r7, r0
 80092fa:	061b      	lsls	r3, r3, #24
 80092fc:	460d      	mov	r5, r1
 80092fe:	4614      	mov	r4, r2
 8009300:	b09d      	sub	sp, #116	; 0x74
 8009302:	d50e      	bpl.n	8009322 <_svfiprintf_r+0x32>
 8009304:	690b      	ldr	r3, [r1, #16]
 8009306:	b963      	cbnz	r3, 8009322 <_svfiprintf_r+0x32>
 8009308:	2140      	movs	r1, #64	; 0x40
 800930a:	f7ff fe3d 	bl	8008f88 <_malloc_r>
 800930e:	6028      	str	r0, [r5, #0]
 8009310:	6128      	str	r0, [r5, #16]
 8009312:	b920      	cbnz	r0, 800931e <_svfiprintf_r+0x2e>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e0d0      	b.n	80094c0 <_svfiprintf_r+0x1d0>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	616b      	str	r3, [r5, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	9309      	str	r3, [sp, #36]	; 0x24
 8009326:	2320      	movs	r3, #32
 8009328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800932c:	2330      	movs	r3, #48	; 0x30
 800932e:	f04f 0901 	mov.w	r9, #1
 8009332:	f8cd 800c 	str.w	r8, [sp, #12]
 8009336:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80094d8 <_svfiprintf_r+0x1e8>
 800933a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800933e:	4623      	mov	r3, r4
 8009340:	469a      	mov	sl, r3
 8009342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009346:	b10a      	cbz	r2, 800934c <_svfiprintf_r+0x5c>
 8009348:	2a25      	cmp	r2, #37	; 0x25
 800934a:	d1f9      	bne.n	8009340 <_svfiprintf_r+0x50>
 800934c:	ebba 0b04 	subs.w	fp, sl, r4
 8009350:	d00b      	beq.n	800936a <_svfiprintf_r+0x7a>
 8009352:	465b      	mov	r3, fp
 8009354:	4622      	mov	r2, r4
 8009356:	4629      	mov	r1, r5
 8009358:	4638      	mov	r0, r7
 800935a:	f7ff ff6f 	bl	800923c <__ssputs_r>
 800935e:	3001      	adds	r0, #1
 8009360:	f000 80a9 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009366:	445a      	add	r2, fp
 8009368:	9209      	str	r2, [sp, #36]	; 0x24
 800936a:	f89a 3000 	ldrb.w	r3, [sl]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 80a1 	beq.w	80094b6 <_svfiprintf_r+0x1c6>
 8009374:	2300      	movs	r3, #0
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937e:	f10a 0a01 	add.w	sl, sl, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800938a:	931a      	str	r3, [sp, #104]	; 0x68
 800938c:	4654      	mov	r4, sl
 800938e:	2205      	movs	r2, #5
 8009390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009394:	4850      	ldr	r0, [pc, #320]	; (80094d8 <_svfiprintf_r+0x1e8>)
 8009396:	f000 fa57 	bl	8009848 <memchr>
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	b9d8      	cbnz	r0, 80093d6 <_svfiprintf_r+0xe6>
 800939e:	06d0      	lsls	r0, r2, #27
 80093a0:	bf44      	itt	mi
 80093a2:	2320      	movmi	r3, #32
 80093a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a8:	0711      	lsls	r1, r2, #28
 80093aa:	bf44      	itt	mi
 80093ac:	232b      	movmi	r3, #43	; 0x2b
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b2:	f89a 3000 	ldrb.w	r3, [sl]
 80093b6:	2b2a      	cmp	r3, #42	; 0x2a
 80093b8:	d015      	beq.n	80093e6 <_svfiprintf_r+0xf6>
 80093ba:	4654      	mov	r4, sl
 80093bc:	2000      	movs	r0, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	9a07      	ldr	r2, [sp, #28]
 80093c4:	4621      	mov	r1, r4
 80093c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ca:	3b30      	subs	r3, #48	; 0x30
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d94d      	bls.n	800946c <_svfiprintf_r+0x17c>
 80093d0:	b1b0      	cbz	r0, 8009400 <_svfiprintf_r+0x110>
 80093d2:	9207      	str	r2, [sp, #28]
 80093d4:	e014      	b.n	8009400 <_svfiprintf_r+0x110>
 80093d6:	eba0 0308 	sub.w	r3, r0, r8
 80093da:	fa09 f303 	lsl.w	r3, r9, r3
 80093de:	4313      	orrs	r3, r2
 80093e0:	46a2      	mov	sl, r4
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	e7d2      	b.n	800938c <_svfiprintf_r+0x9c>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	1d19      	adds	r1, r3, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	9103      	str	r1, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfbb      	ittet	lt
 80093f2:	425b      	neglt	r3, r3
 80093f4:	f042 0202 	orrlt.w	r2, r2, #2
 80093f8:	9307      	strge	r3, [sp, #28]
 80093fa:	9307      	strlt	r3, [sp, #28]
 80093fc:	bfb8      	it	lt
 80093fe:	9204      	strlt	r2, [sp, #16]
 8009400:	7823      	ldrb	r3, [r4, #0]
 8009402:	2b2e      	cmp	r3, #46	; 0x2e
 8009404:	d10c      	bne.n	8009420 <_svfiprintf_r+0x130>
 8009406:	7863      	ldrb	r3, [r4, #1]
 8009408:	2b2a      	cmp	r3, #42	; 0x2a
 800940a:	d134      	bne.n	8009476 <_svfiprintf_r+0x186>
 800940c:	9b03      	ldr	r3, [sp, #12]
 800940e:	3402      	adds	r4, #2
 8009410:	1d1a      	adds	r2, r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	9203      	str	r2, [sp, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfb8      	it	lt
 800941a:	f04f 33ff 	movlt.w	r3, #4294967295
 800941e:	9305      	str	r3, [sp, #20]
 8009420:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80094dc <_svfiprintf_r+0x1ec>
 8009424:	2203      	movs	r2, #3
 8009426:	4650      	mov	r0, sl
 8009428:	7821      	ldrb	r1, [r4, #0]
 800942a:	f000 fa0d 	bl	8009848 <memchr>
 800942e:	b138      	cbz	r0, 8009440 <_svfiprintf_r+0x150>
 8009430:	2240      	movs	r2, #64	; 0x40
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	eba0 000a 	sub.w	r0, r0, sl
 8009438:	4082      	lsls	r2, r0
 800943a:	4313      	orrs	r3, r2
 800943c:	3401      	adds	r4, #1
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	2206      	movs	r2, #6
 8009446:	4826      	ldr	r0, [pc, #152]	; (80094e0 <_svfiprintf_r+0x1f0>)
 8009448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800944c:	f000 f9fc 	bl	8009848 <memchr>
 8009450:	2800      	cmp	r0, #0
 8009452:	d038      	beq.n	80094c6 <_svfiprintf_r+0x1d6>
 8009454:	4b23      	ldr	r3, [pc, #140]	; (80094e4 <_svfiprintf_r+0x1f4>)
 8009456:	bb1b      	cbnz	r3, 80094a0 <_svfiprintf_r+0x1b0>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	3307      	adds	r3, #7
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	4433      	add	r3, r6
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	e768      	b.n	800933e <_svfiprintf_r+0x4e>
 800946c:	460c      	mov	r4, r1
 800946e:	2001      	movs	r0, #1
 8009470:	fb0c 3202 	mla	r2, ip, r2, r3
 8009474:	e7a6      	b.n	80093c4 <_svfiprintf_r+0xd4>
 8009476:	2300      	movs	r3, #0
 8009478:	f04f 0c0a 	mov.w	ip, #10
 800947c:	4619      	mov	r1, r3
 800947e:	3401      	adds	r4, #1
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	4620      	mov	r0, r4
 8009484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009488:	3a30      	subs	r2, #48	; 0x30
 800948a:	2a09      	cmp	r2, #9
 800948c:	d903      	bls.n	8009496 <_svfiprintf_r+0x1a6>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0c6      	beq.n	8009420 <_svfiprintf_r+0x130>
 8009492:	9105      	str	r1, [sp, #20]
 8009494:	e7c4      	b.n	8009420 <_svfiprintf_r+0x130>
 8009496:	4604      	mov	r4, r0
 8009498:	2301      	movs	r3, #1
 800949a:	fb0c 2101 	mla	r1, ip, r1, r2
 800949e:	e7f0      	b.n	8009482 <_svfiprintf_r+0x192>
 80094a0:	ab03      	add	r3, sp, #12
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	462a      	mov	r2, r5
 80094a6:	4638      	mov	r0, r7
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094aa:	a904      	add	r1, sp, #16
 80094ac:	f3af 8000 	nop.w
 80094b0:	1c42      	adds	r2, r0, #1
 80094b2:	4606      	mov	r6, r0
 80094b4:	d1d6      	bne.n	8009464 <_svfiprintf_r+0x174>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	f53f af2d 	bmi.w	8009318 <_svfiprintf_r+0x28>
 80094be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c0:	b01d      	add	sp, #116	; 0x74
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462a      	mov	r2, r5
 80094cc:	4638      	mov	r0, r7
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <_svfiprintf_r+0x1f8>)
 80094d0:	a904      	add	r1, sp, #16
 80094d2:	f000 f87d 	bl	80095d0 <_printf_i>
 80094d6:	e7eb      	b.n	80094b0 <_svfiprintf_r+0x1c0>
 80094d8:	08009d80 	.word	0x08009d80
 80094dc:	08009d86 	.word	0x08009d86
 80094e0:	08009d8a 	.word	0x08009d8a
 80094e4:	00000000 	.word	0x00000000
 80094e8:	0800923d 	.word	0x0800923d

080094ec <_printf_common>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	4616      	mov	r6, r2
 80094f2:	4699      	mov	r9, r3
 80094f4:	688a      	ldr	r2, [r1, #8]
 80094f6:	690b      	ldr	r3, [r1, #16]
 80094f8:	4607      	mov	r7, r0
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bfb8      	it	lt
 80094fe:	4613      	movlt	r3, r2
 8009500:	6033      	str	r3, [r6, #0]
 8009502:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009506:	460c      	mov	r4, r1
 8009508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800950c:	b10a      	cbz	r2, 8009512 <_printf_common+0x26>
 800950e:	3301      	adds	r3, #1
 8009510:	6033      	str	r3, [r6, #0]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	0699      	lsls	r1, r3, #26
 8009516:	bf42      	ittt	mi
 8009518:	6833      	ldrmi	r3, [r6, #0]
 800951a:	3302      	addmi	r3, #2
 800951c:	6033      	strmi	r3, [r6, #0]
 800951e:	6825      	ldr	r5, [r4, #0]
 8009520:	f015 0506 	ands.w	r5, r5, #6
 8009524:	d106      	bne.n	8009534 <_printf_common+0x48>
 8009526:	f104 0a19 	add.w	sl, r4, #25
 800952a:	68e3      	ldr	r3, [r4, #12]
 800952c:	6832      	ldr	r2, [r6, #0]
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	42ab      	cmp	r3, r5
 8009532:	dc2b      	bgt.n	800958c <_printf_common+0xa0>
 8009534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009538:	1e13      	subs	r3, r2, #0
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	bf18      	it	ne
 800953e:	2301      	movne	r3, #1
 8009540:	0692      	lsls	r2, r2, #26
 8009542:	d430      	bmi.n	80095a6 <_printf_common+0xba>
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800954c:	47c0      	blx	r8
 800954e:	3001      	adds	r0, #1
 8009550:	d023      	beq.n	800959a <_printf_common+0xae>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	f003 0306 	and.w	r3, r3, #6
 800955a:	2b04      	cmp	r3, #4
 800955c:	bf14      	ite	ne
 800955e:	2500      	movne	r5, #0
 8009560:	6833      	ldreq	r3, [r6, #0]
 8009562:	f04f 0600 	mov.w	r6, #0
 8009566:	bf08      	it	eq
 8009568:	68e5      	ldreq	r5, [r4, #12]
 800956a:	f104 041a 	add.w	r4, r4, #26
 800956e:	bf08      	it	eq
 8009570:	1aed      	subeq	r5, r5, r3
 8009572:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009576:	bf08      	it	eq
 8009578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800957c:	4293      	cmp	r3, r2
 800957e:	bfc4      	itt	gt
 8009580:	1a9b      	subgt	r3, r3, r2
 8009582:	18ed      	addgt	r5, r5, r3
 8009584:	42b5      	cmp	r5, r6
 8009586:	d11a      	bne.n	80095be <_printf_common+0xd2>
 8009588:	2000      	movs	r0, #0
 800958a:	e008      	b.n	800959e <_printf_common+0xb2>
 800958c:	2301      	movs	r3, #1
 800958e:	4652      	mov	r2, sl
 8009590:	4649      	mov	r1, r9
 8009592:	4638      	mov	r0, r7
 8009594:	47c0      	blx	r8
 8009596:	3001      	adds	r0, #1
 8009598:	d103      	bne.n	80095a2 <_printf_common+0xb6>
 800959a:	f04f 30ff 	mov.w	r0, #4294967295
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	3501      	adds	r5, #1
 80095a4:	e7c1      	b.n	800952a <_printf_common+0x3e>
 80095a6:	2030      	movs	r0, #48	; 0x30
 80095a8:	18e1      	adds	r1, r4, r3
 80095aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095b4:	4422      	add	r2, r4
 80095b6:	3302      	adds	r3, #2
 80095b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095bc:	e7c2      	b.n	8009544 <_printf_common+0x58>
 80095be:	2301      	movs	r3, #1
 80095c0:	4622      	mov	r2, r4
 80095c2:	4649      	mov	r1, r9
 80095c4:	4638      	mov	r0, r7
 80095c6:	47c0      	blx	r8
 80095c8:	3001      	adds	r0, #1
 80095ca:	d0e6      	beq.n	800959a <_printf_common+0xae>
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7d9      	b.n	8009584 <_printf_common+0x98>

080095d0 <_printf_i>:
 80095d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	7e0f      	ldrb	r7, [r1, #24]
 80095d6:	4691      	mov	r9, r2
 80095d8:	2f78      	cmp	r7, #120	; 0x78
 80095da:	4680      	mov	r8, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	469a      	mov	sl, r3
 80095e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095e6:	d807      	bhi.n	80095f8 <_printf_i+0x28>
 80095e8:	2f62      	cmp	r7, #98	; 0x62
 80095ea:	d80a      	bhi.n	8009602 <_printf_i+0x32>
 80095ec:	2f00      	cmp	r7, #0
 80095ee:	f000 80d5 	beq.w	800979c <_printf_i+0x1cc>
 80095f2:	2f58      	cmp	r7, #88	; 0x58
 80095f4:	f000 80c1 	beq.w	800977a <_printf_i+0x1aa>
 80095f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009600:	e03a      	b.n	8009678 <_printf_i+0xa8>
 8009602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009606:	2b15      	cmp	r3, #21
 8009608:	d8f6      	bhi.n	80095f8 <_printf_i+0x28>
 800960a:	a101      	add	r1, pc, #4	; (adr r1, 8009610 <_printf_i+0x40>)
 800960c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009610:	08009669 	.word	0x08009669
 8009614:	0800967d 	.word	0x0800967d
 8009618:	080095f9 	.word	0x080095f9
 800961c:	080095f9 	.word	0x080095f9
 8009620:	080095f9 	.word	0x080095f9
 8009624:	080095f9 	.word	0x080095f9
 8009628:	0800967d 	.word	0x0800967d
 800962c:	080095f9 	.word	0x080095f9
 8009630:	080095f9 	.word	0x080095f9
 8009634:	080095f9 	.word	0x080095f9
 8009638:	080095f9 	.word	0x080095f9
 800963c:	08009783 	.word	0x08009783
 8009640:	080096a9 	.word	0x080096a9
 8009644:	0800973d 	.word	0x0800973d
 8009648:	080095f9 	.word	0x080095f9
 800964c:	080095f9 	.word	0x080095f9
 8009650:	080097a5 	.word	0x080097a5
 8009654:	080095f9 	.word	0x080095f9
 8009658:	080096a9 	.word	0x080096a9
 800965c:	080095f9 	.word	0x080095f9
 8009660:	080095f9 	.word	0x080095f9
 8009664:	08009745 	.word	0x08009745
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	1d1a      	adds	r2, r3, #4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	602a      	str	r2, [r5, #0]
 8009670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009678:	2301      	movs	r3, #1
 800967a:	e0a0      	b.n	80097be <_printf_i+0x1ee>
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	0607      	lsls	r7, r0, #24
 8009682:	f103 0104 	add.w	r1, r3, #4
 8009686:	6029      	str	r1, [r5, #0]
 8009688:	d501      	bpl.n	800968e <_printf_i+0xbe>
 800968a:	681e      	ldr	r6, [r3, #0]
 800968c:	e003      	b.n	8009696 <_printf_i+0xc6>
 800968e:	0646      	lsls	r6, r0, #25
 8009690:	d5fb      	bpl.n	800968a <_printf_i+0xba>
 8009692:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009696:	2e00      	cmp	r6, #0
 8009698:	da03      	bge.n	80096a2 <_printf_i+0xd2>
 800969a:	232d      	movs	r3, #45	; 0x2d
 800969c:	4276      	negs	r6, r6
 800969e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a2:	230a      	movs	r3, #10
 80096a4:	4859      	ldr	r0, [pc, #356]	; (800980c <_printf_i+0x23c>)
 80096a6:	e012      	b.n	80096ce <_printf_i+0xfe>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	6820      	ldr	r0, [r4, #0]
 80096ac:	1d19      	adds	r1, r3, #4
 80096ae:	6029      	str	r1, [r5, #0]
 80096b0:	0605      	lsls	r5, r0, #24
 80096b2:	d501      	bpl.n	80096b8 <_printf_i+0xe8>
 80096b4:	681e      	ldr	r6, [r3, #0]
 80096b6:	e002      	b.n	80096be <_printf_i+0xee>
 80096b8:	0641      	lsls	r1, r0, #25
 80096ba:	d5fb      	bpl.n	80096b4 <_printf_i+0xe4>
 80096bc:	881e      	ldrh	r6, [r3, #0]
 80096be:	2f6f      	cmp	r7, #111	; 0x6f
 80096c0:	bf0c      	ite	eq
 80096c2:	2308      	moveq	r3, #8
 80096c4:	230a      	movne	r3, #10
 80096c6:	4851      	ldr	r0, [pc, #324]	; (800980c <_printf_i+0x23c>)
 80096c8:	2100      	movs	r1, #0
 80096ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ce:	6865      	ldr	r5, [r4, #4]
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	bfa8      	it	ge
 80096d4:	6821      	ldrge	r1, [r4, #0]
 80096d6:	60a5      	str	r5, [r4, #8]
 80096d8:	bfa4      	itt	ge
 80096da:	f021 0104 	bicge.w	r1, r1, #4
 80096de:	6021      	strge	r1, [r4, #0]
 80096e0:	b90e      	cbnz	r6, 80096e6 <_printf_i+0x116>
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	d04b      	beq.n	800977e <_printf_i+0x1ae>
 80096e6:	4615      	mov	r5, r2
 80096e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ec:	fb03 6711 	mls	r7, r3, r1, r6
 80096f0:	5dc7      	ldrb	r7, [r0, r7]
 80096f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096f6:	4637      	mov	r7, r6
 80096f8:	42bb      	cmp	r3, r7
 80096fa:	460e      	mov	r6, r1
 80096fc:	d9f4      	bls.n	80096e8 <_printf_i+0x118>
 80096fe:	2b08      	cmp	r3, #8
 8009700:	d10b      	bne.n	800971a <_printf_i+0x14a>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	07de      	lsls	r6, r3, #31
 8009706:	d508      	bpl.n	800971a <_printf_i+0x14a>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	6861      	ldr	r1, [r4, #4]
 800970c:	4299      	cmp	r1, r3
 800970e:	bfde      	ittt	le
 8009710:	2330      	movle	r3, #48	; 0x30
 8009712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800971a:	1b52      	subs	r2, r2, r5
 800971c:	6122      	str	r2, [r4, #16]
 800971e:	464b      	mov	r3, r9
 8009720:	4621      	mov	r1, r4
 8009722:	4640      	mov	r0, r8
 8009724:	f8cd a000 	str.w	sl, [sp]
 8009728:	aa03      	add	r2, sp, #12
 800972a:	f7ff fedf 	bl	80094ec <_printf_common>
 800972e:	3001      	adds	r0, #1
 8009730:	d14a      	bne.n	80097c8 <_printf_i+0x1f8>
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	b004      	add	sp, #16
 8009738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	f043 0320 	orr.w	r3, r3, #32
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	2778      	movs	r7, #120	; 0x78
 8009746:	4832      	ldr	r0, [pc, #200]	; (8009810 <_printf_i+0x240>)
 8009748:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	6829      	ldr	r1, [r5, #0]
 8009750:	061f      	lsls	r7, r3, #24
 8009752:	f851 6b04 	ldr.w	r6, [r1], #4
 8009756:	d402      	bmi.n	800975e <_printf_i+0x18e>
 8009758:	065f      	lsls	r7, r3, #25
 800975a:	bf48      	it	mi
 800975c:	b2b6      	uxthmi	r6, r6
 800975e:	07df      	lsls	r7, r3, #31
 8009760:	bf48      	it	mi
 8009762:	f043 0320 	orrmi.w	r3, r3, #32
 8009766:	6029      	str	r1, [r5, #0]
 8009768:	bf48      	it	mi
 800976a:	6023      	strmi	r3, [r4, #0]
 800976c:	b91e      	cbnz	r6, 8009776 <_printf_i+0x1a6>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	f023 0320 	bic.w	r3, r3, #32
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	2310      	movs	r3, #16
 8009778:	e7a6      	b.n	80096c8 <_printf_i+0xf8>
 800977a:	4824      	ldr	r0, [pc, #144]	; (800980c <_printf_i+0x23c>)
 800977c:	e7e4      	b.n	8009748 <_printf_i+0x178>
 800977e:	4615      	mov	r5, r2
 8009780:	e7bd      	b.n	80096fe <_printf_i+0x12e>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	6826      	ldr	r6, [r4, #0]
 8009786:	1d18      	adds	r0, r3, #4
 8009788:	6961      	ldr	r1, [r4, #20]
 800978a:	6028      	str	r0, [r5, #0]
 800978c:	0635      	lsls	r5, r6, #24
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	d501      	bpl.n	8009796 <_printf_i+0x1c6>
 8009792:	6019      	str	r1, [r3, #0]
 8009794:	e002      	b.n	800979c <_printf_i+0x1cc>
 8009796:	0670      	lsls	r0, r6, #25
 8009798:	d5fb      	bpl.n	8009792 <_printf_i+0x1c2>
 800979a:	8019      	strh	r1, [r3, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	4615      	mov	r5, r2
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	e7bc      	b.n	800971e <_printf_i+0x14e>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	2100      	movs	r1, #0
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	602a      	str	r2, [r5, #0]
 80097ac:	681d      	ldr	r5, [r3, #0]
 80097ae:	6862      	ldr	r2, [r4, #4]
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 f849 	bl	8009848 <memchr>
 80097b6:	b108      	cbz	r0, 80097bc <_printf_i+0x1ec>
 80097b8:	1b40      	subs	r0, r0, r5
 80097ba:	6060      	str	r0, [r4, #4]
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	2300      	movs	r3, #0
 80097c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c6:	e7aa      	b.n	800971e <_printf_i+0x14e>
 80097c8:	462a      	mov	r2, r5
 80097ca:	4649      	mov	r1, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	47d0      	blx	sl
 80097d2:	3001      	adds	r0, #1
 80097d4:	d0ad      	beq.n	8009732 <_printf_i+0x162>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	079b      	lsls	r3, r3, #30
 80097da:	d413      	bmi.n	8009804 <_printf_i+0x234>
 80097dc:	68e0      	ldr	r0, [r4, #12]
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	4298      	cmp	r0, r3
 80097e2:	bfb8      	it	lt
 80097e4:	4618      	movlt	r0, r3
 80097e6:	e7a6      	b.n	8009736 <_printf_i+0x166>
 80097e8:	2301      	movs	r3, #1
 80097ea:	4632      	mov	r2, r6
 80097ec:	4649      	mov	r1, r9
 80097ee:	4640      	mov	r0, r8
 80097f0:	47d0      	blx	sl
 80097f2:	3001      	adds	r0, #1
 80097f4:	d09d      	beq.n	8009732 <_printf_i+0x162>
 80097f6:	3501      	adds	r5, #1
 80097f8:	68e3      	ldr	r3, [r4, #12]
 80097fa:	9903      	ldr	r1, [sp, #12]
 80097fc:	1a5b      	subs	r3, r3, r1
 80097fe:	42ab      	cmp	r3, r5
 8009800:	dcf2      	bgt.n	80097e8 <_printf_i+0x218>
 8009802:	e7eb      	b.n	80097dc <_printf_i+0x20c>
 8009804:	2500      	movs	r5, #0
 8009806:	f104 0619 	add.w	r6, r4, #25
 800980a:	e7f5      	b.n	80097f8 <_printf_i+0x228>
 800980c:	08009d91 	.word	0x08009d91
 8009810:	08009da2 	.word	0x08009da2

08009814 <memmove>:
 8009814:	4288      	cmp	r0, r1
 8009816:	b510      	push	{r4, lr}
 8009818:	eb01 0402 	add.w	r4, r1, r2
 800981c:	d902      	bls.n	8009824 <memmove+0x10>
 800981e:	4284      	cmp	r4, r0
 8009820:	4623      	mov	r3, r4
 8009822:	d807      	bhi.n	8009834 <memmove+0x20>
 8009824:	1e43      	subs	r3, r0, #1
 8009826:	42a1      	cmp	r1, r4
 8009828:	d008      	beq.n	800983c <memmove+0x28>
 800982a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800982e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009832:	e7f8      	b.n	8009826 <memmove+0x12>
 8009834:	4601      	mov	r1, r0
 8009836:	4402      	add	r2, r0
 8009838:	428a      	cmp	r2, r1
 800983a:	d100      	bne.n	800983e <memmove+0x2a>
 800983c:	bd10      	pop	{r4, pc}
 800983e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009846:	e7f7      	b.n	8009838 <memmove+0x24>

08009848 <memchr>:
 8009848:	4603      	mov	r3, r0
 800984a:	b510      	push	{r4, lr}
 800984c:	b2c9      	uxtb	r1, r1
 800984e:	4402      	add	r2, r0
 8009850:	4293      	cmp	r3, r2
 8009852:	4618      	mov	r0, r3
 8009854:	d101      	bne.n	800985a <memchr+0x12>
 8009856:	2000      	movs	r0, #0
 8009858:	e003      	b.n	8009862 <memchr+0x1a>
 800985a:	7804      	ldrb	r4, [r0, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	428c      	cmp	r4, r1
 8009860:	d1f6      	bne.n	8009850 <memchr+0x8>
 8009862:	bd10      	pop	{r4, pc}

08009864 <_realloc_r>:
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	4680      	mov	r8, r0
 800986a:	4614      	mov	r4, r2
 800986c:	460e      	mov	r6, r1
 800986e:	b921      	cbnz	r1, 800987a <_realloc_r+0x16>
 8009870:	4611      	mov	r1, r2
 8009872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	f7ff bb87 	b.w	8008f88 <_malloc_r>
 800987a:	b92a      	cbnz	r2, 8009888 <_realloc_r+0x24>
 800987c:	f7ff fc96 	bl	80091ac <_free_r>
 8009880:	4625      	mov	r5, r4
 8009882:	4628      	mov	r0, r5
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	f000 f81b 	bl	80098c2 <_malloc_usable_size_r>
 800988c:	4284      	cmp	r4, r0
 800988e:	4607      	mov	r7, r0
 8009890:	d802      	bhi.n	8009898 <_realloc_r+0x34>
 8009892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009896:	d812      	bhi.n	80098be <_realloc_r+0x5a>
 8009898:	4621      	mov	r1, r4
 800989a:	4640      	mov	r0, r8
 800989c:	f7ff fb74 	bl	8008f88 <_malloc_r>
 80098a0:	4605      	mov	r5, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0ed      	beq.n	8009882 <_realloc_r+0x1e>
 80098a6:	42bc      	cmp	r4, r7
 80098a8:	4622      	mov	r2, r4
 80098aa:	4631      	mov	r1, r6
 80098ac:	bf28      	it	cs
 80098ae:	463a      	movcs	r2, r7
 80098b0:	f7ff fc6e 	bl	8009190 <memcpy>
 80098b4:	4631      	mov	r1, r6
 80098b6:	4640      	mov	r0, r8
 80098b8:	f7ff fc78 	bl	80091ac <_free_r>
 80098bc:	e7e1      	b.n	8009882 <_realloc_r+0x1e>
 80098be:	4635      	mov	r5, r6
 80098c0:	e7df      	b.n	8009882 <_realloc_r+0x1e>

080098c2 <_malloc_usable_size_r>:
 80098c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c6:	1f18      	subs	r0, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfbc      	itt	lt
 80098cc:	580b      	ldrlt	r3, [r1, r0]
 80098ce:	18c0      	addlt	r0, r0, r3
 80098d0:	4770      	bx	lr
	...

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
