
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  0800ce98  0800ce98  0001ce98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d78c  0800d78c  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800d78c  0800d78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d794  0800d794  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d794  0800d794  0001d794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d798  0800d798  0001d798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800d79c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001720  20000344  0800dae0  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a64  0800dae0  00021a64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a720  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b04  00000000  00000000  0003aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  0003f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001332  00000000  00000000  00040ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024768  00000000  00000000  0004222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204c7  00000000  00000000  00066992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2daf  00000000  00000000  00086e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ae8  00000000  00000000  00149c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001516f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000344 	.word	0x20000344
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ce7c 	.word	0x0800ce7c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000348 	.word	0x20000348
 8000224:	0800ce7c 	.word	0x0800ce7c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__aeabi_uldivmod>:
 80010bc:	b953      	cbnz	r3, 80010d4 <__aeabi_uldivmod+0x18>
 80010be:	b94a      	cbnz	r2, 80010d4 <__aeabi_uldivmod+0x18>
 80010c0:	2900      	cmp	r1, #0
 80010c2:	bf08      	it	eq
 80010c4:	2800      	cmpeq	r0, #0
 80010c6:	bf1c      	itt	ne
 80010c8:	f04f 31ff 	movne.w	r1, #4294967295
 80010cc:	f04f 30ff 	movne.w	r0, #4294967295
 80010d0:	f000 b972 	b.w	80013b8 <__aeabi_idiv0>
 80010d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010dc:	f000 f806 	bl	80010ec <__udivmoddi4>
 80010e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010e8:	b004      	add	sp, #16
 80010ea:	4770      	bx	lr

080010ec <__udivmoddi4>:
 80010ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f0:	9e08      	ldr	r6, [sp, #32]
 80010f2:	460d      	mov	r5, r1
 80010f4:	4604      	mov	r4, r0
 80010f6:	468e      	mov	lr, r1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d14c      	bne.n	8001196 <__udivmoddi4+0xaa>
 80010fc:	428a      	cmp	r2, r1
 80010fe:	4694      	mov	ip, r2
 8001100:	d967      	bls.n	80011d2 <__udivmoddi4+0xe6>
 8001102:	fab2 f382 	clz	r3, r2
 8001106:	b153      	cbz	r3, 800111e <__udivmoddi4+0x32>
 8001108:	fa02 fc03 	lsl.w	ip, r2, r3
 800110c:	f1c3 0220 	rsb	r2, r3, #32
 8001110:	fa01 fe03 	lsl.w	lr, r1, r3
 8001114:	fa20 f202 	lsr.w	r2, r0, r2
 8001118:	ea42 0e0e 	orr.w	lr, r2, lr
 800111c:	409c      	lsls	r4, r3
 800111e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001122:	fbbe f1f7 	udiv	r1, lr, r7
 8001126:	fa1f f58c 	uxth.w	r5, ip
 800112a:	fb07 ee11 	mls	lr, r7, r1, lr
 800112e:	fb01 f005 	mul.w	r0, r1, r5
 8001132:	0c22      	lsrs	r2, r4, #16
 8001134:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001138:	4290      	cmp	r0, r2
 800113a:	d90a      	bls.n	8001152 <__udivmoddi4+0x66>
 800113c:	eb1c 0202 	adds.w	r2, ip, r2
 8001140:	f101 3eff 	add.w	lr, r1, #4294967295
 8001144:	f080 8119 	bcs.w	800137a <__udivmoddi4+0x28e>
 8001148:	4290      	cmp	r0, r2
 800114a:	f240 8116 	bls.w	800137a <__udivmoddi4+0x28e>
 800114e:	3902      	subs	r1, #2
 8001150:	4462      	add	r2, ip
 8001152:	1a12      	subs	r2, r2, r0
 8001154:	fbb2 f0f7 	udiv	r0, r2, r7
 8001158:	fb07 2210 	mls	r2, r7, r0, r2
 800115c:	fb00 f505 	mul.w	r5, r0, r5
 8001160:	b2a4      	uxth	r4, r4
 8001162:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001166:	42a5      	cmp	r5, r4
 8001168:	d90a      	bls.n	8001180 <__udivmoddi4+0x94>
 800116a:	eb1c 0404 	adds.w	r4, ip, r4
 800116e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001172:	f080 8104 	bcs.w	800137e <__udivmoddi4+0x292>
 8001176:	42a5      	cmp	r5, r4
 8001178:	f240 8101 	bls.w	800137e <__udivmoddi4+0x292>
 800117c:	4464      	add	r4, ip
 800117e:	3802      	subs	r0, #2
 8001180:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001184:	2100      	movs	r1, #0
 8001186:	1b64      	subs	r4, r4, r5
 8001188:	b11e      	cbz	r6, 8001192 <__udivmoddi4+0xa6>
 800118a:	40dc      	lsrs	r4, r3
 800118c:	2300      	movs	r3, #0
 800118e:	e9c6 4300 	strd	r4, r3, [r6]
 8001192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001196:	428b      	cmp	r3, r1
 8001198:	d908      	bls.n	80011ac <__udivmoddi4+0xc0>
 800119a:	2e00      	cmp	r6, #0
 800119c:	f000 80ea 	beq.w	8001374 <__udivmoddi4+0x288>
 80011a0:	2100      	movs	r1, #0
 80011a2:	e9c6 0500 	strd	r0, r5, [r6]
 80011a6:	4608      	mov	r0, r1
 80011a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ac:	fab3 f183 	clz	r1, r3
 80011b0:	2900      	cmp	r1, #0
 80011b2:	d148      	bne.n	8001246 <__udivmoddi4+0x15a>
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	d302      	bcc.n	80011be <__udivmoddi4+0xd2>
 80011b8:	4282      	cmp	r2, r0
 80011ba:	f200 80f8 	bhi.w	80013ae <__udivmoddi4+0x2c2>
 80011be:	1a84      	subs	r4, r0, r2
 80011c0:	eb65 0203 	sbc.w	r2, r5, r3
 80011c4:	2001      	movs	r0, #1
 80011c6:	4696      	mov	lr, r2
 80011c8:	2e00      	cmp	r6, #0
 80011ca:	d0e2      	beq.n	8001192 <__udivmoddi4+0xa6>
 80011cc:	e9c6 4e00 	strd	r4, lr, [r6]
 80011d0:	e7df      	b.n	8001192 <__udivmoddi4+0xa6>
 80011d2:	b902      	cbnz	r2, 80011d6 <__udivmoddi4+0xea>
 80011d4:	deff      	udf	#255	; 0xff
 80011d6:	fab2 f382 	clz	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 808e 	bne.w	80012fc <__udivmoddi4+0x210>
 80011e0:	1a88      	subs	r0, r1, r2
 80011e2:	2101      	movs	r1, #1
 80011e4:	0c17      	lsrs	r7, r2, #16
 80011e6:	fa1f fe82 	uxth.w	lr, r2
 80011ea:	fbb0 f5f7 	udiv	r5, r0, r7
 80011ee:	fb07 0015 	mls	r0, r7, r5, r0
 80011f2:	0c22      	lsrs	r2, r4, #16
 80011f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011f8:	fb0e f005 	mul.w	r0, lr, r5
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x126>
 8001200:	eb1c 0202 	adds.w	r2, ip, r2
 8001204:	f105 38ff 	add.w	r8, r5, #4294967295
 8001208:	d202      	bcs.n	8001210 <__udivmoddi4+0x124>
 800120a:	4290      	cmp	r0, r2
 800120c:	f200 80cc 	bhi.w	80013a8 <__udivmoddi4+0x2bc>
 8001210:	4645      	mov	r5, r8
 8001212:	1a12      	subs	r2, r2, r0
 8001214:	fbb2 f0f7 	udiv	r0, r2, r7
 8001218:	fb07 2210 	mls	r2, r7, r0, r2
 800121c:	fb0e fe00 	mul.w	lr, lr, r0
 8001220:	b2a4      	uxth	r4, r4
 8001222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001226:	45a6      	cmp	lr, r4
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x150>
 800122a:	eb1c 0404 	adds.w	r4, ip, r4
 800122e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x14e>
 8001234:	45a6      	cmp	lr, r4
 8001236:	f200 80b4 	bhi.w	80013a2 <__udivmoddi4+0x2b6>
 800123a:	4610      	mov	r0, r2
 800123c:	eba4 040e 	sub.w	r4, r4, lr
 8001240:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001244:	e7a0      	b.n	8001188 <__udivmoddi4+0x9c>
 8001246:	f1c1 0720 	rsb	r7, r1, #32
 800124a:	408b      	lsls	r3, r1
 800124c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001250:	ea4c 0c03 	orr.w	ip, ip, r3
 8001254:	fa25 fa07 	lsr.w	sl, r5, r7
 8001258:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800125c:	fbba f8f9 	udiv	r8, sl, r9
 8001260:	408d      	lsls	r5, r1
 8001262:	fa20 f307 	lsr.w	r3, r0, r7
 8001266:	fb09 aa18 	mls	sl, r9, r8, sl
 800126a:	fa1f fe8c 	uxth.w	lr, ip
 800126e:	432b      	orrs	r3, r5
 8001270:	fa00 f501 	lsl.w	r5, r0, r1
 8001274:	fb08 f00e 	mul.w	r0, r8, lr
 8001278:	0c1c      	lsrs	r4, r3, #16
 800127a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800127e:	42a0      	cmp	r0, r4
 8001280:	fa02 f201 	lsl.w	r2, r2, r1
 8001284:	d90b      	bls.n	800129e <__udivmoddi4+0x1b2>
 8001286:	eb1c 0404 	adds.w	r4, ip, r4
 800128a:	f108 3aff 	add.w	sl, r8, #4294967295
 800128e:	f080 8086 	bcs.w	800139e <__udivmoddi4+0x2b2>
 8001292:	42a0      	cmp	r0, r4
 8001294:	f240 8083 	bls.w	800139e <__udivmoddi4+0x2b2>
 8001298:	f1a8 0802 	sub.w	r8, r8, #2
 800129c:	4464      	add	r4, ip
 800129e:	1a24      	subs	r4, r4, r0
 80012a0:	b298      	uxth	r0, r3
 80012a2:	fbb4 f3f9 	udiv	r3, r4, r9
 80012a6:	fb09 4413 	mls	r4, r9, r3, r4
 80012aa:	fb03 fe0e 	mul.w	lr, r3, lr
 80012ae:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012b2:	45a6      	cmp	lr, r4
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x1dc>
 80012b6:	eb1c 0404 	adds.w	r4, ip, r4
 80012ba:	f103 30ff 	add.w	r0, r3, #4294967295
 80012be:	d26a      	bcs.n	8001396 <__udivmoddi4+0x2aa>
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d968      	bls.n	8001396 <__udivmoddi4+0x2aa>
 80012c4:	3b02      	subs	r3, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012cc:	fba0 9302 	umull	r9, r3, r0, r2
 80012d0:	eba4 040e 	sub.w	r4, r4, lr
 80012d4:	429c      	cmp	r4, r3
 80012d6:	46c8      	mov	r8, r9
 80012d8:	469e      	mov	lr, r3
 80012da:	d354      	bcc.n	8001386 <__udivmoddi4+0x29a>
 80012dc:	d051      	beq.n	8001382 <__udivmoddi4+0x296>
 80012de:	2e00      	cmp	r6, #0
 80012e0:	d067      	beq.n	80013b2 <__udivmoddi4+0x2c6>
 80012e2:	ebb5 0308 	subs.w	r3, r5, r8
 80012e6:	eb64 040e 	sbc.w	r4, r4, lr
 80012ea:	40cb      	lsrs	r3, r1
 80012ec:	fa04 f707 	lsl.w	r7, r4, r7
 80012f0:	431f      	orrs	r7, r3
 80012f2:	40cc      	lsrs	r4, r1
 80012f4:	e9c6 7400 	strd	r7, r4, [r6]
 80012f8:	2100      	movs	r1, #0
 80012fa:	e74a      	b.n	8001192 <__udivmoddi4+0xa6>
 80012fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001300:	f1c3 0020 	rsb	r0, r3, #32
 8001304:	40c1      	lsrs	r1, r0
 8001306:	409d      	lsls	r5, r3
 8001308:	fa24 f000 	lsr.w	r0, r4, r0
 800130c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001310:	4328      	orrs	r0, r5
 8001312:	fbb1 f5f7 	udiv	r5, r1, r7
 8001316:	fb07 1115 	mls	r1, r7, r5, r1
 800131a:	fa1f fe8c 	uxth.w	lr, ip
 800131e:	0c02      	lsrs	r2, r0, #16
 8001320:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001324:	fb05 f10e 	mul.w	r1, r5, lr
 8001328:	4291      	cmp	r1, r2
 800132a:	fa04 f403 	lsl.w	r4, r4, r3
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0x256>
 8001330:	eb1c 0202 	adds.w	r2, ip, r2
 8001334:	f105 38ff 	add.w	r8, r5, #4294967295
 8001338:	d22f      	bcs.n	800139a <__udivmoddi4+0x2ae>
 800133a:	4291      	cmp	r1, r2
 800133c:	d92d      	bls.n	800139a <__udivmoddi4+0x2ae>
 800133e:	3d02      	subs	r5, #2
 8001340:	4462      	add	r2, ip
 8001342:	1a52      	subs	r2, r2, r1
 8001344:	fbb2 f1f7 	udiv	r1, r2, r7
 8001348:	fb07 2211 	mls	r2, r7, r1, r2
 800134c:	b280      	uxth	r0, r0
 800134e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001352:	fb01 f20e 	mul.w	r2, r1, lr
 8001356:	4282      	cmp	r2, r0
 8001358:	d908      	bls.n	800136c <__udivmoddi4+0x280>
 800135a:	eb1c 0000 	adds.w	r0, ip, r0
 800135e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001362:	d216      	bcs.n	8001392 <__udivmoddi4+0x2a6>
 8001364:	4282      	cmp	r2, r0
 8001366:	d914      	bls.n	8001392 <__udivmoddi4+0x2a6>
 8001368:	3902      	subs	r1, #2
 800136a:	4460      	add	r0, ip
 800136c:	1a80      	subs	r0, r0, r2
 800136e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001372:	e73a      	b.n	80011ea <__udivmoddi4+0xfe>
 8001374:	4631      	mov	r1, r6
 8001376:	4630      	mov	r0, r6
 8001378:	e70b      	b.n	8001192 <__udivmoddi4+0xa6>
 800137a:	4671      	mov	r1, lr
 800137c:	e6e9      	b.n	8001152 <__udivmoddi4+0x66>
 800137e:	4610      	mov	r0, r2
 8001380:	e6fe      	b.n	8001180 <__udivmoddi4+0x94>
 8001382:	454d      	cmp	r5, r9
 8001384:	d2ab      	bcs.n	80012de <__udivmoddi4+0x1f2>
 8001386:	ebb9 0802 	subs.w	r8, r9, r2
 800138a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800138e:	3801      	subs	r0, #1
 8001390:	e7a5      	b.n	80012de <__udivmoddi4+0x1f2>
 8001392:	4641      	mov	r1, r8
 8001394:	e7ea      	b.n	800136c <__udivmoddi4+0x280>
 8001396:	4603      	mov	r3, r0
 8001398:	e796      	b.n	80012c8 <__udivmoddi4+0x1dc>
 800139a:	4645      	mov	r5, r8
 800139c:	e7d1      	b.n	8001342 <__udivmoddi4+0x256>
 800139e:	46d0      	mov	r8, sl
 80013a0:	e77d      	b.n	800129e <__udivmoddi4+0x1b2>
 80013a2:	4464      	add	r4, ip
 80013a4:	3802      	subs	r0, #2
 80013a6:	e749      	b.n	800123c <__udivmoddi4+0x150>
 80013a8:	3d02      	subs	r5, #2
 80013aa:	4462      	add	r2, ip
 80013ac:	e731      	b.n	8001212 <__udivmoddi4+0x126>
 80013ae:	4608      	mov	r0, r1
 80013b0:	e70a      	b.n	80011c8 <__udivmoddi4+0xdc>
 80013b2:	4631      	mov	r1, r6
 80013b4:	e6ed      	b.n	8001192 <__udivmoddi4+0xa6>
 80013b6:	bf00      	nop

080013b8 <__aeabi_idiv0>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 80013c8:	2310      	movs	r3, #16
 80013ca:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80013cc:	2300      	movs	r3, #0
 80013ce:	737b      	strb	r3, [r7, #13]
 80013d0:	e018      	b.n	8001404 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	09db      	lsrs	r3, r3, #7
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4053      	eors	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	897b      	ldrh	r3, [r7, #10]
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <LTC_PEC15_Calc+0x60>)
 80013f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4053      	eors	r3, r2
 80013fc:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3301      	adds	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7a      	ldrb	r2, [r7, #13]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3e2      	bcc.n	80013d2 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b29b      	uxth	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	0800cfe4 	.word	0x0800cfe4

08001420 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	if (num)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <LTC_Set_Num_Devices+0x20>)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	7013      	strb	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000360 	.word	0x20000360

08001444 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return num_devices;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <LTC_Get_Num_Devices+0x10>)
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000360 	.word	0x20000360

08001458 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <LTC_Set_Num_Series_Groups+0x1c>
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b12      	cmp	r3, #18
 800146c:	d802      	bhi.n	8001474 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <LTC_Set_Num_Series_Groups+0x28>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	7013      	strb	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000361 	.word	0x20000361

08001484 <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	return num_series_groups;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <LTC_Get_Num_Series_Groups+0x10>)
 800148a:	781b      	ldrb	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	20000361 	.word	0x20000361

08001498 <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	71bb      	strb	r3, [r7, #6]

	LTC_nCS_Low(); //Pull CS low
 80014a6:	f001 f8cb 	bl	8002640 <LTC_nCS_Low>

	for (int i = 0; i < num_devices; i++) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	e019      	b.n	80014e4 <LTC_Wakeup_Idle+0x4c>
		hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 80014b0:	1db9      	adds	r1, r7, #6
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	2201      	movs	r2, #1
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <LTC_Wakeup_Idle+0x68>)
 80014b8:	f004 fab4 	bl	8005a24 <HAL_SPI_Transmit>
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
		if (hal_ret) { //Non-zero means error
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <LTC_Wakeup_Idle+0x46>
			//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4413      	add	r3, r2
 80014cc:	2201      	movs	r2, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < num_devices; i++) {
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <LTC_Wakeup_Idle+0x6c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	dbdf      	blt.n	80014b0 <LTC_Wakeup_Idle+0x18>
		}
	}

	LTC_nCS_High(); //Pull CS high
 80014f0:	f001 f89a 	bl	8002628 <LTC_nCS_High>

	return ret;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200003f4 	.word	0x200003f4
 8001504:	20000360 	.word	0x20000360

08001508 <LTC_ReadRawCellVoltages>:
	}
	LTC_nCS_High();
}

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 8001508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800150c:	b089      	sub	sp, #36	; 0x24
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	466b      	mov	r3, sp
 8001514:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 800151a:	f7ff ff93 	bl	8001444 <LTC_Get_Num_Devices>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	2308      	movs	r3, #8
 8001524:	fb02 f303 	mul.w	r3, r2, r3
 8001528:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800152a:	7f3b      	ldrb	r3, [r7, #28]
 800152c:	3b01      	subs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	7f3b      	ldrb	r3, [r7, #28]
 8001532:	2200      	movs	r2, #0
 8001534:	4698      	mov	r8, r3
 8001536:	4691      	mov	r9, r2
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001544:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001548:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800154c:	7f3b      	ldrb	r3, [r7, #28]
 800154e:	2200      	movs	r2, #0
 8001550:	461c      	mov	r4, r3
 8001552:	4615      	mov	r5, r2
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	00eb      	lsls	r3, r5, #3
 800155e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001562:	00e2      	lsls	r2, r4, #3
 8001564:	7f3b      	ldrb	r3, [r7, #28]
 8001566:	3307      	adds	r3, #7
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	ebad 0d03 	sub.w	sp, sp, r3
 8001570:	466b      	mov	r3, sp
 8001572:	3300      	adds	r3, #0
 8001574:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	77bb      	strb	r3, [r7, #30]
 800157a:	e083      	b.n	8001684 <LTC_ReadRawCellVoltages+0x17c>
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
			i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <LTC_ReadRawCellVoltages+0x1a4>)
 8001580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b29b      	uxth	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 800158c:	7fbb      	ldrb	r3, [r7, #30]
 800158e:	4a47      	ldr	r2, [pc, #284]	; (80016ac <LTC_ReadRawCellVoltages+0x1a4>)
 8001590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4619      	mov	r1, r3
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff ff0c 	bl	80013bc <LTC_PEC15_Calc>
 80015a4:	4603      	mov	r3, r0
 80015a6:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80015a8:	8a7b      	ldrh	r3, [r7, #18]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80015b2:	8a7b      	ldrh	r3, [r7, #18]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	72fb      	strb	r3, [r7, #11]

		ret |= LTC_Wakeup_Idle(); //Wake LTC up
 80015b8:	f7ff ff6e 	bl	8001498 <LTC_Wakeup_Idle>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	77fb      	strb	r3, [r7, #31]

		LTC_nCS_Low(); //Pull CS low
 80015c6:	f001 f83b 	bl	8002640 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80015ca:	f107 0108 	add.w	r1, r7, #8
 80015ce:	2364      	movs	r3, #100	; 0x64
 80015d0:	2204      	movs	r2, #4
 80015d2:	4837      	ldr	r0, [pc, #220]	; (80016b0 <LTC_ReadRawCellVoltages+0x1a8>)
 80015d4:	f004 fa26 	bl	8005a24 <HAL_SPI_Transmit>
 80015d8:	4603      	mov	r3, r0
 80015da:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 80015dc:	7c7b      	ldrb	r3, [r7, #17]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <LTC_ReadRawCellVoltages+0xf2>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 80015e2:	7c7b      	ldrb	r3, [r7, #17]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4413      	add	r3, r2
 80015e8:	2201      	movs	r2, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	b25a      	sxtb	r2, r3
 80015f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_voltages_reg,
 80015fa:	7f3b      	ldrb	r3, [r7, #28]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	2364      	movs	r3, #100	; 0x64
 8001600:	6979      	ldr	r1, [r7, #20]
 8001602:	482b      	ldr	r0, [pc, #172]	; (80016b0 <LTC_ReadRawCellVoltages+0x1a8>)
 8001604:	f004 fb51 	bl	8005caa <HAL_SPI_Receive>
 8001608:	4603      	mov	r3, r0
 800160a:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <LTC_ReadRawCellVoltages+0x122>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 8001612:	7c7b      	ldrb	r3, [r7, #17]
 8001614:	2204      	movs	r2, #4
 8001616:	4413      	add	r3, r2
 8001618:	2201      	movs	r2, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	b25a      	sxtb	r2, r3
 8001620:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001624:	4313      	orrs	r3, r2
 8001626:	b25b      	sxtb	r3, r3
 8001628:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800162a:	2300      	movs	r3, #0
 800162c:	777b      	strb	r3, [r7, #29]
 800162e:	e01d      	b.n	800166c <LTC_ReadRawCellVoltages+0x164>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 8001630:	7f7b      	ldrb	r3, [r7, #29]
 8001632:	2208      	movs	r2, #8
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 800163e:	7f7c      	ldrb	r4, [r7, #29]
 8001640:	f7ff ff20 	bl	8001484 <LTC_Get_Num_Series_Groups>
 8001644:	4603      	mov	r3, r0
 8001646:	fb03 f204 	mul.w	r2, r3, r4
							+ i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 800164a:	7fbb      	ldrb	r3, [r7, #30]
 800164c:	2103      	movs	r1, #3
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
					&read_voltages[dev_idx * LTC_Get_Num_Series_Groups()
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
					REG_LEN - 2);
 800165a:	2208      	movs	r2, #8
 800165c:	3a02      	subs	r2, #2
			memcpy(
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f009 f9c6 	bl	800a9f2 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8001666:	7f7b      	ldrb	r3, [r7, #29]
 8001668:	3301      	adds	r3, #1
 800166a:	777b      	strb	r3, [r7, #29]
 800166c:	f7ff feea 	bl	8001444 <LTC_Get_Num_Devices>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	7f7b      	ldrb	r3, [r7, #29]
 8001676:	4293      	cmp	r3, r2
 8001678:	d3da      	bcc.n	8001630 <LTC_ReadRawCellVoltages+0x128>

		}

		LTC_nCS_High(); //Pull CS high
 800167a:	f000 ffd5 	bl	8002628 <LTC_nCS_High>
			i++) {
 800167e:	7fbb      	ldrb	r3, [r7, #30]
 8001680:	3301      	adds	r3, #1
 8001682:	77bb      	strb	r3, [r7, #30]
			i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV);
 8001684:	f7ff fefe 	bl	8001484 <LTC_Get_Num_Series_Groups>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	2303      	movs	r3, #3
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	7fba      	ldrb	r2, [r7, #30]
 8001696:	429a      	cmp	r2, r3
 8001698:	f4ff af70 	bcc.w	800157c <LTC_ReadRawCellVoltages+0x74>
	}

	return ret;
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	46b5      	mov	sp, r6
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3724      	adds	r7, #36	; 0x24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016aa:	bf00      	nop
 80016ac:	0800cfd8 	.word	0x0800cfd8
 80016b0:	200003f4 	.word	0x200003f4

080016b4 <getActualTemps>:

void getActualTemps(float *actual_temp, uint16_t *read_temp) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
	static float scalar;
	static float steinhart;

	for (uint8_t i = 0; i < 12; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e071      	b.n	80017a8 <getActualTemps+0xf4>
		scalar = 30000.0f / (float) (read_temp[i]) - 1.0f;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb4c 	bl	8000d6c <__aeabi_ui2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4837      	ldr	r0, [pc, #220]	; (80017b8 <getActualTemps+0x104>)
 80016da:	f7ff fc53 	bl	8000f84 <__aeabi_fdiv>
 80016de:	4603      	mov	r3, r0
 80016e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa8f 	bl	8000c08 <__aeabi_fsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <getActualTemps+0x108>)
 80016f0:	601a      	str	r2, [r3, #0]
		scalar = (float) ntcSeriesResistance / scalar;
 80016f2:	4b32      	ldr	r3, [pc, #200]	; (80017bc <getActualTemps+0x108>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4831      	ldr	r0, [pc, #196]	; (80017c0 <getActualTemps+0x10c>)
 80016fa:	f7ff fc43 	bl	8000f84 <__aeabi_fdiv>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <getActualTemps+0x108>)
 8001704:	601a      	str	r2, [r3, #0]
		steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <getActualTemps+0x108>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	492d      	ldr	r1, [pc, #180]	; (80017c0 <getActualTemps+0x10c>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fc39 	bl	8000f84 <__aeabi_fdiv>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <getActualTemps+0x110>)
 8001718:	601a      	str	r2, [r3, #0]
		steinhart = log(steinhart);                           // ln(R/Ro)
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <getActualTemps+0x110>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe feee 	bl	8000500 <__aeabi_f2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f00b f9bc 	bl	800caa8 <log>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa12 	bl	8000b60 <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4a21      	ldr	r2, [pc, #132]	; (80017c4 <getActualTemps+0x110>)
 8001740:	6013      	str	r3, [r2, #0]
		steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <getActualTemps+0x110>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4920      	ldr	r1, [pc, #128]	; (80017c8 <getActualTemps+0x114>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc1b 	bl	8000f84 <__aeabi_fdiv>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <getActualTemps+0x110>)
 8001754:	601a      	str	r2, [r3, #0]
		steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <getActualTemps+0x110>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	491c      	ldr	r1, [pc, #112]	; (80017cc <getActualTemps+0x118>)
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fa55 	bl	8000c0c <__addsf3>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <getActualTemps+0x110>)
 8001768:	601a      	str	r2, [r3, #0]
		steinhart = 1.0f / steinhart;                         // Invert
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <getActualTemps+0x110>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001774:	f7ff fc06 	bl	8000f84 <__aeabi_fdiv>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <getActualTemps+0x110>)
 800177e:	601a      	str	r2, [r3, #0]
		steinhart -= 273.15f;    // convert to degree
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <getActualTemps+0x110>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4912      	ldr	r1, [pc, #72]	; (80017d0 <getActualTemps+0x11c>)
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa3e 	bl	8000c08 <__aeabi_fsub>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <getActualTemps+0x110>)
 8001792:	601a      	str	r2, [r3, #0]

		actual_temp[i] = steinhart;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <getActualTemps+0x110>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 12; i++) {
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3301      	adds	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b0b      	cmp	r3, #11
 80017ac:	d98a      	bls.n	80016c4 <getActualTemps+0x10>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	46ea6000 	.word	0x46ea6000
 80017bc:	20000364 	.word	0x20000364
 80017c0:	47c35000 	.word	0x47c35000
 80017c4:	20000368 	.word	0x20000368
 80017c8:	4584d000 	.word	0x4584d000
 80017cc:	3b5bcf0f 	.word	0x3b5bcf0f
 80017d0:	43889333 	.word	0x43889333

080017d4 <LTC_ReadRawCellTemps>:

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 80017d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d8:	b089      	sub	sp, #36	; 0x24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	466b      	mov	r3, sp
 80017e0:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 80017e6:	f7ff fe2d 	bl	8001444 <LTC_Get_Num_Devices>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	2308      	movs	r3, #8
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80017f6:	7f3b      	ldrb	r3, [r7, #28]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	7f3b      	ldrb	r3, [r7, #28]
 80017fe:	2200      	movs	r2, #0
 8001800:	4698      	mov	r8, r3
 8001802:	4691      	mov	r9, r2
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001818:	7f3b      	ldrb	r3, [r7, #28]
 800181a:	2200      	movs	r2, #0
 800181c:	461c      	mov	r4, r3
 800181e:	4615      	mov	r5, r2
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	00eb      	lsls	r3, r5, #3
 800182a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182e:	00e2      	lsls	r2, r4, #3
 8001830:	7f3b      	ldrb	r3, [r7, #28]
 8001832:	3307      	adds	r3, #7
 8001834:	08db      	lsrs	r3, r3, #3
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	ebad 0d03 	sub.w	sp, sp, r3
 800183c:	466b      	mov	r3, sp
 800183e:	3300      	adds	r3, #0
 8001840:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	77bb      	strb	r3, [r7, #30]
 8001846:	e081      	b.n	800194c <LTC_ReadRawCellTemps+0x178>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 8001848:	7fbb      	ldrb	r3, [r7, #30]
 800184a:	4a48      	ldr	r2, [pc, #288]	; (800196c <LTC_ReadRawCellTemps+0x198>)
 800184c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b29b      	uxth	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 8001858:	7fbb      	ldrb	r3, [r7, #30]
 800185a:	4a44      	ldr	r2, [pc, #272]	; (800196c <LTC_ReadRawCellTemps+0x198>)
 800185c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4619      	mov	r1, r3
 800186a:	2002      	movs	r0, #2
 800186c:	f7ff fda6 	bl	80013bc <LTC_PEC15_Calc>
 8001870:	4603      	mov	r3, r0
 8001872:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001874:	8a7b      	ldrh	r3, [r7, #18]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b29b      	uxth	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 800187e:	8a7b      	ldrh	r3, [r7, #18]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	72fb      	strb	r3, [r7, #11]

		ret |= LTC_Wakeup_Idle(); //Wake LTC up
 8001884:	f7ff fe08 	bl	8001498 <LTC_Wakeup_Idle>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	4313      	orrs	r3, r2
 8001890:	77fb      	strb	r3, [r7, #31]

		LTC_nCS_Low(); //Pull CS low
 8001892:	f000 fed5 	bl	8002640 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001896:	f107 0108 	add.w	r1, r7, #8
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	2204      	movs	r2, #4
 800189e:	4834      	ldr	r0, [pc, #208]	; (8001970 <LTC_ReadRawCellTemps+0x19c>)
 80018a0:	f004 f8c0 	bl	8005a24 <HAL_SPI_Transmit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 80018a8:	7c7b      	ldrb	r3, [r7, #17]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <LTC_ReadRawCellTemps+0xf2>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 80018ae:	7c7b      	ldrb	r3, [r7, #17]
 80018b0:	2200      	movs	r2, #0
 80018b2:	4413      	add	r3, r2
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80018c6:	7f3b      	ldrb	r3, [r7, #28]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	6979      	ldr	r1, [r7, #20]
 80018ce:	4828      	ldr	r0, [pc, #160]	; (8001970 <LTC_ReadRawCellTemps+0x19c>)
 80018d0:	f004 f9eb 	bl	8005caa <HAL_SPI_Receive>
 80018d4:	4603      	mov	r3, r0
 80018d6:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 80018d8:	7c7b      	ldrb	r3, [r7, #17]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <LTC_ReadRawCellTemps+0x122>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	2204      	movs	r2, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	2201      	movs	r2, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	777b      	strb	r3, [r7, #29]
 80018fa:	e01b      	b.n	8001934 <LTC_ReadRawCellTemps+0x160>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80018fc:	7f7b      	ldrb	r3, [r7, #29]
 80018fe:	2208      	movs	r2, #8
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 800190a:	7f7b      	ldrb	r3, [r7, #29]
 800190c:	2206      	movs	r2, #6
 800190e:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001912:	7fbb      	ldrb	r3, [r7, #30]
 8001914:	2103      	movs	r1, #3
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
					REG_LEN - 2);
 8001922:	2208      	movs	r2, #8
 8001924:	3a02      	subs	r2, #2
			memcpy(
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f009 f862 	bl	800a9f2 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800192e:	7f7b      	ldrb	r3, [r7, #29]
 8001930:	3301      	adds	r3, #1
 8001932:	777b      	strb	r3, [r7, #29]
 8001934:	f7ff fd86 	bl	8001444 <LTC_Get_Num_Devices>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	7f7b      	ldrb	r3, [r7, #29]
 800193e:	4293      	cmp	r3, r2
 8001940:	d3dc      	bcc.n	80018fc <LTC_ReadRawCellTemps+0x128>
		}

		LTC_nCS_High(); //Pull CS high
 8001942:	f000 fe71 	bl	8002628 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001946:	7fbb      	ldrb	r3, [r7, #30]
 8001948:	3301      	adds	r3, #1
 800194a:	77bb      	strb	r3, [r7, #30]
 800194c:	2206      	movs	r2, #6
 800194e:	2303      	movs	r3, #3
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	7fba      	ldrb	r2, [r7, #30]
 8001958:	429a      	cmp	r2, r3
 800195a:	f4ff af75 	bcc.w	8001848 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 800195e:	7ffb      	ldrb	r3, [r7, #31]
 8001960:	46b5      	mov	sp, r6
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800196c:	0800cfe0 	.word	0x0800cfe0
 8001970:	200003f4 	.word	0x200003f4

08001974 <LTC_ADCV>:
 Starts cell voltage conversion
 */
void LTC_ADCV(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH //Cell Channels to be measured
		) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	460b      	mov	r3, r1
 8001980:	71bb      	strb	r3, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	105b      	asrs	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3302      	adds	r3, #2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	01db      	lsls	r3, r3, #7
 800199e:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	797b      	ldrb	r3, [r7, #5]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	4619      	mov	r1, r3
 80019be:	2002      	movs	r0, #2
 80019c0:	f7ff fcfc 	bl	80013bc <LTC_PEC15_Calc>
 80019c4:	4603      	mov	r3, r0
 80019c6:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80019c8:	89bb      	ldrh	r3, [r7, #12]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80019d2:	89bb      	ldrh	r3, [r7, #12]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	72fb      	strb	r3, [r7, #11]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80019d8:	f7ff fd5e 	bl	8001498 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80019dc:	f000 fe30 	bl	8002640 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80019e0:	f107 0108 	add.w	r1, r7, #8
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	2204      	movs	r2, #4
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <LTC_ADCV+0x88>)
 80019ea:	f004 f81b 	bl	8005a24 <HAL_SPI_Transmit>
	LTC_nCS_High();
 80019ee:	f000 fe1b 	bl	8002628 <LTC_nCS_High>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200003f4 	.word	0x200003f4

08001a00 <LTC_ADAX>:

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	460a      	mov	r2, r1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	105b      	asrs	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	01db      	lsls	r3, r3, #7
 8001a28:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	79bb      	ldrb	r3, [r7, #6]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001a38:	f107 0308 	add.w	r3, r7, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7ff fcbc 	bl	80013bc <LTC_PEC15_Calc>
 8001a44:	4603      	mov	r3, r0
 8001a46:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001a48:	89bb      	ldrh	r3, [r7, #12]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001a58:	f7ff fd1e 	bl	8001498 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8001a5c:	f000 fdf0 	bl	8002640 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001a60:	f107 0108 	add.w	r1, r7, #8
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	2204      	movs	r2, #4
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <LTC_ADAX+0x7c>)
 8001a6a:	f003 ffdb 	bl	8005a24 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001a6e:	f000 fddb 	bl	8002628 <LTC_nCS_High>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200003f4 	.word	0x200003f4

08001a80 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001a92:	2307      	movs	r3, #7
 8001a94:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001a96:	2314      	movs	r3, #20
 8001a98:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7ff fc8c 	bl	80013bc <LTC_PEC15_Calc>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001ab2:	893b      	ldrh	r3, [r7, #8]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001ab8:	f7ff fcee 	bl	8001498 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 8001abc:	f000 fdc0 	bl	8002640 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001ac0:	1d39      	adds	r1, r7, #4
 8001ac2:	2364      	movs	r3, #100	; 0x64
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	480f      	ldr	r0, [pc, #60]	; (8001b04 <LTC_PollAdc+0x84>)
 8001ac8:	f003 ffac 	bl	8005a24 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001acc:	e00c      	b.n	8001ae8 <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 8001ace:	f001 f899 	bl	8002c04 <HAL_GetTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 8001ad6:	7abb      	ldrb	r3, [r7, #10]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <LTC_PollAdc+0x62>
			finished = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	72fb      	strb	r3, [r7, #11]
 8001ae0:	e002      	b.n	8001ae8 <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	330a      	adds	r3, #10
 8001ae6:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <LTC_PollAdc+0x88>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d802      	bhi.n	8001af6 <LTC_PollAdc+0x76>
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0eb      	beq.n	8001ace <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 8001af6:	f000 fd97 	bl	8002628 <LTC_nCS_High>
	return (counter);
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200003f4 	.word	0x200003f4
 8001b08:	00030d3f 	.word	0x00030d3f

08001b0c <LTC_CalcPackVoltage>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
int LTC_CalcPackVoltage(uint16_t *read_voltages) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	int packvoltage = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	e00b      	b.n	8001b36 <LTC_CalcPackVoltage+0x2a>
			i++) {
		packvoltage += read_voltages[i];
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
			i++) {
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups();
 8001b36:	f7ff fc85 	bl	8001444 <LTC_Get_Num_Devices>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	f7ff fca1 	bl	8001484 <LTC_Get_Num_Series_Groups>
 8001b42:	4603      	mov	r3, r0
 8001b44:	fb04 f303 	mul.w	r3, r4, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbe7      	blt.n	8001b1e <LTC_CalcPackVoltage+0x12>
	}
	return packvoltage;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd90      	pop	{r4, r7, pc}

08001b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b6a:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <MX_ADC1_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001b96:	f001 f863 	bl	8002c60 <HAL_ADC_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001ba0:	f000 fcbc 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ba4:	230e      	movs	r3, #14
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_ADC1_Init+0x74>)
 8001bb6:	f001 f92b 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001bc0:	f000 fcac 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000036c 	.word	0x2000036c
 8001bd0:	40012400 	.word	0x40012400

08001bd4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <MX_ADC2_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001bfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c02:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001c12:	f001 f825 	bl	8002c60 <HAL_ADC_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001c1c:	f000 fc7e 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c20:	230a      	movs	r3, #10
 8001c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_ADC2_Init+0x74>)
 8001c32:	f001 f8ed 	bl	8002e10 <HAL_ADC_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001c3c:	f000 fc6e 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000039c 	.word	0x2000039c
 8001c4c:	40012800 	.word	0x40012800

08001c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <HAL_ADC_MspInit+0xbc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d122      	bne.n	8001cb6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ca0:	2330      	movs	r3, #48	; 0x30
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4819      	ldr	r0, [pc, #100]	; (8001d14 <HAL_ADC_MspInit+0xc4>)
 8001cb0:	f001 fd28 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001cb4:	e026      	b.n	8001d04 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_ADC_MspInit+0xc8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d121      	bne.n	8001d04 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001cde:	f043 0310 	orr.w	r3, r3, #16
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_ADC_MspInit+0xc0>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_ADC_MspInit+0xc4>)
 8001d00:	f001 fd00 	bl	8003704 <HAL_GPIO_Init>
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012400 	.word	0x40012400
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40012800 	.word	0x40012800

08001d1c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <MX_CAN1_Init+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d28:	2209      	movs	r2, #9
 8001d2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d42:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_CAN1_Init+0x64>)
 8001d6e:	f001 f988 	bl	8003082 <HAL_CAN_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d78:	f000 fbd0 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200003cc 	.word	0x200003cc
 8001d84:	40006400 	.word	0x40006400

08001d88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <HAL_CAN_MspInit+0xb0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d143      	bne.n	8001e30 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db2:	61d3      	str	r3, [r2, #28]
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_CAN_MspInit+0xb4>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4814      	ldr	r0, [pc, #80]	; (8001e40 <HAL_CAN_MspInit+0xb8>)
 8001dee:	f001 fc89 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	480e      	ldr	r0, [pc, #56]	; (8001e40 <HAL_CAN_MspInit+0xb8>)
 8001e08:	f001 fc7c 	bl	8003704 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_CAN_MspInit+0xbc>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_CAN_MspInit+0xbc>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40006400 	.word	0x40006400
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010c00 	.word	0x40010c00
 8001e44:	40010000 	.word	0x40010000

08001e48 <CAN1_Start>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN1_Start() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <CAN1_Start+0x10>)
 8001e4e:	f001 fa13 	bl	8003278 <HAL_CAN_Start>
 8001e52:	4603      	mov	r3, r0
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200003cc 	.word	0x200003cc

08001e5c <CAN1_Activate>:

HAL_StatusTypeDef CAN1_Activate(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001e60:	2102      	movs	r1, #2
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <CAN1_Activate+0x14>)
 8001e64:	f001 fb1b 	bl	800349e <HAL_CAN_ActivateNotification>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200003cc 	.word	0x200003cc

08001e74 <CAN1_Tx>:

//
HAL_StatusTypeDef CAN1_Tx(const struct CANMessage *pHeader){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan1, &pHeader->TxHeader, &pHeader->data, &pHeader->TxMailbox);
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3318      	adds	r3, #24
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <CAN1_Tx+0x24>)
 8001e8a:	f001 fa39 	bl	8003300 <HAL_CAN_AddTxMessage>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200003cc 	.word	0x200003cc

08001e9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001ece:	f043 0320 	orr.w	r3, r3, #32
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_GPIO_Init+0xe4>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2110      	movs	r1, #16
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_GPIO_Init+0xe8>)
 8001f16:	f001 fd79 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	481a      	ldr	r0, [pc, #104]	; (8001f88 <MX_GPIO_Init+0xec>)
 8001f20:	f001 fd74 	bl	8003a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001f24:	2310      	movs	r3, #16
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_GPIO_Init+0xe8>)
 8001f3c:	f001 fbe2 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8001f40:	2340      	movs	r3, #64	; 0x40
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_GPIO_Init+0xec>)
 8001f58:	f001 fbd4 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8001f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_GPIO_Init+0xec>)
 8001f72:	f001 fbc7 	bl	8003704 <HAL_GPIO_Init>

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010800 	.word	0x40010800
 8001f88:	40011000 	.word	0x40011000

08001f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	f5ad 5d8e 	sub.w	sp, sp, #4544	; 0x11c0
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f96:	f000 fddd 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9a:	f000 fa53 	bl	8002444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f9e:	f7ff ff7d 	bl	8001e9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001fa2:	f7ff fdd9 	bl	8001b58 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001fa6:	f7ff fe15 	bl	8001bd4 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001faa:	f7ff feb7 	bl	8001d1c <MX_CAN1_Init>
  MX_TIM7_Init();
 8001fae:	f000 fc7d 	bl	80028ac <MX_TIM7_Init>
  MX_SPI1_Init();
 8001fb2:	f000 fab9 	bl	8002528 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001fb6:	f000 fccd 	bl	8002954 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001fba:	f000 fcf5 	bl	80029a8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001fbe:	f007 fa0d 	bl	80093dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Starts CAN1
  CAN1_Start();
 8001fc2:	f7ff ff41 	bl	8001e48 <CAN1_Start>
  CAN1_Activate();
 8001fc6:	f7ff ff49 	bl	8001e5c <CAN1_Activate>

//
//  uint8_t TxData[8];
  	struct CANMessage myCANtest;
  	myCANtest.TxHeader.IDE = CAN_ID_STD;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001fd0:	f102 0218 	add.w	r2, r2, #24
 8001fd4:	6013      	str	r3, [r2, #0]
  	myCANtest.TxHeader.StdId= 0x630; //ID
 8001fd6:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001fda:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001fde:	f102 0210 	add.w	r2, r2, #16
 8001fe2:	6013      	str	r3, [r2, #0]
  	myCANtest.TxHeader.RTR = CAN_RTR_DATA;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001fea:	f102 021c 	add.w	r2, r2, #28
 8001fee:	6013      	str	r3, [r2, #0]
  	myCANtest.TxHeader.DLC= 8; //data length
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001ff6:	6013      	str	r3, [r2, #0]



  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8001ff8:	f000 fb16 	bl	8002628 <LTC_nCS_High>
  LTC_Set_Num_Devices(NUM_DEVICES);
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7ff fa0f 	bl	8001420 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8002002:	200c      	movs	r0, #12
 8002004:	f7ff fa28 	bl	8001458 <LTC_Set_Num_Series_Groups>


//		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8002008:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800200c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	3304      	adds	r3, #4
 8002016:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f008 fc48 	bl	800a8b2 <memset>
			char char_to_str[2];
			int packvoltage = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002028:	f102 0208 	add.w	r2, r2, #8
 800202c:	6013      	str	r3, [r2, #0]



			LTC_ADCV(MD_7KHZ_3KHZ,DCP_DISABLED,CELL_CH_ALL);
 800202e:	2302      	movs	r3, #2
 8002030:	2100      	movs	r1, #0
 8002032:	2200      	movs	r2, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fc9d 	bl	8001974 <LTC_ADCV>
			LTC_PollAdc();
 800203a:	f7ff fd21 	bl	8001a80 <LTC_PollAdc>
			LTC_ReadRawCellVoltages((uint16_t *)read_volt);
 800203e:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002042:	f103 030c 	add.w	r3, r3, #12
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fa5e 	bl	8001508 <LTC_ReadRawCellVoltages>
			packvoltage = LTC_CalcPackVoltage((uint16_t *) read_volt);
 800204c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002050:	f103 030c 	add.w	r3, r3, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fd59 	bl	8001b0c <LTC_CalcPackVoltage>
 800205a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800205e:	f103 0308 	add.w	r3, r3, #8
 8002062:	6018      	str	r0, [r3, #0]
			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
 8002064:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8002068:	f103 0310 	add.w	r3, r3, #16
 800206c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002070:	f102 0208 	add.w	r2, r2, #8
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	498b      	ldr	r1, [pc, #556]	; (80022a4 <main+0x318>)
 8002078:	4618      	mov	r0, r3
 800207a:	f008 fbb7 	bl	800a7ec <siprintf>
			strncat(out_buf, packV, 30);
 800207e:	f507 5187 	add.w	r1, r7, #4320	; 0x10e0
 8002082:	f101 0110 	add.w	r1, r1, #16
 8002086:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800208a:	3b0c      	subs	r3, #12
 800208c:	221e      	movs	r2, #30
 800208e:	4618      	mov	r0, r3
 8002090:	f008 fc17 	bl	800a8c2 <strncat>
			strncat(out_buf, char_to_str, 2);
 8002094:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002098:	f101 0118 	add.w	r1, r1, #24
 800209c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020a0:	3b0c      	subs	r3, #12
 80020a2:	2202      	movs	r2, #2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f008 fc0c 	bl	800a8c2 <strncat>
//
//
			char_to_str[0] = '\n';
 80020aa:	230a      	movs	r3, #10
 80020ac:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80020b0:	f102 0218 	add.w	r2, r2, #24
 80020b4:	7013      	strb	r3, [r2, #0]
			char_to_str[1] = '\0';
 80020b6:	2300      	movs	r3, #0
 80020b8:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80020bc:	f102 0219 	add.w	r2, r2, #25
 80020c0:	7013      	strb	r3, [r2, #0]
//
//
			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80020c8:	f102 020f 	add.w	r2, r2, #15
 80020cc:	7013      	strb	r3, [r2, #0]
 80020ce:	e03a      	b.n	8002146 <main+0x1ba>
				sprintf(buf, "C%u:%u/10000 V", i+1, read_volt[i]);
 80020d0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80020d4:	f103 030f 	add.w	r3, r3, #15
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80020e0:	f103 030f 	add.w	r3, r3, #15
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80020ec:	f103 0310 	add.w	r3, r3, #16
 80020f0:	443b      	add	r3, r7
 80020f2:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80020f6:	f507 5086 	add.w	r0, r7, #4288	; 0x10c0
 80020fa:	f100 001c 	add.w	r0, r0, #28
 80020fe:	496a      	ldr	r1, [pc, #424]	; (80022a8 <main+0x31c>)
 8002100:	f008 fb74 	bl	800a7ec <siprintf>
				strncat(out_buf, buf, 20);
 8002104:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002108:	f101 011c 	add.w	r1, r1, #28
 800210c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002110:	3b0c      	subs	r3, #12
 8002112:	2214      	movs	r2, #20
 8002114:	4618      	mov	r0, r3
 8002116:	f008 fbd4 	bl	800a8c2 <strncat>
				strncat(out_buf, char_to_str, 2);
 800211a:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 800211e:	f101 0118 	add.w	r1, r1, #24
 8002122:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002126:	3b0c      	subs	r3, #12
 8002128:	2202      	movs	r2, #2
 800212a:	4618      	mov	r0, r3
 800212c:	f008 fbc9 	bl	800a8c2 <strncat>
			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 8002130:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002134:	f103 030f 	add.w	r3, r3, #15
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002140:	f102 020f 	add.w	r2, r2, #15
 8002144:	7013      	strb	r3, [r2, #0]
 8002146:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800214a:	f103 030f 	add.w	r3, r3, #15
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b17      	cmp	r3, #23
 8002152:	d9bd      	bls.n	80020d0 <main+0x144>
			}
			strncat(out_buf, char_to_str, 2);
 8002154:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002158:	f101 0118 	add.w	r1, r1, #24
 800215c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002160:	3b0c      	subs	r3, #12
 8002162:	2202      	movs	r2, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f008 fbac 	bl	800a8c2 <strncat>
//
			USB_Transmit(out_buf, strlen(out_buf));
 800216a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800216e:	3b0c      	subs	r3, #12
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f859 	bl	8000228 <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800217e:	3b0c      	subs	r3, #12
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f007 f91b 	bl	80093be <USB_Transmit>

			char buf2[20];
			char out_buf2[2048] = "";
 8002188:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800218c:	f103 0310 	add.w	r3, r3, #16
 8002190:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	3304      	adds	r3, #4
 800219a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f008 fb86 	bl	800a8b2 <memset>

			LTC_Wakeup_Idle();
 80021a6:	f7ff f977 	bl	8001498 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, AUX_CH_ALL);
 80021aa:	2302      	movs	r3, #2
 80021ac:	2200      	movs	r2, #0
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc25 	bl	8001a00 <LTC_ADAX>
			LTC_PollAdc();
 80021b6:	f7ff fc63 	bl	8001a80 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t *) read_temp); // Set to read back all aux registers
 80021ba:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80021be:	f103 0314 	add.w	r3, r3, #20
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fb06 	bl	80017d4 <LTC_ReadRawCellTemps>
			for (uint8_t i = 0; i < 12; i++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80021ce:	f102 020e 	add.w	r2, r2, #14
 80021d2:	7013      	strb	r3, [r2, #0]
 80021d4:	e043      	b.n	800225e <main+0x2d2>
				getActualTemps(actual_temp, read_temp);
 80021d6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80021da:	f102 0214 	add.w	r2, r2, #20
 80021de:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80021e2:	f103 0304 	add.w	r3, r3, #4
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fa63 	bl	80016b4 <getActualTemps>
				//sprintf(buf2, "Vref:%u", read_temp[i]);
				sprintf(buf2, "temp: %0.2f", actual_temp[i]);
 80021ee:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80021f2:	f103 030e 	add.w	r3, r3, #14
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f503 538e 	add.w	r3, r3, #4544	; 0x11c0
 80021fe:	f103 0310 	add.w	r3, r3, #16
 8002202:	443b      	add	r3, r7
 8002204:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f979 	bl	8000500 <__aeabi_f2d>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	f507 5086 	add.w	r0, r7, #4288	; 0x10c0
 8002216:	f100 0004 	add.w	r0, r0, #4
 800221a:	4924      	ldr	r1, [pc, #144]	; (80022ac <main+0x320>)
 800221c:	f008 fae6 	bl	800a7ec <siprintf>
				strncat(out_buf2, buf2, 20);
 8002220:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002224:	f101 0104 	add.w	r1, r1, #4
 8002228:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 800222c:	2214      	movs	r2, #20
 800222e:	4618      	mov	r0, r3
 8002230:	f008 fb47 	bl	800a8c2 <strncat>
				strncat(out_buf2, char_to_str, 2);
 8002234:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002238:	f101 0118 	add.w	r1, r1, #24
 800223c:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8002240:	2202      	movs	r2, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f008 fb3d 	bl	800a8c2 <strncat>
			for (uint8_t i = 0; i < 12; i++) {
 8002248:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800224c:	f103 030e 	add.w	r3, r3, #14
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002258:	f102 020e 	add.w	r2, r2, #14
 800225c:	7013      	strb	r3, [r2, #0]
 800225e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002262:	f103 030e 	add.w	r3, r3, #14
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b0b      	cmp	r3, #11
 800226a:	d9b4      	bls.n	80021d6 <main+0x24a>
			}
			strncat(out_buf2, char_to_str, 2);
 800226c:	f507 5186 	add.w	r1, r7, #4288	; 0x10c0
 8002270:	f101 0118 	add.w	r1, r1, #24
 8002274:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8002278:	2202      	movs	r2, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f008 fb21 	bl	800a8c2 <strncat>

			uint16_t read_volt[96] = {
 8002280:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002284:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002288:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <main+0x324>)
 800228a:	4618      	mov	r0, r3
 800228c:	4611      	mov	r1, r2
 800228e:	23c0      	movs	r3, #192	; 0xc0
 8002290:	461a      	mov	r2, r3
 8002292:	f008 fbae 	bl	800a9f2 <memcpy>
			    0x11C6, 0x11F2
			};


//			CAN1_Tx(&myCANtest);
			for (uint8_t currentModule = 0; currentModule < NUM_MODULES; currentModule++) {
 8002296:	2300      	movs	r3, #0
 8002298:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800229c:	f102 020d 	add.w	r2, r2, #13
 80022a0:	7013      	strb	r3, [r2, #0]
 80022a2:	e0b9      	b.n	8002418 <main+0x48c>
 80022a4:	0800ce98 	.word	0x0800ce98
 80022a8:	0800ceb4 	.word	0x0800ceb4
 80022ac:	0800cec4 	.word	0x0800cec4
 80022b0:	0800ced0 	.word	0x0800ced0
				      // Package High bits and low bits of voltage readings into buffer

				      // Cell 0
				      myCANtest.data[0] = (uint8_t)read_volt[0 + offsetCellMACRO];
 80022b4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80022b8:	f103 030d 	add.w	r3, r3, #13
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80022c4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80022c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80022d2:	f102 021c 	add.w	r2, r2, #28
 80022d6:	7013      	strb	r3, [r2, #0]
				      myCANtest.data[1] = read_volt[0 + offsetCellMACRO] >> 8;
 80022d8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80022dc:	f103 030d 	add.w	r3, r3, #13
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80022e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80022ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80022fa:	f102 021d 	add.w	r2, r2, #29
 80022fe:	7013      	strb	r3, [r2, #0]

				      // Cell 1
				      myCANtest.data[2] = (uint8_t)read_volt[1 + offsetCellMACRO];
 8002300:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002304:	f103 030d 	add.w	r3, r3, #13
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002312:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002316:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002320:	f102 021e 	add.w	r2, r2, #30
 8002324:	7013      	strb	r3, [r2, #0]
				      myCANtest.data[3] = read_volt[1 + offsetCellMACRO] >> 8;
 8002326:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800232a:	f103 030d 	add.w	r3, r3, #13
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002338:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800233c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b29b      	uxth	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800234a:	f102 021f 	add.w	r2, r2, #31
 800234e:	7013      	strb	r3, [r2, #0]

				      // Cell 2
				      myCANtest.data[4] = (uint8_t)read_volt[2 + offsetCellMACRO];
 8002350:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002354:	f103 030d 	add.w	r3, r3, #13
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	1c9a      	adds	r2, r3, #2
 800235e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002362:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002366:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002370:	7013      	strb	r3, [r2, #0]
				      myCANtest.data[5] = read_volt[2 + offsetCellMACRO] >> 8;
 8002372:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002376:	f103 030d 	add.w	r3, r3, #13
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	1c9a      	adds	r2, r3, #2
 8002380:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002384:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002388:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002396:	f102 0201 	add.w	r2, r2, #1
 800239a:	7013      	strb	r3, [r2, #0]

				      // Cell 3
				      myCANtest.data[6] = (uint8_t)read_volt[3 + offsetCellMACRO];
 800239c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80023a0:	f103 030d 	add.w	r3, r3, #13
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	1cda      	adds	r2, r3, #3
 80023aa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80023ae:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80023b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80023bc:	f102 0202 	add.w	r2, r2, #2
 80023c0:	7013      	strb	r3, [r2, #0]
				      myCANtest.data[7] = read_volt[3 + offsetCellMACRO] >> 8;
 80023c2:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80023c6:	f103 030d 	add.w	r3, r3, #13
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	1cda      	adds	r2, r3, #3
 80023d0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80023d4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80023d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80023e6:	f102 0203 	add.w	r2, r2, #3
 80023ea:	7013      	strb	r3, [r2, #0]

				      // Send out the packet
				      CAN1_Tx(&myCANtest);
 80023ec:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80023f0:	f103 0310 	add.w	r3, r3, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fd3d 	bl	8001e74 <CAN1_Tx>

				      HAL_Delay(30000); // This delays the execution for 1000 milliseconds (1 second)
 80023fa:	f247 5030 	movw	r0, #30000	; 0x7530
 80023fe:	f000 fc0b 	bl	8002c18 <HAL_Delay>
			for (uint8_t currentModule = 0; currentModule < NUM_MODULES; currentModule++) {
 8002402:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8002406:	f103 030d 	add.w	r3, r3, #13
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002412:	f102 020d 	add.w	r2, r2, #13
 8002416:	7013      	strb	r3, [r2, #0]
 8002418:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800241c:	f103 030d 	add.w	r3, r3, #13
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b17      	cmp	r3, #23
 8002424:	f67f af46 	bls.w	80022b4 <main+0x328>


			}
			USB_Transmit(out_buf2, strlen(out_buf2));
 8002428:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 800242c:	4618      	mov	r0, r3
 800242e:	f7fd fefb 	bl	8000228 <strlen>
 8002432:	4603      	mov	r3, r0
 8002434:	b29a      	uxth	r2, r3
 8002436:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f006 ffbe 	bl	80093be <USB_Transmit>
  {
 8002442:	e5e1      	b.n	8002008 <main+0x7c>

08002444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09c      	sub	sp, #112	; 0x70
 8002448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800244a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800244e:	2238      	movs	r2, #56	; 0x38
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f008 fa2d 	bl	800a8b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2220      	movs	r2, #32
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f008 fa1f 	bl	800a8b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002474:	2301      	movs	r3, #1
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800247e:	2304      	movs	r3, #4
 8002480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002482:	2301      	movs	r3, #1
 8002484:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	2302      	movs	r3, #2
 800248e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002496:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800249c:	2302      	movs	r3, #2
 800249e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80024a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80024a6:	2340      	movs	r3, #64	; 0x40
 80024a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fbf6 	bl	8004ca0 <HAL_RCC_OscConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80024ba:	f000 f82f 	bl	800251c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024be:	230f      	movs	r3, #15
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c2:	2302      	movs	r3, #2
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fef6 	bl	80052cc <HAL_RCC_ClockConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024e6:	f000 f819 	bl	800251c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80024ea:	2312      	movs	r3, #18
 80024ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 f8dc 	bl	80056b8 <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002506:	f000 f809 	bl	800251c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800250a:	4b03      	ldr	r3, [pc, #12]	; (8002518 <SystemClock_Config+0xd4>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]
}
 8002510:	bf00      	nop
 8002512:	3770      	adds	r7, #112	; 0x70
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	42420070 	.word	0x42420070

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_SPI1_Init+0x64>)
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <MX_SPI1_Init+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <MX_SPI1_Init+0x64>)
 8002534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_SPI1_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_SPI1_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_SPI1_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_SPI1_Init+0x64>)
 8002554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_SPI1_Init+0x64>)
 800255c:	2228      	movs	r2, #40	; 0x28
 800255e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <MX_SPI1_Init+0x64>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_SPI1_Init+0x64>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <MX_SPI1_Init+0x64>)
 800256e:	2200      	movs	r2, #0
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_SPI1_Init+0x64>)
 8002574:	220a      	movs	r2, #10
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_SPI1_Init+0x64>)
 800257a:	f003 f9cf 	bl	800591c <HAL_SPI_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002584:	f7ff ffca 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200003f4 	.word	0x200003f4
 8002590:	40013000 	.word	0x40013000

08002594 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d12f      	bne.n	8002614 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b17      	ldr	r3, [pc, #92]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025e4:	23a0      	movs	r3, #160	; 0xa0
 80025e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ec:	2303      	movs	r3, #3
 80025ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4619      	mov	r1, r3
 80025f6:	480b      	ldr	r0, [pc, #44]	; (8002624 <HAL_SPI_MspInit+0x90>)
 80025f8:	f001 f884 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4619      	mov	r1, r3
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_SPI_MspInit+0x90>)
 8002610:	f001 f878 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013000 	.word	0x40013000
 8002620:	40021000 	.word	0x40021000
 8002624:	40010800 	.word	0x40010800

08002628 <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 800262c:	2201      	movs	r2, #1
 800262e:	2110      	movs	r1, #16
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <LTC_nCS_High+0x14>)
 8002632:	f001 f9eb 	bl	8003a0c <HAL_GPIO_WritePin>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40010800 	.word	0x40010800

08002640 <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002644:	2200      	movs	r2, #0
 8002646:	2110      	movs	r1, #16
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <LTC_nCS_Low+0x14>)
 800264a:	f001 f9df 	bl	8003a0c <HAL_GPIO_WritePin>
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010800 	.word	0x40010800

08002658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_MspInit+0x5c>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <HAL_MspInit+0x5c>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6193      	str	r3, [r2, #24]
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_MspInit+0x5c>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_MspInit+0x5c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_MspInit+0x5c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_MspInit+0x5c>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_MspInit+0x60>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_MspInit+0x60>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010000 	.word	0x40010000

080026bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <NMI_Handler+0x4>

080026c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <HardFault_Handler+0x4>

080026c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <MemManage_Handler+0x4>

080026ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d2:	e7fe      	b.n	80026d2 <BusFault_Handler+0x4>

080026d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <UsageFault_Handler+0x4>

080026da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002702:	f000 fa6d 	bl	8002be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <OTG_FS_IRQHandler+0x10>)
 8002712:	f001 fad2 	bl	8003cba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200011f4 	.word	0x200011f4

08002720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return 1;
 8002724:	2301      	movs	r3, #1
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <_kill>:

int _kill(int pid, int sig)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002738:	f008 f920 	bl	800a97c <__errno>
 800273c:	4603      	mov	r3, r0
 800273e:	2216      	movs	r2, #22
 8002740:	601a      	str	r2, [r3, #0]
  return -1;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_exit>:

void _exit (int status)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002756:	f04f 31ff 	mov.w	r1, #4294967295
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffe7 	bl	800272e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002760:	e7fe      	b.n	8002760 <_exit+0x12>

08002762 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e00a      	b.n	800278a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002774:	f3af 8000 	nop.w
 8002778:	4601      	mov	r1, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	60ba      	str	r2, [r7, #8]
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	dbf0      	blt.n	8002774 <_read+0x12>
  }

  return len;
 8002792:	687b      	ldr	r3, [r7, #4]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e009      	b.n	80027c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	60ba      	str	r2, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbf1      	blt.n	80027ae <_write+0x12>
  }
  return len;
 80027ca:	687b      	ldr	r3, [r7, #4]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <_close>:

int _close(int file)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fa:	605a      	str	r2, [r3, #4]
  return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <_isatty>:

int _isatty(int file)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002810:	2301      	movs	r3, #1
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f008 f88a 	bl	800a97c <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	; (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20010000 	.word	0x20010000
 8002894:	00000400 	.word	0x00000400
 8002898:	2000044c 	.word	0x2000044c
 800289c:	20001a68 	.word	0x20001a68

080028a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_TIM7_Init+0x64>)
 80028bc:	4a15      	ldr	r2, [pc, #84]	; (8002914 <MX_TIM7_Init+0x68>)
 80028be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_TIM7_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_TIM7_Init+0x64>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_TIM7_Init+0x64>)
 80028ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_TIM7_Init+0x64>)
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028da:	480d      	ldr	r0, [pc, #52]	; (8002910 <MX_TIM7_Init+0x64>)
 80028dc:	f003 fda6 	bl	800642c <HAL_TIM_Base_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80028e6:	f7ff fe19 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	; (8002910 <MX_TIM7_Init+0x64>)
 80028f8:	f003 fe54 	bl	80065a4 <HAL_TIMEx_MasterConfigSynchronization>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002902:	f7ff fe0b 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000450 	.word	0x20000450
 8002914:	40001400 	.word	0x40001400

08002918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_TIM_Base_MspInit+0x34>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10b      	bne.n	8002942 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_TIM_Base_MspInit+0x38>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_TIM_Base_MspInit+0x38>)
 8002930:	f043 0320 	orr.w	r3, r3, #32
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_TIM_Base_MspInit+0x38>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	40001400 	.word	0x40001400
 8002950:	40021000 	.word	0x40021000

08002954 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <MX_USART2_UART_Init+0x50>)
 800295c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_USART2_UART_Init+0x4c>)
 800298c:	f003 fe70 	bl	8006670 <HAL_UART_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002996:	f7ff fdc1 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000498 	.word	0x20000498
 80029a4:	40004400 	.word	0x40004400

080029a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <MX_USART3_UART_Init+0x50>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_USART3_UART_Init+0x4c>)
 80029e0:	f003 fe46 	bl	8006670 <HAL_UART_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029ea:	f7ff fd97 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200004e0 	.word	0x200004e0
 80029f8:	40004800 	.word	0x40004800

080029fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0318 	add.w	r3, r7, #24
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a37      	ldr	r2, [pc, #220]	; (8002af4 <HAL_UART_MspInit+0xf8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d130      	bne.n	8002a7e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a26:	61d3      	str	r3, [r2, #28]
 8002a28:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4827      	ldr	r0, [pc, #156]	; (8002afc <HAL_UART_MspInit+0x100>)
 8002a60:	f000 fe50 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a64:	2308      	movs	r3, #8
 8002a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f107 0318 	add.w	r3, r7, #24
 8002a74:	4619      	mov	r1, r3
 8002a76:	4821      	ldr	r0, [pc, #132]	; (8002afc <HAL_UART_MspInit+0x100>)
 8002a78:	f000 fe44 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a7c:	e036      	b.n	8002aec <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_UART_MspInit+0x104>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d131      	bne.n	8002aec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_UART_MspInit+0xfc>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac6:	f107 0318 	add.w	r3, r7, #24
 8002aca:	4619      	mov	r1, r3
 8002acc:	480d      	ldr	r0, [pc, #52]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002ace:	f000 fe19 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 0318 	add.w	r3, r7, #24
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <HAL_UART_MspInit+0x108>)
 8002ae8:	f000 fe0c 	bl	8003704 <HAL_GPIO_Init>
}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40010c00 	.word	0x40010c00

08002b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b08:	f7ff feca 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b0c:	480b      	ldr	r0, [pc, #44]	; (8002b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b0e:	490c      	ldr	r1, [pc, #48]	; (8002b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b10:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b14:	e002      	b.n	8002b1c <LoopCopyDataInit>

08002b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1a:	3304      	adds	r3, #4

08002b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b20:	d3f9      	bcc.n	8002b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b24:	4c09      	ldr	r4, [pc, #36]	; (8002b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b28:	e001      	b.n	8002b2e <LoopFillZerobss>

08002b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b2c:	3204      	adds	r2, #4

08002b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b30:	d3fb      	bcc.n	8002b2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b32:	f007 ff29 	bl	800a988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b36:	f7ff fa29 	bl	8001f8c <main>
  bx lr
 8002b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002b44:	0800d79c 	.word	0x0800d79c
  ldr r2, =_sbss
 8002b48:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002b4c:	20001a64 	.word	0x20001a64

08002b50 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC1_2_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_Init+0x28>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <HAL_Init+0x28>)
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 fd8b 	bl	8003680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	f000 f808 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b70:	f7ff fd72 	bl	8002658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_InitTick+0x54>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x58>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fda3 	bl	80036ea <HAL_SYSTICK_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00e      	b.n	8002bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d80a      	bhi.n	8002bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f000 fd6b 	bl	8003696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <HAL_InitTick+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	20000004 	.word	0x20000004

08002be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_IncTick+0x1c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_IncTick+0x20>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <HAL_IncTick+0x20>)
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	20000528 	.word	0x20000528

08002c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_GetTick+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000528 	.word	0x20000528

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffe0 	bl	8002c04 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0be      	b.n	8002e00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe ffd6 	bl	8001c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f9ab 	bl	8003000 <ADC_ConversionStop_Disable>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8099 	bne.w	8002dee <HAL_ADC_Init+0x18e>
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8095 	bne.w	8002dee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ccc:	f023 0302 	bic.w	r3, r3, #2
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7b1b      	ldrb	r3, [r3, #12]
 8002ce6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf8:	d003      	beq.n	8002d02 <HAL_ADC_Init+0xa2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_ADC_Init+0xa8>
 8002d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d06:	e000      	b.n	8002d0a <HAL_ADC_Init+0xaa>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7d1b      	ldrb	r3, [r3, #20]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d119      	bne.n	8002d4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7b1b      	ldrb	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	035a      	lsls	r2, r3, #13
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_ADC_Init+0x1a8>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7c:	d003      	beq.n	8002d86 <HAL_ADC_Init+0x126>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	051b      	lsls	r3, r3, #20
 8002d8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HAL_ADC_Init+0x1ac>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d10b      	bne.n	8002dcc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dca:	e018      	b.n	8002dfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f023 0312 	bic.w	r3, r3, #18
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dec:	e007      	b.n	8002dfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	ffe1f7fd 	.word	0xffe1f7fd
 8002e0c:	ff1f0efe 	.word	0xff1f0efe

08002e10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x20>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0dc      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1da>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d81c      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b05      	subs	r3, #5
 8002e52:	221f      	movs	r2, #31
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4019      	ands	r1, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b05      	subs	r3, #5
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	635a      	str	r2, [r3, #52]	; 0x34
 8002e78:	e03c      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d81c      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b23      	subs	r3, #35	; 0x23
 8002e94:	221f      	movs	r2, #31
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	4019      	ands	r1, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b23      	subs	r3, #35	; 0x23
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eba:	e01b      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b41      	subs	r3, #65	; 0x41
 8002ece:	221f      	movs	r2, #31
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4019      	ands	r1, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b41      	subs	r3, #65	; 0x41
 8002ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d91c      	bls.n	8002f36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b1e      	subs	r3, #30
 8002f0e:	2207      	movs	r2, #7
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4019      	ands	r1, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6898      	ldr	r0, [r3, #8]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	3b1e      	subs	r3, #30
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e019      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6919      	ldr	r1, [r3, #16]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	4019      	ands	r1, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6898      	ldr	r0, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d003      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f76:	2b11      	cmp	r3, #17
 8002f78:	d132      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d125      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d126      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fa0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <HAL_ADC_ConfigChannel+0x1ec>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9a      	lsrs	r2, r3, #18
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x1b2>
 8002fce:	e007      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012400 	.word	0x40012400
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	431bde83 	.word	0x431bde83

08003000 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12e      	bne.n	8003078 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800302a:	f7ff fdeb 	bl	8002c04 <HAL_GetTick>
 800302e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003030:	e01b      	b.n	800306a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003032:	f7ff fde7 	bl	8002c04 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d914      	bls.n	800306a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	f043 0210 	orr.w	r2, r3, #16
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e007      	b.n	800307a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d0dc      	beq.n	8003032 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0ed      	b.n	8003270 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fe fe71 	bl	8001d88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b6:	f7ff fda5 	bl	8002c04 <HAL_GetTick>
 80030ba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030bc:	e012      	b.n	80030e4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030be:	f7ff fda1 	bl	8002c04 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b0a      	cmp	r3, #10
 80030ca:	d90b      	bls.n	80030e4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2205      	movs	r2, #5
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0c5      	b.n	8003270 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0e5      	beq.n	80030be <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0202 	bic.w	r2, r2, #2
 8003100:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003102:	f7ff fd7f 	bl	8002c04 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003108:	e012      	b.n	8003130 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800310a:	f7ff fd7b 	bl	8002c04 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b0a      	cmp	r3, #10
 8003116:	d90b      	bls.n	8003130 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2205      	movs	r2, #5
 8003128:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e09f      	b.n	8003270 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e5      	bne.n	800310a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7e1b      	ldrb	r3, [r3, #24]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d108      	bne.n	8003158 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7e5b      	ldrb	r3, [r3, #25]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d108      	bne.n	8003182 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	e007      	b.n	8003192 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7e9b      	ldrb	r3, [r3, #26]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d108      	bne.n	80031ac <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e007      	b.n	80031bc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0220 	bic.w	r2, r2, #32
 80031ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7edb      	ldrb	r3, [r3, #27]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0210 	bic.w	r2, r2, #16
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e007      	b.n	80031e6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0210 	orr.w	r2, r2, #16
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7f1b      	ldrb	r3, [r3, #28]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d108      	bne.n	8003200 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0208 	orr.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e007      	b.n	8003210 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0208 	bic.w	r2, r2, #8
 800320e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7f5b      	ldrb	r3, [r3, #29]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d108      	bne.n	800322a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0204 	orr.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e007      	b.n	800323a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0204 	bic.w	r2, r2, #4
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	ea42 0103 	orr.w	r1, r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d12e      	bne.n	80032ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a4:	f7ff fcae 	bl	8002c04 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032aa:	e012      	b.n	80032d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ac:	f7ff fcaa 	bl	8002c04 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b0a      	cmp	r3, #10
 80032b8:	d90b      	bls.n	80032d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e012      	b.n	80032f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e006      	b.n	80032f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003314:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d003      	beq.n	800332c <HAL_CAN_AddTxMessage+0x2c>
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 80ad 	bne.w	8003486 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8095 	beq.w	8003476 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003356:	2201      	movs	r2, #1
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	6809      	ldr	r1, [r1, #0]
 8003376:	431a      	orrs	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3318      	adds	r3, #24
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	440b      	add	r3, r1
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e00f      	b.n	80033a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800338e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003398:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3318      	adds	r3, #24
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	440b      	add	r3, r1
 80033a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3318      	adds	r3, #24
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	3304      	adds	r3, #4
 80033b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	7d1b      	ldrb	r3, [r3, #20]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d111      	bne.n	80033e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3318      	adds	r3, #24
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	6811      	ldr	r1, [r2, #0]
 80033d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3318      	adds	r3, #24
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	440b      	add	r3, r1
 80033e0:	3304      	adds	r3, #4
 80033e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3307      	adds	r3, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	061a      	lsls	r2, r3, #24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3306      	adds	r3, #6
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3305      	adds	r3, #5
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	4313      	orrs	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	3204      	adds	r2, #4
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	4610      	mov	r0, r2
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6811      	ldr	r1, [r2, #0]
 800340c:	ea43 0200 	orr.w	r2, r3, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	440b      	add	r3, r1
 8003416:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800341a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3303      	adds	r3, #3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	061a      	lsls	r2, r3, #24
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3302      	adds	r3, #2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4313      	orrs	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	4610      	mov	r0, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	6811      	ldr	r1, [r2, #0]
 8003442:	ea43 0200 	orr.w	r2, r3, r0
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	440b      	add	r3, r1
 800344c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003450:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3318      	adds	r3, #24
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	4413      	add	r3, r2
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3318      	adds	r3, #24
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	440b      	add	r3, r1
 8003470:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e00e      	b.n	8003494 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e006      	b.n	8003494 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3724      	adds	r7, #36	; 0x24
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d002      	beq.n	80034bc <HAL_CAN_ActivateNotification+0x1e>
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d109      	bne.n	80034d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6959      	ldr	r1, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e006      	b.n	80034de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4906      	ldr	r1, [pc, #24]	; (8003580 <__NVIC_EnableIRQ+0x34>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100

08003584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	; (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
         );
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800364c:	d301      	bcc.n	8003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <SysTick_Config+0x40>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365a:	210f      	movs	r1, #15
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f7ff ff90 	bl	8003584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <SysTick_Config+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <SysTick_Config+0x40>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff2d 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a8:	f7ff ff42 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	6978      	ldr	r0, [r7, #20]
 80036b4:	f7ff ff90 	bl	80035d8 <NVIC_EncodePriority>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff5f 	bl	8003584 <__NVIC_SetPriority>
}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	4603      	mov	r3, r0
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff35 	bl	800354c <__NVIC_EnableIRQ>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffa2 	bl	800363c <SysTick_Config>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b08b      	sub	sp, #44	; 0x2c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003716:	e169      	b.n	80039ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003718:	2201      	movs	r2, #1
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	429a      	cmp	r2, r3
 8003732:	f040 8158 	bne.w	80039e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a9a      	ldr	r2, [pc, #616]	; (80039a4 <HAL_GPIO_Init+0x2a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d05e      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
 8003740:	4a98      	ldr	r2, [pc, #608]	; (80039a4 <HAL_GPIO_Init+0x2a0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d875      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 8003746:	4a98      	ldr	r2, [pc, #608]	; (80039a8 <HAL_GPIO_Init+0x2a4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d058      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
 800374c:	4a96      	ldr	r2, [pc, #600]	; (80039a8 <HAL_GPIO_Init+0x2a4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d86f      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 8003752:	4a96      	ldr	r2, [pc, #600]	; (80039ac <HAL_GPIO_Init+0x2a8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d052      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
 8003758:	4a94      	ldr	r2, [pc, #592]	; (80039ac <HAL_GPIO_Init+0x2a8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d869      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 800375e:	4a94      	ldr	r2, [pc, #592]	; (80039b0 <HAL_GPIO_Init+0x2ac>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04c      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
 8003764:	4a92      	ldr	r2, [pc, #584]	; (80039b0 <HAL_GPIO_Init+0x2ac>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d863      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 800376a:	4a92      	ldr	r2, [pc, #584]	; (80039b4 <HAL_GPIO_Init+0x2b0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d046      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
 8003770:	4a90      	ldr	r2, [pc, #576]	; (80039b4 <HAL_GPIO_Init+0x2b0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d85d      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 8003776:	2b12      	cmp	r3, #18
 8003778:	d82a      	bhi.n	80037d0 <HAL_GPIO_Init+0xcc>
 800377a:	2b12      	cmp	r3, #18
 800377c:	d859      	bhi.n	8003832 <HAL_GPIO_Init+0x12e>
 800377e:	a201      	add	r2, pc, #4	; (adr r2, 8003784 <HAL_GPIO_Init+0x80>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037ff 	.word	0x080037ff
 8003788:	080037d9 	.word	0x080037d9
 800378c:	080037eb 	.word	0x080037eb
 8003790:	0800382d 	.word	0x0800382d
 8003794:	08003833 	.word	0x08003833
 8003798:	08003833 	.word	0x08003833
 800379c:	08003833 	.word	0x08003833
 80037a0:	08003833 	.word	0x08003833
 80037a4:	08003833 	.word	0x08003833
 80037a8:	08003833 	.word	0x08003833
 80037ac:	08003833 	.word	0x08003833
 80037b0:	08003833 	.word	0x08003833
 80037b4:	08003833 	.word	0x08003833
 80037b8:	08003833 	.word	0x08003833
 80037bc:	08003833 	.word	0x08003833
 80037c0:	08003833 	.word	0x08003833
 80037c4:	08003833 	.word	0x08003833
 80037c8:	080037e1 	.word	0x080037e1
 80037cc:	080037f5 	.word	0x080037f5
 80037d0:	4a79      	ldr	r2, [pc, #484]	; (80039b8 <HAL_GPIO_Init+0x2b4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037d6:	e02c      	b.n	8003832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	623b      	str	r3, [r7, #32]
          break;
 80037de:	e029      	b.n	8003834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	623b      	str	r3, [r7, #32]
          break;
 80037e8:	e024      	b.n	8003834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	3308      	adds	r3, #8
 80037f0:	623b      	str	r3, [r7, #32]
          break;
 80037f2:	e01f      	b.n	8003834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	330c      	adds	r3, #12
 80037fa:	623b      	str	r3, [r7, #32]
          break;
 80037fc:	e01a      	b.n	8003834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003806:	2304      	movs	r3, #4
 8003808:	623b      	str	r3, [r7, #32]
          break;
 800380a:	e013      	b.n	8003834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003814:	2308      	movs	r3, #8
 8003816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	611a      	str	r2, [r3, #16]
          break;
 800381e:	e009      	b.n	8003834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003820:	2308      	movs	r3, #8
 8003822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	615a      	str	r2, [r3, #20]
          break;
 800382a:	e003      	b.n	8003834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800382c:	2300      	movs	r3, #0
 800382e:	623b      	str	r3, [r7, #32]
          break;
 8003830:	e000      	b.n	8003834 <HAL_GPIO_Init+0x130>
          break;
 8003832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2bff      	cmp	r3, #255	; 0xff
 8003838:	d801      	bhi.n	800383e <HAL_GPIO_Init+0x13a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	e001      	b.n	8003842 <HAL_GPIO_Init+0x13e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2bff      	cmp	r3, #255	; 0xff
 8003848:	d802      	bhi.n	8003850 <HAL_GPIO_Init+0x14c>
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_Init+0x152>
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	3b08      	subs	r3, #8
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	210f      	movs	r1, #15
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	431a      	orrs	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80b1 	beq.w	80039e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003884:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <HAL_GPIO_Init+0x2b8>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4a4c      	ldr	r2, [pc, #304]	; (80039bc <HAL_GPIO_Init+0x2b8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6193      	str	r3, [r2, #24]
 8003890:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_GPIO_Init+0x2b8>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800389c:	4a48      	ldr	r2, [pc, #288]	; (80039c0 <HAL_GPIO_Init+0x2bc>)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4013      	ands	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <HAL_GPIO_Init+0x2c0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_GPIO_Init+0x1ec>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <HAL_GPIO_Init+0x2c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00d      	beq.n	80038ec <HAL_GPIO_Init+0x1e8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3e      	ldr	r2, [pc, #248]	; (80039cc <HAL_GPIO_Init+0x2c8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <HAL_GPIO_Init+0x1e4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <HAL_GPIO_Init+0x2cc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_GPIO_Init+0x1e0>
 80038e0:	2303      	movs	r3, #3
 80038e2:	e006      	b.n	80038f2 <HAL_GPIO_Init+0x1ee>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e004      	b.n	80038f2 <HAL_GPIO_Init+0x1ee>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e002      	b.n	80038f2 <HAL_GPIO_Init+0x1ee>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_GPIO_Init+0x1ee>
 80038f0:	2300      	movs	r3, #0
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	f002 0203 	and.w	r2, r2, #3
 80038f8:	0092      	lsls	r2, r2, #2
 80038fa:	4093      	lsls	r3, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003902:	492f      	ldr	r1, [pc, #188]	; (80039c0 <HAL_GPIO_Init+0x2bc>)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	3302      	adds	r3, #2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	492c      	ldr	r1, [pc, #176]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	43db      	mvns	r3, r3
 8003932:	4928      	ldr	r1, [pc, #160]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003934:	4013      	ands	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003944:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4922      	ldr	r1, [pc, #136]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	60cb      	str	r3, [r1, #12]
 8003950:	e006      	b.n	8003960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	43db      	mvns	r3, r3
 800395a:	491e      	ldr	r1, [pc, #120]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800395c:	4013      	ands	r3, r2
 800395e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4918      	ldr	r1, [pc, #96]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	e006      	b.n	8003988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	43db      	mvns	r3, r3
 8003982:	4914      	ldr	r1, [pc, #80]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003984:	4013      	ands	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	490e      	ldr	r1, [pc, #56]	; (80039d4 <HAL_GPIO_Init+0x2d0>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e021      	b.n	80039e6 <HAL_GPIO_Init+0x2e2>
 80039a2:	bf00      	nop
 80039a4:	10320000 	.word	0x10320000
 80039a8:	10310000 	.word	0x10310000
 80039ac:	10220000 	.word	0x10220000
 80039b0:	10210000 	.word	0x10210000
 80039b4:	10120000 	.word	0x10120000
 80039b8:	10110000 	.word	0x10110000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010800 	.word	0x40010800
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40011400 	.word	0x40011400
 80039d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_GPIO_Init+0x304>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	43db      	mvns	r3, r3
 80039e0:	4909      	ldr	r1, [pc, #36]	; (8003a08 <HAL_GPIO_Init+0x304>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	3301      	adds	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f47f ae8e 	bne.w	8003718 <HAL_GPIO_Init+0x14>
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	372c      	adds	r7, #44	; 0x2c
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40010400 	.word	0x40010400

08003a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a1c:	787b      	ldrb	r3, [r7, #1]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a28:	e003      	b.n	8003a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	041a      	lsls	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b08f      	sub	sp, #60	; 0x3c
 8003a40:	af0a      	add	r7, sp, #40	; 0x28
 8003a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e10f      	b.n	8003c6e <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f005 fea9 	bl	80097c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2203      	movs	r2, #3
 8003a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 ff9b 	bl	80069c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	687e      	ldr	r6, [r7, #4]
 8003a9a:	466d      	mov	r5, sp
 8003a9c:	f106 0410 	add.w	r4, r6, #16
 8003aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aac:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ab0:	1d33      	adds	r3, r6, #4
 8003ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab4:	6838      	ldr	r0, [r7, #0]
 8003ab6:	f002 feb9 	bl	800682c <USB_CoreInit>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0d0      	b.n	8003c6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 ff88 	bl	80069e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e04a      	b.n	8003b74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	333d      	adds	r3, #61	; 0x3d
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	333c      	adds	r3, #60	; 0x3c
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	b298      	uxth	r0, r3
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3356      	adds	r3, #86	; 0x56
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3344      	adds	r3, #68	; 0x44
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3348      	adds	r3, #72	; 0x48
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	334c      	adds	r3, #76	; 0x4c
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	3301      	adds	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3af      	bcc.n	8003ade <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e044      	b.n	8003c0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3b5      	bcc.n	8003b84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	687e      	ldr	r6, [r7, #4]
 8003c20:	466d      	mov	r5, sp
 8003c22:	f106 0410 	add.w	r4, r6, #16
 8003c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c36:	1d33      	adds	r3, r6, #4
 8003c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	f002 ff20 	bl	8006a80 <USB_DevInit>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00d      	b.n	8003c6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 feaa 	bl	80079c0 <USB_DevDisconnect>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_PCD_Start+0x16>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e012      	b.n	8003cb2 <HAL_PCD_Start+0x3c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f002 fe85 	bl	80069a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f003 fe6c 	bl	8007980 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cba:	b590      	push	{r4, r7, lr}
 8003cbc:	b08d      	sub	sp, #52	; 0x34
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 ff23 	bl	8007b1c <USB_GetMode>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 8443 	bne.w	8004564 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 fe8c 	bl	8007a00 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8439 	beq.w	8004562 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 fe79 	bl	8007a00 <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d107      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f002 0202 	and.w	r2, r2, #2
 8003d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 fe67 	bl	8007a00 <USB_ReadInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d161      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0210 	bic.w	r2, r2, #16
 8003d4a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 020f 	and.w	r2, r3, #15
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	3304      	adds	r3, #4
 8003d6a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	0c5b      	lsrs	r3, r3, #17
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d124      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d035      	beq.n	8003df0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a38      	ldr	r0, [r7, #32]
 8003d98:	f003 fca4 	bl	80076e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da8:	441a      	add	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dba:	441a      	add	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	615a      	str	r2, [r3, #20]
 8003dc0:	e016      	b.n	8003df0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	0c5b      	lsrs	r3, r3, #17
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d110      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6a38      	ldr	r0, [r7, #32]
 8003dda:	f003 fc83 	bl	80076e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dea:	441a      	add	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0210 	orr.w	r2, r2, #16
 8003dfe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fdfb 	bl	8007a00 <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e14:	f040 80a7 	bne.w	8003f66 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 fdff 	bl	8007a24 <USB_ReadDevAllOutEpInterrupt>
 8003e26:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e28:	e099      	b.n	8003f5e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 808e 	beq.w	8003f52 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f003 fe21 	bl	8007a88 <USB_ReadDevOutEPInterrupt>
 8003e46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2301      	movs	r3, #1
 8003e62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fe42 	bl	8004af0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	461a      	mov	r2, r3
 8003e84:	2308      	movs	r3, #8
 8003e86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fe7e 	bl	8004b8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d030      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d109      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ed4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	78db      	ldrb	r3, [r3, #3]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f005 fd4b 	bl	800999c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f12:	461a      	mov	r2, r3
 8003f14:	2302      	movs	r3, #2
 8003f16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2320      	movs	r3, #32
 8003f32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f47f af62 	bne.w	8003e2a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fd48 	bl	8007a00 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7a:	f040 80a4 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fd67 	bl	8007a56 <USB_ReadDevAllInEpInterrupt>
 8003f88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f8e:	e096      	b.n	80040be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 808b 	beq.w	80040b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f003 fd8b 	bl	8007ac2 <USB_ReadDevInEPInterrupt>
 8003fac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69f9      	ldr	r1, [r7, #28]
 8003fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd8:	4013      	ands	r3, r2
 8003fda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2301      	movs	r3, #1
 8003fec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f005 fc56 	bl	80098a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2308      	movs	r3, #8
 8004014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2310      	movs	r3, #16
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405a:	6a38      	ldr	r0, [r7, #32]
 800405c:	f002 fe32 	bl	8006cc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3338      	adds	r3, #56	; 0x38
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f005 fc99 	bl	80099c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	461a      	mov	r2, r3
 800409c:	2302      	movs	r3, #2
 800409e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fc96 	bl	80049de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af65 	bne.w	8003f90 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fc98 	bl	8007a00 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d114      	bne.n	8004106 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f005 fc45 	bl	8009980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fc78 	bl	8007a00 <USB_ReadInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411a:	d112      	bne.n	8004142 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f005 fc01 	bl	8009934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004140:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fc5a 	bl	8007a00 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	f040 80b5 	bne.w	80042c4 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2110      	movs	r1, #16
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fda5 	bl	8006cc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417e:	e046      	b.n	800420e <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004192:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004206:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420a:	3301      	adds	r3, #1
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	429a      	cmp	r2, r3
 8004216:	d3b3      	bcc.n	8004180 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800422a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d016      	beq.n	8004262 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 030b 	orr.w	r3, r3, #11
 8004248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f043 030b 	orr.w	r3, r3, #11
 800425e:	6453      	str	r3, [r2, #68]	; 0x44
 8004260:	e015      	b.n	800428e <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004274:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004278:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004288:	f043 030b 	orr.w	r3, r3, #11
 800428c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f003 fc64 	bl	8007b7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 fb99 	bl	8007a00 <USB_ReadInterrupts>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d124      	bne.n	8004324 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f003 fc29 	bl	8007b36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 fd67 	bl	8006dbc <USB_GetDevSpeed>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681c      	ldr	r4, [r3, #0]
 80042fa:	f001 f98d 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 80042fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	4620      	mov	r0, r4
 800430a:	f002 fab1 	bl	8006870 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f005 faf1 	bl	80098f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004322:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f003 fb69 	bl	8007a00 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b08      	cmp	r3, #8
 8004336:	d10a      	bne.n	800434e <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f005 face 	bl	80098da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f002 0208 	and.w	r2, r2, #8
 800434c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f003 fb54 	bl	8007a00 <USB_ReadInterrupts>
 8004358:	4603      	mov	r3, r0
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d122      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	e014      	b.n	800439e <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 faf2 	bl	800497c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	3301      	adds	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3e5      	bcc.n	8004374 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 fb27 	bl	8007a00 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043bc:	d13b      	bne.n	8004436 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e02b      	b.n	800441c <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3340      	adds	r3, #64	; 0x40
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d115      	bne.n	8004416 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da12      	bge.n	8004416 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	333f      	adds	r3, #63	; 0x3f
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800440c:	b2db      	uxtb	r3, r3
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fab3 	bl	800497c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	3301      	adds	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	429a      	cmp	r2, r3
 8004424:	d3ce      	bcc.n	80043c4 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fae0 	bl	8007a00 <USB_ReadInterrupts>
 8004440:	4603      	mov	r3, r0
 8004442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800444a:	d155      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800444c:	2301      	movs	r3, #1
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	e045      	b.n	80044de <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d12e      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800447a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	da2b      	bge.n	80044d8 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800448c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004490:	429a      	cmp	r2, r3
 8004492:	d121      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d4:	6053      	str	r3, [r2, #4]
            break;
 80044d6:	e007      	b.n	80044e8 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	3301      	adds	r3, #1
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d3b4      	bcc.n	8004452 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f003 fa7f 	bl	8007a00 <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d10a      	bne.n	8004524 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f005 fa68 	bl	80099e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f003 fa69 	bl	8007a00 <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b04      	cmp	r3, #4
 8004536:	d115      	bne.n	8004564 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f005 fa58 	bl	8009a00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	e000      	b.n	8004564 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004562:	bf00      	nop
    }
  }
}
 8004564:	3734      	adds	r7, #52	; 0x34
 8004566:	46bd      	mov	sp, r7
 8004568:	bd90      	pop	{r4, r7, pc}

0800456a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_PCD_SetAddress+0x1a>
 8004580:	2302      	movs	r3, #2
 8004582:	e013      	b.n	80045ac <HAL_PCD_SetAddress+0x42>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f003 f9ca 	bl	8007936 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	70fb      	strb	r3, [r7, #3]
 80045c6:	460b      	mov	r3, r1
 80045c8:	803b      	strh	r3, [r7, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	da0f      	bge.n	80045fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	3338      	adds	r3, #56	; 0x38
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	705a      	strb	r2, [r3, #1]
 80045f8:	e00f      	b.n	800461a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	3304      	adds	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004626:	883a      	ldrh	r2, [r7, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	78ba      	ldrb	r2, [r7, #2]
 8004630:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004644:	78bb      	ldrb	r3, [r7, #2]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d102      	bne.n	8004650 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_PCD_EP_Open+0xaa>
 800465a:	2302      	movs	r3, #2
 800465c:	e00e      	b.n	800467c <HAL_PCD_EP_Open+0xc8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	4618      	mov	r0, r3
 800466e:	f002 fbc3 	bl	8006df8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800467a:	7afb      	ldrb	r3, [r7, #11]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004694:	2b00      	cmp	r3, #0
 8004696:	da0f      	bge.n	80046b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 020f 	and.w	r2, r3, #15
 800469e:	4613      	mov	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	3338      	adds	r3, #56	; 0x38
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	3304      	adds	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	705a      	strb	r2, [r3, #1]
 80046b6:	e00f      	b.n	80046d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_PCD_EP_Close+0x6e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e00e      	b.n	8004710 <HAL_PCD_EP_Close+0x8c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4618      	mov	r0, r3
 8004702:	f002 fbff 	bl	8006f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	460b      	mov	r3, r1
 8004726:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004728:	7afb      	ldrb	r3, [r7, #11]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	b2da      	uxtb	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fca5 	bl	80070bc <USB_EPStartXfer>

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	460b      	mov	r3, r1
 80047b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ba:	7afb      	ldrb	r3, [r7, #11]
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3338      	adds	r3, #56	; 0x38
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	3304      	adds	r3, #4
 80047d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2201      	movs	r2, #1
 80047e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ea:	7afb      	ldrb	r3, [r7, #11]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6979      	ldr	r1, [r7, #20]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f002 fc5d 	bl	80070bc <USB_EPStartXfer>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 020f 	and.w	r2, r3, #15
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d901      	bls.n	800482a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e04e      	b.n	80048c8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800482a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800482e:	2b00      	cmp	r3, #0
 8004830:	da0f      	bge.n	8004852 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	3338      	adds	r3, #56	; 0x38
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	3304      	adds	r3, #4
 8004848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	705a      	strb	r2, [r3, #1]
 8004850:	e00d      	b.n	800486e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_PCD_EP_SetStall+0x82>
 800488a:	2302      	movs	r3, #2
 800488c:	e01c      	b.n	80048c8 <HAL_PCD_EP_SetStall+0xbc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	4618      	mov	r0, r3
 800489e:	f002 ff78 	bl	8007792 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d108      	bne.n	80048be <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048b6:	4619      	mov	r1, r3
 80048b8:	4610      	mov	r0, r2
 80048ba:	f003 f95f 	bl	8007b7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	460b      	mov	r3, r1
 80048da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 020f 	and.w	r2, r3, #15
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d901      	bls.n	80048ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e042      	b.n	8004974 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da0f      	bge.n	8004916 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	f003 020f 	and.w	r2, r3, #15
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	3338      	adds	r3, #56	; 0x38
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	3304      	adds	r3, #4
 800490c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	705a      	strb	r2, [r3, #1]
 8004914:	e00f      	b.n	8004936 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_PCD_EP_ClrStall+0x86>
 8004952:	2302      	movs	r3, #2
 8004954:	e00e      	b.n	8004974 <HAL_PCD_EP_ClrStall+0xa4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	4618      	mov	r0, r3
 8004966:	f002 ff81 	bl	800786c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498c:	2b00      	cmp	r3, #0
 800498e:	da0c      	bge.n	80049aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	3338      	adds	r3, #56	; 0x38
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	3304      	adds	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e00c      	b.n	80049c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	3304      	adds	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f002 fda8 	bl	8007520 <USB_EPStopXfer>
 80049d0:	4603      	mov	r3, r0
 80049d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049d4:	7afb      	ldrb	r3, [r7, #11]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b088      	sub	sp, #32
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	3338      	adds	r3, #56	; 0x38
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3304      	adds	r3, #4
 8004a04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d901      	bls.n	8004a16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e067      	b.n	8004ae6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	69fa      	ldr	r2, [r7, #28]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d902      	bls.n	8004a32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3303      	adds	r3, #3
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a3a:	e026      	b.n	8004a8a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d902      	bls.n	8004a58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3303      	adds	r3, #3
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68d9      	ldr	r1, [r3, #12]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	6978      	ldr	r0, [r7, #20]
 8004a6e:	f002 fe00 	bl	8007672 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	441a      	add	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	441a      	add	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d809      	bhi.n	8004ab4 <PCD_WriteEmptyTxFifo+0xd6>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d203      	bcs.n	8004ab4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1c3      	bne.n	8004a3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d811      	bhi.n	8004ae4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	6939      	ldr	r1, [r7, #16]
 8004adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	333c      	adds	r3, #60	; 0x3c
 8004b08:	3304      	adds	r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d124      	bne.n	8004b70 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	6093      	str	r3, [r2, #8]
 8004b44:	e01a      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2320      	movs	r3, #32
 8004b60:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f004 fe81 	bl	8009870 <HAL_PCD_DataOutStageCallback>
 8004b6e:	e005      	b.n	8004b7c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f004 fe7a 	bl	8009870 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	4f54310a 	.word	0x4f54310a

08004b8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	333c      	adds	r3, #60	; 0x3c
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <PCD_EP_OutSetupPacket_int+0x64>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d90e      	bls.n	8004be0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f004 fe33 	bl	800984c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	4f54300a 	.word	0x4f54300a

08004bf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
 8004c00:	4613      	mov	r3, r2
 8004c02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c12:	883b      	ldrh	r3, [r7, #0]
 8004c14:	0419      	lsls	r1, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c20:	e028      	b.n	8004c74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	0c1b      	lsrs	r3, r3, #16
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c30:	2300      	movs	r3, #0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e00d      	b.n	8004c52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	3340      	adds	r3, #64	; 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d3ec      	bcc.n	8004c36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c5c:	883b      	ldrh	r3, [r7, #0]
 8004c5e:	0418      	lsls	r0, r3, #16
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4302      	orrs	r2, r0
 8004c6c:	3340      	adds	r3, #64	; 0x40
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e304      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8087 	beq.w	8004dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cc0:	4b92      	ldr	r3, [pc, #584]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00c      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ccc:	4b8f      	ldr	r3, [pc, #572]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d112      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
 8004cd8:	4b8c      	ldr	r3, [pc, #560]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d06c      	beq.n	8004dcc <HAL_RCC_OscConfig+0x12c>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d168      	bne.n	8004dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e2de      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCC_OscConfig+0x76>
 8004d08:	4b80      	ldr	r3, [pc, #512]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7f      	ldr	r2, [pc, #508]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e02e      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x98>
 8004d1e:	4b7b      	ldr	r3, [pc, #492]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7a      	ldr	r2, [pc, #488]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a77      	ldr	r2, [pc, #476]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0xbc>
 8004d42:	4b72      	ldr	r3, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a71      	ldr	r2, [pc, #452]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6e      	ldr	r2, [pc, #440]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0xd4>
 8004d5c:	4b6b      	ldr	r3, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6a      	ldr	r2, [pc, #424]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a67      	ldr	r2, [pc, #412]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd ff42 	bl	8002c04 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd ff3e 	bl	8002c04 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e292      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0xe4>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fd ff2e 	bl	8002c04 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7fd ff2a 	bl	8002c04 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	; 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e27e      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x10c>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d063      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dda:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 030c 	and.w	r3, r3, #12
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d11c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x18c>
 8004df2:	4b46      	ldr	r3, [pc, #280]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d116      	bne.n	8004e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfe:	4b43      	ldr	r3, [pc, #268]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_RCC_OscConfig+0x176>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e252      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4939      	ldr	r1, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2a:	e03a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <HAL_RCC_OscConfig+0x270>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fd fee3 	bl	8002c04 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e42:	f7fd fedf 	bl	8002c04 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e233      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	4b2d      	ldr	r3, [pc, #180]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e60:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4927      	ldr	r1, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e76:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <HAL_RCC_OscConfig+0x270>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd fec2 	bl	8002c04 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7fd febe 	bl	8002c04 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e212      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03a      	beq.n	8004f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d019      	beq.n	8004eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb6:	4b17      	ldr	r3, [pc, #92]	; (8004f14 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	2201      	movs	r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd fea2 	bl	8002c04 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec4:	f7fd fe9e 	bl	8002c04 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1f2      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	f000 fbca 	bl	800567c <RCC_Delay>
 8004ee8:	e01c      	b.n	8004f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_RCC_OscConfig+0x274>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fe88 	bl	8002c04 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fd fe84 	bl	8002c04 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d908      	bls.n	8004f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1d8      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	42420000 	.word	0x42420000
 8004f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f18:	4b9b      	ldr	r3, [pc, #620]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e9      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 80a6 	beq.w	800507e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f36:	4b94      	ldr	r3, [pc, #592]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f42:	4b91      	ldr	r3, [pc, #580]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4a90      	ldr	r2, [pc, #576]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	61d3      	str	r3, [r2, #28]
 8004f4e:	4b8e      	ldr	r3, [pc, #568]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5e:	4b8b      	ldr	r3, [pc, #556]	; (800518c <HAL_RCC_OscConfig+0x4ec>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d118      	bne.n	8004f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f6a:	4b88      	ldr	r3, [pc, #544]	; (800518c <HAL_RCC_OscConfig+0x4ec>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a87      	ldr	r2, [pc, #540]	; (800518c <HAL_RCC_OscConfig+0x4ec>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f76:	f7fd fe45 	bl	8002c04 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7e:	f7fd fe41 	bl	8002c04 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b64      	cmp	r3, #100	; 0x64
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e195      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f90:	4b7e      	ldr	r3, [pc, #504]	; (800518c <HAL_RCC_OscConfig+0x4ec>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x312>
 8004fa4:	4b78      	ldr	r3, [pc, #480]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4a77      	ldr	r2, [pc, #476]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6213      	str	r3, [r2, #32]
 8004fb0:	e02d      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x334>
 8004fba:	4b73      	ldr	r3, [pc, #460]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a72      	ldr	r2, [pc, #456]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	6213      	str	r3, [r2, #32]
 8004fc6:	4b70      	ldr	r3, [pc, #448]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4a6f      	ldr	r2, [pc, #444]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	f023 0304 	bic.w	r3, r3, #4
 8004fd0:	6213      	str	r3, [r2, #32]
 8004fd2:	e01c      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d10c      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x356>
 8004fdc:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	4a69      	ldr	r2, [pc, #420]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fe2:	f043 0304 	orr.w	r3, r3, #4
 8004fe6:	6213      	str	r3, [r2, #32]
 8004fe8:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4a66      	ldr	r2, [pc, #408]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6213      	str	r3, [r2, #32]
 8004ff4:	e00b      	b.n	800500e <HAL_RCC_OscConfig+0x36e>
 8004ff6:	4b64      	ldr	r3, [pc, #400]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	4a63      	ldr	r2, [pc, #396]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	6213      	str	r3, [r2, #32]
 8005002:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4a60      	ldr	r2, [pc, #384]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d015      	beq.n	8005042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7fd fdf5 	bl	8002c04 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fd fdf1 	bl	8002c04 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e143      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	4b54      	ldr	r3, [pc, #336]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ee      	beq.n	800501e <HAL_RCC_OscConfig+0x37e>
 8005040:	e014      	b.n	800506c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005042:	f7fd fddf 	bl	8002c04 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fd fddb 	bl	8002c04 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e12d      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005060:	4b49      	ldr	r3, [pc, #292]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ee      	bne.n	800504a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005072:	4b45      	ldr	r3, [pc, #276]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a44      	ldr	r2, [pc, #272]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 808c 	beq.w	80051a0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005088:	4b3f      	ldr	r3, [pc, #252]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d10e      	bne.n	80050b4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005096:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d108      	bne.n	80050b4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80050a2:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d101      	bne.n	80050b4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e103      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d14e      	bne.n	800515a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80050bc:	4b32      	ldr	r3, [pc, #200]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80050c8:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0ef      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <HAL_RCC_OscConfig+0x4f0>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e2:	f7fd fd8f 	bl	8002c04 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ea:	f7fd fd8b 	bl	8002c04 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b64      	cmp	r3, #100	; 0x64
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e0df      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005108:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	491c      	ldr	r1, [pc, #112]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4918      	ldr	r1, [pc, #96]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005128:	4313      	orrs	r3, r2
 800512a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_RCC_OscConfig+0x4f0>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005132:	f7fd fd67 	bl	8002c04 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800513a:	f7fd fd63 	bl	8002c04 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	; 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0b7      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x49a>
 8005158:	e022      	b.n	80051a0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_RCC_OscConfig+0x4e8>)
 8005160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_OscConfig+0x4f0>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fd fd4a 	bl	8002c04 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005172:	e00f      	b.n	8005194 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005174:	f7fd fd46 	bl	8002c04 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d908      	bls.n	8005194 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e09a      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40007000 	.word	0x40007000
 8005190:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005194:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e9      	bne.n	8005174 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8088 	beq.w	80052ba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051aa:	4b46      	ldr	r3, [pc, #280]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d068      	beq.n	8005288 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d14d      	bne.n	800525a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCC_OscConfig+0x628>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c4:	f7fd fd1e 	bl	8002c04 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fd fd1a 	bl	8002c04 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e06e      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051de:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f2:	d10f      	bne.n	8005214 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80051f4:	4b33      	ldr	r3, [pc, #204]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4931      	ldr	r1, [pc, #196]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005202:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	f023 020f 	bic.w	r2, r3, #15
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	492d      	ldr	r1, [pc, #180]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005210:	4313      	orrs	r3, r2
 8005212:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005214:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	430b      	orrs	r3, r1
 8005226:	4927      	ldr	r1, [pc, #156]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <HAL_RCC_OscConfig+0x628>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fd fce7 	bl	8002c04 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd fce3 	bl	8002c04 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e037      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800524c:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x59a>
 8005258:	e02f      	b.n	80052ba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_RCC_OscConfig+0x628>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fd fcd0 	bl	8002c04 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fd fccc 	bl	8002c04 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e020      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x5c8>
 8005286:	e018      	b.n	80052ba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e013      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_RCC_OscConfig+0x624>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d001      	beq.n	80052ba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	42420060 	.word	0x42420060

080052cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0d0      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d910      	bls.n	8005310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b67      	ldr	r3, [pc, #412]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 0207 	bic.w	r2, r3, #7
 80052f6:	4965      	ldr	r1, [pc, #404]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0b8      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d020      	beq.n	800535e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005328:	4b59      	ldr	r3, [pc, #356]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a58      	ldr	r2, [pc, #352]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800532e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4a52      	ldr	r2, [pc, #328]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800534a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b50      	ldr	r3, [pc, #320]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	494d      	ldr	r1, [pc, #308]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d040      	beq.n	80053ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b47      	ldr	r3, [pc, #284]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d115      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e07f      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538a:	4b41      	ldr	r3, [pc, #260]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e073      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539a:	4b3d      	ldr	r3, [pc, #244]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06b      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4936      	ldr	r1, [pc, #216]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053bc:	f7fd fc22 	bl	8002c04 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fd fc1e 	bl	8002c04 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e053      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	4b2d      	ldr	r3, [pc, #180]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 020c 	and.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d1eb      	bne.n	80053c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ec:	4b27      	ldr	r3, [pc, #156]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d210      	bcs.n	800541c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 0207 	bic.w	r2, r3, #7
 8005402:	4922      	ldr	r1, [pc, #136]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCC_ClockConfig+0x1c0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e032      	b.n	8005482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4916      	ldr	r1, [pc, #88]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005436:	4313      	orrs	r3, r2
 8005438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005456:	4313      	orrs	r3, r2
 8005458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800545a:	f000 f821 	bl	80054a0 <HAL_RCC_GetSysClockFreq>
 800545e:	4602      	mov	r2, r0
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	490a      	ldr	r1, [pc, #40]	; (8005494 <HAL_RCC_ClockConfig+0x1c8>)
 800546c:	5ccb      	ldrb	r3, [r1, r3]
 800546e:	fa22 f303 	lsr.w	r3, r2, r3
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <HAL_RCC_ClockConfig+0x1cc>)
 8005474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005476:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1d0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fb80 	bl	8002b80 <HAL_InitTick>

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	0800d3e4 	.word	0x0800d3e4
 8005498:	20000000 	.word	0x20000000
 800549c:	20000004 	.word	0x20000004

080054a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b08e      	sub	sp, #56	; 0x38
 80054a6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	2300      	movs	r3, #0
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b0:	2300      	movs	r3, #0
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 80054b4:	2300      	movs	r3, #0
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054c4:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	f003 030c 	and.w	r3, r3, #12
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d002      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x3a>
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d003      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x40>
 80054d8:	e089      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054da:	4b4a      	ldr	r3, [pc, #296]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 80054dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054de:	e089      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	0c9b      	lsrs	r3, r3, #18
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <HAL_RCC_GetSysClockFreq+0x168>)
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d072      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80054f8:	4b41      	ldr	r3, [pc, #260]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	4b42      	ldr	r3, [pc, #264]	; (800560c <HAL_RCC_GetSysClockFreq+0x16c>)
 8005502:	5c9b      	ldrb	r3, [r3, r2]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005506:	4b3e      	ldr	r3, [pc, #248]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d053      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8005512:	4b3b      	ldr	r3, [pc, #236]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	3301      	adds	r3, #1
 800551e:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005520:	4b37      	ldr	r3, [pc, #220]	; (8005600 <HAL_RCC_GetSysClockFreq+0x160>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	3302      	adds	r3, #2
 800552c:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2200      	movs	r2, #0
 8005532:	469a      	mov	sl, r3
 8005534:	4693      	mov	fp, r2
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2200      	movs	r2, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	617a      	str	r2, [r7, #20]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	fb03 f20b 	mul.w	r2, r3, fp
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	fb0a f303 	mul.w	r3, sl, r3
 800554a:	4413      	add	r3, r2
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	fbaa 0102 	umull	r0, r1, sl, r2
 8005552:	440b      	add	r3, r1
 8005554:	4619      	mov	r1, r3
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 8005558:	fb03 f201 	mul.w	r2, r3, r1
 800555c:	2300      	movs	r3, #0
 800555e:	fb00 f303 	mul.w	r3, r0, r3
 8005562:	4413      	add	r3, r2
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 8005566:	fba0 4502 	umull	r4, r5, r0, r2
 800556a:	442b      	add	r3, r5
 800556c:	461d      	mov	r5, r3
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	2200      	movs	r2, #0
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	60fa      	str	r2, [r7, #12]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2200      	movs	r2, #0
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005582:	460b      	mov	r3, r1
 8005584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005588:	4652      	mov	r2, sl
 800558a:	fb02 f203 	mul.w	r2, r2, r3
 800558e:	465b      	mov	r3, fp
 8005590:	4684      	mov	ip, r0
 8005592:	fb0c f303 	mul.w	r3, ip, r3
 8005596:	4413      	add	r3, r2
 8005598:	4602      	mov	r2, r0
 800559a:	4651      	mov	r1, sl
 800559c:	fba2 8901 	umull	r8, r9, r2, r1
 80055a0:	444b      	add	r3, r9
 80055a2:	4699      	mov	r9, r3
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	4620      	mov	r0, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fb fd86 	bl	80010bc <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
 80055b8:	e007      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <HAL_RCC_GetSysClockFreq+0x164>)
 80055be:	fb03 f202 	mul.w	r2, r3, r2
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80055ca:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_RCC_GetSysClockFreq+0x168>)
 80055cc:	7b5b      	ldrb	r3, [r3, #13]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d108      	bne.n	80055e8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	637b      	str	r3, [r7, #52]	; 0x34
 80055dc:	e004      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	4a0b      	ldr	r2, [pc, #44]	; (8005610 <HAL_RCC_GetSysClockFreq+0x170>)
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055ee:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_GetSysClockFreq+0x174>)
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3738      	adds	r7, #56	; 0x38
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	017d7840 	.word	0x017d7840
 8005608:	0800d3fc 	.word	0x0800d3fc
 800560c:	0800d40c 	.word	0x0800d40c
 8005610:	003d0900 	.word	0x003d0900
 8005614:	007a1200 	.word	0x007a1200

08005618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800561c:	4b02      	ldr	r3, [pc, #8]	; (8005628 <HAL_RCC_GetHCLKFreq+0x10>)
 800561e:	681b      	ldr	r3, [r3, #0]
}
 8005620:	4618      	mov	r0, r3
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000000 	.word	0x20000000

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff2 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000
 8005650:	0800d3f4 	.word	0x0800d3f4

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffde 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	0adb      	lsrs	r3, r3, #11
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	0800d3f4 	.word	0x0800d3f4

0800567c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <RCC_Delay+0x34>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <RCC_Delay+0x38>)
 800568a:	fba2 2303 	umull	r2, r3, r2, r3
 800568e:	0a5b      	lsrs	r3, r3, #9
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005698:	bf00      	nop
  }
  while (Delay --);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	60fa      	str	r2, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f9      	bne.n	8005698 <RCC_Delay+0x1c>
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr
 80056b0:	20000000 	.word	0x20000000
 80056b4:	10624dd3 	.word	0x10624dd3

080056b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	2300      	movs	r3, #0
 80056c6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d07d      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80056d8:	2300      	movs	r3, #0
 80056da:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056dc:	4b8b      	ldr	r3, [pc, #556]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10d      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e8:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4a87      	ldr	r2, [pc, #540]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	61d3      	str	r3, [r2, #28]
 80056f4:	4b85      	ldr	r3, [pc, #532]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005700:	2301      	movs	r3, #1
 8005702:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	4b82      	ldr	r3, [pc, #520]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d118      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005710:	4b7f      	ldr	r3, [pc, #508]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7e      	ldr	r2, [pc, #504]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571c:	f7fd fa72 	bl	8002c04 <HAL_GetTick>
 8005720:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	e008      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005724:	f7fd fa6e 	bl	8002c04 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e0e5      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005736:	4b76      	ldr	r3, [pc, #472]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005742:	4b72      	ldr	r3, [pc, #456]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02e      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d027      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005760:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800576a:	4b6a      	ldr	r3, [pc, #424]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005770:	4b68      	ldr	r3, [pc, #416]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005776:	4a65      	ldr	r2, [pc, #404]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d014      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fd fa3d 	bl	8002c04 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	e00a      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fd fa39 	bl	8002c04 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d901      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0ae      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ee      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b0:	4b56      	ldr	r3, [pc, #344]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4953      	ldr	r1, [pc, #332]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057c2:	7efb      	ldrb	r3, [r7, #27]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c8:	4b50      	ldr	r3, [pc, #320]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4a4f      	ldr	r2, [pc, #316]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e0:	4b4a      	ldr	r3, [pc, #296]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4947      	ldr	r1, [pc, #284]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80057fe:	4b43      	ldr	r3, [pc, #268]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4940      	ldr	r1, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800580c:	4313      	orrs	r3, r2
 800580e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800581c:	4b3b      	ldr	r3, [pc, #236]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	4938      	ldr	r1, [pc, #224]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800582a:	4313      	orrs	r3, r2
 800582c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800582e:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800583a:	4b34      	ldr	r3, [pc, #208]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d148      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005850:	4b2e      	ldr	r3, [pc, #184]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d138      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800585c:	4b2b      	ldr	r3, [pc, #172]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005868:	4b28      	ldr	r3, [pc, #160]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e042      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800587c:	4b23      	ldr	r3, [pc, #140]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	4920      	ldr	r1, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800588a:	4313      	orrs	r3, r2
 800588c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	491c      	ldr	r1, [pc, #112]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800589c:	4313      	orrs	r3, r2
 800589e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80058a0:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fd f9ad 	bl	8002c04 <HAL_GetTick>
 80058aa:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ae:	f7fd f9a9 	bl	8002c04 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b64      	cmp	r3, #100	; 0x64
 80058ba:	d901      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e020      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80058cc:	e009      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d001      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e00f      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ee:	4b07      	ldr	r3, [pc, #28]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	40007000 	.word	0x40007000
 8005914:	42420440 	.word	0x42420440
 8005918:	42420070 	.word	0x42420070

0800591c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e076      	b.n	8005a1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593e:	d009      	beq.n	8005954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	61da      	str	r2, [r3, #28]
 8005946:	e005      	b.n	8005954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fe10 	bl	8002594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	ea42 0103 	orr.w	r1, r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	0c1a      	lsrs	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f002 0204 	and.w	r2, r2, #4
 80059fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_SPI_Transmit+0x22>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e12d      	b.n	8005ca2 <HAL_SPI_Transmit+0x27e>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a4e:	f7fd f8d9 	bl	8002c04 <HAL_GetTick>
 8005a52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d002      	beq.n	8005a6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
 8005a66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a68:	e116      	b.n	8005c98 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_SPI_Transmit+0x52>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a7a:	e10d      	b.n	8005c98 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2203      	movs	r2, #3
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d007      	beq.n	8005b02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d14f      	bne.n	8005bac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_SPI_Transmit+0xf6>
 8005b14:	8afb      	ldrh	r3, [r7, #22]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d142      	bne.n	8005ba0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	881a      	ldrh	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	1c9a      	adds	r2, r3, #2
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b3e:	e02f      	b.n	8005ba0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d112      	bne.n	8005b74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	1c9a      	adds	r2, r3, #2
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b72:	e015      	b.n	8005ba0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b74:	f7fd f846 	bl	8002c04 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d803      	bhi.n	8005b8c <HAL_SPI_Transmit+0x168>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8a:	d102      	bne.n	8005b92 <HAL_SPI_Transmit+0x16e>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b9e:	e07b      	b.n	8005c98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1ca      	bne.n	8005b40 <HAL_SPI_Transmit+0x11c>
 8005baa:	e050      	b.n	8005c4e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_SPI_Transmit+0x196>
 8005bb4:	8afb      	ldrh	r3, [r7, #22]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d144      	bne.n	8005c44 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005be0:	e030      	b.n	8005c44 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d113      	bne.n	8005c18 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c16:	e015      	b.n	8005c44 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c18:	f7fc fff4 	bl	8002c04 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d803      	bhi.n	8005c30 <HAL_SPI_Transmit+0x20c>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Transmit+0x212>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c42:	e029      	b.n	8005c98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1c9      	bne.n	8005be2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fbcc 	bl	80063f0 <SPI_EndRxTxTransaction>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e003      	b.n	8005c98 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af02      	add	r7, sp, #8
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cce:	e0fb      	b.n	8005ec8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d112      	bne.n	8005d00 <HAL_SPI_Receive+0x56>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10e      	bne.n	8005d00 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 f8ef 	bl	8005eda <HAL_SPI_TransmitReceive>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	e0e8      	b.n	8005ed2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_SPI_Receive+0x64>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e0e1      	b.n	8005ed2 <HAL_SPI_Receive+0x228>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d16:	f7fc ff75 	bl	8002c04 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Receive+0x7e>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d2c:	e0cc      	b.n	8005ec8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2204      	movs	r2, #4
 8005d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	88fa      	ldrh	r2, [r7, #6]
 8005d4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d74:	d10f      	bne.n	8005d96 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d16a      	bne.n	8005e92 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dbc:	e032      	b.n	8005e24 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d115      	bne.n	8005df8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f103 020c 	add.w	r2, r3, #12
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005df6:	e015      	b.n	8005e24 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df8:	f7fc ff04 	bl	8002c04 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d803      	bhi.n	8005e10 <HAL_SPI_Receive+0x166>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Receive+0x16c>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e22:	e051      	b.n	8005ec8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c7      	bne.n	8005dbe <HAL_SPI_Receive+0x114>
 8005e2e:	e035      	b.n	8005e9c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d113      	bne.n	8005e66 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	1c9a      	adds	r2, r3, #2
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e64:	e015      	b.n	8005e92 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e66:	f7fc fecd 	bl	8002c04 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d803      	bhi.n	8005e7e <HAL_SPI_Receive+0x1d4>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d102      	bne.n	8005e84 <HAL_SPI_Receive+0x1da>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e90:	e01a      	b.n	8005ec8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1c9      	bne.n	8005e30 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fa53 	bl	800634c <SPI_EndRxTransaction>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
 8005ebe:	e003      	b.n	8005ec8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b08c      	sub	sp, #48	; 0x30
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x26>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e198      	b.n	8006232 <HAL_SPI_TransmitReceive+0x358>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f08:	f7fc fe7c 	bl	8002c04 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d00f      	beq.n	8005f4a <HAL_SPI_TransmitReceive+0x70>
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f30:	d107      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x68>
 8005f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d003      	beq.n	8005f4a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f42:	2302      	movs	r3, #2
 8005f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f48:	e16d      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x82>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x82>
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d103      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f62:	e160      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d003      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2205      	movs	r2, #5
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	887a      	ldrh	r2, [r7, #2]
 8005fa0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d007      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd4:	d17c      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x10a>
 8005fde:	8b7b      	ldrh	r3, [r7, #26]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d16a      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	881a      	ldrh	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006008:	e057      	b.n	80060ba <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11b      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x176>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x176>
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d113      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d119      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x1b8>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d014      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	b292      	uxth	r2, r2
 8006074:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608e:	2301      	movs	r3, #1
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006092:	f7fc fdb7 	bl	8002c04 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609e:	429a      	cmp	r2, r3
 80060a0:	d80b      	bhi.n	80060ba <HAL_SPI_TransmitReceive+0x1e0>
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d007      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80060b8:	e0b5      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1a2      	bne.n	800600a <HAL_SPI_TransmitReceive+0x130>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d19d      	bne.n	800600a <HAL_SPI_TransmitReceive+0x130>
 80060ce:	e080      	b.n	80061d2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_TransmitReceive+0x204>
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d16f      	bne.n	80061be <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006104:	e05b      	b.n	80061be <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b02      	cmp	r3, #2
 8006112:	d11c      	bne.n	800614e <HAL_SPI_TransmitReceive+0x274>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <HAL_SPI_TransmitReceive+0x274>
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d114      	bne.n	800614e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d119      	bne.n	8006190 <HAL_SPI_TransmitReceive+0x2b6>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d014      	beq.n	8006190 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800618c:	2301      	movs	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006190:	f7fc fd38 	bl	8002c04 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619c:	429a      	cmp	r2, r3
 800619e:	d803      	bhi.n	80061a8 <HAL_SPI_TransmitReceive+0x2ce>
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d102      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x2d4>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80061bc:	e033      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d19e      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x22c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d199      	bne.n	8006106 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f90a 	bl	80063f0 <SPI_EndRxTxTransaction>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80061ee:	e01a      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621c:	e003      	b.n	8006226 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800622e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006232:	4618      	mov	r0, r3
 8006234:	3730      	adds	r7, #48	; 0x30
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800624c:	f7fc fcda 	bl	8002c04 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800625c:	f7fc fcd2 	bl	8002c04 <HAL_GetTick>
 8006260:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006262:	4b39      	ldr	r3, [pc, #228]	; (8006348 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	015b      	lsls	r3, r3, #5
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006272:	e054      	b.n	800631e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d050      	beq.n	800631e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800627c:	f7fc fcc2 	bl	8002c04 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	429a      	cmp	r2, r3
 800628a:	d902      	bls.n	8006292 <SPI_WaitFlagStateUntilTimeout+0x56>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d13d      	bne.n	800630e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062aa:	d111      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d004      	beq.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062be:	d107      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d8:	d10f      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e017      	b.n	800633e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3b01      	subs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4013      	ands	r3, r2
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	429a      	cmp	r2, r3
 800633a:	d19b      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000000 	.word	0x20000000

0800634c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006360:	d111      	bne.n	8006386 <SPI_EndRxTransaction+0x3a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800636a:	d004      	beq.n	8006376 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006374:	d107      	bne.n	8006386 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006384:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800638e:	d117      	bne.n	80063c0 <SPI_EndRxTransaction+0x74>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d112      	bne.n	80063c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2101      	movs	r1, #1
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff ff49 	bl	800623c <SPI_WaitFlagStateUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01a      	beq.n	80063e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e013      	b.n	80063e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2200      	movs	r2, #0
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff ff36 	bl	800623c <SPI_WaitFlagStateUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e000      	b.n	80063e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff18 	bl	800623c <SPI_WaitFlagStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e000      	b.n	8006424 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e041      	b.n	80064c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fc fa60 	bl	8002918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f000 f82e 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
	...

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <TIM_Base_SetConfig+0xc8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00f      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d00b      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <TIM_Base_SetConfig+0xcc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a29      	ldr	r2, [pc, #164]	; (800659c <TIM_Base_SetConfig+0xd0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0x38>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <TIM_Base_SetConfig+0xd4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d108      	bne.n	8006516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <TIM_Base_SetConfig+0xc8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00f      	beq.n	800653e <TIM_Base_SetConfig+0x72>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d00b      	beq.n	800653e <TIM_Base_SetConfig+0x72>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <TIM_Base_SetConfig+0xcc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d007      	beq.n	800653e <TIM_Base_SetConfig+0x72>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1a      	ldr	r2, [pc, #104]	; (800659c <TIM_Base_SetConfig+0xd0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_Base_SetConfig+0x72>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <TIM_Base_SetConfig+0xd4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d108      	bne.n	8006550 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a07      	ldr	r2, [pc, #28]	; (8006594 <TIM_Base_SetConfig+0xc8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	615a      	str	r2, [r3, #20]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40000400 	.word	0x40000400
 800659c:	40000800 	.word	0x40000800
 80065a0:	40000c00 	.word	0x40000c00

080065a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e04b      	b.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a19      	ldr	r2, [pc, #100]	; (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006608:	d00e      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a12      	ldr	r2, [pc, #72]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00

08006670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e042      	b.n	8006708 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fc f9b0 	bl	80029fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2224      	movs	r2, #36	; 0x24
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f82b 	bl	8006710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800674a:	f023 030c 	bic.w	r3, r3, #12
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	430b      	orrs	r3, r1
 8006756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <UART_SetConfig+0x114>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d103      	bne.n	8006780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006778:	f7fe ff6c 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	e002      	b.n	8006786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fe ff54 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 8006784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009a      	lsls	r2, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <UART_SetConfig+0x118>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	0119      	lsls	r1, r3, #4
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009a      	lsls	r2, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <UART_SetConfig+0x118>)
 80067be:	fba3 0302 	umull	r0, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	2064      	movs	r0, #100	; 0x64
 80067c6:	fb00 f303 	mul.w	r3, r0, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	3332      	adds	r3, #50	; 0x32
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <UART_SetConfig+0x118>)
 80067d2:	fba2 2303 	umull	r2, r3, r2, r3
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067dc:	4419      	add	r1, r3
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009a      	lsls	r2, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f4:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <UART_SetConfig+0x118>)
 80067f6:	fba3 0302 	umull	r0, r3, r3, r2
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	2064      	movs	r0, #100	; 0x64
 80067fe:	fb00 f303 	mul.w	r3, r0, r3
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	3332      	adds	r3, #50	; 0x32
 8006808:	4a07      	ldr	r2, [pc, #28]	; (8006828 <UART_SetConfig+0x118>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	f003 020f 	and.w	r2, r3, #15
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	440a      	add	r2, r1
 800681a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40013800 	.word	0x40013800
 8006828:	51eb851f 	.word	0x51eb851f

0800682c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800682c:	b084      	sub	sp, #16
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	f107 001c 	add.w	r0, r7, #28
 800683a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 f9de 	bl	8007c0c <USB_CoreReset>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800686c:	b004      	add	sp, #16
 800686e:	4770      	bx	lr

08006870 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d165      	bne.n	8006950 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4a3e      	ldr	r2, [pc, #248]	; (8006980 <USB_SetTurnaroundTime+0x110>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d906      	bls.n	800689a <USB_SetTurnaroundTime+0x2a>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <USB_SetTurnaroundTime+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d202      	bcs.n	800689a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006894:	230f      	movs	r3, #15
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	e05c      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4a39      	ldr	r2, [pc, #228]	; (8006984 <USB_SetTurnaroundTime+0x114>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d306      	bcc.n	80068b0 <USB_SetTurnaroundTime+0x40>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	4a38      	ldr	r2, [pc, #224]	; (8006988 <USB_SetTurnaroundTime+0x118>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d202      	bcs.n	80068b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068aa:	230e      	movs	r3, #14
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e051      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4a35      	ldr	r2, [pc, #212]	; (8006988 <USB_SetTurnaroundTime+0x118>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d306      	bcc.n	80068c6 <USB_SetTurnaroundTime+0x56>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4a34      	ldr	r2, [pc, #208]	; (800698c <USB_SetTurnaroundTime+0x11c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d202      	bcs.n	80068c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068c0:	230d      	movs	r3, #13
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e046      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4a30      	ldr	r2, [pc, #192]	; (800698c <USB_SetTurnaroundTime+0x11c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d306      	bcc.n	80068dc <USB_SetTurnaroundTime+0x6c>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4a2f      	ldr	r2, [pc, #188]	; (8006990 <USB_SetTurnaroundTime+0x120>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d802      	bhi.n	80068dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068d6:	230c      	movs	r3, #12
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e03b      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <USB_SetTurnaroundTime+0x120>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d906      	bls.n	80068f2 <USB_SetTurnaroundTime+0x82>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <USB_SetTurnaroundTime+0x124>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d802      	bhi.n	80068f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068ec:	230b      	movs	r3, #11
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e030      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a27      	ldr	r2, [pc, #156]	; (8006994 <USB_SetTurnaroundTime+0x124>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d906      	bls.n	8006908 <USB_SetTurnaroundTime+0x98>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4a26      	ldr	r2, [pc, #152]	; (8006998 <USB_SetTurnaroundTime+0x128>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d802      	bhi.n	8006908 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006902:	230a      	movs	r3, #10
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e025      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a23      	ldr	r2, [pc, #140]	; (8006998 <USB_SetTurnaroundTime+0x128>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d906      	bls.n	800691e <USB_SetTurnaroundTime+0xae>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4a22      	ldr	r2, [pc, #136]	; (800699c <USB_SetTurnaroundTime+0x12c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d202      	bcs.n	800691e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006918:	2309      	movs	r3, #9
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e01a      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <USB_SetTurnaroundTime+0x12c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d306      	bcc.n	8006934 <USB_SetTurnaroundTime+0xc4>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4a1d      	ldr	r2, [pc, #116]	; (80069a0 <USB_SetTurnaroundTime+0x130>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d802      	bhi.n	8006934 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800692e:	2308      	movs	r3, #8
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e00f      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a1a      	ldr	r2, [pc, #104]	; (80069a0 <USB_SetTurnaroundTime+0x130>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d906      	bls.n	800694a <USB_SetTurnaroundTime+0xda>
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4a19      	ldr	r2, [pc, #100]	; (80069a4 <USB_SetTurnaroundTime+0x134>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d202      	bcs.n	800694a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006944:	2307      	movs	r3, #7
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e004      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800694a:	2306      	movs	r3, #6
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	e001      	b.n	8006954 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006950:	2309      	movs	r3, #9
 8006952:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800696c:	431a      	orrs	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	00d8acbf 	.word	0x00d8acbf
 8006984:	00e4e1c0 	.word	0x00e4e1c0
 8006988:	00f42400 	.word	0x00f42400
 800698c:	01067380 	.word	0x01067380
 8006990:	011a499f 	.word	0x011a499f
 8006994:	01312cff 	.word	0x01312cff
 8006998:	014ca43f 	.word	0x014ca43f
 800699c:	016e3600 	.word	0x016e3600
 80069a0:	01a6ab1f 	.word	0x01a6ab1f
 80069a4:	01e84800 	.word	0x01e84800

080069a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f043 0201 	orr.w	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr

080069c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f023 0201 	bic.w	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d115      	bne.n	8006a36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fc f8fe 	bl	8002c18 <HAL_Delay>
      ms++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 f87a 	bl	8007b1c <USB_GetMode>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d01e      	beq.n	8006a6c <USB_SetCurrentMode+0x84>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b31      	cmp	r3, #49	; 0x31
 8006a32:	d9f0      	bls.n	8006a16 <USB_SetCurrentMode+0x2e>
 8006a34:	e01a      	b.n	8006a6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d115      	bne.n	8006a68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a48:	2001      	movs	r0, #1
 8006a4a:	f7fc f8e5 	bl	8002c18 <HAL_Delay>
      ms++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f861 	bl	8007b1c <USB_GetMode>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <USB_SetCurrentMode+0x84>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b31      	cmp	r3, #49	; 0x31
 8006a64:	d9f0      	bls.n	8006a48 <USB_SetCurrentMode+0x60>
 8006a66:	e001      	b.n	8006a6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e005      	b.n	8006a78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b32      	cmp	r3, #50	; 0x32
 8006a70:	d101      	bne.n	8006a76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a80:	b084      	sub	sp, #16
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	e009      	b.n	8006ab4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	3340      	adds	r3, #64	; 0x40
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b0e      	cmp	r3, #14
 8006ab8:	d9f2      	bls.n	8006aa0 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006acc:	461a      	mov	r2, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ad2:	2103      	movs	r1, #3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f959 	bl	8006d8c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ada:	2110      	movs	r1, #16
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f8f1 	bl	8006cc4 <USB_FlushTxFifo>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f91d 	bl	8006d2c <USB_FlushRxFifo>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b02:	461a      	mov	r2, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	e043      	b.n	8006bae <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b3c:	d118      	bne.n	8006b70 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	e013      	b.n	8006b82 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	461a      	mov	r2, r3
 8006b68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e008      	b.n	8006b82 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2300      	movs	r3, #0
 8006b80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	461a      	mov	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3301      	adds	r3, #1
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d3b7      	bcc.n	8006b26 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	e043      	b.n	8006c44 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bd2:	d118      	bne.n	8006c06 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	461a      	mov	r2, r3
 8006be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e013      	b.n	8006c18 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e008      	b.n	8006c18 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c12:	461a      	mov	r2, r3
 8006c14:	2300      	movs	r3, #0
 8006c16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	461a      	mov	r2, r3
 8006c26:	2300      	movs	r3, #0
 8006c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	461a      	mov	r2, r3
 8006c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d3b7      	bcc.n	8006bbc <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f043 0210 	orr.w	r2, r3, #16
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <USB_DevInit+0x240>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f043 0208 	orr.w	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d107      	bne.n	8006cae <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca6:	f043 0304 	orr.w	r3, r3, #4
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cba:	b004      	add	sp, #16
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	803c3800 	.word	0x803c3800

08006cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a13      	ldr	r2, [pc, #76]	; (8006d28 <USB_FlushTxFifo+0x64>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d901      	bls.n	8006ce4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e01b      	b.n	8006d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	daf2      	bge.n	8006cd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	019b      	lsls	r3, r3, #6
 8006cf4:	f043 0220 	orr.w	r2, r3, #32
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <USB_FlushTxFifo+0x64>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d0f0      	beq.n	8006cfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	00030d40 	.word	0x00030d40

08006d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4a11      	ldr	r2, [pc, #68]	; (8006d88 <USB_FlushRxFifo+0x5c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e018      	b.n	8006d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	daf2      	bge.n	8006d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2210      	movs	r2, #16
 8006d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <USB_FlushRxFifo+0x5c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e006      	b.n	8006d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	2b10      	cmp	r3, #16
 8006d78:	d0f0      	beq.n	8006d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	00030d40 	.word	0x00030d40

08006d8c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dac:	4313      	orrs	r3, r2
 8006dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0306 	and.w	r3, r3, #6
 8006dd4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d002      	beq.n	8006de2 <USB_GetDevSpeed+0x26>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b06      	cmp	r3, #6
 8006de0:	d102      	bne.n	8006de8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006de2:	2302      	movs	r3, #2
 8006de4:	75fb      	strb	r3, [r7, #23]
 8006de6:	e001      	b.n	8006dec <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006de8:	230f      	movs	r3, #15
 8006dea:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d13a      	bne.n	8006e8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	2101      	movs	r1, #1
 8006e26:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e32:	4313      	orrs	r3, r2
 8006e34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d155      	bne.n	8006ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e70:	4313      	orrs	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	e036      	b.n	8006ef8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e90:	69da      	ldr	r2, [r3, #28]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d11a      	bne.n	8006ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	791b      	ldrb	r3, [r3, #4]
 8006edc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr

08006f04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d161      	bne.n	8006fe4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f36:	d11f      	bne.n	8006f78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	2101      	movs	r1, #1
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	43db      	mvns	r3, r3
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f98:	4013      	ands	r3, r2
 8006f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	2101      	movs	r1, #1
 8006fae:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	0159      	lsls	r1, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	440b      	add	r3, r1
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4b35      	ldr	r3, [pc, #212]	; (80070b4 <USB_DeactivateEndpoint+0x1b0>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]
 8006fe2:	e060      	b.n	80070a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ffa:	d11f      	bne.n	800703c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	0151      	lsls	r1, r2, #5
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	440a      	add	r2, r1
 8007012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800701a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800703a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	43db      	mvns	r3, r3
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800705c:	4013      	ands	r3, r2
 800705e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	43db      	mvns	r3, r3
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007080:	4013      	ands	r3, r2
 8007082:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	0159      	lsls	r1, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	440b      	add	r3, r1
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	4619      	mov	r1, r3
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <USB_DeactivateEndpoint+0x1b4>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	ec337800 	.word	0xec337800
 80070b8:	eff37800 	.word	0xeff37800

080070bc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 8128 	bne.w	800732a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d132      	bne.n	8007148 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	4413      	add	r3, r2
 800712e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	0151      	lsls	r1, r2, #5
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	440a      	add	r2, r1
 800713c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007140:	0cdb      	lsrs	r3, r3, #19
 8007142:	04db      	lsls	r3, r3, #19
 8007144:	6113      	str	r3, [r2, #16]
 8007146:	e092      	b.n	800726e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	0cdb      	lsrs	r3, r3, #19
 8007164:	04db      	lsls	r3, r3, #19
 8007166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800718a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d11a      	bne.n	80071c8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	d903      	bls.n	80071a6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	0151      	lsls	r1, r2, #5
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	440a      	add	r2, r1
 80071bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071c4:	6113      	str	r3, [r2, #16]
 80071c6:	e01b      	b.n	8007200 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6919      	ldr	r1, [r3, #16]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	440b      	add	r3, r1
 80071e0:	1e59      	subs	r1, r3, #1
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80071ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071ec:	4b8d      	ldr	r3, [pc, #564]	; (8007424 <USB_EPStartXfer+0x368>)
 80071ee:	400b      	ands	r3, r1
 80071f0:	6939      	ldr	r1, [r7, #16]
 80071f2:	0148      	lsls	r0, r1, #5
 80071f4:	6979      	ldr	r1, [r7, #20]
 80071f6:	4401      	add	r1, r0
 80071f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071fc:	4313      	orrs	r3, r2
 80071fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	0148      	lsls	r0, r1, #5
 800721a:	6979      	ldr	r1, [r7, #20]
 800721c:	4401      	add	r1, r0
 800721e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007222:	4313      	orrs	r3, r2
 8007224:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	791b      	ldrb	r3, [r3, #4]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d11f      	bne.n	800726e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007248:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800724c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800726c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800728c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	791b      	ldrb	r3, [r3, #4]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d015      	beq.n	80072c2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8139 	beq.w	8007512 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072bc:	4313      	orrs	r3, r2
 80072be:	634b      	str	r3, [r1, #52]	; 0x34
 80072c0:	e127      	b.n	8007512 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d110      	bne.n	80072f4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	e00f      	b.n	8007314 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007312:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68d9      	ldr	r1, [r3, #12]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	b29b      	uxth	r3, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9a5 	bl	8007672 <USB_WritePacket>
 8007328:	e0f3      	b.n	8007512 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	0cdb      	lsrs	r3, r3, #19
 8007346:	04db      	lsls	r3, r3, #19
 8007348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800736c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d12f      	bne.n	80073d4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	0148      	lsls	r0, r1, #5
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	4401      	add	r1, r0
 80073aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073ae:	4313      	orrs	r3, r2
 80073b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073d0:	6113      	str	r3, [r2, #16]
 80073d2:	e061      	b.n	8007498 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d125      	bne.n	8007428 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f2:	6939      	ldr	r1, [r7, #16]
 80073f4:	0148      	lsls	r0, r1, #5
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	4401      	add	r1, r0
 80073fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073fe:	4313      	orrs	r3, r2
 8007400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007420:	6113      	str	r3, [r2, #16]
 8007422:	e039      	b.n	8007498 <USB_EPStartXfer+0x3dc>
 8007424:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	4413      	add	r3, r2
 8007432:	1e5a      	subs	r2, r3, #1
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	89fa      	ldrh	r2, [r7, #14]
 8007444:	fb03 f202 	mul.w	r2, r3, r2
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	04d9      	lsls	r1, r3, #19
 800745e:	4b2f      	ldr	r3, [pc, #188]	; (800751c <USB_EPStartXfer+0x460>)
 8007460:	400b      	ands	r3, r1
 8007462:	6939      	ldr	r1, [r7, #16]
 8007464:	0148      	lsls	r0, r1, #5
 8007466:	6979      	ldr	r1, [r7, #20]
 8007468:	4401      	add	r1, r0
 800746a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800746e:	4313      	orrs	r3, r2
 8007470:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007488:	6939      	ldr	r1, [r7, #16]
 800748a:	0148      	lsls	r0, r1, #5
 800748c:	6979      	ldr	r1, [r7, #20]
 800748e:	4401      	add	r1, r0
 8007490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007494:	4313      	orrs	r3, r2
 8007496:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	791b      	ldrb	r3, [r3, #4]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d128      	bne.n	80074f2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d110      	bne.n	80074d2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e00f      	b.n	80074f2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007510:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	1ff80000 	.word	0x1ff80000

08007520 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d14a      	bne.n	80075d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007556:	f040 8086 	bne.w	8007666 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800757c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d902      	bls.n	80075b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
          break;
 80075b6:	e056      	b.n	8007666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d0:	d0e7      	beq.n	80075a2 <USB_EPStopXfer+0x82>
 80075d2:	e048      	b.n	8007666 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ec:	d13b      	bne.n	8007666 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	440a      	add	r2, r1
 8007608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007610:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007634:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3301      	adds	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007642:	4293      	cmp	r3, r2
 8007644:	d902      	bls.n	800764c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
          break;
 800764a:	e00c      	b.n	8007666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007664:	d0e7      	beq.n	8007636 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
}
 8007668:	4618      	mov	r0, r3
 800766a:	371c      	adds	r7, #28
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr

08007672 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007672:	b480      	push	{r7}
 8007674:	b089      	sub	sp, #36	; 0x24
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	4611      	mov	r1, r2
 800767e:	461a      	mov	r2, r3
 8007680:	460b      	mov	r3, r1
 8007682:	71fb      	strb	r3, [r7, #7]
 8007684:	4613      	mov	r3, r2
 8007686:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007690:	88bb      	ldrh	r3, [r7, #4]
 8007692:	3303      	adds	r3, #3
 8007694:	089b      	lsrs	r3, r3, #2
 8007696:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007698:	2300      	movs	r3, #0
 800769a:	61bb      	str	r3, [r7, #24]
 800769c:	e018      	b.n	80076d0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	031a      	lsls	r2, r3, #12
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076aa:	461a      	mov	r2, r3
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6013      	str	r3, [r2, #0]
    pSrc++;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	3301      	adds	r3, #1
 80076c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	3301      	adds	r3, #1
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d3e2      	bcc.n	800769e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3724      	adds	r7, #36	; 0x24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr

080076e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b08b      	sub	sp, #44	; 0x2c
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	b29b      	uxth	r3, r3
 8007700:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800770a:	2300      	movs	r3, #0
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	e014      	b.n	800773a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	601a      	str	r2, [r3, #0]
    pDest++;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	3301      	adds	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	3301      	adds	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	3301      	adds	r3, #1
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	3301      	adds	r3, #1
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	3301      	adds	r3, #1
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	6a3a      	ldr	r2, [r7, #32]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	429a      	cmp	r2, r3
 8007740:	d3e6      	bcc.n	8007710 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007742:	8bfb      	ldrh	r3, [r7, #30]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01e      	beq.n	8007786 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007752:	461a      	mov	r2, r3
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
 8007768:	b2da      	uxtb	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	701a      	strb	r2, [r3, #0]
      i++;
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	3301      	adds	r3, #1
 8007772:	623b      	str	r3, [r7, #32]
      pDest++;
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	3301      	adds	r3, #1
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800777a:	8bfb      	ldrh	r3, [r7, #30]
 800777c:	3b01      	subs	r3, #1
 800777e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007780:	8bfb      	ldrh	r3, [r7, #30]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ea      	bne.n	800775c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007788:	4618      	mov	r0, r3
 800778a:	372c      	adds	r7, #44	; 0x2c
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr

08007792 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d12c      	bne.n	8007808 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	db12      	blt.n	80077e6 <USB_EPSetStall+0x54>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00f      	beq.n	80077e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	e02b      	b.n	8007860 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	db12      	blt.n	8007840 <USB_EPSetStall+0xae>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00f      	beq.n	8007840 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800783e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800785e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr

0800786c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d128      	bne.n	80078da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	791b      	ldrb	r3, [r3, #4]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d003      	beq.n	80078b8 <USB_EPClearStall+0x4c>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d138      	bne.n	800792a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e027      	b.n	800792a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d003      	beq.n	800790a <USB_EPClearStall+0x9e>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d10f      	bne.n	800792a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007928:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007958:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800799a:	f023 0303 	bic.w	r3, r3, #3
 800799e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ae:	f023 0302 	bic.w	r3, r3, #2
 80079b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ee:	f043 0302 	orr.w	r3, r3, #2
 80079f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4013      	ands	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a18:	68fb      	ldr	r3, [r7, #12]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	4013      	ands	r3, r2
 8007a46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	0c1b      	lsrs	r3, r3, #16
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	4013      	ands	r3, r2
 8007a78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	b29b      	uxth	r3, r3
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bc80      	pop	{r7}
 8007a86:	4770      	bx	lr

08007a88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b087      	sub	sp, #28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	fa22 f303 	lsr.w	r3, r2, r3
 8007af2:	01db      	lsls	r3, r3, #7
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b10:	68bb      	ldr	r3, [r7, #8]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr

08007b1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	f003 0301 	and.w	r3, r3, #1
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bc80      	pop	{r7}
 8007b34:	4770      	bx	lr

08007b36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b54:	f023 0307 	bic.w	r3, r3, #7
 8007b58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
	...

08007b7c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	333c      	adds	r3, #60	; 0x3c
 8007b8e:	3304      	adds	r3, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <USB_EP0_OutStart+0x8c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d90a      	bls.n	8007bb2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bac:	d101      	bne.n	8007bb2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e024      	b.n	8007bfc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	461a      	mov	r2, r3
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f043 0318 	orr.w	r3, r3, #24
 8007be4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007bf8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	4f54300a 	.word	0x4f54300a

08007c0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a12      	ldr	r2, [pc, #72]	; (8007c6c <USB_CoreReset+0x60>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d901      	bls.n	8007c2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e01b      	b.n	8007c62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	daf2      	bge.n	8007c18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f043 0201 	orr.w	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <USB_CoreReset+0x60>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d901      	bls.n	8007c54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e006      	b.n	8007c62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d0f0      	beq.n	8007c42 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	00030d40 	.word	0x00030d40

08007c70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7c1b      	ldrb	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d115      	bne.n	8007cb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	2181      	movs	r1, #129	; 0x81
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 ff22 	bl	8009ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 ff18 	bl	8009ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007cb2:	e012      	b.n	8007cda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cb4:	2340      	movs	r3, #64	; 0x40
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	2181      	movs	r1, #129	; 0x81
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 ff0d 	bl	8009ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	2202      	movs	r2, #2
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 ff04 	bl	8009ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cda:	2308      	movs	r3, #8
 8007cdc:	2203      	movs	r2, #3
 8007cde:	2182      	movs	r1, #130	; 0x82
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fefa 	bl	8009ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cf0:	f002 f81a 	bl	8009d28 <USBD_static_malloc>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d102      	bne.n	8007d0c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d06:	2301      	movs	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	e026      	b.n	8007d5a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d12:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7c1b      	ldrb	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d40:	2101      	movs	r1, #1
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 ffb9 	bl	8009cba <USBD_LL_PrepareReceive>
 8007d48:	e007      	b.n	8007d5a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	2101      	movs	r1, #1
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 ffb0 	bl	8009cba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d74:	2181      	movs	r1, #129	; 0x81
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fed5 	bl	8009b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d82:	2101      	movs	r1, #1
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fece 	bl	8009b26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d92:	2182      	movs	r1, #130	; 0x82
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fec6 	bl	8009b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00e      	beq.n	8007dc8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 ffc0 	bl	8009d40 <USBD_static_free>
    pdev->pClassData = NULL;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d039      	beq.n	8007e70 <USBD_CDC_Setup+0x9e>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d17f      	bne.n	8007f00 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d029      	beq.n	8007e5c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b25b      	sxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	da11      	bge.n	8007e36 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	88d2      	ldrh	r2, [r2, #6]
 8007e24:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e26:	6939      	ldr	r1, [r7, #16]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	88db      	ldrh	r3, [r3, #6]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fa41 	bl	80092b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e34:	e06b      	b.n	8007f0e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	785a      	ldrb	r2, [r3, #1]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e4c:	6939      	ldr	r1, [r7, #16]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88db      	ldrh	r3, [r3, #6]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fa5c 	bl	8009312 <USBD_CtlPrepareRx>
      break;
 8007e5a:	e058      	b.n	8007f0e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	7850      	ldrb	r0, [r2, #1]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	4798      	blx	r3
      break;
 8007e6e:	e04e      	b.n	8007f0e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b0b      	cmp	r3, #11
 8007e76:	d02e      	beq.n	8007ed6 <USBD_CDC_Setup+0x104>
 8007e78:	2b0b      	cmp	r3, #11
 8007e7a:	dc38      	bgt.n	8007eee <USBD_CDC_Setup+0x11c>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <USBD_CDC_Setup+0xb4>
 8007e80:	2b0a      	cmp	r3, #10
 8007e82:	d014      	beq.n	8007eae <USBD_CDC_Setup+0xdc>
 8007e84:	e033      	b.n	8007eee <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	d107      	bne.n	8007ea0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e90:	f107 030c 	add.w	r3, r7, #12
 8007e94:	2202      	movs	r2, #2
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fa0c 	bl	80092b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e9e:	e02e      	b.n	8007efe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 f99d 	bl	80091e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	75fb      	strb	r3, [r7, #23]
          break;
 8007eac:	e027      	b.n	8007efe <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d107      	bne.n	8007ec8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eb8:	f107 030f 	add.w	r3, r7, #15
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 f9f8 	bl	80092b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ec6:	e01a      	b.n	8007efe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 f989 	bl	80091e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed4:	e013      	b.n	8007efe <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d00d      	beq.n	8007efc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f97d 	bl	80091e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eec:	e006      	b.n	8007efc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f976 	bl	80091e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8007efa:	e000      	b.n	8007efe <USBD_CDC_Setup+0x12c>
          break;
 8007efc:	bf00      	nop
      }
      break;
 8007efe:	e006      	b.n	8007f0e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f96d 	bl	80091e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0c:	bf00      	nop
  }

  return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d03a      	beq.n	8007fb4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	331c      	adds	r3, #28
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d029      	beq.n	8007fa8 <USBD_CDC_DataIn+0x90>
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	331c      	adds	r3, #28
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	78f9      	ldrb	r1, [r7, #3]
 8007f68:	68b8      	ldr	r0, [r7, #8]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	440b      	add	r3, r1
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4403      	add	r3, r0
 8007f74:	3344      	adds	r3, #68	; 0x44
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d110      	bne.n	8007fa8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	331c      	adds	r3, #28
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f9a:	78f9      	ldrb	r1, [r7, #3]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 fe67 	bl	8009c74 <USBD_LL_Transmit>
 8007fa6:	e003      	b.n	8007fb0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 fe92 	bl	8009d00 <USBD_LL_GetRxDataSize>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00d      	beq.n	800800a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008002:	4611      	mov	r1, r2
 8008004:	4798      	blx	r3

    return USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e000      	b.n	800800c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800800a:	2302      	movs	r3, #2
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802a:	2b00      	cmp	r3, #0
 800802c:	d015      	beq.n	800805a <USBD_CDC_EP0_RxReady+0x46>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008034:	2bff      	cmp	r3, #255	; 0xff
 8008036:	d010      	beq.n	800805a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008046:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800804e:	b292      	uxth	r2, r2
 8008050:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2243      	movs	r2, #67	; 0x43
 8008070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008072:	4b03      	ldr	r3, [pc, #12]	; (8008080 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000094 	.word	0x20000094

08008084 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2243      	movs	r2, #67	; 0x43
 8008090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008092:	4b03      	ldr	r3, [pc, #12]	; (80080a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008094:	4618      	mov	r0, r3
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	20000050 	.word	0x20000050

080080a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2243      	movs	r2, #67	; 0x43
 80080b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080b2:	4b03      	ldr	r3, [pc, #12]	; (80080c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	200000d8 	.word	0x200000d8

080080c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	220a      	movs	r2, #10
 80080d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080d2:	4b03      	ldr	r3, [pc, #12]	; (80080e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	2000000c 	.word	0x2000000c

080080e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080ee:	2302      	movs	r3, #2
 80080f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr

08008142 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008152:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr

08008168 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008176:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01c      	beq.n	80081bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008188:	2b00      	cmp	r3, #0
 800818a:	d115      	bne.n	80081b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2181      	movs	r1, #129	; 0x81
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 fd60 	bl	8009c74 <USBD_LL_Transmit>

      return USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e002      	b.n	80081be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d017      	beq.n	8008210 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7c1b      	ldrb	r3, [r3, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081f2:	2101      	movs	r1, #1
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fd60 	bl	8009cba <USBD_LL_PrepareReceive>
 80081fa:	e007      	b.n	800820c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008202:	2340      	movs	r3, #64	; 0x40
 8008204:	2101      	movs	r1, #1
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fd57 	bl	8009cba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	e000      	b.n	8008212 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008210:	2302      	movs	r3, #2
  }
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800822e:	2302      	movs	r3, #2
 8008230:	e01a      	b.n	8008268 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	79fa      	ldrb	r2, [r7, #7]
 800825e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f001 fbdb 	bl	8009a1c <USBD_LL_Init>

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d006      	beq.n	8008292 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e001      	b.n	8008296 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fbfa 	bl	8009aa4 <USBD_LL_Start>

  return USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b083      	sub	sp, #12
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082da:	2302      	movs	r3, #2
 80082dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00c      	beq.n	8008302 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	4611      	mov	r1, r2
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008302:	7bfb      	ldrb	r3, [r7, #15]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	4611      	mov	r1, r2
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 ff10 	bl	800916a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	2b02      	cmp	r3, #2
 800836c:	d016      	beq.n	800839c <USBD_LL_SetupStage+0x6a>
 800836e:	2b02      	cmp	r3, #2
 8008370:	d81c      	bhi.n	80083ac <USBD_LL_SetupStage+0x7a>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <USBD_LL_SetupStage+0x4a>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d008      	beq.n	800838c <USBD_LL_SetupStage+0x5a>
 800837a:	e017      	b.n	80083ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa03 	bl	8008790 <USBD_StdDevReq>
      break;
 800838a:	e01a      	b.n	80083c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa65 	bl	8008864 <USBD_StdItfReq>
      break;
 800839a:	e012      	b.n	80083c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 faa5 	bl	80088f4 <USBD_StdEPReq>
      break;
 80083aa:	e00a      	b.n	80083c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80083b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fbd2 	bl	8009b64 <USBD_LL_StallEP>
      break;
 80083c0:	bf00      	nop
  }

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	460b      	mov	r3, r1
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d14b      	bne.n	8008478 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80083e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d134      	bne.n	800845c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d919      	bls.n	8008432 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008414:	429a      	cmp	r2, r3
 8008416:	d203      	bcs.n	8008420 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800841c:	b29b      	uxth	r3, r3
 800841e:	e002      	b.n	8008426 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008424:	b29b      	uxth	r3, r3
 8008426:	461a      	mov	r2, r3
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 ff8f 	bl	800934e <USBD_CtlContinueRx>
 8008430:	e038      	b.n	80084a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008444:	2b03      	cmp	r3, #3
 8008446:	d105      	bne.n	8008454 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 ff8c 	bl	8009372 <USBD_CtlSendStatus>
 800845a:	e023      	b.n	80084a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008462:	2b05      	cmp	r3, #5
 8008464:	d11e      	bne.n	80084a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800846e:	2100      	movs	r1, #0
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f001 fb77 	bl	8009b64 <USBD_LL_StallEP>
 8008476:	e015      	b.n	80084a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00d      	beq.n	80084a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800848a:	2b03      	cmp	r3, #3
 800848c:	d108      	bne.n	80084a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	7afa      	ldrb	r2, [r7, #11]
 8008498:	4611      	mov	r1, r2
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	4798      	blx	r3
 800849e:	e001      	b.n	80084a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084a0:	2302      	movs	r3, #2
 80084a2:	e000      	b.n	80084a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	460b      	mov	r3, r1
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084bc:	7afb      	ldrb	r3, [r7, #11]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d17f      	bne.n	80085c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3314      	adds	r3, #20
 80084c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d15c      	bne.n	800858c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d915      	bls.n	800850a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	461a      	mov	r2, r3
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fef9 	bl	80092ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fc:	2300      	movs	r3, #0
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 fbd9 	bl	8009cba <USBD_LL_PrepareReceive>
 8008508:	e04e      	b.n	80085a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	6912      	ldr	r2, [r2, #16]
 8008512:	fbb3 f1f2 	udiv	r1, r3, r2
 8008516:	fb01 f202 	mul.w	r2, r1, r2
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d11c      	bne.n	800855a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008528:	429a      	cmp	r2, r3
 800852a:	d316      	bcc.n	800855a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008536:	429a      	cmp	r2, r3
 8008538:	d20f      	bcs.n	800855a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fed5 	bl	80092ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f001 fbb1 	bl	8009cba <USBD_LL_PrepareReceive>
 8008558:	e026      	b.n	80085a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800856c:	2b03      	cmp	r3, #3
 800856e:	d105      	bne.n	800857c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800857c:	2180      	movs	r1, #128	; 0x80
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f001 faf0 	bl	8009b64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 ff07 	bl	8009398 <USBD_CtlReceiveStatus>
 800858a:	e00d      	b.n	80085a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008592:	2b04      	cmp	r3, #4
 8008594:	d004      	beq.n	80085a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80085a0:	2180      	movs	r1, #128	; 0x80
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f001 fade 	bl	8009b64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d11d      	bne.n	80085ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff fe81 	bl	80082ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085c0:	e015      	b.n	80085ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00d      	beq.n	80085ea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d108      	bne.n	80085ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	7afa      	ldrb	r2, [r7, #11]
 80085e2:	4611      	mov	r1, r2
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	4798      	blx	r3
 80085e8:	e001      	b.n	80085ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	e000      	b.n	80085f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fa67 	bl	8009ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2240      	movs	r2, #64	; 0x40
 8008618:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	2200      	movs	r2, #0
 8008620:	2180      	movs	r1, #128	; 0x80
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 fa59 	bl	8009ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2240      	movs	r2, #64	; 0x40
 8008632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6852      	ldr	r2, [r2, #4]
 8008668:	b2d2      	uxtb	r2, r2
 800866a:	4611      	mov	r1, r2
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
  }

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr

08008698 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2204      	movs	r2, #4
 80086b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d105      	bne.n	80086de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d10b      	bne.n	8008714 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr

08008736 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr

08008762 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6852      	ldr	r2, [r2, #4]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	4611      	mov	r1, r2
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3

  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d005      	beq.n	80087b6 <USBD_StdDevReq+0x26>
 80087aa:	2b40      	cmp	r3, #64	; 0x40
 80087ac:	d84f      	bhi.n	800884e <USBD_StdDevReq+0xbe>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <USBD_StdDevReq+0x36>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d14b      	bne.n	800884e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	4798      	blx	r3
      break;
 80087c4:	e048      	b.n	8008858 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	2b09      	cmp	r3, #9
 80087cc:	d839      	bhi.n	8008842 <USBD_StdDevReq+0xb2>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USBD_StdDevReq+0x44>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	08008825 	.word	0x08008825
 80087d8:	08008839 	.word	0x08008839
 80087dc:	08008843 	.word	0x08008843
 80087e0:	0800882f 	.word	0x0800882f
 80087e4:	08008843 	.word	0x08008843
 80087e8:	08008807 	.word	0x08008807
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008843 	.word	0x08008843
 80087f4:	0800881b 	.word	0x0800881b
 80087f8:	08008811 	.word	0x08008811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f9dc 	bl	8008bbc <USBD_GetDescriptor>
          break;
 8008804:	e022      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb3f 	bl	8008e8c <USBD_SetAddress>
          break;
 800880e:	e01d      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fb7e 	bl	8008f14 <USBD_SetConfig>
          break;
 8008818:	e018      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc07 	bl	8009030 <USBD_GetConfig>
          break;
 8008822:	e013      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fc37 	bl	800909a <USBD_GetStatus>
          break;
 800882c:	e00e      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fc65 	bl	8009100 <USBD_SetFeature>
          break;
 8008836:	e009      	b.n	800884c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc74 	bl	8009128 <USBD_ClrFeature>
          break;
 8008840:	e004      	b.n	800884c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fccc 	bl	80091e2 <USBD_CtlError>
          break;
 800884a:	bf00      	nop
      }
      break;
 800884c:	e004      	b.n	8008858 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fcc6 	bl	80091e2 <USBD_CtlError>
      break;
 8008856:	bf00      	nop
  }

  return ret;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop

08008864 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800887a:	2b40      	cmp	r3, #64	; 0x40
 800887c:	d005      	beq.n	800888a <USBD_StdItfReq+0x26>
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d82e      	bhi.n	80088e0 <USBD_StdItfReq+0x7c>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <USBD_StdItfReq+0x26>
 8008886:	2b20      	cmp	r3, #32
 8008888:	d12a      	bne.n	80088e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	3b01      	subs	r3, #1
 8008892:	2b02      	cmp	r3, #2
 8008894:	d81d      	bhi.n	80088d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	889b      	ldrh	r3, [r3, #4]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	d813      	bhi.n	80088c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d110      	bne.n	80088dc <USBD_StdItfReq+0x78>
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fd56 	bl	8009372 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088c6:	e009      	b.n	80088dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fc89 	bl	80091e2 <USBD_CtlError>
          break;
 80088d0:	e004      	b.n	80088dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fc84 	bl	80091e2 <USBD_CtlError>
          break;
 80088da:	e000      	b.n	80088de <USBD_StdItfReq+0x7a>
          break;
 80088dc:	bf00      	nop
      }
      break;
 80088de:	e004      	b.n	80088ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fc7d 	bl	80091e2 <USBD_CtlError>
      break;
 80088e8:	bf00      	nop
  }

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	889b      	ldrh	r3, [r3, #4]
 8008906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	d007      	beq.n	8008924 <USBD_StdEPReq+0x30>
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	f200 8146 	bhi.w	8008ba6 <USBD_StdEPReq+0x2b2>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <USBD_StdEPReq+0x40>
 800891e:	2b20      	cmp	r3, #32
 8008920:	f040 8141 	bne.w	8008ba6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
      break;
 8008932:	e13d      	b.n	8008bb0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800893c:	2b20      	cmp	r3, #32
 800893e:	d10a      	bne.n	8008956 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	e12d      	b.n	8008bb2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b03      	cmp	r3, #3
 800895c:	d007      	beq.n	800896e <USBD_StdEPReq+0x7a>
 800895e:	2b03      	cmp	r3, #3
 8008960:	f300 811b 	bgt.w	8008b9a <USBD_StdEPReq+0x2a6>
 8008964:	2b00      	cmp	r3, #0
 8008966:	d072      	beq.n	8008a4e <USBD_StdEPReq+0x15a>
 8008968:	2b01      	cmp	r3, #1
 800896a:	d03a      	beq.n	80089e2 <USBD_StdEPReq+0xee>
 800896c:	e115      	b.n	8008b9a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008974:	2b02      	cmp	r3, #2
 8008976:	d002      	beq.n	800897e <USBD_StdEPReq+0x8a>
 8008978:	2b03      	cmp	r3, #3
 800897a:	d015      	beq.n	80089a8 <USBD_StdEPReq+0xb4>
 800897c:	e02b      	b.n	80089d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00c      	beq.n	800899e <USBD_StdEPReq+0xaa>
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b80      	cmp	r3, #128	; 0x80
 8008988:	d009      	beq.n	800899e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 f8e8 	bl	8009b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 f8e4 	bl	8009b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800899c:	e020      	b.n	80089e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc1e 	bl	80091e2 <USBD_CtlError>
              break;
 80089a6:	e01b      	b.n	80089e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	885b      	ldrh	r3, [r3, #2]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10e      	bne.n	80089ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <USBD_StdEPReq+0xda>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b80      	cmp	r3, #128	; 0x80
 80089ba:	d008      	beq.n	80089ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	88db      	ldrh	r3, [r3, #6]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f8cb 	bl	8009b64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fccf 	bl	8009372 <USBD_CtlSendStatus>

              break;
 80089d4:	e004      	b.n	80089e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fc02 	bl	80091e2 <USBD_CtlError>
              break;
 80089de:	bf00      	nop
          }
          break;
 80089e0:	e0e0      	b.n	8008ba4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d002      	beq.n	80089f2 <USBD_StdEPReq+0xfe>
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d015      	beq.n	8008a1c <USBD_StdEPReq+0x128>
 80089f0:	e026      	b.n	8008a40 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00c      	beq.n	8008a12 <USBD_StdEPReq+0x11e>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d009      	beq.n	8008a12 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f8ae 	bl	8009b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a08:	2180      	movs	r1, #128	; 0x80
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 f8aa 	bl	8009b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a10:	e01c      	b.n	8008a4c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fbe4 	bl	80091e2 <USBD_CtlError>
              break;
 8008a1a:	e017      	b.n	8008a4c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	885b      	ldrh	r3, [r3, #2]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d112      	bne.n	8008a4a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 f8b5 	bl	8009ba2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fc9a 	bl	8009372 <USBD_CtlSendStatus>
              }
              break;
 8008a3e:	e004      	b.n	8008a4a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fbcd 	bl	80091e2 <USBD_CtlError>
              break;
 8008a48:	e000      	b.n	8008a4c <USBD_StdEPReq+0x158>
              break;
 8008a4a:	bf00      	nop
          }
          break;
 8008a4c:	e0aa      	b.n	8008ba4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d002      	beq.n	8008a5e <USBD_StdEPReq+0x16a>
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d032      	beq.n	8008ac2 <USBD_StdEPReq+0x1ce>
 8008a5c:	e097      	b.n	8008b8e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d007      	beq.n	8008a74 <USBD_StdEPReq+0x180>
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	2b80      	cmp	r3, #128	; 0x80
 8008a68:	d004      	beq.n	8008a74 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fbb8 	bl	80091e2 <USBD_CtlError>
                break;
 8008a72:	e091      	b.n	8008b98 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	da0b      	bge.n	8008a94 <USBD_StdEPReq+0x1a0>
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	3310      	adds	r3, #16
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	3304      	adds	r3, #4
 8008a92:	e00b      	b.n	8008aac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	3304      	adds	r3, #4
 8008aac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fbfb 	bl	80092b6 <USBD_CtlSendData>
              break;
 8008ac0:	e06a      	b.n	8008b98 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da11      	bge.n	8008aee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	f003 020f 	and.w	r2, r3, #15
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3318      	adds	r3, #24
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d117      	bne.n	8008b14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fb7b 	bl	80091e2 <USBD_CtlError>
                  break;
 8008aec:	e054      	b.n	8008b98 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	f003 020f 	and.w	r2, r3, #15
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb68 	bl	80091e2 <USBD_CtlError>
                  break;
 8008b12:	e041      	b.n	8008b98 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da0b      	bge.n	8008b34 <USBD_StdEPReq+0x240>
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	3310      	adds	r3, #16
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	3304      	adds	r3, #4
 8008b32:	e00b      	b.n	8008b4c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <USBD_StdEPReq+0x266>
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d103      	bne.n	8008b62 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	e00e      	b.n	8008b80 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 f83a 	bl	8009be0 <USBD_LL_IsStallEP>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2201      	movs	r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e002      	b.n	8008b80 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2202      	movs	r2, #2
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fb95 	bl	80092b6 <USBD_CtlSendData>
              break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fb26 	bl	80091e2 <USBD_CtlError>
              break;
 8008b96:	bf00      	nop
          }
          break;
 8008b98:	e004      	b.n	8008ba4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fb20 	bl	80091e2 <USBD_CtlError>
          break;
 8008ba2:	bf00      	nop
      }
      break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb1a 	bl	80091e2 <USBD_CtlError>
      break;
 8008bae:	bf00      	nop
  }

  return ret;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	885b      	ldrh	r3, [r3, #2]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	2b06      	cmp	r3, #6
 8008bde:	f200 8128 	bhi.w	8008e32 <USBD_GetDescriptor+0x276>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBD_GetDescriptor+0x2c>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c05 	.word	0x08008c05
 8008bec:	08008c1d 	.word	0x08008c1d
 8008bf0:	08008c5d 	.word	0x08008c5d
 8008bf4:	08008e33 	.word	0x08008e33
 8008bf8:	08008e33 	.word	0x08008e33
 8008bfc:	08008dd3 	.word	0x08008dd3
 8008c00:	08008dff 	.word	0x08008dff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	7c12      	ldrb	r2, [r2, #16]
 8008c10:	f107 0108 	add.w	r1, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
      break;
 8008c1a:	e112      	b.n	8008e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7c1b      	ldrb	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10d      	bne.n	8008c40 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f107 0208 	add.w	r2, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c3e:	e100      	b.n	8008e42 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	f107 0208 	add.w	r2, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	2202      	movs	r2, #2
 8008c58:	701a      	strb	r2, [r3, #0]
      break;
 8008c5a:	e0f2      	b.n	8008e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	885b      	ldrh	r3, [r3, #2]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	f200 80ac 	bhi.w	8008dc0 <USBD_GetDescriptor+0x204>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <USBD_GetDescriptor+0xb4>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c89 	.word	0x08008c89
 8008c74:	08008cbd 	.word	0x08008cbd
 8008c78:	08008cf1 	.word	0x08008cf1
 8008c7c:	08008d25 	.word	0x08008d25
 8008c80:	08008d59 	.word	0x08008d59
 8008c84:	08008d8d 	.word	0x08008d8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	7c12      	ldrb	r2, [r2, #16]
 8008ca0:	f107 0108 	add.w	r1, r7, #8
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008caa:	e091      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa97 	bl	80091e2 <USBD_CtlError>
            err++;
 8008cb4:	7afb      	ldrb	r3, [r7, #11]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cba:	e089      	b.n	8008dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00b      	beq.n	8008ce0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	7c12      	ldrb	r2, [r2, #16]
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
 8008cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cde:	e077      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa7d 	bl	80091e2 <USBD_CtlError>
            err++;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	3301      	adds	r3, #1
 8008cec:	72fb      	strb	r3, [r7, #11]
          break;
 8008cee:	e06f      	b.n	8008dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	7c12      	ldrb	r2, [r2, #16]
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d12:	e05d      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fa63 	bl	80091e2 <USBD_CtlError>
            err++;
 8008d1c:	7afb      	ldrb	r3, [r7, #11]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	72fb      	strb	r3, [r7, #11]
          break;
 8008d22:	e055      	b.n	8008dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00b      	beq.n	8008d48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	7c12      	ldrb	r2, [r2, #16]
 8008d3c:	f107 0108 	add.w	r1, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d46:	e043      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa49 	bl	80091e2 <USBD_CtlError>
            err++;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	3301      	adds	r3, #1
 8008d54:	72fb      	strb	r3, [r7, #11]
          break;
 8008d56:	e03b      	b.n	8008dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7a:	e029      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa2f 	bl	80091e2 <USBD_CtlError>
            err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8a:	e021      	b.n	8008dd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7c12      	ldrb	r2, [r2, #16]
 8008da4:	f107 0108 	add.w	r1, r7, #8
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dae:	e00f      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa15 	bl	80091e2 <USBD_CtlError>
            err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dbe:	e007      	b.n	8008dd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa0d 	bl	80091e2 <USBD_CtlError>
          err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008dce:	e038      	b.n	8008e42 <USBD_GetDescriptor+0x286>
 8008dd0:	e037      	b.n	8008e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7c1b      	ldrb	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de2:	f107 0208 	add.w	r2, r7, #8
 8008de6:	4610      	mov	r0, r2
 8008de8:	4798      	blx	r3
 8008dea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dec:	e029      	b.n	8008e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f9f6 	bl	80091e2 <USBD_CtlError>
        err++;
 8008df6:	7afb      	ldrb	r3, [r7, #11]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8008dfc:	e021      	b.n	8008e42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7c1b      	ldrb	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10d      	bne.n	8008e22 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0e:	f107 0208 	add.w	r2, r7, #8
 8008e12:	4610      	mov	r0, r2
 8008e14:	4798      	blx	r3
 8008e16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e20:	e00f      	b.n	8008e42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f9dc 	bl	80091e2 <USBD_CtlError>
        err++;
 8008e2a:	7afb      	ldrb	r3, [r7, #11]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e30:	e007      	b.n	8008e42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f9d4 	bl	80091e2 <USBD_CtlError>
      err++;
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e40:	bf00      	nop
  }

  if (err != 0U)
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11c      	bne.n	8008e82 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e48:	893b      	ldrh	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d011      	beq.n	8008e72 <USBD_GetDescriptor+0x2b6>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00d      	beq.n	8008e72 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88da      	ldrh	r2, [r3, #6]
 8008e5a:	893b      	ldrh	r3, [r7, #8]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	bf28      	it	cs
 8008e60:	4613      	movcs	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e66:	893b      	ldrh	r3, [r7, #8]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa22 	bl	80092b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88db      	ldrh	r3, [r3, #6]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa79 	bl	8009372 <USBD_CtlSendStatus>
 8008e80:	e000      	b.n	8008e84 <USBD_GetDescriptor+0x2c8>
    return;
 8008e82:	bf00      	nop
    }
  }
}
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop

08008e8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	889b      	ldrh	r3, [r3, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d130      	bne.n	8008f00 <USBD_SetAddress+0x74>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	88db      	ldrh	r3, [r3, #6]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d12c      	bne.n	8008f00 <USBD_SetAddress+0x74>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	885b      	ldrh	r3, [r3, #2]
 8008eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8008eac:	d828      	bhi.n	8008f00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d104      	bne.n	8008ece <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f98b 	bl	80091e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	e01d      	b.n	8008f0a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7bfa      	ldrb	r2, [r7, #15]
 8008ed2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 feab 	bl	8009c36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa46 	bl	8009372 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef4:	e009      	b.n	8008f0a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	e004      	b.n	8008f0a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f96d 	bl	80091e2 <USBD_CtlError>
  }
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
	...

08008f14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	885b      	ldrh	r3, [r3, #2]
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	4b41      	ldr	r3, [pc, #260]	; (800902c <USBD_SetConfig+0x118>)
 8008f26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f28:	4b40      	ldr	r3, [pc, #256]	; (800902c <USBD_SetConfig+0x118>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d904      	bls.n	8008f3a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f955 	bl	80091e2 <USBD_CtlError>
 8008f38:	e075      	b.n	8009026 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d002      	beq.n	8008f4a <USBD_SetConfig+0x36>
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d023      	beq.n	8008f90 <USBD_SetConfig+0x7c>
 8008f48:	e062      	b.n	8009010 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f4a:	4b38      	ldr	r3, [pc, #224]	; (800902c <USBD_SetConfig+0x118>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d01a      	beq.n	8008f88 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f52:	4b36      	ldr	r3, [pc, #216]	; (800902c <USBD_SetConfig+0x118>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2203      	movs	r2, #3
 8008f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f64:	4b31      	ldr	r3, [pc, #196]	; (800902c <USBD_SetConfig+0x118>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff f9af 	bl	80082ce <USBD_SetClassConfig>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d104      	bne.n	8008f80 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f932 	bl	80091e2 <USBD_CtlError>
            return;
 8008f7e:	e052      	b.n	8009026 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9f6 	bl	8009372 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f86:	e04e      	b.n	8009026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f9f2 	bl	8009372 <USBD_CtlSendStatus>
        break;
 8008f8e:	e04a      	b.n	8009026 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f90:	4b26      	ldr	r3, [pc, #152]	; (800902c <USBD_SetConfig+0x118>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d112      	bne.n	8008fbe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <USBD_SetConfig+0x118>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008faa:	4b20      	ldr	r3, [pc, #128]	; (800902c <USBD_SetConfig+0x118>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff f9ab 	bl	800830c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9db 	bl	8009372 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fbc:	e033      	b.n	8009026 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <USBD_SetConfig+0x118>)
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d01d      	beq.n	8009008 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff f999 	bl	800830c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008fda:	4b14      	ldr	r3, [pc, #80]	; (800902c <USBD_SetConfig+0x118>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <USBD_SetConfig+0x118>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff f96f 	bl	80082ce <USBD_SetClassConfig>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d104      	bne.n	8009000 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f8f2 	bl	80091e2 <USBD_CtlError>
            return;
 8008ffe:	e012      	b.n	8009026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9b6 	bl	8009372 <USBD_CtlSendStatus>
        break;
 8009006:	e00e      	b.n	8009026 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9b2 	bl	8009372 <USBD_CtlSendStatus>
        break;
 800900e:	e00a      	b.n	8009026 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8e5 	bl	80091e2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <USBD_SetConfig+0x118>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff f974 	bl	800830c <USBD_ClrClassConfig>
        break;
 8009024:	bf00      	nop
    }
  }
}
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	2000052c 	.word	0x2000052c

08009030 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d004      	beq.n	800904c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f8cc 	bl	80091e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800904a:	e022      	b.n	8009092 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009052:	2b02      	cmp	r3, #2
 8009054:	dc02      	bgt.n	800905c <USBD_GetConfig+0x2c>
 8009056:	2b00      	cmp	r3, #0
 8009058:	dc03      	bgt.n	8009062 <USBD_GetConfig+0x32>
 800905a:	e015      	b.n	8009088 <USBD_GetConfig+0x58>
 800905c:	2b03      	cmp	r3, #3
 800905e:	d00b      	beq.n	8009078 <USBD_GetConfig+0x48>
 8009060:	e012      	b.n	8009088 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3308      	adds	r3, #8
 800906c:	2201      	movs	r2, #1
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f920 	bl	80092b6 <USBD_CtlSendData>
        break;
 8009076:	e00c      	b.n	8009092 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3304      	adds	r3, #4
 800907c:	2201      	movs	r2, #1
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f918 	bl	80092b6 <USBD_CtlSendData>
        break;
 8009086:	e004      	b.n	8009092 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f8a9 	bl	80091e2 <USBD_CtlError>
        break;
 8009090:	bf00      	nop
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090aa:	3b01      	subs	r3, #1
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d81e      	bhi.n	80090ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	88db      	ldrh	r3, [r3, #6]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d004      	beq.n	80090c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f891 	bl	80091e2 <USBD_CtlError>
        break;
 80090c0:	e01a      	b.n	80090f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f043 0202 	orr.w	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	330c      	adds	r3, #12
 80090e2:	2202      	movs	r2, #2
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f8e5 	bl	80092b6 <USBD_CtlSendData>
      break;
 80090ec:	e004      	b.n	80090f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f876 	bl	80091e2 <USBD_CtlError>
      break;
 80090f6:	bf00      	nop
  }
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f929 	bl	8009372 <USBD_CtlSendStatus>
  }
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	3b01      	subs	r3, #1
 800913a:	2b02      	cmp	r3, #2
 800913c:	d80b      	bhi.n	8009156 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d10c      	bne.n	8009160 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f90f 	bl	8009372 <USBD_CtlSendStatus>
      }
      break;
 8009154:	e004      	b.n	8009160 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f842 	bl	80091e2 <USBD_CtlError>
      break;
 800915e:	e000      	b.n	8009162 <USBD_ClrFeature+0x3a>
      break;
 8009160:	bf00      	nop
  }
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785a      	ldrb	r2, [r3, #1]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	3302      	adds	r3, #2
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	b29a      	uxth	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	3303      	adds	r3, #3
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	021b      	lsls	r3, r3, #8
 8009196:	b29b      	uxth	r3, r3
 8009198:	4413      	add	r3, r2
 800919a:	b29a      	uxth	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	3304      	adds	r3, #4
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	3305      	adds	r3, #5
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3306      	adds	r3, #6
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	3307      	adds	r3, #7
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	80da      	strh	r2, [r3, #6]

}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80091ec:	2180      	movs	r1, #128	; 0x80
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fcb8 	bl	8009b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80091f4:	2100      	movs	r1, #0
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fcb4 	bl	8009b64 <USBD_LL_StallEP>
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d032      	beq.n	8009280 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 f834 	bl	8009288 <USBD_GetLen>
 8009220:	4603      	mov	r3, r0
 8009222:	3301      	adds	r3, #1
 8009224:	b29b      	uxth	r3, r3
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	75fa      	strb	r2, [r7, #23]
 8009234:	461a      	mov	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	4413      	add	r3, r2
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	7812      	ldrb	r2, [r2, #0]
 800923e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	75fa      	strb	r2, [r7, #23]
 8009246:	461a      	mov	r2, r3
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	2203      	movs	r2, #3
 800924e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009250:	e012      	b.n	8009278 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	60fa      	str	r2, [r7, #12]
 8009258:	7dfa      	ldrb	r2, [r7, #23]
 800925a:	1c51      	adds	r1, r2, #1
 800925c:	75f9      	strb	r1, [r7, #23]
 800925e:	4611      	mov	r1, r2
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	440a      	add	r2, r1
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	75fa      	strb	r2, [r7, #23]
 800926e:	461a      	mov	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	4413      	add	r3, r2
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e8      	bne.n	8009252 <USBD_GetString+0x4e>
    }
  }
}
 8009280:	bf00      	nop
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009294:	e005      	b.n	80092a2 <USBD_GetLen+0x1a>
  {
    len++;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	3301      	adds	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3301      	adds	r3, #1
 80092a0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f5      	bne.n	8009296 <USBD_GetLen+0xe>
  }

  return len;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	4613      	mov	r3, r2
 80092c2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 fcc8 	bl	8009c74 <USBD_LL_Transmit>

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	4613      	mov	r3, r2
 80092fa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	2100      	movs	r1, #0
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fcb6 	bl	8009c74 <USBD_LL_Transmit>

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	4613      	mov	r3, r2
 800931e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2203      	movs	r2, #3
 8009324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009328:	88fa      	ldrh	r2, [r7, #6]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	2100      	movs	r1, #0
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fcbb 	bl	8009cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	4613      	mov	r3, r2
 800935a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	2100      	movs	r1, #0
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fca9 	bl	8009cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2204      	movs	r2, #4
 800937e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009382:	2300      	movs	r3, #0
 8009384:	2200      	movs	r2, #0
 8009386:	2100      	movs	r1, #0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc73 	bl	8009c74 <USBD_LL_Transmit>

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2205      	movs	r2, #5
 80093a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093a8:	2300      	movs	r3, #0
 80093aa:	2200      	movs	r2, #0
 80093ac:	2100      	movs	r1, #0
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fc83 	bl	8009cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USB_Transmit>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USB_Transmit(char* Buf, uint16_t Len)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8c2 	bl	8009558 <CDC_Transmit_FS>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093e0:	2200      	movs	r2, #0
 80093e2:	4912      	ldr	r1, [pc, #72]	; (800942c <MX_USB_DEVICE_Init+0x50>)
 80093e4:	4812      	ldr	r0, [pc, #72]	; (8009430 <MX_USB_DEVICE_Init+0x54>)
 80093e6:	f7fe ff18 	bl	800821a <USBD_Init>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093f0:	f7f9 f894 	bl	800251c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093f4:	490f      	ldr	r1, [pc, #60]	; (8009434 <MX_USB_DEVICE_Init+0x58>)
 80093f6:	480e      	ldr	r0, [pc, #56]	; (8009430 <MX_USB_DEVICE_Init+0x54>)
 80093f8:	f7fe ff3a 	bl	8008270 <USBD_RegisterClass>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009402:	f7f9 f88b 	bl	800251c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009406:	490c      	ldr	r1, [pc, #48]	; (8009438 <MX_USB_DEVICE_Init+0x5c>)
 8009408:	4809      	ldr	r0, [pc, #36]	; (8009430 <MX_USB_DEVICE_Init+0x54>)
 800940a:	f7fe fe6b 	bl	80080e4 <USBD_CDC_RegisterInterface>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009414:	f7f9 f882 	bl	800251c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009418:	4805      	ldr	r0, [pc, #20]	; (8009430 <MX_USB_DEVICE_Init+0x54>)
 800941a:	f7fe ff42 	bl	80082a2 <USBD_Start>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009424:	f7f9 f87a 	bl	800251c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}
 800942c:	2000012c 	.word	0x2000012c
 8009430:	20000530 	.word	0x20000530
 8009434:	20000018 	.word	0x20000018
 8009438:	2000011c 	.word	0x2000011c

0800943c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009440:	2200      	movs	r2, #0
 8009442:	4905      	ldr	r1, [pc, #20]	; (8009458 <CDC_Init_FS+0x1c>)
 8009444:	4805      	ldr	r0, [pc, #20]	; (800945c <CDC_Init_FS+0x20>)
 8009446:	f7fe fe63 	bl	8008110 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800944a:	4905      	ldr	r1, [pc, #20]	; (8009460 <CDC_Init_FS+0x24>)
 800944c:	4803      	ldr	r0, [pc, #12]	; (800945c <CDC_Init_FS+0x20>)
 800944e:	f7fe fe78 	bl	8008142 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009452:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009454:	4618      	mov	r0, r3
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000bf4 	.word	0x20000bf4
 800945c:	20000530 	.word	0x20000530
 8009460:	200007f4 	.word	0x200007f4

08009464 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009468:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800946a:	4618      	mov	r0, r3
 800946c:	46bd      	mov	sp, r7
 800946e:	bc80      	pop	{r7}
 8009470:	4770      	bx	lr
	...

08009474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	6039      	str	r1, [r7, #0]
 800947e:	71fb      	strb	r3, [r7, #7]
 8009480:	4613      	mov	r3, r2
 8009482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	2b23      	cmp	r3, #35	; 0x23
 8009488:	d84a      	bhi.n	8009520 <CDC_Control_FS+0xac>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <CDC_Control_FS+0x1c>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	08009521 	.word	0x08009521
 8009494:	08009521 	.word	0x08009521
 8009498:	08009521 	.word	0x08009521
 800949c:	08009521 	.word	0x08009521
 80094a0:	08009521 	.word	0x08009521
 80094a4:	08009521 	.word	0x08009521
 80094a8:	08009521 	.word	0x08009521
 80094ac:	08009521 	.word	0x08009521
 80094b0:	08009521 	.word	0x08009521
 80094b4:	08009521 	.word	0x08009521
 80094b8:	08009521 	.word	0x08009521
 80094bc:	08009521 	.word	0x08009521
 80094c0:	08009521 	.word	0x08009521
 80094c4:	08009521 	.word	0x08009521
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009521 	.word	0x08009521
 80094d0:	08009521 	.word	0x08009521
 80094d4:	08009521 	.word	0x08009521
 80094d8:	08009521 	.word	0x08009521
 80094dc:	08009521 	.word	0x08009521
 80094e0:	08009521 	.word	0x08009521
 80094e4:	08009521 	.word	0x08009521
 80094e8:	08009521 	.word	0x08009521
 80094ec:	08009521 	.word	0x08009521
 80094f0:	08009521 	.word	0x08009521
 80094f4:	08009521 	.word	0x08009521
 80094f8:	08009521 	.word	0x08009521
 80094fc:	08009521 	.word	0x08009521
 8009500:	08009521 	.word	0x08009521
 8009504:	08009521 	.word	0x08009521
 8009508:	08009521 	.word	0x08009521
 800950c:	08009521 	.word	0x08009521
 8009510:	08009521 	.word	0x08009521
 8009514:	08009521 	.word	0x08009521
 8009518:	08009521 	.word	0x08009521
 800951c:	08009521 	.word	0x08009521
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009520:	bf00      	nop
  }

  return (USBD_OK);
 8009522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	bc80      	pop	{r7}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <CDC_Receive_FS+0x24>)
 800953e:	f7fe fe00 	bl	8008142 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009542:	4804      	ldr	r0, [pc, #16]	; (8009554 <CDC_Receive_FS+0x24>)
 8009544:	f7fe fe3f 	bl	80081c6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009548:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000530 	.word	0x20000530

08009558 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <CDC_Transmit_FS+0x48>)
 800956a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800957a:	2301      	movs	r3, #1
 800957c:	e00b      	b.n	8009596 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800957e:	887b      	ldrh	r3, [r7, #2]
 8009580:	461a      	mov	r2, r3
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4806      	ldr	r0, [pc, #24]	; (80095a0 <CDC_Transmit_FS+0x48>)
 8009586:	f7fe fdc3 	bl	8008110 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800958a:	4805      	ldr	r0, [pc, #20]	; (80095a0 <CDC_Transmit_FS+0x48>)
 800958c:	f7fe fdec 	bl	8008168 <USBD_CDC_TransmitPacket>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000530 	.word	0x20000530

080095a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2212      	movs	r2, #18
 80095b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095b6:	4b03      	ldr	r3, [pc, #12]	; (80095c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	20000148 	.word	0x20000148

080095c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2204      	movs	r2, #4
 80095d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095da:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095dc:	4618      	mov	r0, r3
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	2000015c 	.word	0x2000015c

080095ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d105      	bne.n	800960a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4907      	ldr	r1, [pc, #28]	; (8009620 <USBD_FS_ProductStrDescriptor+0x34>)
 8009602:	4808      	ldr	r0, [pc, #32]	; (8009624 <USBD_FS_ProductStrDescriptor+0x38>)
 8009604:	f7ff fdfe 	bl	8009204 <USBD_GetString>
 8009608:	e004      	b.n	8009614 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4904      	ldr	r1, [pc, #16]	; (8009620 <USBD_FS_ProductStrDescriptor+0x34>)
 800960e:	4805      	ldr	r0, [pc, #20]	; (8009624 <USBD_FS_ProductStrDescriptor+0x38>)
 8009610:	f7ff fdf8 	bl	8009204 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009614:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000ff4 	.word	0x20000ff4
 8009624:	0800cf90 	.word	0x0800cf90

08009628 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	4904      	ldr	r1, [pc, #16]	; (8009648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009638:	4804      	ldr	r0, [pc, #16]	; (800964c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800963a:	f7ff fde3 	bl	8009204 <USBD_GetString>
  return USBD_StrDesc;
 800963e:	4b02      	ldr	r3, [pc, #8]	; (8009648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000ff4 	.word	0x20000ff4
 800964c:	0800cfa8 	.word	0x0800cfa8

08009650 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	6039      	str	r1, [r7, #0]
 800965a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	221a      	movs	r2, #26
 8009660:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009662:	f000 f843 	bl	80096ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009666:	4b02      	ldr	r3, [pc, #8]	; (8009670 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000160 	.word	0x20000160

08009674 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4907      	ldr	r1, [pc, #28]	; (80096a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800968a:	4808      	ldr	r0, [pc, #32]	; (80096ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800968c:	f7ff fdba 	bl	8009204 <USBD_GetString>
 8009690:	e004      	b.n	800969c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4904      	ldr	r1, [pc, #16]	; (80096a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009696:	4805      	ldr	r0, [pc, #20]	; (80096ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009698:	f7ff fdb4 	bl	8009204 <USBD_GetString>
  }
  return USBD_StrDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000ff4 	.word	0x20000ff4
 80096ac:	0800cfbc 	.word	0x0800cfbc

080096b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	6039      	str	r1, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	4907      	ldr	r1, [pc, #28]	; (80096e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096c6:	4808      	ldr	r0, [pc, #32]	; (80096e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c8:	f7ff fd9c 	bl	8009204 <USBD_GetString>
 80096cc:	e004      	b.n	80096d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4904      	ldr	r1, [pc, #16]	; (80096e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096d2:	4805      	ldr	r0, [pc, #20]	; (80096e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096d4:	f7ff fd96 	bl	8009204 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000ff4 	.word	0x20000ff4
 80096e8:	0800cfc8 	.word	0x0800cfc8

080096ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <Get_SerialNum+0x44>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <Get_SerialNum+0x48>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096fe:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <Get_SerialNum+0x4c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4413      	add	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009712:	2208      	movs	r2, #8
 8009714:	4909      	ldr	r1, [pc, #36]	; (800973c <Get_SerialNum+0x50>)
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 f814 	bl	8009744 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800971c:	2204      	movs	r2, #4
 800971e:	4908      	ldr	r1, [pc, #32]	; (8009740 <Get_SerialNum+0x54>)
 8009720:	68b8      	ldr	r0, [r7, #8]
 8009722:	f000 f80f 	bl	8009744 <IntToUnicode>
  }
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	1ffff7e8 	.word	0x1ffff7e8
 8009734:	1ffff7ec 	.word	0x1ffff7ec
 8009738:	1ffff7f0 	.word	0x1ffff7f0
 800973c:	20000162 	.word	0x20000162
 8009740:	20000172 	.word	0x20000172

08009744 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	4613      	mov	r3, r2
 8009750:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]
 800975a:	e027      	b.n	80097ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	2b09      	cmp	r3, #9
 8009762:	d80b      	bhi.n	800977c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	0f1b      	lsrs	r3, r3, #28
 8009768:	b2da      	uxtb	r2, r3
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4619      	mov	r1, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	440b      	add	r3, r1
 8009774:	3230      	adds	r2, #48	; 0x30
 8009776:	b2d2      	uxtb	r2, r2
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e00a      	b.n	8009792 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	0f1b      	lsrs	r3, r3, #28
 8009780:	b2da      	uxtb	r2, r3
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	4619      	mov	r1, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	440b      	add	r3, r1
 800978c:	3237      	adds	r2, #55	; 0x37
 800978e:	b2d2      	uxtb	r2, r2
 8009790:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	3301      	adds	r3, #1
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4413      	add	r3, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	3301      	adds	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
 80097ac:	7dfa      	ldrb	r2, [r7, #23]
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d3d3      	bcc.n	800975c <IntToUnicode+0x18>
  }
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097c8:	f107 0310 	add.w	r3, r7, #16
 80097cc:	2200      	movs	r2, #0
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	605a      	str	r2, [r3, #4]
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097de:	d12c      	bne.n	800983a <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097e0:	4b18      	ldr	r3, [pc, #96]	; (8009844 <HAL_PCD_MspInit+0x84>)
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	4a17      	ldr	r2, [pc, #92]	; (8009844 <HAL_PCD_MspInit+0x84>)
 80097e6:	f043 0304 	orr.w	r3, r3, #4
 80097ea:	6193      	str	r3, [r2, #24]
 80097ec:	4b15      	ldr	r3, [pc, #84]	; (8009844 <HAL_PCD_MspInit+0x84>)
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80097f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097fe:	2300      	movs	r3, #0
 8009800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009802:	2300      	movs	r3, #0
 8009804:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009806:	f107 0310 	add.w	r3, r7, #16
 800980a:	4619      	mov	r1, r3
 800980c:	480e      	ldr	r0, [pc, #56]	; (8009848 <HAL_PCD_MspInit+0x88>)
 800980e:	f7f9 ff79 	bl	8003704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <HAL_PCD_MspInit+0x84>)
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <HAL_PCD_MspInit+0x84>)
 8009818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800981c:	6153      	str	r3, [r2, #20]
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <HAL_PCD_MspInit+0x84>)
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009826:	60bb      	str	r3, [r7, #8]
 8009828:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800982a:	2200      	movs	r2, #0
 800982c:	2100      	movs	r1, #0
 800982e:	2043      	movs	r0, #67	; 0x43
 8009830:	f7f9 ff31 	bl	8003696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009834:	2043      	movs	r0, #67	; 0x43
 8009836:	f7f9 ff4a 	bl	80036ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800983a:	bf00      	nop
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	40021000 	.word	0x40021000
 8009848:	40010800 	.word	0x40010800

0800984c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f7fe fd65 	bl	8008332 <USBD_LL_SetupStage>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009882:	78fa      	ldrb	r2, [r7, #3]
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	4619      	mov	r1, r3
 800989a:	f7fe fd97 	bl	80083cc <USBD_LL_DataOutStage>
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	460b      	mov	r3, r1
 80098b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	3348      	adds	r3, #72	; 0x48
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7fe fdee 	bl	80084ae <USBD_LL_DataInStage>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fefe 	bl	80086ea <USBD_LL_SOF>
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098fe:	2301      	movs	r3, #1
 8009900:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b02      	cmp	r3, #2
 8009908:	d001      	beq.n	800990e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800990a:	f7f8 fe07 	bl	800251c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009914:	7bfa      	ldrb	r2, [r7, #15]
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe feae 	bl	800867a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009924:	4618      	mov	r0, r3
 8009926:	f7fe fe67 	bl	80085f8 <USBD_LL_Reset>
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fea8 	bl	8008698 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009968:	4b04      	ldr	r3, [pc, #16]	; (800997c <HAL_PCD_SuspendCallback+0x48>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	4a03      	ldr	r2, [pc, #12]	; (800997c <HAL_PCD_SuspendCallback+0x48>)
 800996e:	f043 0306 	orr.w	r3, r3, #6
 8009972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009974:	bf00      	nop
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	e000ed00 	.word	0xe000ed00

08009980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe fe96 	bl	80086c0 <USBD_LL_Resume>
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80099ae:	78fa      	ldrb	r2, [r7, #3]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fe febf 	bl	8008736 <USBD_LL_IsoOUTIncomplete>
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fea1 	bl	800871e <USBD_LL_IsoINIncomplete>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe feab 	bl	800874e <USBD_LL_DevConnected>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fea7 	bl	8008762 <USBD_LL_DevDisconnected>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d133      	bne.n	8009a94 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a2c:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1a      	ldr	r2, [pc, #104]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a3c:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a44:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a46:	2204      	movs	r2, #4
 8009a48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a52:	2202      	movs	r2, #2
 8009a54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009a62:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a68:	480d      	ldr	r0, [pc, #52]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a6a:	f7f9 ffe7 	bl	8003a3c <HAL_PCD_Init>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009a74:	f7f8 fd52 	bl	800251c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	4809      	ldr	r0, [pc, #36]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a7c:	f7fb f900 	bl	8004c80 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a80:	2240      	movs	r2, #64	; 0x40
 8009a82:	2100      	movs	r1, #0
 8009a84:	4806      	ldr	r0, [pc, #24]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a86:	f7fb f8b5 	bl	8004bf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4804      	ldr	r0, [pc, #16]	; (8009aa0 <USBD_LL_Init+0x84>)
 8009a90:	f7fb f8b0 	bl	8004bf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200011f4 	.word	0x200011f4

08009aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fa f8db 	bl	8003c76 <HAL_PCD_Start>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f944 	bl	8009d54 <USBD_Get_USB_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4603      	mov	r3, r0
 8009aea:	70fb      	strb	r3, [r7, #3]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70bb      	strb	r3, [r7, #2]
 8009af0:	4613      	mov	r3, r2
 8009af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b02:	78bb      	ldrb	r3, [r7, #2]
 8009b04:	883a      	ldrh	r2, [r7, #0]
 8009b06:	78f9      	ldrb	r1, [r7, #3]
 8009b08:	f7fa fd54 	bl	80045b4 <HAL_PCD_EP_Open>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 f91e 	bl	8009d54 <USBD_Get_USB_Status>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b40:	78fa      	ldrb	r2, [r7, #3]
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fa fd9d 	bl	8004684 <HAL_PCD_EP_Close>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 f8ff 	bl	8009d54 <USBD_Get_USB_Status>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b7e:	78fa      	ldrb	r2, [r7, #3]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fa fe42 	bl	800480c <HAL_PCD_EP_SetStall>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f8e0 	bl	8009d54 <USBD_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fa fe85 	bl	80048d0 <HAL_PCD_EP_ClrStall>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f8c1 	bl	8009d54 <USBD_Get_USB_Status>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da0b      	bge.n	8009c14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	4613      	mov	r3, r2
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4413      	add	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	333e      	adds	r3, #62	; 0x3e
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	e00b      	b.n	8009c2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr

08009c36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fa fc88 	bl	800456a <HAL_PCD_SetAddress>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 f877 	bl	8009d54 <USBD_Get_USB_Status>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	607a      	str	r2, [r7, #4]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	460b      	mov	r3, r1
 8009c82:	72fb      	strb	r3, [r7, #11]
 8009c84:	4613      	mov	r3, r2
 8009c86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c96:	893b      	ldrh	r3, [r7, #8]
 8009c98:	7af9      	ldrb	r1, [r7, #11]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f7fa fd85 	bl	80047aa <HAL_PCD_EP_Transmit>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f854 	bl	8009d54 <USBD_Get_USB_Status>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b086      	sub	sp, #24
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	72fb      	strb	r3, [r7, #11]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cdc:	893b      	ldrh	r3, [r7, #8]
 8009cde:	7af9      	ldrb	r1, [r7, #11]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	f7fa fd19 	bl	8004718 <HAL_PCD_EP_Receive>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f831 	bl	8009d54 <USBD_Get_USB_Status>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	4611      	mov	r1, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fa fd30 	bl	800477c <HAL_PCD_EP_GetRxCount>
 8009d1c:	4603      	mov	r3, r0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <USBD_static_malloc+0x14>)
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr
 8009d3c:	200016f8 	.word	0x200016f8

08009d40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]

}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bc80      	pop	{r7}
 8009d50:	4770      	bx	lr
	...

08009d54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d817      	bhi.n	8009d98 <USBD_Get_USB_Status+0x44>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <USBD_Get_USB_Status+0x1c>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d87 	.word	0x08009d87
 8009d78:	08009d8d 	.word	0x08009d8d
 8009d7c:	08009d93 	.word	0x08009d93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
    break;
 8009d84:	e00b      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d86:	2302      	movs	r3, #2
 8009d88:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8a:	e008      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d90:	e005      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d92:	2302      	movs	r3, #2
 8009d94:	73fb      	strb	r3, [r7, #15]
    break;
 8009d96:	e002      	b.n	8009d9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d9c:	bf00      	nop
  }
  return usb_status;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop

08009dac <__cvt>:
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db2:	461f      	mov	r7, r3
 8009db4:	bfbb      	ittet	lt
 8009db6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	461f      	movlt	r7, r3
 8009dbc:	2300      	movge	r3, #0
 8009dbe:	232d      	movlt	r3, #45	; 0x2d
 8009dc0:	b088      	sub	sp, #32
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009dc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009dc8:	7013      	strb	r3, [r2, #0]
 8009dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009dd0:	f023 0820 	bic.w	r8, r3, #32
 8009dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009dd8:	d005      	beq.n	8009de6 <__cvt+0x3a>
 8009dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009dde:	d100      	bne.n	8009de2 <__cvt+0x36>
 8009de0:	3501      	adds	r5, #1
 8009de2:	2302      	movs	r3, #2
 8009de4:	e000      	b.n	8009de8 <__cvt+0x3c>
 8009de6:	2303      	movs	r3, #3
 8009de8:	aa07      	add	r2, sp, #28
 8009dea:	9204      	str	r2, [sp, #16]
 8009dec:	aa06      	add	r2, sp, #24
 8009dee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009df2:	e9cd 3500 	strd	r3, r5, [sp]
 8009df6:	4622      	mov	r2, r4
 8009df8:	463b      	mov	r3, r7
 8009dfa:	f000 fe91 	bl	800ab20 <_dtoa_r>
 8009dfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e02:	4606      	mov	r6, r0
 8009e04:	d102      	bne.n	8009e0c <__cvt+0x60>
 8009e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e08:	07db      	lsls	r3, r3, #31
 8009e0a:	d522      	bpl.n	8009e52 <__cvt+0xa6>
 8009e0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e10:	eb06 0905 	add.w	r9, r6, r5
 8009e14:	d110      	bne.n	8009e38 <__cvt+0x8c>
 8009e16:	7833      	ldrb	r3, [r6, #0]
 8009e18:	2b30      	cmp	r3, #48	; 0x30
 8009e1a:	d10a      	bne.n	8009e32 <__cvt+0x86>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4620      	mov	r0, r4
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 fe2c 	bl	8000a80 <__aeabi_dcmpeq>
 8009e28:	b918      	cbnz	r0, 8009e32 <__cvt+0x86>
 8009e2a:	f1c5 0501 	rsb	r5, r5, #1
 8009e2e:	f8ca 5000 	str.w	r5, [sl]
 8009e32:	f8da 3000 	ldr.w	r3, [sl]
 8009e36:	4499      	add	r9, r3
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 fe1e 	bl	8000a80 <__aeabi_dcmpeq>
 8009e44:	b108      	cbz	r0, 8009e4a <__cvt+0x9e>
 8009e46:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e4a:	2230      	movs	r2, #48	; 0x30
 8009e4c:	9b07      	ldr	r3, [sp, #28]
 8009e4e:	454b      	cmp	r3, r9
 8009e50:	d307      	bcc.n	8009e62 <__cvt+0xb6>
 8009e52:	4630      	mov	r0, r6
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e58:	1b9b      	subs	r3, r3, r6
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	b008      	add	sp, #32
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	1c59      	adds	r1, r3, #1
 8009e64:	9107      	str	r1, [sp, #28]
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	e7f0      	b.n	8009e4c <__cvt+0xa0>

08009e6a <__exponent>:
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	f803 2b02 	strb.w	r2, [r3], #2
 8009e74:	bfb6      	itet	lt
 8009e76:	222d      	movlt	r2, #45	; 0x2d
 8009e78:	222b      	movge	r2, #43	; 0x2b
 8009e7a:	4249      	neglt	r1, r1
 8009e7c:	2909      	cmp	r1, #9
 8009e7e:	7042      	strb	r2, [r0, #1]
 8009e80:	dd2a      	ble.n	8009ed8 <__exponent+0x6e>
 8009e82:	f10d 0207 	add.w	r2, sp, #7
 8009e86:	4617      	mov	r7, r2
 8009e88:	260a      	movs	r6, #10
 8009e8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e8e:	4694      	mov	ip, r2
 8009e90:	fb06 1415 	mls	r4, r6, r5, r1
 8009e94:	3430      	adds	r4, #48	; 0x30
 8009e96:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	2c63      	cmp	r4, #99	; 0x63
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f102 32ff 	add.w	r2, r2, #4294967295
 8009ea4:	dcf1      	bgt.n	8009e8a <__exponent+0x20>
 8009ea6:	3130      	adds	r1, #48	; 0x30
 8009ea8:	f1ac 0402 	sub.w	r4, ip, #2
 8009eac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	1c41      	adds	r1, r0, #1
 8009eb4:	42ba      	cmp	r2, r7
 8009eb6:	d30a      	bcc.n	8009ece <__exponent+0x64>
 8009eb8:	f10d 0209 	add.w	r2, sp, #9
 8009ebc:	eba2 020c 	sub.w	r2, r2, ip
 8009ec0:	42bc      	cmp	r4, r7
 8009ec2:	bf88      	it	hi
 8009ec4:	2200      	movhi	r2, #0
 8009ec6:	4413      	add	r3, r2
 8009ec8:	1a18      	subs	r0, r3, r0
 8009eca:	b003      	add	sp, #12
 8009ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ece:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ed2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ed6:	e7ed      	b.n	8009eb4 <__exponent+0x4a>
 8009ed8:	2330      	movs	r3, #48	; 0x30
 8009eda:	3130      	adds	r1, #48	; 0x30
 8009edc:	7083      	strb	r3, [r0, #2]
 8009ede:	70c1      	strb	r1, [r0, #3]
 8009ee0:	1d03      	adds	r3, r0, #4
 8009ee2:	e7f1      	b.n	8009ec8 <__exponent+0x5e>

08009ee4 <_printf_float>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	b091      	sub	sp, #68	; 0x44
 8009eea:	460c      	mov	r4, r1
 8009eec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009ef0:	4616      	mov	r6, r2
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	f000 fcf7 	bl	800a8e8 <_localeconv_r>
 8009efa:	6803      	ldr	r3, [r0, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	9309      	str	r3, [sp, #36]	; 0x24
 8009f00:	f7f6 f992 	bl	8000228 <strlen>
 8009f04:	2300      	movs	r3, #0
 8009f06:	930e      	str	r3, [sp, #56]	; 0x38
 8009f08:	f8d8 3000 	ldr.w	r3, [r8]
 8009f0c:	900a      	str	r0, [sp, #40]	; 0x28
 8009f0e:	3307      	adds	r3, #7
 8009f10:	f023 0307 	bic.w	r3, r3, #7
 8009f14:	f103 0208 	add.w	r2, r3, #8
 8009f18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f1c:	f8d4 b000 	ldr.w	fp, [r4]
 8009f20:	f8c8 2000 	str.w	r2, [r8]
 8009f24:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009f28:	4652      	mov	r2, sl
 8009f2a:	4643      	mov	r3, r8
 8009f2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f30:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4b9c      	ldr	r3, [pc, #624]	; (800a1b0 <_printf_float+0x2cc>)
 8009f3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f40:	f7f6 fdd0 	bl	8000ae4 <__aeabi_dcmpun>
 8009f44:	bb70      	cbnz	r0, 8009fa4 <_printf_float+0xc0>
 8009f46:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4b98      	ldr	r3, [pc, #608]	; (800a1b0 <_printf_float+0x2cc>)
 8009f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f50:	f7f6 fdaa 	bl	8000aa8 <__aeabi_dcmple>
 8009f54:	bb30      	cbnz	r0, 8009fa4 <_printf_float+0xc0>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	f7f6 fd99 	bl	8000a94 <__aeabi_dcmplt>
 8009f62:	b110      	cbz	r0, 8009f6a <_printf_float+0x86>
 8009f64:	232d      	movs	r3, #45	; 0x2d
 8009f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6a:	4a92      	ldr	r2, [pc, #584]	; (800a1b4 <_printf_float+0x2d0>)
 8009f6c:	4b92      	ldr	r3, [pc, #584]	; (800a1b8 <_printf_float+0x2d4>)
 8009f6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f72:	bf94      	ite	ls
 8009f74:	4690      	movls	r8, r2
 8009f76:	4698      	movhi	r8, r3
 8009f78:	2303      	movs	r3, #3
 8009f7a:	f04f 0a00 	mov.w	sl, #0
 8009f7e:	6123      	str	r3, [r4, #16]
 8009f80:	f02b 0304 	bic.w	r3, fp, #4
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	4633      	mov	r3, r6
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	9700      	str	r7, [sp, #0]
 8009f8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f90:	f000 f9d6 	bl	800a340 <_printf_common>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f040 8090 	bne.w	800a0ba <_printf_float+0x1d6>
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9e:	b011      	add	sp, #68	; 0x44
 8009fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa4:	4652      	mov	r2, sl
 8009fa6:	4643      	mov	r3, r8
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4641      	mov	r1, r8
 8009fac:	f7f6 fd9a 	bl	8000ae4 <__aeabi_dcmpun>
 8009fb0:	b148      	cbz	r0, 8009fc6 <_printf_float+0xe2>
 8009fb2:	f1b8 0f00 	cmp.w	r8, #0
 8009fb6:	bfb8      	it	lt
 8009fb8:	232d      	movlt	r3, #45	; 0x2d
 8009fba:	4a80      	ldr	r2, [pc, #512]	; (800a1bc <_printf_float+0x2d8>)
 8009fbc:	bfb8      	it	lt
 8009fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009fc2:	4b7f      	ldr	r3, [pc, #508]	; (800a1c0 <_printf_float+0x2dc>)
 8009fc4:	e7d3      	b.n	8009f6e <_printf_float+0x8a>
 8009fc6:	6863      	ldr	r3, [r4, #4]
 8009fc8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	d142      	bne.n	800a056 <_printf_float+0x172>
 8009fd0:	2306      	movs	r3, #6
 8009fd2:	6063      	str	r3, [r4, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	9206      	str	r2, [sp, #24]
 8009fd8:	aa0e      	add	r2, sp, #56	; 0x38
 8009fda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009fde:	aa0d      	add	r2, sp, #52	; 0x34
 8009fe0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009fe4:	9203      	str	r2, [sp, #12]
 8009fe6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009fea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	4652      	mov	r2, sl
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	4643      	mov	r3, r8
 8009ffa:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ffc:	f7ff fed6 	bl	8009dac <__cvt>
 800a000:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a002:	4680      	mov	r8, r0
 800a004:	2947      	cmp	r1, #71	; 0x47
 800a006:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a008:	d108      	bne.n	800a01c <_printf_float+0x138>
 800a00a:	1cc8      	adds	r0, r1, #3
 800a00c:	db02      	blt.n	800a014 <_printf_float+0x130>
 800a00e:	6863      	ldr	r3, [r4, #4]
 800a010:	4299      	cmp	r1, r3
 800a012:	dd40      	ble.n	800a096 <_printf_float+0x1b2>
 800a014:	f1a9 0902 	sub.w	r9, r9, #2
 800a018:	fa5f f989 	uxtb.w	r9, r9
 800a01c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a020:	d81f      	bhi.n	800a062 <_printf_float+0x17e>
 800a022:	464a      	mov	r2, r9
 800a024:	3901      	subs	r1, #1
 800a026:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a02a:	910d      	str	r1, [sp, #52]	; 0x34
 800a02c:	f7ff ff1d 	bl	8009e6a <__exponent>
 800a030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a032:	4682      	mov	sl, r0
 800a034:	1813      	adds	r3, r2, r0
 800a036:	2a01      	cmp	r2, #1
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	dc02      	bgt.n	800a042 <_printf_float+0x15e>
 800a03c:	6822      	ldr	r2, [r4, #0]
 800a03e:	07d2      	lsls	r2, r2, #31
 800a040:	d501      	bpl.n	800a046 <_printf_float+0x162>
 800a042:	3301      	adds	r3, #1
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d09b      	beq.n	8009f86 <_printf_float+0xa2>
 800a04e:	232d      	movs	r3, #45	; 0x2d
 800a050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a054:	e797      	b.n	8009f86 <_printf_float+0xa2>
 800a056:	2947      	cmp	r1, #71	; 0x47
 800a058:	d1bc      	bne.n	8009fd4 <_printf_float+0xf0>
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1ba      	bne.n	8009fd4 <_printf_float+0xf0>
 800a05e:	2301      	movs	r3, #1
 800a060:	e7b7      	b.n	8009fd2 <_printf_float+0xee>
 800a062:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a066:	d118      	bne.n	800a09a <_printf_float+0x1b6>
 800a068:	2900      	cmp	r1, #0
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	dd0b      	ble.n	800a086 <_printf_float+0x1a2>
 800a06e:	6121      	str	r1, [r4, #16]
 800a070:	b913      	cbnz	r3, 800a078 <_printf_float+0x194>
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	07d0      	lsls	r0, r2, #31
 800a076:	d502      	bpl.n	800a07e <_printf_float+0x19a>
 800a078:	3301      	adds	r3, #1
 800a07a:	440b      	add	r3, r1
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	f04f 0a00 	mov.w	sl, #0
 800a082:	65a1      	str	r1, [r4, #88]	; 0x58
 800a084:	e7df      	b.n	800a046 <_printf_float+0x162>
 800a086:	b913      	cbnz	r3, 800a08e <_printf_float+0x1aa>
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	07d2      	lsls	r2, r2, #31
 800a08c:	d501      	bpl.n	800a092 <_printf_float+0x1ae>
 800a08e:	3302      	adds	r3, #2
 800a090:	e7f4      	b.n	800a07c <_printf_float+0x198>
 800a092:	2301      	movs	r3, #1
 800a094:	e7f2      	b.n	800a07c <_printf_float+0x198>
 800a096:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	4299      	cmp	r1, r3
 800a09e:	db05      	blt.n	800a0ac <_printf_float+0x1c8>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	6121      	str	r1, [r4, #16]
 800a0a4:	07d8      	lsls	r0, r3, #31
 800a0a6:	d5ea      	bpl.n	800a07e <_printf_float+0x19a>
 800a0a8:	1c4b      	adds	r3, r1, #1
 800a0aa:	e7e7      	b.n	800a07c <_printf_float+0x198>
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	bfcc      	ite	gt
 800a0b0:	2201      	movgt	r2, #1
 800a0b2:	f1c1 0202 	rsble	r2, r1, #2
 800a0b6:	4413      	add	r3, r2
 800a0b8:	e7e0      	b.n	800a07c <_printf_float+0x198>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	055a      	lsls	r2, r3, #21
 800a0be:	d407      	bmi.n	800a0d0 <_printf_float+0x1ec>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	4642      	mov	r2, r8
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d12b      	bne.n	800a126 <_printf_float+0x242>
 800a0ce:	e764      	b.n	8009f9a <_printf_float+0xb6>
 800a0d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a0d4:	f240 80dd 	bls.w	800a292 <_printf_float+0x3ae>
 800a0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f7f6 fcce 	bl	8000a80 <__aeabi_dcmpeq>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d033      	beq.n	800a150 <_printf_float+0x26c>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	4a35      	ldr	r2, [pc, #212]	; (800a1c4 <_printf_float+0x2e0>)
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f43f af51 	beq.w	8009f9a <_printf_float+0xb6>
 800a0f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	db02      	blt.n	800a106 <_printf_float+0x222>
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	07d8      	lsls	r0, r3, #31
 800a104:	d50f      	bpl.n	800a126 <_printf_float+0x242>
 800a106:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	f43f af42 	beq.w	8009f9a <_printf_float+0xb6>
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	f104 091a 	add.w	r9, r4, #26
 800a11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a120:	3b01      	subs	r3, #1
 800a122:	4543      	cmp	r3, r8
 800a124:	dc09      	bgt.n	800a13a <_printf_float+0x256>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	079b      	lsls	r3, r3, #30
 800a12a:	f100 8104 	bmi.w	800a336 <_printf_float+0x452>
 800a12e:	68e0      	ldr	r0, [r4, #12]
 800a130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a132:	4298      	cmp	r0, r3
 800a134:	bfb8      	it	lt
 800a136:	4618      	movlt	r0, r3
 800a138:	e731      	b.n	8009f9e <_printf_float+0xba>
 800a13a:	2301      	movs	r3, #1
 800a13c:	464a      	mov	r2, r9
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f af28 	beq.w	8009f9a <_printf_float+0xb6>
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	e7e6      	b.n	800a11e <_printf_float+0x23a>
 800a150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a152:	2b00      	cmp	r3, #0
 800a154:	dc38      	bgt.n	800a1c8 <_printf_float+0x2e4>
 800a156:	2301      	movs	r3, #1
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <_printf_float+0x2e0>)
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	f43f af1a 	beq.w	8009f9a <_printf_float+0xb6>
 800a166:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a16a:	4313      	orrs	r3, r2
 800a16c:	d102      	bne.n	800a174 <_printf_float+0x290>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	07d9      	lsls	r1, r3, #31
 800a172:	d5d8      	bpl.n	800a126 <_printf_float+0x242>
 800a174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af0b 	beq.w	8009f9a <_printf_float+0xb6>
 800a184:	f04f 0900 	mov.w	r9, #0
 800a188:	f104 0a1a 	add.w	sl, r4, #26
 800a18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a18e:	425b      	negs	r3, r3
 800a190:	454b      	cmp	r3, r9
 800a192:	dc01      	bgt.n	800a198 <_printf_float+0x2b4>
 800a194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a196:	e794      	b.n	800a0c2 <_printf_float+0x1de>
 800a198:	2301      	movs	r3, #1
 800a19a:	4652      	mov	r2, sl
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b8      	blx	r7
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f aef9 	beq.w	8009f9a <_printf_float+0xb6>
 800a1a8:	f109 0901 	add.w	r9, r9, #1
 800a1ac:	e7ee      	b.n	800a18c <_printf_float+0x2a8>
 800a1ae:	bf00      	nop
 800a1b0:	7fefffff 	.word	0x7fefffff
 800a1b4:	0800d41c 	.word	0x0800d41c
 800a1b8:	0800d420 	.word	0x0800d420
 800a1bc:	0800d424 	.word	0x0800d424
 800a1c0:	0800d428 	.word	0x0800d428
 800a1c4:	0800d42c 	.word	0x0800d42c
 800a1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	bfa8      	it	ge
 800a1d0:	461a      	movge	r2, r3
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	4691      	mov	r9, r2
 800a1d6:	dc37      	bgt.n	800a248 <_printf_float+0x364>
 800a1d8:	f04f 0b00 	mov.w	fp, #0
 800a1dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e0:	f104 021a 	add.w	r2, r4, #26
 800a1e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a1e8:	ebaa 0309 	sub.w	r3, sl, r9
 800a1ec:	455b      	cmp	r3, fp
 800a1ee:	dc33      	bgt.n	800a258 <_printf_float+0x374>
 800a1f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	db3b      	blt.n	800a270 <_printf_float+0x38c>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	07da      	lsls	r2, r3, #31
 800a1fc:	d438      	bmi.n	800a270 <_printf_float+0x38c>
 800a1fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a202:	eba2 0903 	sub.w	r9, r2, r3
 800a206:	eba2 020a 	sub.w	r2, r2, sl
 800a20a:	4591      	cmp	r9, r2
 800a20c:	bfa8      	it	ge
 800a20e:	4691      	movge	r9, r2
 800a210:	f1b9 0f00 	cmp.w	r9, #0
 800a214:	dc34      	bgt.n	800a280 <_printf_float+0x39c>
 800a216:	f04f 0800 	mov.w	r8, #0
 800a21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21e:	f104 0a1a 	add.w	sl, r4, #26
 800a222:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	eba3 0309 	sub.w	r3, r3, r9
 800a22c:	4543      	cmp	r3, r8
 800a22e:	f77f af7a 	ble.w	800a126 <_printf_float+0x242>
 800a232:	2301      	movs	r3, #1
 800a234:	4652      	mov	r2, sl
 800a236:	4631      	mov	r1, r6
 800a238:	4628      	mov	r0, r5
 800a23a:	47b8      	blx	r7
 800a23c:	3001      	adds	r0, #1
 800a23e:	f43f aeac 	beq.w	8009f9a <_printf_float+0xb6>
 800a242:	f108 0801 	add.w	r8, r8, #1
 800a246:	e7ec      	b.n	800a222 <_printf_float+0x33e>
 800a248:	4613      	mov	r3, r2
 800a24a:	4631      	mov	r1, r6
 800a24c:	4642      	mov	r2, r8
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	d1c0      	bne.n	800a1d8 <_printf_float+0x2f4>
 800a256:	e6a0      	b.n	8009f9a <_printf_float+0xb6>
 800a258:	2301      	movs	r3, #1
 800a25a:	4631      	mov	r1, r6
 800a25c:	4628      	mov	r0, r5
 800a25e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f ae99 	beq.w	8009f9a <_printf_float+0xb6>
 800a268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26a:	f10b 0b01 	add.w	fp, fp, #1
 800a26e:	e7b9      	b.n	800a1e4 <_printf_float+0x300>
 800a270:	4631      	mov	r1, r6
 800a272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	d1bf      	bne.n	800a1fe <_printf_float+0x31a>
 800a27e:	e68c      	b.n	8009f9a <_printf_float+0xb6>
 800a280:	464b      	mov	r3, r9
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	eb08 020a 	add.w	r2, r8, sl
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	d1c2      	bne.n	800a216 <_printf_float+0x332>
 800a290:	e683      	b.n	8009f9a <_printf_float+0xb6>
 800a292:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a294:	2a01      	cmp	r2, #1
 800a296:	dc01      	bgt.n	800a29c <_printf_float+0x3b8>
 800a298:	07db      	lsls	r3, r3, #31
 800a29a:	d539      	bpl.n	800a310 <_printf_float+0x42c>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4642      	mov	r2, r8
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f43f ae77 	beq.w	8009f9a <_printf_float+0xb6>
 800a2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f ae6f 	beq.w	8009f9a <_printf_float+0xb6>
 800a2bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a2c8:	f7f6 fbda 	bl	8000a80 <__aeabi_dcmpeq>
 800a2cc:	b9d8      	cbnz	r0, 800a306 <_printf_float+0x422>
 800a2ce:	f109 33ff 	add.w	r3, r9, #4294967295
 800a2d2:	f108 0201 	add.w	r2, r8, #1
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d10e      	bne.n	800a2fe <_printf_float+0x41a>
 800a2e0:	e65b      	b.n	8009f9a <_printf_float+0xb6>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	464a      	mov	r2, r9
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae54 	beq.w	8009f9a <_printf_float+0xb6>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	4543      	cmp	r3, r8
 800a2fc:	dcf1      	bgt.n	800a2e2 <_printf_float+0x3fe>
 800a2fe:	4653      	mov	r3, sl
 800a300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a304:	e6de      	b.n	800a0c4 <_printf_float+0x1e0>
 800a306:	f04f 0800 	mov.w	r8, #0
 800a30a:	f104 091a 	add.w	r9, r4, #26
 800a30e:	e7f2      	b.n	800a2f6 <_printf_float+0x412>
 800a310:	2301      	movs	r3, #1
 800a312:	4642      	mov	r2, r8
 800a314:	e7df      	b.n	800a2d6 <_printf_float+0x3f2>
 800a316:	2301      	movs	r3, #1
 800a318:	464a      	mov	r2, r9
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae3a 	beq.w	8009f9a <_printf_float+0xb6>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	68e3      	ldr	r3, [r4, #12]
 800a32c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a32e:	1a5b      	subs	r3, r3, r1
 800a330:	4543      	cmp	r3, r8
 800a332:	dcf0      	bgt.n	800a316 <_printf_float+0x432>
 800a334:	e6fb      	b.n	800a12e <_printf_float+0x24a>
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	f104 0919 	add.w	r9, r4, #25
 800a33e:	e7f4      	b.n	800a32a <_printf_float+0x446>

0800a340 <_printf_common>:
 800a340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	4616      	mov	r6, r2
 800a346:	4699      	mov	r9, r3
 800a348:	688a      	ldr	r2, [r1, #8]
 800a34a:	690b      	ldr	r3, [r1, #16]
 800a34c:	4607      	mov	r7, r0
 800a34e:	4293      	cmp	r3, r2
 800a350:	bfb8      	it	lt
 800a352:	4613      	movlt	r3, r2
 800a354:	6033      	str	r3, [r6, #0]
 800a356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a35a:	460c      	mov	r4, r1
 800a35c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a360:	b10a      	cbz	r2, 800a366 <_printf_common+0x26>
 800a362:	3301      	adds	r3, #1
 800a364:	6033      	str	r3, [r6, #0]
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	0699      	lsls	r1, r3, #26
 800a36a:	bf42      	ittt	mi
 800a36c:	6833      	ldrmi	r3, [r6, #0]
 800a36e:	3302      	addmi	r3, #2
 800a370:	6033      	strmi	r3, [r6, #0]
 800a372:	6825      	ldr	r5, [r4, #0]
 800a374:	f015 0506 	ands.w	r5, r5, #6
 800a378:	d106      	bne.n	800a388 <_printf_common+0x48>
 800a37a:	f104 0a19 	add.w	sl, r4, #25
 800a37e:	68e3      	ldr	r3, [r4, #12]
 800a380:	6832      	ldr	r2, [r6, #0]
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	42ab      	cmp	r3, r5
 800a386:	dc2b      	bgt.n	800a3e0 <_printf_common+0xa0>
 800a388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a38c:	1e13      	subs	r3, r2, #0
 800a38e:	6822      	ldr	r2, [r4, #0]
 800a390:	bf18      	it	ne
 800a392:	2301      	movne	r3, #1
 800a394:	0692      	lsls	r2, r2, #26
 800a396:	d430      	bmi.n	800a3fa <_printf_common+0xba>
 800a398:	4649      	mov	r1, r9
 800a39a:	4638      	mov	r0, r7
 800a39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3a0:	47c0      	blx	r8
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d023      	beq.n	800a3ee <_printf_common+0xae>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	6922      	ldr	r2, [r4, #16]
 800a3aa:	f003 0306 	and.w	r3, r3, #6
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	bf14      	ite	ne
 800a3b2:	2500      	movne	r5, #0
 800a3b4:	6833      	ldreq	r3, [r6, #0]
 800a3b6:	f04f 0600 	mov.w	r6, #0
 800a3ba:	bf08      	it	eq
 800a3bc:	68e5      	ldreq	r5, [r4, #12]
 800a3be:	f104 041a 	add.w	r4, r4, #26
 800a3c2:	bf08      	it	eq
 800a3c4:	1aed      	subeq	r5, r5, r3
 800a3c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a3ca:	bf08      	it	eq
 800a3cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bfc4      	itt	gt
 800a3d4:	1a9b      	subgt	r3, r3, r2
 800a3d6:	18ed      	addgt	r5, r5, r3
 800a3d8:	42b5      	cmp	r5, r6
 800a3da:	d11a      	bne.n	800a412 <_printf_common+0xd2>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e008      	b.n	800a3f2 <_printf_common+0xb2>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4652      	mov	r2, sl
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	47c0      	blx	r8
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d103      	bne.n	800a3f6 <_printf_common+0xb6>
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	e7c1      	b.n	800a37e <_printf_common+0x3e>
 800a3fa:	2030      	movs	r0, #48	; 0x30
 800a3fc:	18e1      	adds	r1, r4, r3
 800a3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a408:	4422      	add	r2, r4
 800a40a:	3302      	adds	r3, #2
 800a40c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a410:	e7c2      	b.n	800a398 <_printf_common+0x58>
 800a412:	2301      	movs	r3, #1
 800a414:	4622      	mov	r2, r4
 800a416:	4649      	mov	r1, r9
 800a418:	4638      	mov	r0, r7
 800a41a:	47c0      	blx	r8
 800a41c:	3001      	adds	r0, #1
 800a41e:	d0e6      	beq.n	800a3ee <_printf_common+0xae>
 800a420:	3601      	adds	r6, #1
 800a422:	e7d9      	b.n	800a3d8 <_printf_common+0x98>

0800a424 <_printf_i>:
 800a424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	7e0f      	ldrb	r7, [r1, #24]
 800a42a:	4691      	mov	r9, r2
 800a42c:	2f78      	cmp	r7, #120	; 0x78
 800a42e:	4680      	mov	r8, r0
 800a430:	460c      	mov	r4, r1
 800a432:	469a      	mov	sl, r3
 800a434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a43a:	d807      	bhi.n	800a44c <_printf_i+0x28>
 800a43c:	2f62      	cmp	r7, #98	; 0x62
 800a43e:	d80a      	bhi.n	800a456 <_printf_i+0x32>
 800a440:	2f00      	cmp	r7, #0
 800a442:	f000 80d5 	beq.w	800a5f0 <_printf_i+0x1cc>
 800a446:	2f58      	cmp	r7, #88	; 0x58
 800a448:	f000 80c1 	beq.w	800a5ce <_printf_i+0x1aa>
 800a44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a454:	e03a      	b.n	800a4cc <_printf_i+0xa8>
 800a456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a45a:	2b15      	cmp	r3, #21
 800a45c:	d8f6      	bhi.n	800a44c <_printf_i+0x28>
 800a45e:	a101      	add	r1, pc, #4	; (adr r1, 800a464 <_printf_i+0x40>)
 800a460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a464:	0800a4bd 	.word	0x0800a4bd
 800a468:	0800a4d1 	.word	0x0800a4d1
 800a46c:	0800a44d 	.word	0x0800a44d
 800a470:	0800a44d 	.word	0x0800a44d
 800a474:	0800a44d 	.word	0x0800a44d
 800a478:	0800a44d 	.word	0x0800a44d
 800a47c:	0800a4d1 	.word	0x0800a4d1
 800a480:	0800a44d 	.word	0x0800a44d
 800a484:	0800a44d 	.word	0x0800a44d
 800a488:	0800a44d 	.word	0x0800a44d
 800a48c:	0800a44d 	.word	0x0800a44d
 800a490:	0800a5d7 	.word	0x0800a5d7
 800a494:	0800a4fd 	.word	0x0800a4fd
 800a498:	0800a591 	.word	0x0800a591
 800a49c:	0800a44d 	.word	0x0800a44d
 800a4a0:	0800a44d 	.word	0x0800a44d
 800a4a4:	0800a5f9 	.word	0x0800a5f9
 800a4a8:	0800a44d 	.word	0x0800a44d
 800a4ac:	0800a4fd 	.word	0x0800a4fd
 800a4b0:	0800a44d 	.word	0x0800a44d
 800a4b4:	0800a44d 	.word	0x0800a44d
 800a4b8:	0800a599 	.word	0x0800a599
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	1d1a      	adds	r2, r3, #4
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	602a      	str	r2, [r5, #0]
 800a4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e0a0      	b.n	800a612 <_printf_i+0x1ee>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	682b      	ldr	r3, [r5, #0]
 800a4d4:	0607      	lsls	r7, r0, #24
 800a4d6:	f103 0104 	add.w	r1, r3, #4
 800a4da:	6029      	str	r1, [r5, #0]
 800a4dc:	d501      	bpl.n	800a4e2 <_printf_i+0xbe>
 800a4de:	681e      	ldr	r6, [r3, #0]
 800a4e0:	e003      	b.n	800a4ea <_printf_i+0xc6>
 800a4e2:	0646      	lsls	r6, r0, #25
 800a4e4:	d5fb      	bpl.n	800a4de <_printf_i+0xba>
 800a4e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4ea:	2e00      	cmp	r6, #0
 800a4ec:	da03      	bge.n	800a4f6 <_printf_i+0xd2>
 800a4ee:	232d      	movs	r3, #45	; 0x2d
 800a4f0:	4276      	negs	r6, r6
 800a4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f6:	230a      	movs	r3, #10
 800a4f8:	4859      	ldr	r0, [pc, #356]	; (800a660 <_printf_i+0x23c>)
 800a4fa:	e012      	b.n	800a522 <_printf_i+0xfe>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	6820      	ldr	r0, [r4, #0]
 800a500:	1d19      	adds	r1, r3, #4
 800a502:	6029      	str	r1, [r5, #0]
 800a504:	0605      	lsls	r5, r0, #24
 800a506:	d501      	bpl.n	800a50c <_printf_i+0xe8>
 800a508:	681e      	ldr	r6, [r3, #0]
 800a50a:	e002      	b.n	800a512 <_printf_i+0xee>
 800a50c:	0641      	lsls	r1, r0, #25
 800a50e:	d5fb      	bpl.n	800a508 <_printf_i+0xe4>
 800a510:	881e      	ldrh	r6, [r3, #0]
 800a512:	2f6f      	cmp	r7, #111	; 0x6f
 800a514:	bf0c      	ite	eq
 800a516:	2308      	moveq	r3, #8
 800a518:	230a      	movne	r3, #10
 800a51a:	4851      	ldr	r0, [pc, #324]	; (800a660 <_printf_i+0x23c>)
 800a51c:	2100      	movs	r1, #0
 800a51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a522:	6865      	ldr	r5, [r4, #4]
 800a524:	2d00      	cmp	r5, #0
 800a526:	bfa8      	it	ge
 800a528:	6821      	ldrge	r1, [r4, #0]
 800a52a:	60a5      	str	r5, [r4, #8]
 800a52c:	bfa4      	itt	ge
 800a52e:	f021 0104 	bicge.w	r1, r1, #4
 800a532:	6021      	strge	r1, [r4, #0]
 800a534:	b90e      	cbnz	r6, 800a53a <_printf_i+0x116>
 800a536:	2d00      	cmp	r5, #0
 800a538:	d04b      	beq.n	800a5d2 <_printf_i+0x1ae>
 800a53a:	4615      	mov	r5, r2
 800a53c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a540:	fb03 6711 	mls	r7, r3, r1, r6
 800a544:	5dc7      	ldrb	r7, [r0, r7]
 800a546:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a54a:	4637      	mov	r7, r6
 800a54c:	42bb      	cmp	r3, r7
 800a54e:	460e      	mov	r6, r1
 800a550:	d9f4      	bls.n	800a53c <_printf_i+0x118>
 800a552:	2b08      	cmp	r3, #8
 800a554:	d10b      	bne.n	800a56e <_printf_i+0x14a>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	07de      	lsls	r6, r3, #31
 800a55a:	d508      	bpl.n	800a56e <_printf_i+0x14a>
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	6861      	ldr	r1, [r4, #4]
 800a560:	4299      	cmp	r1, r3
 800a562:	bfde      	ittt	le
 800a564:	2330      	movle	r3, #48	; 0x30
 800a566:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a56a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a56e:	1b52      	subs	r2, r2, r5
 800a570:	6122      	str	r2, [r4, #16]
 800a572:	464b      	mov	r3, r9
 800a574:	4621      	mov	r1, r4
 800a576:	4640      	mov	r0, r8
 800a578:	f8cd a000 	str.w	sl, [sp]
 800a57c:	aa03      	add	r2, sp, #12
 800a57e:	f7ff fedf 	bl	800a340 <_printf_common>
 800a582:	3001      	adds	r0, #1
 800a584:	d14a      	bne.n	800a61c <_printf_i+0x1f8>
 800a586:	f04f 30ff 	mov.w	r0, #4294967295
 800a58a:	b004      	add	sp, #16
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	f043 0320 	orr.w	r3, r3, #32
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	2778      	movs	r7, #120	; 0x78
 800a59a:	4832      	ldr	r0, [pc, #200]	; (800a664 <_printf_i+0x240>)
 800a59c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	6829      	ldr	r1, [r5, #0]
 800a5a4:	061f      	lsls	r7, r3, #24
 800a5a6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5aa:	d402      	bmi.n	800a5b2 <_printf_i+0x18e>
 800a5ac:	065f      	lsls	r7, r3, #25
 800a5ae:	bf48      	it	mi
 800a5b0:	b2b6      	uxthmi	r6, r6
 800a5b2:	07df      	lsls	r7, r3, #31
 800a5b4:	bf48      	it	mi
 800a5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ba:	6029      	str	r1, [r5, #0]
 800a5bc:	bf48      	it	mi
 800a5be:	6023      	strmi	r3, [r4, #0]
 800a5c0:	b91e      	cbnz	r6, 800a5ca <_printf_i+0x1a6>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	f023 0320 	bic.w	r3, r3, #32
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	2310      	movs	r3, #16
 800a5cc:	e7a6      	b.n	800a51c <_printf_i+0xf8>
 800a5ce:	4824      	ldr	r0, [pc, #144]	; (800a660 <_printf_i+0x23c>)
 800a5d0:	e7e4      	b.n	800a59c <_printf_i+0x178>
 800a5d2:	4615      	mov	r5, r2
 800a5d4:	e7bd      	b.n	800a552 <_printf_i+0x12e>
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	6826      	ldr	r6, [r4, #0]
 800a5da:	1d18      	adds	r0, r3, #4
 800a5dc:	6961      	ldr	r1, [r4, #20]
 800a5de:	6028      	str	r0, [r5, #0]
 800a5e0:	0635      	lsls	r5, r6, #24
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	d501      	bpl.n	800a5ea <_printf_i+0x1c6>
 800a5e6:	6019      	str	r1, [r3, #0]
 800a5e8:	e002      	b.n	800a5f0 <_printf_i+0x1cc>
 800a5ea:	0670      	lsls	r0, r6, #25
 800a5ec:	d5fb      	bpl.n	800a5e6 <_printf_i+0x1c2>
 800a5ee:	8019      	strh	r1, [r3, #0]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4615      	mov	r5, r2
 800a5f4:	6123      	str	r3, [r4, #16]
 800a5f6:	e7bc      	b.n	800a572 <_printf_i+0x14e>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	1d1a      	adds	r2, r3, #4
 800a5fe:	602a      	str	r2, [r5, #0]
 800a600:	681d      	ldr	r5, [r3, #0]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f9e6 	bl	800a9d6 <memchr>
 800a60a:	b108      	cbz	r0, 800a610 <_printf_i+0x1ec>
 800a60c:	1b40      	subs	r0, r0, r5
 800a60e:	6060      	str	r0, [r4, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	6123      	str	r3, [r4, #16]
 800a614:	2300      	movs	r3, #0
 800a616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a61a:	e7aa      	b.n	800a572 <_printf_i+0x14e>
 800a61c:	462a      	mov	r2, r5
 800a61e:	4649      	mov	r1, r9
 800a620:	4640      	mov	r0, r8
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	47d0      	blx	sl
 800a626:	3001      	adds	r0, #1
 800a628:	d0ad      	beq.n	800a586 <_printf_i+0x162>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	079b      	lsls	r3, r3, #30
 800a62e:	d413      	bmi.n	800a658 <_printf_i+0x234>
 800a630:	68e0      	ldr	r0, [r4, #12]
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	4298      	cmp	r0, r3
 800a636:	bfb8      	it	lt
 800a638:	4618      	movlt	r0, r3
 800a63a:	e7a6      	b.n	800a58a <_printf_i+0x166>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4632      	mov	r2, r6
 800a640:	4649      	mov	r1, r9
 800a642:	4640      	mov	r0, r8
 800a644:	47d0      	blx	sl
 800a646:	3001      	adds	r0, #1
 800a648:	d09d      	beq.n	800a586 <_printf_i+0x162>
 800a64a:	3501      	adds	r5, #1
 800a64c:	68e3      	ldr	r3, [r4, #12]
 800a64e:	9903      	ldr	r1, [sp, #12]
 800a650:	1a5b      	subs	r3, r3, r1
 800a652:	42ab      	cmp	r3, r5
 800a654:	dcf2      	bgt.n	800a63c <_printf_i+0x218>
 800a656:	e7eb      	b.n	800a630 <_printf_i+0x20c>
 800a658:	2500      	movs	r5, #0
 800a65a:	f104 0619 	add.w	r6, r4, #25
 800a65e:	e7f5      	b.n	800a64c <_printf_i+0x228>
 800a660:	0800d42e 	.word	0x0800d42e
 800a664:	0800d43f 	.word	0x0800d43f

0800a668 <std>:
 800a668:	2300      	movs	r3, #0
 800a66a:	b510      	push	{r4, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	e9c0 3300 	strd	r3, r3, [r0]
 800a672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a676:	6083      	str	r3, [r0, #8]
 800a678:	8181      	strh	r1, [r0, #12]
 800a67a:	6643      	str	r3, [r0, #100]	; 0x64
 800a67c:	81c2      	strh	r2, [r0, #14]
 800a67e:	6183      	str	r3, [r0, #24]
 800a680:	4619      	mov	r1, r3
 800a682:	2208      	movs	r2, #8
 800a684:	305c      	adds	r0, #92	; 0x5c
 800a686:	f000 f914 	bl	800a8b2 <memset>
 800a68a:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <std+0x58>)
 800a68c:	6224      	str	r4, [r4, #32]
 800a68e:	6263      	str	r3, [r4, #36]	; 0x24
 800a690:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <std+0x5c>)
 800a692:	62a3      	str	r3, [r4, #40]	; 0x28
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <std+0x60>)
 800a696:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a698:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <std+0x64>)
 800a69a:	6323      	str	r3, [r4, #48]	; 0x30
 800a69c:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <std+0x68>)
 800a69e:	429c      	cmp	r4, r3
 800a6a0:	d006      	beq.n	800a6b0 <std+0x48>
 800a6a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a6a6:	4294      	cmp	r4, r2
 800a6a8:	d002      	beq.n	800a6b0 <std+0x48>
 800a6aa:	33d0      	adds	r3, #208	; 0xd0
 800a6ac:	429c      	cmp	r4, r3
 800a6ae:	d105      	bne.n	800a6bc <std+0x54>
 800a6b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b8:	f000 b98a 	b.w	800a9d0 <__retarget_lock_init_recursive>
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	bf00      	nop
 800a6c0:	0800a82d 	.word	0x0800a82d
 800a6c4:	0800a84f 	.word	0x0800a84f
 800a6c8:	0800a887 	.word	0x0800a887
 800a6cc:	0800a8ab 	.word	0x0800a8ab
 800a6d0:	20001918 	.word	0x20001918

0800a6d4 <stdio_exit_handler>:
 800a6d4:	4a02      	ldr	r2, [pc, #8]	; (800a6e0 <stdio_exit_handler+0xc>)
 800a6d6:	4903      	ldr	r1, [pc, #12]	; (800a6e4 <stdio_exit_handler+0x10>)
 800a6d8:	4803      	ldr	r0, [pc, #12]	; (800a6e8 <stdio_exit_handler+0x14>)
 800a6da:	f000 b869 	b.w	800a7b0 <_fwalk_sglue>
 800a6de:	bf00      	nop
 800a6e0:	2000017c 	.word	0x2000017c
 800a6e4:	0800c385 	.word	0x0800c385
 800a6e8:	20000188 	.word	0x20000188

0800a6ec <cleanup_stdio>:
 800a6ec:	6841      	ldr	r1, [r0, #4]
 800a6ee:	4b0c      	ldr	r3, [pc, #48]	; (800a720 <cleanup_stdio+0x34>)
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4299      	cmp	r1, r3
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	d001      	beq.n	800a6fc <cleanup_stdio+0x10>
 800a6f8:	f001 fe44 	bl	800c384 <_fflush_r>
 800a6fc:	68a1      	ldr	r1, [r4, #8]
 800a6fe:	4b09      	ldr	r3, [pc, #36]	; (800a724 <cleanup_stdio+0x38>)
 800a700:	4299      	cmp	r1, r3
 800a702:	d002      	beq.n	800a70a <cleanup_stdio+0x1e>
 800a704:	4620      	mov	r0, r4
 800a706:	f001 fe3d 	bl	800c384 <_fflush_r>
 800a70a:	68e1      	ldr	r1, [r4, #12]
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <cleanup_stdio+0x3c>)
 800a70e:	4299      	cmp	r1, r3
 800a710:	d004      	beq.n	800a71c <cleanup_stdio+0x30>
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a718:	f001 be34 	b.w	800c384 <_fflush_r>
 800a71c:	bd10      	pop	{r4, pc}
 800a71e:	bf00      	nop
 800a720:	20001918 	.word	0x20001918
 800a724:	20001980 	.word	0x20001980
 800a728:	200019e8 	.word	0x200019e8

0800a72c <global_stdio_init.part.0>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	4b0b      	ldr	r3, [pc, #44]	; (800a75c <global_stdio_init.part.0+0x30>)
 800a730:	4c0b      	ldr	r4, [pc, #44]	; (800a760 <global_stdio_init.part.0+0x34>)
 800a732:	4a0c      	ldr	r2, [pc, #48]	; (800a764 <global_stdio_init.part.0+0x38>)
 800a734:	4620      	mov	r0, r4
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	2104      	movs	r1, #4
 800a73a:	2200      	movs	r2, #0
 800a73c:	f7ff ff94 	bl	800a668 <std>
 800a740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a744:	2201      	movs	r2, #1
 800a746:	2109      	movs	r1, #9
 800a748:	f7ff ff8e 	bl	800a668 <std>
 800a74c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a750:	2202      	movs	r2, #2
 800a752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a756:	2112      	movs	r1, #18
 800a758:	f7ff bf86 	b.w	800a668 <std>
 800a75c:	20001a50 	.word	0x20001a50
 800a760:	20001918 	.word	0x20001918
 800a764:	0800a6d5 	.word	0x0800a6d5

0800a768 <__sfp_lock_acquire>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__sfp_lock_acquire+0x8>)
 800a76a:	f000 b932 	b.w	800a9d2 <__retarget_lock_acquire_recursive>
 800a76e:	bf00      	nop
 800a770:	20001a59 	.word	0x20001a59

0800a774 <__sfp_lock_release>:
 800a774:	4801      	ldr	r0, [pc, #4]	; (800a77c <__sfp_lock_release+0x8>)
 800a776:	f000 b92d 	b.w	800a9d4 <__retarget_lock_release_recursive>
 800a77a:	bf00      	nop
 800a77c:	20001a59 	.word	0x20001a59

0800a780 <__sinit>:
 800a780:	b510      	push	{r4, lr}
 800a782:	4604      	mov	r4, r0
 800a784:	f7ff fff0 	bl	800a768 <__sfp_lock_acquire>
 800a788:	6a23      	ldr	r3, [r4, #32]
 800a78a:	b11b      	cbz	r3, 800a794 <__sinit+0x14>
 800a78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a790:	f7ff bff0 	b.w	800a774 <__sfp_lock_release>
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <__sinit+0x28>)
 800a796:	6223      	str	r3, [r4, #32]
 800a798:	4b04      	ldr	r3, [pc, #16]	; (800a7ac <__sinit+0x2c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f5      	bne.n	800a78c <__sinit+0xc>
 800a7a0:	f7ff ffc4 	bl	800a72c <global_stdio_init.part.0>
 800a7a4:	e7f2      	b.n	800a78c <__sinit+0xc>
 800a7a6:	bf00      	nop
 800a7a8:	0800a6ed 	.word	0x0800a6ed
 800a7ac:	20001a50 	.word	0x20001a50

0800a7b0 <_fwalk_sglue>:
 800a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	4688      	mov	r8, r1
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	2600      	movs	r6, #0
 800a7bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a7c4:	d505      	bpl.n	800a7d2 <_fwalk_sglue+0x22>
 800a7c6:	6824      	ldr	r4, [r4, #0]
 800a7c8:	2c00      	cmp	r4, #0
 800a7ca:	d1f7      	bne.n	800a7bc <_fwalk_sglue+0xc>
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d907      	bls.n	800a7e8 <_fwalk_sglue+0x38>
 800a7d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	d003      	beq.n	800a7e8 <_fwalk_sglue+0x38>
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	4306      	orrs	r6, r0
 800a7e8:	3568      	adds	r5, #104	; 0x68
 800a7ea:	e7e9      	b.n	800a7c0 <_fwalk_sglue+0x10>

0800a7ec <siprintf>:
 800a7ec:	b40e      	push	{r1, r2, r3}
 800a7ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7f2:	b500      	push	{lr}
 800a7f4:	b09c      	sub	sp, #112	; 0x70
 800a7f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7f8:	9002      	str	r0, [sp, #8]
 800a7fa:	9006      	str	r0, [sp, #24]
 800a7fc:	9107      	str	r1, [sp, #28]
 800a7fe:	9104      	str	r1, [sp, #16]
 800a800:	4808      	ldr	r0, [pc, #32]	; (800a824 <siprintf+0x38>)
 800a802:	4909      	ldr	r1, [pc, #36]	; (800a828 <siprintf+0x3c>)
 800a804:	f853 2b04 	ldr.w	r2, [r3], #4
 800a808:	9105      	str	r1, [sp, #20]
 800a80a:	6800      	ldr	r0, [r0, #0]
 800a80c:	a902      	add	r1, sp, #8
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	f001 fc38 	bl	800c084 <_svfiprintf_r>
 800a814:	2200      	movs	r2, #0
 800a816:	9b02      	ldr	r3, [sp, #8]
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	b01c      	add	sp, #112	; 0x70
 800a81c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a820:	b003      	add	sp, #12
 800a822:	4770      	bx	lr
 800a824:	200001d4 	.word	0x200001d4
 800a828:	ffff0208 	.word	0xffff0208

0800a82c <__sread>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	f000 f87e 	bl	800a934 <_read_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	bfab      	itete	ge
 800a83c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a83e:	89a3      	ldrhlt	r3, [r4, #12]
 800a840:	181b      	addge	r3, r3, r0
 800a842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a846:	bfac      	ite	ge
 800a848:	6563      	strge	r3, [r4, #84]	; 0x54
 800a84a:	81a3      	strhlt	r3, [r4, #12]
 800a84c:	bd10      	pop	{r4, pc}

0800a84e <__swrite>:
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	461f      	mov	r7, r3
 800a854:	898b      	ldrh	r3, [r1, #12]
 800a856:	4605      	mov	r5, r0
 800a858:	05db      	lsls	r3, r3, #23
 800a85a:	460c      	mov	r4, r1
 800a85c:	4616      	mov	r6, r2
 800a85e:	d505      	bpl.n	800a86c <__swrite+0x1e>
 800a860:	2302      	movs	r3, #2
 800a862:	2200      	movs	r2, #0
 800a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a868:	f000 f852 	bl	800a910 <_lseek_r>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	4632      	mov	r2, r6
 800a870:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a874:	81a3      	strh	r3, [r4, #12]
 800a876:	4628      	mov	r0, r5
 800a878:	463b      	mov	r3, r7
 800a87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	f000 b869 	b.w	800a958 <_write_r>

0800a886 <__sseek>:
 800a886:	b510      	push	{r4, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88e:	f000 f83f 	bl	800a910 <_lseek_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	bf15      	itete	ne
 800a898:	6560      	strne	r0, [r4, #84]	; 0x54
 800a89a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a89e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8a2:	81a3      	strheq	r3, [r4, #12]
 800a8a4:	bf18      	it	ne
 800a8a6:	81a3      	strhne	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__sclose>:
 800a8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ae:	f000 b81f 	b.w	800a8f0 <_close_r>

0800a8b2 <memset>:
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4402      	add	r2, r0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d100      	bne.n	800a8bc <memset+0xa>
 800a8ba:	4770      	bx	lr
 800a8bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c0:	e7f9      	b.n	800a8b6 <memset+0x4>

0800a8c2 <strncat>:
 800a8c2:	b530      	push	{r4, r5, lr}
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	7825      	ldrb	r5, [r4, #0]
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	3401      	adds	r4, #1
 800a8cc:	2d00      	cmp	r5, #0
 800a8ce:	d1fa      	bne.n	800a8c6 <strncat+0x4>
 800a8d0:	3a01      	subs	r2, #1
 800a8d2:	d304      	bcc.n	800a8de <strncat+0x1c>
 800a8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d8:	f803 4b01 	strb.w	r4, [r3], #1
 800a8dc:	b904      	cbnz	r4, 800a8e0 <strncat+0x1e>
 800a8de:	bd30      	pop	{r4, r5, pc}
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d1f5      	bne.n	800a8d0 <strncat+0xe>
 800a8e4:	701a      	strb	r2, [r3, #0]
 800a8e6:	e7f3      	b.n	800a8d0 <strncat+0xe>

0800a8e8 <_localeconv_r>:
 800a8e8:	4800      	ldr	r0, [pc, #0]	; (800a8ec <_localeconv_r+0x4>)
 800a8ea:	4770      	bx	lr
 800a8ec:	200002c8 	.word	0x200002c8

0800a8f0 <_close_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4d05      	ldr	r5, [pc, #20]	; (800a90c <_close_r+0x1c>)
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f7 ff6a 	bl	80027d4 <_close>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_close_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_close_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20001a54 	.word	0x20001a54

0800a910 <_lseek_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	4611      	mov	r1, r2
 800a918:	2200      	movs	r2, #0
 800a91a:	4d05      	ldr	r5, [pc, #20]	; (800a930 <_lseek_r+0x20>)
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f7 ff7c 	bl	800281c <_lseek>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_lseek_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_lseek_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	20001a54 	.word	0x20001a54

0800a934 <_read_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	4611      	mov	r1, r2
 800a93c:	2200      	movs	r2, #0
 800a93e:	4d05      	ldr	r5, [pc, #20]	; (800a954 <_read_r+0x20>)
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f7 ff0d 	bl	8002762 <_read>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_read_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_read_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20001a54 	.word	0x20001a54

0800a958 <_write_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	2200      	movs	r2, #0
 800a962:	4d05      	ldr	r5, [pc, #20]	; (800a978 <_write_r+0x20>)
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f7 ff18 	bl	800279c <_write>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_write_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_write_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	20001a54 	.word	0x20001a54

0800a97c <__errno>:
 800a97c:	4b01      	ldr	r3, [pc, #4]	; (800a984 <__errno+0x8>)
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	200001d4 	.word	0x200001d4

0800a988 <__libc_init_array>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	2600      	movs	r6, #0
 800a98c:	4d0c      	ldr	r5, [pc, #48]	; (800a9c0 <__libc_init_array+0x38>)
 800a98e:	4c0d      	ldr	r4, [pc, #52]	; (800a9c4 <__libc_init_array+0x3c>)
 800a990:	1b64      	subs	r4, r4, r5
 800a992:	10a4      	asrs	r4, r4, #2
 800a994:	42a6      	cmp	r6, r4
 800a996:	d109      	bne.n	800a9ac <__libc_init_array+0x24>
 800a998:	f002 fa70 	bl	800ce7c <_init>
 800a99c:	2600      	movs	r6, #0
 800a99e:	4d0a      	ldr	r5, [pc, #40]	; (800a9c8 <__libc_init_array+0x40>)
 800a9a0:	4c0a      	ldr	r4, [pc, #40]	; (800a9cc <__libc_init_array+0x44>)
 800a9a2:	1b64      	subs	r4, r4, r5
 800a9a4:	10a4      	asrs	r4, r4, #2
 800a9a6:	42a6      	cmp	r6, r4
 800a9a8:	d105      	bne.n	800a9b6 <__libc_init_array+0x2e>
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}
 800a9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b0:	4798      	blx	r3
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	e7ee      	b.n	800a994 <__libc_init_array+0xc>
 800a9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ba:	4798      	blx	r3
 800a9bc:	3601      	adds	r6, #1
 800a9be:	e7f2      	b.n	800a9a6 <__libc_init_array+0x1e>
 800a9c0:	0800d794 	.word	0x0800d794
 800a9c4:	0800d794 	.word	0x0800d794
 800a9c8:	0800d794 	.word	0x0800d794
 800a9cc:	0800d798 	.word	0x0800d798

0800a9d0 <__retarget_lock_init_recursive>:
 800a9d0:	4770      	bx	lr

0800a9d2 <__retarget_lock_acquire_recursive>:
 800a9d2:	4770      	bx	lr

0800a9d4 <__retarget_lock_release_recursive>:
 800a9d4:	4770      	bx	lr

0800a9d6 <memchr>:
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	b2c9      	uxtb	r1, r1
 800a9dc:	4402      	add	r2, r0
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	d101      	bne.n	800a9e8 <memchr+0x12>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e003      	b.n	800a9f0 <memchr+0x1a>
 800a9e8:	7804      	ldrb	r4, [r0, #0]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	428c      	cmp	r4, r1
 800a9ee:	d1f6      	bne.n	800a9de <memchr+0x8>
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <memcpy>:
 800a9f2:	440a      	add	r2, r1
 800a9f4:	4291      	cmp	r1, r2
 800a9f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9fa:	d100      	bne.n	800a9fe <memcpy+0xc>
 800a9fc:	4770      	bx	lr
 800a9fe:	b510      	push	{r4, lr}
 800aa00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa04:	4291      	cmp	r1, r2
 800aa06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa0a:	d1f9      	bne.n	800aa00 <memcpy+0xe>
 800aa0c:	bd10      	pop	{r4, pc}

0800aa0e <quorem>:
 800aa0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa12:	6903      	ldr	r3, [r0, #16]
 800aa14:	690c      	ldr	r4, [r1, #16]
 800aa16:	4607      	mov	r7, r0
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	db7f      	blt.n	800ab1c <quorem+0x10e>
 800aa1c:	3c01      	subs	r4, #1
 800aa1e:	f100 0514 	add.w	r5, r0, #20
 800aa22:	f101 0814 	add.w	r8, r1, #20
 800aa26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa34:	3301      	adds	r3, #1
 800aa36:	429a      	cmp	r2, r3
 800aa38:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa44:	d331      	bcc.n	800aaaa <quorem+0x9c>
 800aa46:	f04f 0e00 	mov.w	lr, #0
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	46ac      	mov	ip, r5
 800aa4e:	46f2      	mov	sl, lr
 800aa50:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa54:	b293      	uxth	r3, r2
 800aa56:	fb06 e303 	mla	r3, r6, r3, lr
 800aa5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa5e:	0c1a      	lsrs	r2, r3, #16
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	fb06 220e 	mla	r2, r6, lr, r2
 800aa66:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6a:	f8dc a000 	ldr.w	sl, [ip]
 800aa6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa72:	fa1f fa8a 	uxth.w	sl, sl
 800aa76:	4453      	add	r3, sl
 800aa78:	f8dc a000 	ldr.w	sl, [ip]
 800aa7c:	b292      	uxth	r2, r2
 800aa7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa8c:	4581      	cmp	r9, r0
 800aa8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa92:	f84c 3b04 	str.w	r3, [ip], #4
 800aa96:	d2db      	bcs.n	800aa50 <quorem+0x42>
 800aa98:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa9c:	b92b      	cbnz	r3, 800aaaa <quorem+0x9c>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	3b04      	subs	r3, #4
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	d32d      	bcc.n	800ab04 <quorem+0xf6>
 800aaa8:	613c      	str	r4, [r7, #16]
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f001 f992 	bl	800bdd4 <__mcmp>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	db23      	blt.n	800aafc <quorem+0xee>
 800aab4:	4629      	mov	r1, r5
 800aab6:	2000      	movs	r0, #0
 800aab8:	3601      	adds	r6, #1
 800aaba:	f858 2b04 	ldr.w	r2, [r8], #4
 800aabe:	f8d1 c000 	ldr.w	ip, [r1]
 800aac2:	b293      	uxth	r3, r2
 800aac4:	1ac3      	subs	r3, r0, r3
 800aac6:	0c12      	lsrs	r2, r2, #16
 800aac8:	fa1f f08c 	uxth.w	r0, ip
 800aacc:	4403      	add	r3, r0
 800aace:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800aad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aadc:	45c1      	cmp	r9, r8
 800aade:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aae2:	f841 3b04 	str.w	r3, [r1], #4
 800aae6:	d2e8      	bcs.n	800aaba <quorem+0xac>
 800aae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaf0:	b922      	cbnz	r2, 800aafc <quorem+0xee>
 800aaf2:	3b04      	subs	r3, #4
 800aaf4:	429d      	cmp	r5, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	d30a      	bcc.n	800ab10 <quorem+0x102>
 800aafa:	613c      	str	r4, [r7, #16]
 800aafc:	4630      	mov	r0, r6
 800aafe:	b003      	add	sp, #12
 800ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	3b04      	subs	r3, #4
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d1cd      	bne.n	800aaa8 <quorem+0x9a>
 800ab0c:	3c01      	subs	r4, #1
 800ab0e:	e7c8      	b.n	800aaa2 <quorem+0x94>
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	3b04      	subs	r3, #4
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d1f0      	bne.n	800aafa <quorem+0xec>
 800ab18:	3c01      	subs	r4, #1
 800ab1a:	e7eb      	b.n	800aaf4 <quorem+0xe6>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7ee      	b.n	800aafe <quorem+0xf0>

0800ab20 <_dtoa_r>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	4616      	mov	r6, r2
 800ab26:	461f      	mov	r7, r3
 800ab28:	69c4      	ldr	r4, [r0, #28]
 800ab2a:	b099      	sub	sp, #100	; 0x64
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ab36:	b974      	cbnz	r4, 800ab56 <_dtoa_r+0x36>
 800ab38:	2010      	movs	r0, #16
 800ab3a:	f000 fe1d 	bl	800b778 <malloc>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	61e8      	str	r0, [r5, #28]
 800ab42:	b920      	cbnz	r0, 800ab4e <_dtoa_r+0x2e>
 800ab44:	21ef      	movs	r1, #239	; 0xef
 800ab46:	4bac      	ldr	r3, [pc, #688]	; (800adf8 <_dtoa_r+0x2d8>)
 800ab48:	48ac      	ldr	r0, [pc, #688]	; (800adfc <_dtoa_r+0x2dc>)
 800ab4a:	f001 fc6d 	bl	800c428 <__assert_func>
 800ab4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab52:	6004      	str	r4, [r0, #0]
 800ab54:	60c4      	str	r4, [r0, #12]
 800ab56:	69eb      	ldr	r3, [r5, #28]
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	b151      	cbz	r1, 800ab72 <_dtoa_r+0x52>
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4093      	lsls	r3, r2
 800ab62:	604a      	str	r2, [r1, #4]
 800ab64:	608b      	str	r3, [r1, #8]
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 fefa 	bl	800b960 <_Bfree>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	69eb      	ldr	r3, [r5, #28]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	1e3b      	subs	r3, r7, #0
 800ab74:	bfaf      	iteee	ge
 800ab76:	2300      	movge	r3, #0
 800ab78:	2201      	movlt	r2, #1
 800ab7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab7e:	9305      	strlt	r3, [sp, #20]
 800ab80:	bfa8      	it	ge
 800ab82:	f8c8 3000 	strge.w	r3, [r8]
 800ab86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ab8a:	4b9d      	ldr	r3, [pc, #628]	; (800ae00 <_dtoa_r+0x2e0>)
 800ab8c:	bfb8      	it	lt
 800ab8e:	f8c8 2000 	strlt.w	r2, [r8]
 800ab92:	ea33 0309 	bics.w	r3, r3, r9
 800ab96:	d119      	bne.n	800abcc <_dtoa_r+0xac>
 800ab98:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aba4:	4333      	orrs	r3, r6
 800aba6:	f000 8589 	beq.w	800b6bc <_dtoa_r+0xb9c>
 800abaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abac:	b953      	cbnz	r3, 800abc4 <_dtoa_r+0xa4>
 800abae:	4b95      	ldr	r3, [pc, #596]	; (800ae04 <_dtoa_r+0x2e4>)
 800abb0:	e023      	b.n	800abfa <_dtoa_r+0xda>
 800abb2:	4b95      	ldr	r3, [pc, #596]	; (800ae08 <_dtoa_r+0x2e8>)
 800abb4:	9303      	str	r3, [sp, #12]
 800abb6:	3308      	adds	r3, #8
 800abb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	9803      	ldr	r0, [sp, #12]
 800abbe:	b019      	add	sp, #100	; 0x64
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4b8f      	ldr	r3, [pc, #572]	; (800ae04 <_dtoa_r+0x2e4>)
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	3303      	adds	r3, #3
 800abca:	e7f5      	b.n	800abb8 <_dtoa_r+0x98>
 800abcc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800abd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800abd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abd8:	2200      	movs	r2, #0
 800abda:	2300      	movs	r3, #0
 800abdc:	f7f5 ff50 	bl	8000a80 <__aeabi_dcmpeq>
 800abe0:	4680      	mov	r8, r0
 800abe2:	b160      	cbz	r0, 800abfe <_dtoa_r+0xde>
 800abe4:	2301      	movs	r3, #1
 800abe6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8562 	beq.w	800b6b6 <_dtoa_r+0xb96>
 800abf2:	4b86      	ldr	r3, [pc, #536]	; (800ae0c <_dtoa_r+0x2ec>)
 800abf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	e7de      	b.n	800abbc <_dtoa_r+0x9c>
 800abfe:	ab16      	add	r3, sp, #88	; 0x58
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	ab17      	add	r3, sp, #92	; 0x5c
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	4628      	mov	r0, r5
 800ac08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac0c:	f001 f98a 	bl	800bf24 <__d2b>
 800ac10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac14:	4682      	mov	sl, r0
 800ac16:	2c00      	cmp	r4, #0
 800ac18:	d07e      	beq.n	800ad18 <_dtoa_r+0x1f8>
 800ac1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ac2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ac34:	4619      	mov	r1, r3
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b75      	ldr	r3, [pc, #468]	; (800ae10 <_dtoa_r+0x2f0>)
 800ac3a:	f7f5 fb01 	bl	8000240 <__aeabi_dsub>
 800ac3e:	a368      	add	r3, pc, #416	; (adr r3, 800ade0 <_dtoa_r+0x2c0>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fcb4 	bl	80005b0 <__aeabi_dmul>
 800ac48:	a367      	add	r3, pc, #412	; (adr r3, 800ade8 <_dtoa_r+0x2c8>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 faf9 	bl	8000244 <__adddf3>
 800ac52:	4606      	mov	r6, r0
 800ac54:	4620      	mov	r0, r4
 800ac56:	460f      	mov	r7, r1
 800ac58:	f7f5 fc40 	bl	80004dc <__aeabi_i2d>
 800ac5c:	a364      	add	r3, pc, #400	; (adr r3, 800adf0 <_dtoa_r+0x2d0>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f7f5 fca5 	bl	80005b0 <__aeabi_dmul>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	f7f5 fae9 	bl	8000244 <__adddf3>
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	f7f5 ff4b 	bl	8000b10 <__aeabi_d2iz>
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4683      	mov	fp, r0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 ff06 	bl	8000a94 <__aeabi_dcmplt>
 800ac88:	b148      	cbz	r0, 800ac9e <_dtoa_r+0x17e>
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f7f5 fc26 	bl	80004dc <__aeabi_i2d>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	f7f5 fef4 	bl	8000a80 <__aeabi_dcmpeq>
 800ac98:	b908      	cbnz	r0, 800ac9e <_dtoa_r+0x17e>
 800ac9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac9e:	f1bb 0f16 	cmp.w	fp, #22
 800aca2:	d857      	bhi.n	800ad54 <_dtoa_r+0x234>
 800aca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aca8:	4b5a      	ldr	r3, [pc, #360]	; (800ae14 <_dtoa_r+0x2f4>)
 800acaa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	f7f5 feef 	bl	8000a94 <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d04e      	beq.n	800ad58 <_dtoa_r+0x238>
 800acba:	2300      	movs	r3, #0
 800acbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acc4:	1b1b      	subs	r3, r3, r4
 800acc6:	1e5a      	subs	r2, r3, #1
 800acc8:	bf46      	itte	mi
 800acca:	f1c3 0901 	rsbmi	r9, r3, #1
 800acce:	2300      	movmi	r3, #0
 800acd0:	f04f 0900 	movpl.w	r9, #0
 800acd4:	9209      	str	r2, [sp, #36]	; 0x24
 800acd6:	bf48      	it	mi
 800acd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 800acda:	f1bb 0f00 	cmp.w	fp, #0
 800acde:	db3d      	blt.n	800ad5c <_dtoa_r+0x23c>
 800ace0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ace6:	445b      	add	r3, fp
 800ace8:	9309      	str	r3, [sp, #36]	; 0x24
 800acea:	2300      	movs	r3, #0
 800acec:	930a      	str	r3, [sp, #40]	; 0x28
 800acee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acf0:	2b09      	cmp	r3, #9
 800acf2:	d867      	bhi.n	800adc4 <_dtoa_r+0x2a4>
 800acf4:	2b05      	cmp	r3, #5
 800acf6:	bfc4      	itt	gt
 800acf8:	3b04      	subgt	r3, #4
 800acfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 800acfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acfe:	bfc8      	it	gt
 800ad00:	2400      	movgt	r4, #0
 800ad02:	f1a3 0302 	sub.w	r3, r3, #2
 800ad06:	bfd8      	it	le
 800ad08:	2401      	movle	r4, #1
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	f200 8086 	bhi.w	800ae1c <_dtoa_r+0x2fc>
 800ad10:	e8df f003 	tbb	[pc, r3]
 800ad14:	5637392c 	.word	0x5637392c
 800ad18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad1c:	441c      	add	r4, r3
 800ad1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	bfc1      	itttt	gt
 800ad26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad2a:	fa09 f903 	lslgt.w	r9, r9, r3
 800ad2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800ad32:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ad36:	bfd6      	itet	le
 800ad38:	f1c3 0320 	rsble	r3, r3, #32
 800ad3c:	ea49 0003 	orrgt.w	r0, r9, r3
 800ad40:	fa06 f003 	lslle.w	r0, r6, r3
 800ad44:	f7f5 fbba 	bl	80004bc <__aeabi_ui2d>
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ad4e:	3c01      	subs	r4, #1
 800ad50:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad52:	e76f      	b.n	800ac34 <_dtoa_r+0x114>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e7b3      	b.n	800acc0 <_dtoa_r+0x1a0>
 800ad58:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad5a:	e7b2      	b.n	800acc2 <_dtoa_r+0x1a2>
 800ad5c:	f1cb 0300 	rsb	r3, fp, #0
 800ad60:	930a      	str	r3, [sp, #40]	; 0x28
 800ad62:	2300      	movs	r3, #0
 800ad64:	eba9 090b 	sub.w	r9, r9, fp
 800ad68:	930e      	str	r3, [sp, #56]	; 0x38
 800ad6a:	e7c0      	b.n	800acee <_dtoa_r+0x1ce>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc55      	bgt.n	800ae22 <_dtoa_r+0x302>
 800ad76:	2301      	movs	r3, #1
 800ad78:	461a      	mov	r2, r3
 800ad7a:	9306      	str	r3, [sp, #24]
 800ad7c:	9308      	str	r3, [sp, #32]
 800ad7e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad80:	e00b      	b.n	800ad9a <_dtoa_r+0x27a>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e7f3      	b.n	800ad6e <_dtoa_r+0x24e>
 800ad86:	2300      	movs	r3, #0
 800ad88:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad8c:	445b      	add	r3, fp
 800ad8e:	9306      	str	r3, [sp, #24]
 800ad90:	3301      	adds	r3, #1
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	9308      	str	r3, [sp, #32]
 800ad96:	bfb8      	it	lt
 800ad98:	2301      	movlt	r3, #1
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	69e8      	ldr	r0, [r5, #28]
 800ada0:	f102 0614 	add.w	r6, r2, #20
 800ada4:	429e      	cmp	r6, r3
 800ada6:	d940      	bls.n	800ae2a <_dtoa_r+0x30a>
 800ada8:	6041      	str	r1, [r0, #4]
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 fd98 	bl	800b8e0 <_Balloc>
 800adb0:	9003      	str	r0, [sp, #12]
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d13c      	bne.n	800ae30 <_dtoa_r+0x310>
 800adb6:	4602      	mov	r2, r0
 800adb8:	f240 11af 	movw	r1, #431	; 0x1af
 800adbc:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <_dtoa_r+0x2f8>)
 800adbe:	e6c3      	b.n	800ab48 <_dtoa_r+0x28>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e7e1      	b.n	800ad88 <_dtoa_r+0x268>
 800adc4:	2401      	movs	r4, #1
 800adc6:	2300      	movs	r3, #0
 800adc8:	940b      	str	r4, [sp, #44]	; 0x2c
 800adca:	9322      	str	r3, [sp, #136]	; 0x88
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	2200      	movs	r2, #0
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	9308      	str	r3, [sp, #32]
 800add6:	2312      	movs	r3, #18
 800add8:	e7d1      	b.n	800ad7e <_dtoa_r+0x25e>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	636f4361 	.word	0x636f4361
 800ade4:	3fd287a7 	.word	0x3fd287a7
 800ade8:	8b60c8b3 	.word	0x8b60c8b3
 800adec:	3fc68a28 	.word	0x3fc68a28
 800adf0:	509f79fb 	.word	0x509f79fb
 800adf4:	3fd34413 	.word	0x3fd34413
 800adf8:	0800d45d 	.word	0x0800d45d
 800adfc:	0800d474 	.word	0x0800d474
 800ae00:	7ff00000 	.word	0x7ff00000
 800ae04:	0800d459 	.word	0x0800d459
 800ae08:	0800d450 	.word	0x0800d450
 800ae0c:	0800d42d 	.word	0x0800d42d
 800ae10:	3ff80000 	.word	0x3ff80000
 800ae14:	0800d560 	.word	0x0800d560
 800ae18:	0800d4cc 	.word	0x0800d4cc
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae20:	e7d4      	b.n	800adcc <_dtoa_r+0x2ac>
 800ae22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae24:	9306      	str	r3, [sp, #24]
 800ae26:	9308      	str	r3, [sp, #32]
 800ae28:	e7b7      	b.n	800ad9a <_dtoa_r+0x27a>
 800ae2a:	3101      	adds	r1, #1
 800ae2c:	0052      	lsls	r2, r2, #1
 800ae2e:	e7b7      	b.n	800ada0 <_dtoa_r+0x280>
 800ae30:	69eb      	ldr	r3, [r5, #28]
 800ae32:	9a03      	ldr	r2, [sp, #12]
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	9b08      	ldr	r3, [sp, #32]
 800ae38:	2b0e      	cmp	r3, #14
 800ae3a:	f200 80a8 	bhi.w	800af8e <_dtoa_r+0x46e>
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	f000 80a5 	beq.w	800af8e <_dtoa_r+0x46e>
 800ae44:	f1bb 0f00 	cmp.w	fp, #0
 800ae48:	dd34      	ble.n	800aeb4 <_dtoa_r+0x394>
 800ae4a:	4b9a      	ldr	r3, [pc, #616]	; (800b0b4 <_dtoa_r+0x594>)
 800ae4c:	f00b 020f 	and.w	r2, fp, #15
 800ae50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ae58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae60:	ea4f 142b 	mov.w	r4, fp, asr #4
 800ae64:	d016      	beq.n	800ae94 <_dtoa_r+0x374>
 800ae66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae6a:	4b93      	ldr	r3, [pc, #588]	; (800b0b8 <_dtoa_r+0x598>)
 800ae6c:	2703      	movs	r7, #3
 800ae6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae72:	f7f5 fcc7 	bl	8000804 <__aeabi_ddiv>
 800ae76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae7a:	f004 040f 	and.w	r4, r4, #15
 800ae7e:	4e8e      	ldr	r6, [pc, #568]	; (800b0b8 <_dtoa_r+0x598>)
 800ae80:	b954      	cbnz	r4, 800ae98 <_dtoa_r+0x378>
 800ae82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae8a:	f7f5 fcbb 	bl	8000804 <__aeabi_ddiv>
 800ae8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae92:	e029      	b.n	800aee8 <_dtoa_r+0x3c8>
 800ae94:	2702      	movs	r7, #2
 800ae96:	e7f2      	b.n	800ae7e <_dtoa_r+0x35e>
 800ae98:	07e1      	lsls	r1, r4, #31
 800ae9a:	d508      	bpl.n	800aeae <_dtoa_r+0x38e>
 800ae9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aea0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aea4:	f7f5 fb84 	bl	80005b0 <__aeabi_dmul>
 800aea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aeac:	3701      	adds	r7, #1
 800aeae:	1064      	asrs	r4, r4, #1
 800aeb0:	3608      	adds	r6, #8
 800aeb2:	e7e5      	b.n	800ae80 <_dtoa_r+0x360>
 800aeb4:	f000 80a5 	beq.w	800b002 <_dtoa_r+0x4e2>
 800aeb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aebc:	f1cb 0400 	rsb	r4, fp, #0
 800aec0:	4b7c      	ldr	r3, [pc, #496]	; (800b0b4 <_dtoa_r+0x594>)
 800aec2:	f004 020f 	and.w	r2, r4, #15
 800aec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fb6f 	bl	80005b0 <__aeabi_dmul>
 800aed2:	2702      	movs	r7, #2
 800aed4:	2300      	movs	r3, #0
 800aed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeda:	4e77      	ldr	r6, [pc, #476]	; (800b0b8 <_dtoa_r+0x598>)
 800aedc:	1124      	asrs	r4, r4, #4
 800aede:	2c00      	cmp	r4, #0
 800aee0:	f040 8084 	bne.w	800afec <_dtoa_r+0x4cc>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1d2      	bne.n	800ae8e <_dtoa_r+0x36e>
 800aee8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aeec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 8087 	beq.w	800b006 <_dtoa_r+0x4e6>
 800aef8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aefc:	2200      	movs	r2, #0
 800aefe:	4b6f      	ldr	r3, [pc, #444]	; (800b0bc <_dtoa_r+0x59c>)
 800af00:	f7f5 fdc8 	bl	8000a94 <__aeabi_dcmplt>
 800af04:	2800      	cmp	r0, #0
 800af06:	d07e      	beq.n	800b006 <_dtoa_r+0x4e6>
 800af08:	9b08      	ldr	r3, [sp, #32]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d07b      	beq.n	800b006 <_dtoa_r+0x4e6>
 800af0e:	9b06      	ldr	r3, [sp, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dd38      	ble.n	800af86 <_dtoa_r+0x466>
 800af14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af18:	2200      	movs	r2, #0
 800af1a:	4b69      	ldr	r3, [pc, #420]	; (800b0c0 <_dtoa_r+0x5a0>)
 800af1c:	f7f5 fb48 	bl	80005b0 <__aeabi_dmul>
 800af20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af24:	9c06      	ldr	r4, [sp, #24]
 800af26:	f10b 38ff 	add.w	r8, fp, #4294967295
 800af2a:	3701      	adds	r7, #1
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7f5 fad5 	bl	80004dc <__aeabi_i2d>
 800af32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af36:	f7f5 fb3b 	bl	80005b0 <__aeabi_dmul>
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b61      	ldr	r3, [pc, #388]	; (800b0c4 <_dtoa_r+0x5a4>)
 800af3e:	f7f5 f981 	bl	8000244 <__adddf3>
 800af42:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af4a:	9611      	str	r6, [sp, #68]	; 0x44
 800af4c:	2c00      	cmp	r4, #0
 800af4e:	d15d      	bne.n	800b00c <_dtoa_r+0x4ec>
 800af50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af54:	2200      	movs	r2, #0
 800af56:	4b5c      	ldr	r3, [pc, #368]	; (800b0c8 <_dtoa_r+0x5a8>)
 800af58:	f7f5 f972 	bl	8000240 <__aeabi_dsub>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af64:	4633      	mov	r3, r6
 800af66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af68:	f7f5 fdb2 	bl	8000ad0 <__aeabi_dcmpgt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 8295 	bne.w	800b49c <_dtoa_r+0x97c>
 800af72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800af7c:	f7f5 fd8a 	bl	8000a94 <__aeabi_dcmplt>
 800af80:	2800      	cmp	r0, #0
 800af82:	f040 8289 	bne.w	800b498 <_dtoa_r+0x978>
 800af86:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800af8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af90:	2b00      	cmp	r3, #0
 800af92:	f2c0 8151 	blt.w	800b238 <_dtoa_r+0x718>
 800af96:	f1bb 0f0e 	cmp.w	fp, #14
 800af9a:	f300 814d 	bgt.w	800b238 <_dtoa_r+0x718>
 800af9e:	4b45      	ldr	r3, [pc, #276]	; (800b0b4 <_dtoa_r+0x594>)
 800afa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afa8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800afac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f280 80da 	bge.w	800b168 <_dtoa_r+0x648>
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f300 80d6 	bgt.w	800b168 <_dtoa_r+0x648>
 800afbc:	f040 826b 	bne.w	800b496 <_dtoa_r+0x976>
 800afc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afc4:	2200      	movs	r2, #0
 800afc6:	4b40      	ldr	r3, [pc, #256]	; (800b0c8 <_dtoa_r+0x5a8>)
 800afc8:	f7f5 faf2 	bl	80005b0 <__aeabi_dmul>
 800afcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd0:	f7f5 fd74 	bl	8000abc <__aeabi_dcmpge>
 800afd4:	9c08      	ldr	r4, [sp, #32]
 800afd6:	4626      	mov	r6, r4
 800afd8:	2800      	cmp	r0, #0
 800afda:	f040 8241 	bne.w	800b460 <_dtoa_r+0x940>
 800afde:	2331      	movs	r3, #49	; 0x31
 800afe0:	9f03      	ldr	r7, [sp, #12]
 800afe2:	f10b 0b01 	add.w	fp, fp, #1
 800afe6:	f807 3b01 	strb.w	r3, [r7], #1
 800afea:	e23d      	b.n	800b468 <_dtoa_r+0x948>
 800afec:	07e2      	lsls	r2, r4, #31
 800afee:	d505      	bpl.n	800affc <_dtoa_r+0x4dc>
 800aff0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aff4:	f7f5 fadc 	bl	80005b0 <__aeabi_dmul>
 800aff8:	2301      	movs	r3, #1
 800affa:	3701      	adds	r7, #1
 800affc:	1064      	asrs	r4, r4, #1
 800affe:	3608      	adds	r6, #8
 800b000:	e76d      	b.n	800aede <_dtoa_r+0x3be>
 800b002:	2702      	movs	r7, #2
 800b004:	e770      	b.n	800aee8 <_dtoa_r+0x3c8>
 800b006:	46d8      	mov	r8, fp
 800b008:	9c08      	ldr	r4, [sp, #32]
 800b00a:	e78f      	b.n	800af2c <_dtoa_r+0x40c>
 800b00c:	9903      	ldr	r1, [sp, #12]
 800b00e:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <_dtoa_r+0x594>)
 800b010:	4421      	add	r1, r4
 800b012:	9112      	str	r1, [sp, #72]	; 0x48
 800b014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b016:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b01a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b01e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b022:	2900      	cmp	r1, #0
 800b024:	d054      	beq.n	800b0d0 <_dtoa_r+0x5b0>
 800b026:	2000      	movs	r0, #0
 800b028:	4928      	ldr	r1, [pc, #160]	; (800b0cc <_dtoa_r+0x5ac>)
 800b02a:	f7f5 fbeb 	bl	8000804 <__aeabi_ddiv>
 800b02e:	463b      	mov	r3, r7
 800b030:	4632      	mov	r2, r6
 800b032:	f7f5 f905 	bl	8000240 <__aeabi_dsub>
 800b036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b03a:	9f03      	ldr	r7, [sp, #12]
 800b03c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b040:	f7f5 fd66 	bl	8000b10 <__aeabi_d2iz>
 800b044:	4604      	mov	r4, r0
 800b046:	f7f5 fa49 	bl	80004dc <__aeabi_i2d>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b052:	f7f5 f8f5 	bl	8000240 <__aeabi_dsub>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	3430      	adds	r4, #48	; 0x30
 800b05c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b060:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b064:	f807 4b01 	strb.w	r4, [r7], #1
 800b068:	f7f5 fd14 	bl	8000a94 <__aeabi_dcmplt>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d173      	bne.n	800b158 <_dtoa_r+0x638>
 800b070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b074:	2000      	movs	r0, #0
 800b076:	4911      	ldr	r1, [pc, #68]	; (800b0bc <_dtoa_r+0x59c>)
 800b078:	f7f5 f8e2 	bl	8000240 <__aeabi_dsub>
 800b07c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b080:	f7f5 fd08 	bl	8000a94 <__aeabi_dcmplt>
 800b084:	2800      	cmp	r0, #0
 800b086:	f040 80b6 	bne.w	800b1f6 <_dtoa_r+0x6d6>
 800b08a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b08c:	429f      	cmp	r7, r3
 800b08e:	f43f af7a 	beq.w	800af86 <_dtoa_r+0x466>
 800b092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b096:	2200      	movs	r2, #0
 800b098:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <_dtoa_r+0x5a0>)
 800b09a:	f7f5 fa89 	bl	80005b0 <__aeabi_dmul>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0a8:	4b05      	ldr	r3, [pc, #20]	; (800b0c0 <_dtoa_r+0x5a0>)
 800b0aa:	f7f5 fa81 	bl	80005b0 <__aeabi_dmul>
 800b0ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b2:	e7c3      	b.n	800b03c <_dtoa_r+0x51c>
 800b0b4:	0800d560 	.word	0x0800d560
 800b0b8:	0800d538 	.word	0x0800d538
 800b0bc:	3ff00000 	.word	0x3ff00000
 800b0c0:	40240000 	.word	0x40240000
 800b0c4:	401c0000 	.word	0x401c0000
 800b0c8:	40140000 	.word	0x40140000
 800b0cc:	3fe00000 	.word	0x3fe00000
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	f7f5 fa6c 	bl	80005b0 <__aeabi_dmul>
 800b0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0de:	9c03      	ldr	r4, [sp, #12]
 800b0e0:	9314      	str	r3, [sp, #80]	; 0x50
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	f7f5 fd13 	bl	8000b10 <__aeabi_d2iz>
 800b0ea:	9015      	str	r0, [sp, #84]	; 0x54
 800b0ec:	f7f5 f9f6 	bl	80004dc <__aeabi_i2d>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f8:	f7f5 f8a2 	bl	8000240 <__aeabi_dsub>
 800b0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0fe:	4606      	mov	r6, r0
 800b100:	3330      	adds	r3, #48	; 0x30
 800b102:	f804 3b01 	strb.w	r3, [r4], #1
 800b106:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b108:	460f      	mov	r7, r1
 800b10a:	429c      	cmp	r4, r3
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	d124      	bne.n	800b15c <_dtoa_r+0x63c>
 800b112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b116:	4baf      	ldr	r3, [pc, #700]	; (800b3d4 <_dtoa_r+0x8b4>)
 800b118:	f7f5 f894 	bl	8000244 <__adddf3>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4630      	mov	r0, r6
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 fcd4 	bl	8000ad0 <__aeabi_dcmpgt>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d163      	bne.n	800b1f4 <_dtoa_r+0x6d4>
 800b12c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b130:	2000      	movs	r0, #0
 800b132:	49a8      	ldr	r1, [pc, #672]	; (800b3d4 <_dtoa_r+0x8b4>)
 800b134:	f7f5 f884 	bl	8000240 <__aeabi_dsub>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	4630      	mov	r0, r6
 800b13e:	4639      	mov	r1, r7
 800b140:	f7f5 fca8 	bl	8000a94 <__aeabi_dcmplt>
 800b144:	2800      	cmp	r0, #0
 800b146:	f43f af1e 	beq.w	800af86 <_dtoa_r+0x466>
 800b14a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b14c:	1e7b      	subs	r3, r7, #1
 800b14e:	9314      	str	r3, [sp, #80]	; 0x50
 800b150:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b154:	2b30      	cmp	r3, #48	; 0x30
 800b156:	d0f8      	beq.n	800b14a <_dtoa_r+0x62a>
 800b158:	46c3      	mov	fp, r8
 800b15a:	e03b      	b.n	800b1d4 <_dtoa_r+0x6b4>
 800b15c:	4b9e      	ldr	r3, [pc, #632]	; (800b3d8 <_dtoa_r+0x8b8>)
 800b15e:	f7f5 fa27 	bl	80005b0 <__aeabi_dmul>
 800b162:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b166:	e7bc      	b.n	800b0e2 <_dtoa_r+0x5c2>
 800b168:	9f03      	ldr	r7, [sp, #12]
 800b16a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b16e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 fb45 	bl	8000804 <__aeabi_ddiv>
 800b17a:	f7f5 fcc9 	bl	8000b10 <__aeabi_d2iz>
 800b17e:	4604      	mov	r4, r0
 800b180:	f7f5 f9ac 	bl	80004dc <__aeabi_i2d>
 800b184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b188:	f7f5 fa12 	bl	80005b0 <__aeabi_dmul>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4640      	mov	r0, r8
 800b192:	4649      	mov	r1, r9
 800b194:	f7f5 f854 	bl	8000240 <__aeabi_dsub>
 800b198:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b19c:	f807 6b01 	strb.w	r6, [r7], #1
 800b1a0:	9e03      	ldr	r6, [sp, #12]
 800b1a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b1a6:	1bbe      	subs	r6, r7, r6
 800b1a8:	45b4      	cmp	ip, r6
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	d136      	bne.n	800b21e <_dtoa_r+0x6fe>
 800b1b0:	f7f5 f848 	bl	8000244 <__adddf3>
 800b1b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4689      	mov	r9, r1
 800b1bc:	f7f5 fc88 	bl	8000ad0 <__aeabi_dcmpgt>
 800b1c0:	bb58      	cbnz	r0, 800b21a <_dtoa_r+0x6fa>
 800b1c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	f7f5 fc59 	bl	8000a80 <__aeabi_dcmpeq>
 800b1ce:	b108      	cbz	r0, 800b1d4 <_dtoa_r+0x6b4>
 800b1d0:	07e3      	lsls	r3, r4, #31
 800b1d2:	d422      	bmi.n	800b21a <_dtoa_r+0x6fa>
 800b1d4:	4651      	mov	r1, sl
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 fbc2 	bl	800b960 <_Bfree>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1e0:	703b      	strb	r3, [r7, #0]
 800b1e2:	f10b 0301 	add.w	r3, fp, #1
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f43f ace6 	beq.w	800abbc <_dtoa_r+0x9c>
 800b1f0:	601f      	str	r7, [r3, #0]
 800b1f2:	e4e3      	b.n	800abbc <_dtoa_r+0x9c>
 800b1f4:	4627      	mov	r7, r4
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	461f      	mov	r7, r3
 800b1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1fe:	2a39      	cmp	r2, #57	; 0x39
 800b200:	d107      	bne.n	800b212 <_dtoa_r+0x6f2>
 800b202:	9a03      	ldr	r2, [sp, #12]
 800b204:	429a      	cmp	r2, r3
 800b206:	d1f7      	bne.n	800b1f8 <_dtoa_r+0x6d8>
 800b208:	2230      	movs	r2, #48	; 0x30
 800b20a:	9903      	ldr	r1, [sp, #12]
 800b20c:	f108 0801 	add.w	r8, r8, #1
 800b210:	700a      	strb	r2, [r1, #0]
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	3201      	adds	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
 800b218:	e79e      	b.n	800b158 <_dtoa_r+0x638>
 800b21a:	46d8      	mov	r8, fp
 800b21c:	e7eb      	b.n	800b1f6 <_dtoa_r+0x6d6>
 800b21e:	2200      	movs	r2, #0
 800b220:	4b6d      	ldr	r3, [pc, #436]	; (800b3d8 <_dtoa_r+0x8b8>)
 800b222:	f7f5 f9c5 	bl	80005b0 <__aeabi_dmul>
 800b226:	2200      	movs	r2, #0
 800b228:	2300      	movs	r3, #0
 800b22a:	4680      	mov	r8, r0
 800b22c:	4689      	mov	r9, r1
 800b22e:	f7f5 fc27 	bl	8000a80 <__aeabi_dcmpeq>
 800b232:	2800      	cmp	r0, #0
 800b234:	d09b      	beq.n	800b16e <_dtoa_r+0x64e>
 800b236:	e7cd      	b.n	800b1d4 <_dtoa_r+0x6b4>
 800b238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b23a:	2a00      	cmp	r2, #0
 800b23c:	f000 80c4 	beq.w	800b3c8 <_dtoa_r+0x8a8>
 800b240:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b242:	2a01      	cmp	r2, #1
 800b244:	f300 80a8 	bgt.w	800b398 <_dtoa_r+0x878>
 800b248:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	f000 80a0 	beq.w	800b390 <_dtoa_r+0x870>
 800b250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b254:	464f      	mov	r7, r9
 800b256:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b25a:	2101      	movs	r1, #1
 800b25c:	441a      	add	r2, r3
 800b25e:	4628      	mov	r0, r5
 800b260:	4499      	add	r9, r3
 800b262:	9209      	str	r2, [sp, #36]	; 0x24
 800b264:	f000 fc32 	bl	800bacc <__i2b>
 800b268:	4606      	mov	r6, r0
 800b26a:	b15f      	cbz	r7, 800b284 <_dtoa_r+0x764>
 800b26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd08      	ble.n	800b284 <_dtoa_r+0x764>
 800b272:	42bb      	cmp	r3, r7
 800b274:	bfa8      	it	ge
 800b276:	463b      	movge	r3, r7
 800b278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b27a:	eba9 0903 	sub.w	r9, r9, r3
 800b27e:	1aff      	subs	r7, r7, r3
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	9309      	str	r3, [sp, #36]	; 0x24
 800b284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b286:	b1f3      	cbz	r3, 800b2c6 <_dtoa_r+0x7a6>
 800b288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 80a0 	beq.w	800b3d0 <_dtoa_r+0x8b0>
 800b290:	2c00      	cmp	r4, #0
 800b292:	dd10      	ble.n	800b2b6 <_dtoa_r+0x796>
 800b294:	4631      	mov	r1, r6
 800b296:	4622      	mov	r2, r4
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 fcd5 	bl	800bc48 <__pow5mult>
 800b29e:	4652      	mov	r2, sl
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f000 fc27 	bl	800baf8 <__multiply>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4651      	mov	r1, sl
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f000 fb56 	bl	800b960 <_Bfree>
 800b2b4:	46c2      	mov	sl, r8
 800b2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b8:	1b1a      	subs	r2, r3, r4
 800b2ba:	d004      	beq.n	800b2c6 <_dtoa_r+0x7a6>
 800b2bc:	4651      	mov	r1, sl
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f000 fcc2 	bl	800bc48 <__pow5mult>
 800b2c4:	4682      	mov	sl, r0
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 fbff 	bl	800bacc <__i2b>
 800b2ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f340 8082 	ble.w	800b3dc <_dtoa_r+0x8bc>
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4601      	mov	r1, r0
 800b2dc:	4628      	mov	r0, r5
 800b2de:	f000 fcb3 	bl	800bc48 <__pow5mult>
 800b2e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	dd7b      	ble.n	800b3e2 <_dtoa_r+0x8c2>
 800b2ea:	f04f 0800 	mov.w	r8, #0
 800b2ee:	6923      	ldr	r3, [r4, #16]
 800b2f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2f4:	6918      	ldr	r0, [r3, #16]
 800b2f6:	f000 fb9b 	bl	800ba30 <__hi0bits>
 800b2fa:	f1c0 0020 	rsb	r0, r0, #32
 800b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b300:	4418      	add	r0, r3
 800b302:	f010 001f 	ands.w	r0, r0, #31
 800b306:	f000 8092 	beq.w	800b42e <_dtoa_r+0x90e>
 800b30a:	f1c0 0320 	rsb	r3, r0, #32
 800b30e:	2b04      	cmp	r3, #4
 800b310:	f340 8085 	ble.w	800b41e <_dtoa_r+0x8fe>
 800b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b316:	f1c0 001c 	rsb	r0, r0, #28
 800b31a:	4403      	add	r3, r0
 800b31c:	4481      	add	r9, r0
 800b31e:	4407      	add	r7, r0
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	f1b9 0f00 	cmp.w	r9, #0
 800b326:	dd05      	ble.n	800b334 <_dtoa_r+0x814>
 800b328:	4651      	mov	r1, sl
 800b32a:	464a      	mov	r2, r9
 800b32c:	4628      	mov	r0, r5
 800b32e:	f000 fce5 	bl	800bcfc <__lshift>
 800b332:	4682      	mov	sl, r0
 800b334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd05      	ble.n	800b346 <_dtoa_r+0x826>
 800b33a:	4621      	mov	r1, r4
 800b33c:	461a      	mov	r2, r3
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 fcdc 	bl	800bcfc <__lshift>
 800b344:	4604      	mov	r4, r0
 800b346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d072      	beq.n	800b432 <_dtoa_r+0x912>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4650      	mov	r0, sl
 800b350:	f000 fd40 	bl	800bdd4 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	da6c      	bge.n	800b432 <_dtoa_r+0x912>
 800b358:	2300      	movs	r3, #0
 800b35a:	4651      	mov	r1, sl
 800b35c:	220a      	movs	r2, #10
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 fb20 	bl	800b9a4 <__multadd>
 800b364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b366:	4682      	mov	sl, r0
 800b368:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 81ac 	beq.w	800b6ca <_dtoa_r+0xbaa>
 800b372:	2300      	movs	r3, #0
 800b374:	4631      	mov	r1, r6
 800b376:	220a      	movs	r2, #10
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 fb13 	bl	800b9a4 <__multadd>
 800b37e:	9b06      	ldr	r3, [sp, #24]
 800b380:	4606      	mov	r6, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	f300 8093 	bgt.w	800b4ae <_dtoa_r+0x98e>
 800b388:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	dc59      	bgt.n	800b442 <_dtoa_r+0x922>
 800b38e:	e08e      	b.n	800b4ae <_dtoa_r+0x98e>
 800b390:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b396:	e75d      	b.n	800b254 <_dtoa_r+0x734>
 800b398:	9b08      	ldr	r3, [sp, #32]
 800b39a:	1e5c      	subs	r4, r3, #1
 800b39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39e:	42a3      	cmp	r3, r4
 800b3a0:	bfbf      	itttt	lt
 800b3a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b3a6:	1ae3      	sublt	r3, r4, r3
 800b3a8:	18d2      	addlt	r2, r2, r3
 800b3aa:	bfa8      	it	ge
 800b3ac:	1b1c      	subge	r4, r3, r4
 800b3ae:	9b08      	ldr	r3, [sp, #32]
 800b3b0:	bfbe      	ittt	lt
 800b3b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b3b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b3b6:	2400      	movlt	r4, #0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bfb5      	itete	lt
 800b3bc:	eba9 0703 	sublt.w	r7, r9, r3
 800b3c0:	464f      	movge	r7, r9
 800b3c2:	2300      	movlt	r3, #0
 800b3c4:	9b08      	ldrge	r3, [sp, #32]
 800b3c6:	e747      	b.n	800b258 <_dtoa_r+0x738>
 800b3c8:	464f      	mov	r7, r9
 800b3ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b3ce:	e74c      	b.n	800b26a <_dtoa_r+0x74a>
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	e773      	b.n	800b2bc <_dtoa_r+0x79c>
 800b3d4:	3fe00000 	.word	0x3fe00000
 800b3d8:	40240000 	.word	0x40240000
 800b3dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	dc18      	bgt.n	800b414 <_dtoa_r+0x8f4>
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	b9b3      	cbnz	r3, 800b414 <_dtoa_r+0x8f4>
 800b3e6:	9b05      	ldr	r3, [sp, #20]
 800b3e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3ec:	b993      	cbnz	r3, 800b414 <_dtoa_r+0x8f4>
 800b3ee:	9b05      	ldr	r3, [sp, #20]
 800b3f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3f4:	0d1b      	lsrs	r3, r3, #20
 800b3f6:	051b      	lsls	r3, r3, #20
 800b3f8:	b17b      	cbz	r3, 800b41a <_dtoa_r+0x8fa>
 800b3fa:	f04f 0801 	mov.w	r8, #1
 800b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b400:	f109 0901 	add.w	r9, r9, #1
 800b404:	3301      	adds	r3, #1
 800b406:	9309      	str	r3, [sp, #36]	; 0x24
 800b408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f47f af6f 	bne.w	800b2ee <_dtoa_r+0x7ce>
 800b410:	2001      	movs	r0, #1
 800b412:	e774      	b.n	800b2fe <_dtoa_r+0x7de>
 800b414:	f04f 0800 	mov.w	r8, #0
 800b418:	e7f6      	b.n	800b408 <_dtoa_r+0x8e8>
 800b41a:	4698      	mov	r8, r3
 800b41c:	e7f4      	b.n	800b408 <_dtoa_r+0x8e8>
 800b41e:	d080      	beq.n	800b322 <_dtoa_r+0x802>
 800b420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b422:	331c      	adds	r3, #28
 800b424:	441a      	add	r2, r3
 800b426:	4499      	add	r9, r3
 800b428:	441f      	add	r7, r3
 800b42a:	9209      	str	r2, [sp, #36]	; 0x24
 800b42c:	e779      	b.n	800b322 <_dtoa_r+0x802>
 800b42e:	4603      	mov	r3, r0
 800b430:	e7f6      	b.n	800b420 <_dtoa_r+0x900>
 800b432:	9b08      	ldr	r3, [sp, #32]
 800b434:	2b00      	cmp	r3, #0
 800b436:	dc34      	bgt.n	800b4a2 <_dtoa_r+0x982>
 800b438:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	dd31      	ble.n	800b4a2 <_dtoa_r+0x982>
 800b43e:	9b08      	ldr	r3, [sp, #32]
 800b440:	9306      	str	r3, [sp, #24]
 800b442:	9b06      	ldr	r3, [sp, #24]
 800b444:	b963      	cbnz	r3, 800b460 <_dtoa_r+0x940>
 800b446:	4621      	mov	r1, r4
 800b448:	2205      	movs	r2, #5
 800b44a:	4628      	mov	r0, r5
 800b44c:	f000 faaa 	bl	800b9a4 <__multadd>
 800b450:	4601      	mov	r1, r0
 800b452:	4604      	mov	r4, r0
 800b454:	4650      	mov	r0, sl
 800b456:	f000 fcbd 	bl	800bdd4 <__mcmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f73f adbf 	bgt.w	800afde <_dtoa_r+0x4be>
 800b460:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b462:	9f03      	ldr	r7, [sp, #12]
 800b464:	ea6f 0b03 	mvn.w	fp, r3
 800b468:	f04f 0800 	mov.w	r8, #0
 800b46c:	4621      	mov	r1, r4
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 fa76 	bl	800b960 <_Bfree>
 800b474:	2e00      	cmp	r6, #0
 800b476:	f43f aead 	beq.w	800b1d4 <_dtoa_r+0x6b4>
 800b47a:	f1b8 0f00 	cmp.w	r8, #0
 800b47e:	d005      	beq.n	800b48c <_dtoa_r+0x96c>
 800b480:	45b0      	cmp	r8, r6
 800b482:	d003      	beq.n	800b48c <_dtoa_r+0x96c>
 800b484:	4641      	mov	r1, r8
 800b486:	4628      	mov	r0, r5
 800b488:	f000 fa6a 	bl	800b960 <_Bfree>
 800b48c:	4631      	mov	r1, r6
 800b48e:	4628      	mov	r0, r5
 800b490:	f000 fa66 	bl	800b960 <_Bfree>
 800b494:	e69e      	b.n	800b1d4 <_dtoa_r+0x6b4>
 800b496:	2400      	movs	r4, #0
 800b498:	4626      	mov	r6, r4
 800b49a:	e7e1      	b.n	800b460 <_dtoa_r+0x940>
 800b49c:	46c3      	mov	fp, r8
 800b49e:	4626      	mov	r6, r4
 800b4a0:	e59d      	b.n	800afde <_dtoa_r+0x4be>
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80c8 	beq.w	800b63a <_dtoa_r+0xb1a>
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	9306      	str	r3, [sp, #24]
 800b4ae:	2f00      	cmp	r7, #0
 800b4b0:	dd05      	ble.n	800b4be <_dtoa_r+0x99e>
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	463a      	mov	r2, r7
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 fc20 	bl	800bcfc <__lshift>
 800b4bc:	4606      	mov	r6, r0
 800b4be:	f1b8 0f00 	cmp.w	r8, #0
 800b4c2:	d05b      	beq.n	800b57c <_dtoa_r+0xa5c>
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	6871      	ldr	r1, [r6, #4]
 800b4c8:	f000 fa0a 	bl	800b8e0 <_Balloc>
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	b928      	cbnz	r0, 800b4dc <_dtoa_r+0x9bc>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b4d6:	4b81      	ldr	r3, [pc, #516]	; (800b6dc <_dtoa_r+0xbbc>)
 800b4d8:	f7ff bb36 	b.w	800ab48 <_dtoa_r+0x28>
 800b4dc:	6932      	ldr	r2, [r6, #16]
 800b4de:	f106 010c 	add.w	r1, r6, #12
 800b4e2:	3202      	adds	r2, #2
 800b4e4:	0092      	lsls	r2, r2, #2
 800b4e6:	300c      	adds	r0, #12
 800b4e8:	f7ff fa83 	bl	800a9f2 <memcpy>
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f000 fc03 	bl	800bcfc <__lshift>
 800b4f6:	46b0      	mov	r8, r6
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	9a03      	ldr	r2, [sp, #12]
 800b4fe:	3301      	adds	r3, #1
 800b500:	9308      	str	r3, [sp, #32]
 800b502:	9b06      	ldr	r3, [sp, #24]
 800b504:	4413      	add	r3, r2
 800b506:	930b      	str	r3, [sp, #44]	; 0x2c
 800b508:	9b04      	ldr	r3, [sp, #16]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	930a      	str	r3, [sp, #40]	; 0x28
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	4621      	mov	r1, r4
 800b514:	3b01      	subs	r3, #1
 800b516:	4650      	mov	r0, sl
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	f7ff fa78 	bl	800aa0e <quorem>
 800b51e:	4641      	mov	r1, r8
 800b520:	9006      	str	r0, [sp, #24]
 800b522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b526:	4650      	mov	r0, sl
 800b528:	f000 fc54 	bl	800bdd4 <__mcmp>
 800b52c:	4632      	mov	r2, r6
 800b52e:	9009      	str	r0, [sp, #36]	; 0x24
 800b530:	4621      	mov	r1, r4
 800b532:	4628      	mov	r0, r5
 800b534:	f000 fc6a 	bl	800be0c <__mdiff>
 800b538:	68c2      	ldr	r2, [r0, #12]
 800b53a:	4607      	mov	r7, r0
 800b53c:	bb02      	cbnz	r2, 800b580 <_dtoa_r+0xa60>
 800b53e:	4601      	mov	r1, r0
 800b540:	4650      	mov	r0, sl
 800b542:	f000 fc47 	bl	800bdd4 <__mcmp>
 800b546:	4602      	mov	r2, r0
 800b548:	4639      	mov	r1, r7
 800b54a:	4628      	mov	r0, r5
 800b54c:	920c      	str	r2, [sp, #48]	; 0x30
 800b54e:	f000 fa07 	bl	800b960 <_Bfree>
 800b552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b556:	9f08      	ldr	r7, [sp, #32]
 800b558:	ea43 0102 	orr.w	r1, r3, r2
 800b55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55e:	4319      	orrs	r1, r3
 800b560:	d110      	bne.n	800b584 <_dtoa_r+0xa64>
 800b562:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b566:	d029      	beq.n	800b5bc <_dtoa_r+0xa9c>
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dd02      	ble.n	800b574 <_dtoa_r+0xa54>
 800b56e:	9b06      	ldr	r3, [sp, #24]
 800b570:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b574:	9b04      	ldr	r3, [sp, #16]
 800b576:	f883 9000 	strb.w	r9, [r3]
 800b57a:	e777      	b.n	800b46c <_dtoa_r+0x94c>
 800b57c:	4630      	mov	r0, r6
 800b57e:	e7ba      	b.n	800b4f6 <_dtoa_r+0x9d6>
 800b580:	2201      	movs	r2, #1
 800b582:	e7e1      	b.n	800b548 <_dtoa_r+0xa28>
 800b584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	db04      	blt.n	800b594 <_dtoa_r+0xa74>
 800b58a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b58c:	430b      	orrs	r3, r1
 800b58e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b590:	430b      	orrs	r3, r1
 800b592:	d120      	bne.n	800b5d6 <_dtoa_r+0xab6>
 800b594:	2a00      	cmp	r2, #0
 800b596:	dded      	ble.n	800b574 <_dtoa_r+0xa54>
 800b598:	4651      	mov	r1, sl
 800b59a:	2201      	movs	r2, #1
 800b59c:	4628      	mov	r0, r5
 800b59e:	f000 fbad 	bl	800bcfc <__lshift>
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	4682      	mov	sl, r0
 800b5a6:	f000 fc15 	bl	800bdd4 <__mcmp>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	dc03      	bgt.n	800b5b6 <_dtoa_r+0xa96>
 800b5ae:	d1e1      	bne.n	800b574 <_dtoa_r+0xa54>
 800b5b0:	f019 0f01 	tst.w	r9, #1
 800b5b4:	d0de      	beq.n	800b574 <_dtoa_r+0xa54>
 800b5b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b5ba:	d1d8      	bne.n	800b56e <_dtoa_r+0xa4e>
 800b5bc:	2339      	movs	r3, #57	; 0x39
 800b5be:	9a04      	ldr	r2, [sp, #16]
 800b5c0:	7013      	strb	r3, [r2, #0]
 800b5c2:	463b      	mov	r3, r7
 800b5c4:	461f      	mov	r7, r3
 800b5c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	2a39      	cmp	r2, #57	; 0x39
 800b5ce:	d06b      	beq.n	800b6a8 <_dtoa_r+0xb88>
 800b5d0:	3201      	adds	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]
 800b5d4:	e74a      	b.n	800b46c <_dtoa_r+0x94c>
 800b5d6:	2a00      	cmp	r2, #0
 800b5d8:	dd07      	ble.n	800b5ea <_dtoa_r+0xaca>
 800b5da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b5de:	d0ed      	beq.n	800b5bc <_dtoa_r+0xa9c>
 800b5e0:	9a04      	ldr	r2, [sp, #16]
 800b5e2:	f109 0301 	add.w	r3, r9, #1
 800b5e6:	7013      	strb	r3, [r2, #0]
 800b5e8:	e740      	b.n	800b46c <_dtoa_r+0x94c>
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d042      	beq.n	800b67c <_dtoa_r+0xb5c>
 800b5f6:	4651      	mov	r1, sl
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	220a      	movs	r2, #10
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f000 f9d1 	bl	800b9a4 <__multadd>
 800b602:	45b0      	cmp	r8, r6
 800b604:	4682      	mov	sl, r0
 800b606:	f04f 0300 	mov.w	r3, #0
 800b60a:	f04f 020a 	mov.w	r2, #10
 800b60e:	4641      	mov	r1, r8
 800b610:	4628      	mov	r0, r5
 800b612:	d107      	bne.n	800b624 <_dtoa_r+0xb04>
 800b614:	f000 f9c6 	bl	800b9a4 <__multadd>
 800b618:	4680      	mov	r8, r0
 800b61a:	4606      	mov	r6, r0
 800b61c:	9b08      	ldr	r3, [sp, #32]
 800b61e:	3301      	adds	r3, #1
 800b620:	9308      	str	r3, [sp, #32]
 800b622:	e775      	b.n	800b510 <_dtoa_r+0x9f0>
 800b624:	f000 f9be 	bl	800b9a4 <__multadd>
 800b628:	4631      	mov	r1, r6
 800b62a:	4680      	mov	r8, r0
 800b62c:	2300      	movs	r3, #0
 800b62e:	220a      	movs	r2, #10
 800b630:	4628      	mov	r0, r5
 800b632:	f000 f9b7 	bl	800b9a4 <__multadd>
 800b636:	4606      	mov	r6, r0
 800b638:	e7f0      	b.n	800b61c <_dtoa_r+0xafc>
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	9306      	str	r3, [sp, #24]
 800b63e:	9f03      	ldr	r7, [sp, #12]
 800b640:	4621      	mov	r1, r4
 800b642:	4650      	mov	r0, sl
 800b644:	f7ff f9e3 	bl	800aa0e <quorem>
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b64e:	f807 9b01 	strb.w	r9, [r7], #1
 800b652:	1afa      	subs	r2, r7, r3
 800b654:	9b06      	ldr	r3, [sp, #24]
 800b656:	4293      	cmp	r3, r2
 800b658:	dd07      	ble.n	800b66a <_dtoa_r+0xb4a>
 800b65a:	4651      	mov	r1, sl
 800b65c:	2300      	movs	r3, #0
 800b65e:	220a      	movs	r2, #10
 800b660:	4628      	mov	r0, r5
 800b662:	f000 f99f 	bl	800b9a4 <__multadd>
 800b666:	4682      	mov	sl, r0
 800b668:	e7ea      	b.n	800b640 <_dtoa_r+0xb20>
 800b66a:	9b06      	ldr	r3, [sp, #24]
 800b66c:	f04f 0800 	mov.w	r8, #0
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfcc      	ite	gt
 800b674:	461f      	movgt	r7, r3
 800b676:	2701      	movle	r7, #1
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	441f      	add	r7, r3
 800b67c:	4651      	mov	r1, sl
 800b67e:	2201      	movs	r2, #1
 800b680:	4628      	mov	r0, r5
 800b682:	f000 fb3b 	bl	800bcfc <__lshift>
 800b686:	4621      	mov	r1, r4
 800b688:	4682      	mov	sl, r0
 800b68a:	f000 fba3 	bl	800bdd4 <__mcmp>
 800b68e:	2800      	cmp	r0, #0
 800b690:	dc97      	bgt.n	800b5c2 <_dtoa_r+0xaa2>
 800b692:	d102      	bne.n	800b69a <_dtoa_r+0xb7a>
 800b694:	f019 0f01 	tst.w	r9, #1
 800b698:	d193      	bne.n	800b5c2 <_dtoa_r+0xaa2>
 800b69a:	463b      	mov	r3, r7
 800b69c:	461f      	mov	r7, r3
 800b69e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6a2:	2a30      	cmp	r2, #48	; 0x30
 800b6a4:	d0fa      	beq.n	800b69c <_dtoa_r+0xb7c>
 800b6a6:	e6e1      	b.n	800b46c <_dtoa_r+0x94c>
 800b6a8:	9a03      	ldr	r2, [sp, #12]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d18a      	bne.n	800b5c4 <_dtoa_r+0xaa4>
 800b6ae:	2331      	movs	r3, #49	; 0x31
 800b6b0:	f10b 0b01 	add.w	fp, fp, #1
 800b6b4:	e797      	b.n	800b5e6 <_dtoa_r+0xac6>
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <_dtoa_r+0xbc0>)
 800b6b8:	f7ff ba9f 	b.w	800abfa <_dtoa_r+0xda>
 800b6bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f47f aa77 	bne.w	800abb2 <_dtoa_r+0x92>
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <_dtoa_r+0xbc4>)
 800b6c6:	f7ff ba98 	b.w	800abfa <_dtoa_r+0xda>
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dcb6      	bgt.n	800b63e <_dtoa_r+0xb1e>
 800b6d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	f73f aeb5 	bgt.w	800b442 <_dtoa_r+0x922>
 800b6d8:	e7b1      	b.n	800b63e <_dtoa_r+0xb1e>
 800b6da:	bf00      	nop
 800b6dc:	0800d4cc 	.word	0x0800d4cc
 800b6e0:	0800d42c 	.word	0x0800d42c
 800b6e4:	0800d450 	.word	0x0800d450

0800b6e8 <_free_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	2900      	cmp	r1, #0
 800b6ee:	d040      	beq.n	800b772 <_free_r+0x8a>
 800b6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6f4:	1f0c      	subs	r4, r1, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bfb8      	it	lt
 800b6fa:	18e4      	addlt	r4, r4, r3
 800b6fc:	f000 f8e4 	bl	800b8c8 <__malloc_lock>
 800b700:	4a1c      	ldr	r2, [pc, #112]	; (800b774 <_free_r+0x8c>)
 800b702:	6813      	ldr	r3, [r2, #0]
 800b704:	b933      	cbnz	r3, 800b714 <_free_r+0x2c>
 800b706:	6063      	str	r3, [r4, #4]
 800b708:	6014      	str	r4, [r2, #0]
 800b70a:	4628      	mov	r0, r5
 800b70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b710:	f000 b8e0 	b.w	800b8d4 <__malloc_unlock>
 800b714:	42a3      	cmp	r3, r4
 800b716:	d908      	bls.n	800b72a <_free_r+0x42>
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	1821      	adds	r1, r4, r0
 800b71c:	428b      	cmp	r3, r1
 800b71e:	bf01      	itttt	eq
 800b720:	6819      	ldreq	r1, [r3, #0]
 800b722:	685b      	ldreq	r3, [r3, #4]
 800b724:	1809      	addeq	r1, r1, r0
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	e7ed      	b.n	800b706 <_free_r+0x1e>
 800b72a:	461a      	mov	r2, r3
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	b10b      	cbz	r3, 800b734 <_free_r+0x4c>
 800b730:	42a3      	cmp	r3, r4
 800b732:	d9fa      	bls.n	800b72a <_free_r+0x42>
 800b734:	6811      	ldr	r1, [r2, #0]
 800b736:	1850      	adds	r0, r2, r1
 800b738:	42a0      	cmp	r0, r4
 800b73a:	d10b      	bne.n	800b754 <_free_r+0x6c>
 800b73c:	6820      	ldr	r0, [r4, #0]
 800b73e:	4401      	add	r1, r0
 800b740:	1850      	adds	r0, r2, r1
 800b742:	4283      	cmp	r3, r0
 800b744:	6011      	str	r1, [r2, #0]
 800b746:	d1e0      	bne.n	800b70a <_free_r+0x22>
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	4408      	add	r0, r1
 800b74e:	6010      	str	r0, [r2, #0]
 800b750:	6053      	str	r3, [r2, #4]
 800b752:	e7da      	b.n	800b70a <_free_r+0x22>
 800b754:	d902      	bls.n	800b75c <_free_r+0x74>
 800b756:	230c      	movs	r3, #12
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	e7d6      	b.n	800b70a <_free_r+0x22>
 800b75c:	6820      	ldr	r0, [r4, #0]
 800b75e:	1821      	adds	r1, r4, r0
 800b760:	428b      	cmp	r3, r1
 800b762:	bf01      	itttt	eq
 800b764:	6819      	ldreq	r1, [r3, #0]
 800b766:	685b      	ldreq	r3, [r3, #4]
 800b768:	1809      	addeq	r1, r1, r0
 800b76a:	6021      	streq	r1, [r4, #0]
 800b76c:	6063      	str	r3, [r4, #4]
 800b76e:	6054      	str	r4, [r2, #4]
 800b770:	e7cb      	b.n	800b70a <_free_r+0x22>
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	20001a5c 	.word	0x20001a5c

0800b778 <malloc>:
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <malloc+0xc>)
 800b77a:	4601      	mov	r1, r0
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	f000 b823 	b.w	800b7c8 <_malloc_r>
 800b782:	bf00      	nop
 800b784:	200001d4 	.word	0x200001d4

0800b788 <sbrk_aligned>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	4e0e      	ldr	r6, [pc, #56]	; (800b7c4 <sbrk_aligned+0x3c>)
 800b78c:	460c      	mov	r4, r1
 800b78e:	6831      	ldr	r1, [r6, #0]
 800b790:	4605      	mov	r5, r0
 800b792:	b911      	cbnz	r1, 800b79a <sbrk_aligned+0x12>
 800b794:	f000 fe38 	bl	800c408 <_sbrk_r>
 800b798:	6030      	str	r0, [r6, #0]
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f000 fe33 	bl	800c408 <_sbrk_r>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d00a      	beq.n	800b7bc <sbrk_aligned+0x34>
 800b7a6:	1cc4      	adds	r4, r0, #3
 800b7a8:	f024 0403 	bic.w	r4, r4, #3
 800b7ac:	42a0      	cmp	r0, r4
 800b7ae:	d007      	beq.n	800b7c0 <sbrk_aligned+0x38>
 800b7b0:	1a21      	subs	r1, r4, r0
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 fe28 	bl	800c408 <_sbrk_r>
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d101      	bne.n	800b7c0 <sbrk_aligned+0x38>
 800b7bc:	f04f 34ff 	mov.w	r4, #4294967295
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	20001a60 	.word	0x20001a60

0800b7c8 <_malloc_r>:
 800b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	1ccd      	adds	r5, r1, #3
 800b7ce:	f025 0503 	bic.w	r5, r5, #3
 800b7d2:	3508      	adds	r5, #8
 800b7d4:	2d0c      	cmp	r5, #12
 800b7d6:	bf38      	it	cc
 800b7d8:	250c      	movcc	r5, #12
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	4607      	mov	r7, r0
 800b7de:	db01      	blt.n	800b7e4 <_malloc_r+0x1c>
 800b7e0:	42a9      	cmp	r1, r5
 800b7e2:	d905      	bls.n	800b7f0 <_malloc_r+0x28>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	603b      	str	r3, [r7, #0]
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b8c4 <_malloc_r+0xfc>
 800b7f4:	f000 f868 	bl	800b8c8 <__malloc_lock>
 800b7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b7fc:	461c      	mov	r4, r3
 800b7fe:	bb5c      	cbnz	r4, 800b858 <_malloc_r+0x90>
 800b800:	4629      	mov	r1, r5
 800b802:	4638      	mov	r0, r7
 800b804:	f7ff ffc0 	bl	800b788 <sbrk_aligned>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	4604      	mov	r4, r0
 800b80c:	d155      	bne.n	800b8ba <_malloc_r+0xf2>
 800b80e:	f8d8 4000 	ldr.w	r4, [r8]
 800b812:	4626      	mov	r6, r4
 800b814:	2e00      	cmp	r6, #0
 800b816:	d145      	bne.n	800b8a4 <_malloc_r+0xdc>
 800b818:	2c00      	cmp	r4, #0
 800b81a:	d048      	beq.n	800b8ae <_malloc_r+0xe6>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	4631      	mov	r1, r6
 800b820:	4638      	mov	r0, r7
 800b822:	eb04 0903 	add.w	r9, r4, r3
 800b826:	f000 fdef 	bl	800c408 <_sbrk_r>
 800b82a:	4581      	cmp	r9, r0
 800b82c:	d13f      	bne.n	800b8ae <_malloc_r+0xe6>
 800b82e:	6821      	ldr	r1, [r4, #0]
 800b830:	4638      	mov	r0, r7
 800b832:	1a6d      	subs	r5, r5, r1
 800b834:	4629      	mov	r1, r5
 800b836:	f7ff ffa7 	bl	800b788 <sbrk_aligned>
 800b83a:	3001      	adds	r0, #1
 800b83c:	d037      	beq.n	800b8ae <_malloc_r+0xe6>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	442b      	add	r3, r5
 800b842:	6023      	str	r3, [r4, #0]
 800b844:	f8d8 3000 	ldr.w	r3, [r8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d038      	beq.n	800b8be <_malloc_r+0xf6>
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	42a2      	cmp	r2, r4
 800b850:	d12b      	bne.n	800b8aa <_malloc_r+0xe2>
 800b852:	2200      	movs	r2, #0
 800b854:	605a      	str	r2, [r3, #4]
 800b856:	e00f      	b.n	800b878 <_malloc_r+0xb0>
 800b858:	6822      	ldr	r2, [r4, #0]
 800b85a:	1b52      	subs	r2, r2, r5
 800b85c:	d41f      	bmi.n	800b89e <_malloc_r+0xd6>
 800b85e:	2a0b      	cmp	r2, #11
 800b860:	d917      	bls.n	800b892 <_malloc_r+0xca>
 800b862:	1961      	adds	r1, r4, r5
 800b864:	42a3      	cmp	r3, r4
 800b866:	6025      	str	r5, [r4, #0]
 800b868:	bf18      	it	ne
 800b86a:	6059      	strne	r1, [r3, #4]
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	bf08      	it	eq
 800b870:	f8c8 1000 	streq.w	r1, [r8]
 800b874:	5162      	str	r2, [r4, r5]
 800b876:	604b      	str	r3, [r1, #4]
 800b878:	4638      	mov	r0, r7
 800b87a:	f104 060b 	add.w	r6, r4, #11
 800b87e:	f000 f829 	bl	800b8d4 <__malloc_unlock>
 800b882:	f026 0607 	bic.w	r6, r6, #7
 800b886:	1d23      	adds	r3, r4, #4
 800b888:	1af2      	subs	r2, r6, r3
 800b88a:	d0ae      	beq.n	800b7ea <_malloc_r+0x22>
 800b88c:	1b9b      	subs	r3, r3, r6
 800b88e:	50a3      	str	r3, [r4, r2]
 800b890:	e7ab      	b.n	800b7ea <_malloc_r+0x22>
 800b892:	42a3      	cmp	r3, r4
 800b894:	6862      	ldr	r2, [r4, #4]
 800b896:	d1dd      	bne.n	800b854 <_malloc_r+0x8c>
 800b898:	f8c8 2000 	str.w	r2, [r8]
 800b89c:	e7ec      	b.n	800b878 <_malloc_r+0xb0>
 800b89e:	4623      	mov	r3, r4
 800b8a0:	6864      	ldr	r4, [r4, #4]
 800b8a2:	e7ac      	b.n	800b7fe <_malloc_r+0x36>
 800b8a4:	4634      	mov	r4, r6
 800b8a6:	6876      	ldr	r6, [r6, #4]
 800b8a8:	e7b4      	b.n	800b814 <_malloc_r+0x4c>
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	e7cc      	b.n	800b848 <_malloc_r+0x80>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	603b      	str	r3, [r7, #0]
 800b8b4:	f000 f80e 	bl	800b8d4 <__malloc_unlock>
 800b8b8:	e797      	b.n	800b7ea <_malloc_r+0x22>
 800b8ba:	6025      	str	r5, [r4, #0]
 800b8bc:	e7dc      	b.n	800b878 <_malloc_r+0xb0>
 800b8be:	605b      	str	r3, [r3, #4]
 800b8c0:	deff      	udf	#255	; 0xff
 800b8c2:	bf00      	nop
 800b8c4:	20001a5c 	.word	0x20001a5c

0800b8c8 <__malloc_lock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_lock+0x8>)
 800b8ca:	f7ff b882 	b.w	800a9d2 <__retarget_lock_acquire_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	20001a58 	.word	0x20001a58

0800b8d4 <__malloc_unlock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__malloc_unlock+0x8>)
 800b8d6:	f7ff b87d 	b.w	800a9d4 <__retarget_lock_release_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20001a58 	.word	0x20001a58

0800b8e0 <_Balloc>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	69c6      	ldr	r6, [r0, #28]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	b976      	cbnz	r6, 800b908 <_Balloc+0x28>
 800b8ea:	2010      	movs	r0, #16
 800b8ec:	f7ff ff44 	bl	800b778 <malloc>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	61e0      	str	r0, [r4, #28]
 800b8f4:	b920      	cbnz	r0, 800b900 <_Balloc+0x20>
 800b8f6:	216b      	movs	r1, #107	; 0x6b
 800b8f8:	4b17      	ldr	r3, [pc, #92]	; (800b958 <_Balloc+0x78>)
 800b8fa:	4818      	ldr	r0, [pc, #96]	; (800b95c <_Balloc+0x7c>)
 800b8fc:	f000 fd94 	bl	800c428 <__assert_func>
 800b900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b904:	6006      	str	r6, [r0, #0]
 800b906:	60c6      	str	r6, [r0, #12]
 800b908:	69e6      	ldr	r6, [r4, #28]
 800b90a:	68f3      	ldr	r3, [r6, #12]
 800b90c:	b183      	cbz	r3, 800b930 <_Balloc+0x50>
 800b90e:	69e3      	ldr	r3, [r4, #28]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b916:	b9b8      	cbnz	r0, 800b948 <_Balloc+0x68>
 800b918:	2101      	movs	r1, #1
 800b91a:	fa01 f605 	lsl.w	r6, r1, r5
 800b91e:	1d72      	adds	r2, r6, #5
 800b920:	4620      	mov	r0, r4
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	f000 fd9e 	bl	800c464 <_calloc_r>
 800b928:	b160      	cbz	r0, 800b944 <_Balloc+0x64>
 800b92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b92e:	e00e      	b.n	800b94e <_Balloc+0x6e>
 800b930:	2221      	movs	r2, #33	; 0x21
 800b932:	2104      	movs	r1, #4
 800b934:	4620      	mov	r0, r4
 800b936:	f000 fd95 	bl	800c464 <_calloc_r>
 800b93a:	69e3      	ldr	r3, [r4, #28]
 800b93c:	60f0      	str	r0, [r6, #12]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e4      	bne.n	800b90e <_Balloc+0x2e>
 800b944:	2000      	movs	r0, #0
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	6802      	ldr	r2, [r0, #0]
 800b94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b94e:	2300      	movs	r3, #0
 800b950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b954:	e7f7      	b.n	800b946 <_Balloc+0x66>
 800b956:	bf00      	nop
 800b958:	0800d45d 	.word	0x0800d45d
 800b95c:	0800d4dd 	.word	0x0800d4dd

0800b960 <_Bfree>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	69c6      	ldr	r6, [r0, #28]
 800b964:	4605      	mov	r5, r0
 800b966:	460c      	mov	r4, r1
 800b968:	b976      	cbnz	r6, 800b988 <_Bfree+0x28>
 800b96a:	2010      	movs	r0, #16
 800b96c:	f7ff ff04 	bl	800b778 <malloc>
 800b970:	4602      	mov	r2, r0
 800b972:	61e8      	str	r0, [r5, #28]
 800b974:	b920      	cbnz	r0, 800b980 <_Bfree+0x20>
 800b976:	218f      	movs	r1, #143	; 0x8f
 800b978:	4b08      	ldr	r3, [pc, #32]	; (800b99c <_Bfree+0x3c>)
 800b97a:	4809      	ldr	r0, [pc, #36]	; (800b9a0 <_Bfree+0x40>)
 800b97c:	f000 fd54 	bl	800c428 <__assert_func>
 800b980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b984:	6006      	str	r6, [r0, #0]
 800b986:	60c6      	str	r6, [r0, #12]
 800b988:	b13c      	cbz	r4, 800b99a <_Bfree+0x3a>
 800b98a:	69eb      	ldr	r3, [r5, #28]
 800b98c:	6862      	ldr	r2, [r4, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b994:	6021      	str	r1, [r4, #0]
 800b996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	0800d45d 	.word	0x0800d45d
 800b9a0:	0800d4dd 	.word	0x0800d4dd

0800b9a4 <__multadd>:
 800b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	461e      	mov	r6, r3
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	690d      	ldr	r5, [r1, #16]
 800b9b2:	f101 0c14 	add.w	ip, r1, #20
 800b9b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	b299      	uxth	r1, r3
 800b9be:	fb02 6101 	mla	r1, r2, r1, r6
 800b9c2:	0c1e      	lsrs	r6, r3, #16
 800b9c4:	0c0b      	lsrs	r3, r1, #16
 800b9c6:	fb02 3306 	mla	r3, r2, r6, r3
 800b9ca:	b289      	uxth	r1, r1
 800b9cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9d0:	4285      	cmp	r5, r0
 800b9d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9d6:	f84c 1b04 	str.w	r1, [ip], #4
 800b9da:	dcec      	bgt.n	800b9b6 <__multadd+0x12>
 800b9dc:	b30e      	cbz	r6, 800ba22 <__multadd+0x7e>
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	42ab      	cmp	r3, r5
 800b9e2:	dc19      	bgt.n	800ba18 <__multadd+0x74>
 800b9e4:	6861      	ldr	r1, [r4, #4]
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	3101      	adds	r1, #1
 800b9ea:	f7ff ff79 	bl	800b8e0 <_Balloc>
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	b928      	cbnz	r0, 800b9fe <__multadd+0x5a>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	21ba      	movs	r1, #186	; 0xba
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <__multadd+0x84>)
 800b9f8:	480c      	ldr	r0, [pc, #48]	; (800ba2c <__multadd+0x88>)
 800b9fa:	f000 fd15 	bl	800c428 <__assert_func>
 800b9fe:	6922      	ldr	r2, [r4, #16]
 800ba00:	f104 010c 	add.w	r1, r4, #12
 800ba04:	3202      	adds	r2, #2
 800ba06:	0092      	lsls	r2, r2, #2
 800ba08:	300c      	adds	r0, #12
 800ba0a:	f7fe fff2 	bl	800a9f2 <memcpy>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ffa5 	bl	800b960 <_Bfree>
 800ba16:	4644      	mov	r4, r8
 800ba18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	615e      	str	r6, [r3, #20]
 800ba20:	6125      	str	r5, [r4, #16]
 800ba22:	4620      	mov	r0, r4
 800ba24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba28:	0800d4cc 	.word	0x0800d4cc
 800ba2c:	0800d4dd 	.word	0x0800d4dd

0800ba30 <__hi0bits>:
 800ba30:	0c02      	lsrs	r2, r0, #16
 800ba32:	0412      	lsls	r2, r2, #16
 800ba34:	4603      	mov	r3, r0
 800ba36:	b9ca      	cbnz	r2, 800ba6c <__hi0bits+0x3c>
 800ba38:	0403      	lsls	r3, r0, #16
 800ba3a:	2010      	movs	r0, #16
 800ba3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba40:	bf04      	itt	eq
 800ba42:	021b      	lsleq	r3, r3, #8
 800ba44:	3008      	addeq	r0, #8
 800ba46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba4a:	bf04      	itt	eq
 800ba4c:	011b      	lsleq	r3, r3, #4
 800ba4e:	3004      	addeq	r0, #4
 800ba50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba54:	bf04      	itt	eq
 800ba56:	009b      	lsleq	r3, r3, #2
 800ba58:	3002      	addeq	r0, #2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	db05      	blt.n	800ba6a <__hi0bits+0x3a>
 800ba5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ba62:	f100 0001 	add.w	r0, r0, #1
 800ba66:	bf08      	it	eq
 800ba68:	2020      	moveq	r0, #32
 800ba6a:	4770      	bx	lr
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	e7e5      	b.n	800ba3c <__hi0bits+0xc>

0800ba70 <__lo0bits>:
 800ba70:	6803      	ldr	r3, [r0, #0]
 800ba72:	4602      	mov	r2, r0
 800ba74:	f013 0007 	ands.w	r0, r3, #7
 800ba78:	d00b      	beq.n	800ba92 <__lo0bits+0x22>
 800ba7a:	07d9      	lsls	r1, r3, #31
 800ba7c:	d421      	bmi.n	800bac2 <__lo0bits+0x52>
 800ba7e:	0798      	lsls	r0, r3, #30
 800ba80:	bf49      	itett	mi
 800ba82:	085b      	lsrmi	r3, r3, #1
 800ba84:	089b      	lsrpl	r3, r3, #2
 800ba86:	2001      	movmi	r0, #1
 800ba88:	6013      	strmi	r3, [r2, #0]
 800ba8a:	bf5c      	itt	pl
 800ba8c:	2002      	movpl	r0, #2
 800ba8e:	6013      	strpl	r3, [r2, #0]
 800ba90:	4770      	bx	lr
 800ba92:	b299      	uxth	r1, r3
 800ba94:	b909      	cbnz	r1, 800ba9a <__lo0bits+0x2a>
 800ba96:	2010      	movs	r0, #16
 800ba98:	0c1b      	lsrs	r3, r3, #16
 800ba9a:	b2d9      	uxtb	r1, r3
 800ba9c:	b909      	cbnz	r1, 800baa2 <__lo0bits+0x32>
 800ba9e:	3008      	adds	r0, #8
 800baa0:	0a1b      	lsrs	r3, r3, #8
 800baa2:	0719      	lsls	r1, r3, #28
 800baa4:	bf04      	itt	eq
 800baa6:	091b      	lsreq	r3, r3, #4
 800baa8:	3004      	addeq	r0, #4
 800baaa:	0799      	lsls	r1, r3, #30
 800baac:	bf04      	itt	eq
 800baae:	089b      	lsreq	r3, r3, #2
 800bab0:	3002      	addeq	r0, #2
 800bab2:	07d9      	lsls	r1, r3, #31
 800bab4:	d403      	bmi.n	800babe <__lo0bits+0x4e>
 800bab6:	085b      	lsrs	r3, r3, #1
 800bab8:	f100 0001 	add.w	r0, r0, #1
 800babc:	d003      	beq.n	800bac6 <__lo0bits+0x56>
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	4770      	bx	lr
 800bac2:	2000      	movs	r0, #0
 800bac4:	4770      	bx	lr
 800bac6:	2020      	movs	r0, #32
 800bac8:	4770      	bx	lr
	...

0800bacc <__i2b>:
 800bacc:	b510      	push	{r4, lr}
 800bace:	460c      	mov	r4, r1
 800bad0:	2101      	movs	r1, #1
 800bad2:	f7ff ff05 	bl	800b8e0 <_Balloc>
 800bad6:	4602      	mov	r2, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <__i2b+0x1a>
 800bada:	f240 1145 	movw	r1, #325	; 0x145
 800bade:	4b04      	ldr	r3, [pc, #16]	; (800baf0 <__i2b+0x24>)
 800bae0:	4804      	ldr	r0, [pc, #16]	; (800baf4 <__i2b+0x28>)
 800bae2:	f000 fca1 	bl	800c428 <__assert_func>
 800bae6:	2301      	movs	r3, #1
 800bae8:	6144      	str	r4, [r0, #20]
 800baea:	6103      	str	r3, [r0, #16]
 800baec:	bd10      	pop	{r4, pc}
 800baee:	bf00      	nop
 800baf0:	0800d4cc 	.word	0x0800d4cc
 800baf4:	0800d4dd 	.word	0x0800d4dd

0800baf8 <__multiply>:
 800baf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	4691      	mov	r9, r2
 800bafe:	690a      	ldr	r2, [r1, #16]
 800bb00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb04:	460c      	mov	r4, r1
 800bb06:	429a      	cmp	r2, r3
 800bb08:	bfbe      	ittt	lt
 800bb0a:	460b      	movlt	r3, r1
 800bb0c:	464c      	movlt	r4, r9
 800bb0e:	4699      	movlt	r9, r3
 800bb10:	6927      	ldr	r7, [r4, #16]
 800bb12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb16:	68a3      	ldr	r3, [r4, #8]
 800bb18:	6861      	ldr	r1, [r4, #4]
 800bb1a:	eb07 060a 	add.w	r6, r7, sl
 800bb1e:	42b3      	cmp	r3, r6
 800bb20:	b085      	sub	sp, #20
 800bb22:	bfb8      	it	lt
 800bb24:	3101      	addlt	r1, #1
 800bb26:	f7ff fedb 	bl	800b8e0 <_Balloc>
 800bb2a:	b930      	cbnz	r0, 800bb3a <__multiply+0x42>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bb32:	4b43      	ldr	r3, [pc, #268]	; (800bc40 <__multiply+0x148>)
 800bb34:	4843      	ldr	r0, [pc, #268]	; (800bc44 <__multiply+0x14c>)
 800bb36:	f000 fc77 	bl	800c428 <__assert_func>
 800bb3a:	f100 0514 	add.w	r5, r0, #20
 800bb3e:	462b      	mov	r3, r5
 800bb40:	2200      	movs	r2, #0
 800bb42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb46:	4543      	cmp	r3, r8
 800bb48:	d321      	bcc.n	800bb8e <__multiply+0x96>
 800bb4a:	f104 0314 	add.w	r3, r4, #20
 800bb4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb52:	f109 0314 	add.w	r3, r9, #20
 800bb56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb5a:	9202      	str	r2, [sp, #8]
 800bb5c:	1b3a      	subs	r2, r7, r4
 800bb5e:	3a15      	subs	r2, #21
 800bb60:	f022 0203 	bic.w	r2, r2, #3
 800bb64:	3204      	adds	r2, #4
 800bb66:	f104 0115 	add.w	r1, r4, #21
 800bb6a:	428f      	cmp	r7, r1
 800bb6c:	bf38      	it	cc
 800bb6e:	2204      	movcc	r2, #4
 800bb70:	9201      	str	r2, [sp, #4]
 800bb72:	9a02      	ldr	r2, [sp, #8]
 800bb74:	9303      	str	r3, [sp, #12]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d80c      	bhi.n	800bb94 <__multiply+0x9c>
 800bb7a:	2e00      	cmp	r6, #0
 800bb7c:	dd03      	ble.n	800bb86 <__multiply+0x8e>
 800bb7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d05a      	beq.n	800bc3c <__multiply+0x144>
 800bb86:	6106      	str	r6, [r0, #16]
 800bb88:	b005      	add	sp, #20
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	f843 2b04 	str.w	r2, [r3], #4
 800bb92:	e7d8      	b.n	800bb46 <__multiply+0x4e>
 800bb94:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb98:	f1ba 0f00 	cmp.w	sl, #0
 800bb9c:	d023      	beq.n	800bbe6 <__multiply+0xee>
 800bb9e:	46a9      	mov	r9, r5
 800bba0:	f04f 0c00 	mov.w	ip, #0
 800bba4:	f104 0e14 	add.w	lr, r4, #20
 800bba8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbac:	f8d9 1000 	ldr.w	r1, [r9]
 800bbb0:	fa1f fb82 	uxth.w	fp, r2
 800bbb4:	b289      	uxth	r1, r1
 800bbb6:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbba:	4461      	add	r1, ip
 800bbbc:	f8d9 c000 	ldr.w	ip, [r9]
 800bbc0:	0c12      	lsrs	r2, r2, #16
 800bbc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bbc6:	fb0a c202 	mla	r2, sl, r2, ip
 800bbca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbce:	b289      	uxth	r1, r1
 800bbd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbd4:	4577      	cmp	r7, lr
 800bbd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbda:	f849 1b04 	str.w	r1, [r9], #4
 800bbde:	d8e3      	bhi.n	800bba8 <__multiply+0xb0>
 800bbe0:	9a01      	ldr	r2, [sp, #4]
 800bbe2:	f845 c002 	str.w	ip, [r5, r2]
 800bbe6:	9a03      	ldr	r2, [sp, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bbee:	f1b9 0f00 	cmp.w	r9, #0
 800bbf2:	d021      	beq.n	800bc38 <__multiply+0x140>
 800bbf4:	46ae      	mov	lr, r5
 800bbf6:	f04f 0a00 	mov.w	sl, #0
 800bbfa:	6829      	ldr	r1, [r5, #0]
 800bbfc:	f104 0c14 	add.w	ip, r4, #20
 800bc00:	f8bc b000 	ldrh.w	fp, [ip]
 800bc04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc08:	b289      	uxth	r1, r1
 800bc0a:	fb09 220b 	mla	r2, r9, fp, r2
 800bc0e:	4452      	add	r2, sl
 800bc10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc14:	f84e 1b04 	str.w	r1, [lr], #4
 800bc18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc20:	f8be 1000 	ldrh.w	r1, [lr]
 800bc24:	4567      	cmp	r7, ip
 800bc26:	fb09 110a 	mla	r1, r9, sl, r1
 800bc2a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bc2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc32:	d8e5      	bhi.n	800bc00 <__multiply+0x108>
 800bc34:	9a01      	ldr	r2, [sp, #4]
 800bc36:	50a9      	str	r1, [r5, r2]
 800bc38:	3504      	adds	r5, #4
 800bc3a:	e79a      	b.n	800bb72 <__multiply+0x7a>
 800bc3c:	3e01      	subs	r6, #1
 800bc3e:	e79c      	b.n	800bb7a <__multiply+0x82>
 800bc40:	0800d4cc 	.word	0x0800d4cc
 800bc44:	0800d4dd 	.word	0x0800d4dd

0800bc48 <__pow5mult>:
 800bc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc4c:	4615      	mov	r5, r2
 800bc4e:	f012 0203 	ands.w	r2, r2, #3
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	d007      	beq.n	800bc68 <__pow5mult+0x20>
 800bc58:	4c25      	ldr	r4, [pc, #148]	; (800bcf0 <__pow5mult+0xa8>)
 800bc5a:	3a01      	subs	r2, #1
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc62:	f7ff fe9f 	bl	800b9a4 <__multadd>
 800bc66:	4607      	mov	r7, r0
 800bc68:	10ad      	asrs	r5, r5, #2
 800bc6a:	d03d      	beq.n	800bce8 <__pow5mult+0xa0>
 800bc6c:	69f4      	ldr	r4, [r6, #28]
 800bc6e:	b97c      	cbnz	r4, 800bc90 <__pow5mult+0x48>
 800bc70:	2010      	movs	r0, #16
 800bc72:	f7ff fd81 	bl	800b778 <malloc>
 800bc76:	4602      	mov	r2, r0
 800bc78:	61f0      	str	r0, [r6, #28]
 800bc7a:	b928      	cbnz	r0, 800bc88 <__pow5mult+0x40>
 800bc7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bc80:	4b1c      	ldr	r3, [pc, #112]	; (800bcf4 <__pow5mult+0xac>)
 800bc82:	481d      	ldr	r0, [pc, #116]	; (800bcf8 <__pow5mult+0xb0>)
 800bc84:	f000 fbd0 	bl	800c428 <__assert_func>
 800bc88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc8c:	6004      	str	r4, [r0, #0]
 800bc8e:	60c4      	str	r4, [r0, #12]
 800bc90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bc94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc98:	b94c      	cbnz	r4, 800bcae <__pow5mult+0x66>
 800bc9a:	f240 2171 	movw	r1, #625	; 0x271
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff ff14 	bl	800bacc <__i2b>
 800bca4:	2300      	movs	r3, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcac:	6003      	str	r3, [r0, #0]
 800bcae:	f04f 0900 	mov.w	r9, #0
 800bcb2:	07eb      	lsls	r3, r5, #31
 800bcb4:	d50a      	bpl.n	800bccc <__pow5mult+0x84>
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ff1c 	bl	800baf8 <__multiply>
 800bcc0:	4680      	mov	r8, r0
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff fe4b 	bl	800b960 <_Bfree>
 800bcca:	4647      	mov	r7, r8
 800bccc:	106d      	asrs	r5, r5, #1
 800bcce:	d00b      	beq.n	800bce8 <__pow5mult+0xa0>
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	b938      	cbnz	r0, 800bce4 <__pow5mult+0x9c>
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4630      	mov	r0, r6
 800bcda:	f7ff ff0d 	bl	800baf8 <__multiply>
 800bcde:	6020      	str	r0, [r4, #0]
 800bce0:	f8c0 9000 	str.w	r9, [r0]
 800bce4:	4604      	mov	r4, r0
 800bce6:	e7e4      	b.n	800bcb2 <__pow5mult+0x6a>
 800bce8:	4638      	mov	r0, r7
 800bcea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcee:	bf00      	nop
 800bcf0:	0800d628 	.word	0x0800d628
 800bcf4:	0800d45d 	.word	0x0800d45d
 800bcf8:	0800d4dd 	.word	0x0800d4dd

0800bcfc <__lshift>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	4607      	mov	r7, r0
 800bd04:	4691      	mov	r9, r2
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	6849      	ldr	r1, [r1, #4]
 800bd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd14:	f108 0601 	add.w	r6, r8, #1
 800bd18:	42b3      	cmp	r3, r6
 800bd1a:	db0b      	blt.n	800bd34 <__lshift+0x38>
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	f7ff fddf 	bl	800b8e0 <_Balloc>
 800bd22:	4605      	mov	r5, r0
 800bd24:	b948      	cbnz	r0, 800bd3a <__lshift+0x3e>
 800bd26:	4602      	mov	r2, r0
 800bd28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bd2c:	4b27      	ldr	r3, [pc, #156]	; (800bdcc <__lshift+0xd0>)
 800bd2e:	4828      	ldr	r0, [pc, #160]	; (800bdd0 <__lshift+0xd4>)
 800bd30:	f000 fb7a 	bl	800c428 <__assert_func>
 800bd34:	3101      	adds	r1, #1
 800bd36:	005b      	lsls	r3, r3, #1
 800bd38:	e7ee      	b.n	800bd18 <__lshift+0x1c>
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f100 0114 	add.w	r1, r0, #20
 800bd40:	f100 0210 	add.w	r2, r0, #16
 800bd44:	4618      	mov	r0, r3
 800bd46:	4553      	cmp	r3, sl
 800bd48:	db33      	blt.n	800bdb2 <__lshift+0xb6>
 800bd4a:	6920      	ldr	r0, [r4, #16]
 800bd4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd50:	f104 0314 	add.w	r3, r4, #20
 800bd54:	f019 091f 	ands.w	r9, r9, #31
 800bd58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd60:	d02b      	beq.n	800bdba <__lshift+0xbe>
 800bd62:	468a      	mov	sl, r1
 800bd64:	2200      	movs	r2, #0
 800bd66:	f1c9 0e20 	rsb	lr, r9, #32
 800bd6a:	6818      	ldr	r0, [r3, #0]
 800bd6c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd70:	4310      	orrs	r0, r2
 800bd72:	f84a 0b04 	str.w	r0, [sl], #4
 800bd76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7a:	459c      	cmp	ip, r3
 800bd7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd80:	d8f3      	bhi.n	800bd6a <__lshift+0x6e>
 800bd82:	ebac 0304 	sub.w	r3, ip, r4
 800bd86:	3b15      	subs	r3, #21
 800bd88:	f023 0303 	bic.w	r3, r3, #3
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	f104 0015 	add.w	r0, r4, #21
 800bd92:	4584      	cmp	ip, r0
 800bd94:	bf38      	it	cc
 800bd96:	2304      	movcc	r3, #4
 800bd98:	50ca      	str	r2, [r1, r3]
 800bd9a:	b10a      	cbz	r2, 800bda0 <__lshift+0xa4>
 800bd9c:	f108 0602 	add.w	r6, r8, #2
 800bda0:	3e01      	subs	r6, #1
 800bda2:	4638      	mov	r0, r7
 800bda4:	4621      	mov	r1, r4
 800bda6:	612e      	str	r6, [r5, #16]
 800bda8:	f7ff fdda 	bl	800b960 <_Bfree>
 800bdac:	4628      	mov	r0, r5
 800bdae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	e7c5      	b.n	800bd46 <__lshift+0x4a>
 800bdba:	3904      	subs	r1, #4
 800bdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc0:	459c      	cmp	ip, r3
 800bdc2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdc6:	d8f9      	bhi.n	800bdbc <__lshift+0xc0>
 800bdc8:	e7ea      	b.n	800bda0 <__lshift+0xa4>
 800bdca:	bf00      	nop
 800bdcc:	0800d4cc 	.word	0x0800d4cc
 800bdd0:	0800d4dd 	.word	0x0800d4dd

0800bdd4 <__mcmp>:
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	690a      	ldr	r2, [r1, #16]
 800bdd8:	6900      	ldr	r0, [r0, #16]
 800bdda:	b530      	push	{r4, r5, lr}
 800bddc:	1a80      	subs	r0, r0, r2
 800bdde:	d10d      	bne.n	800bdfc <__mcmp+0x28>
 800bde0:	3314      	adds	r3, #20
 800bde2:	3114      	adds	r1, #20
 800bde4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bde8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdf4:	4295      	cmp	r5, r2
 800bdf6:	d002      	beq.n	800bdfe <__mcmp+0x2a>
 800bdf8:	d304      	bcc.n	800be04 <__mcmp+0x30>
 800bdfa:	2001      	movs	r0, #1
 800bdfc:	bd30      	pop	{r4, r5, pc}
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	d3f4      	bcc.n	800bdec <__mcmp+0x18>
 800be02:	e7fb      	b.n	800bdfc <__mcmp+0x28>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	e7f8      	b.n	800bdfc <__mcmp+0x28>
	...

0800be0c <__mdiff>:
 800be0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	460d      	mov	r5, r1
 800be12:	4607      	mov	r7, r0
 800be14:	4611      	mov	r1, r2
 800be16:	4628      	mov	r0, r5
 800be18:	4614      	mov	r4, r2
 800be1a:	f7ff ffdb 	bl	800bdd4 <__mcmp>
 800be1e:	1e06      	subs	r6, r0, #0
 800be20:	d111      	bne.n	800be46 <__mdiff+0x3a>
 800be22:	4631      	mov	r1, r6
 800be24:	4638      	mov	r0, r7
 800be26:	f7ff fd5b 	bl	800b8e0 <_Balloc>
 800be2a:	4602      	mov	r2, r0
 800be2c:	b928      	cbnz	r0, 800be3a <__mdiff+0x2e>
 800be2e:	f240 2137 	movw	r1, #567	; 0x237
 800be32:	4b3a      	ldr	r3, [pc, #232]	; (800bf1c <__mdiff+0x110>)
 800be34:	483a      	ldr	r0, [pc, #232]	; (800bf20 <__mdiff+0x114>)
 800be36:	f000 faf7 	bl	800c428 <__assert_func>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800be40:	4610      	mov	r0, r2
 800be42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be46:	bfa4      	itt	ge
 800be48:	4623      	movge	r3, r4
 800be4a:	462c      	movge	r4, r5
 800be4c:	4638      	mov	r0, r7
 800be4e:	6861      	ldr	r1, [r4, #4]
 800be50:	bfa6      	itte	ge
 800be52:	461d      	movge	r5, r3
 800be54:	2600      	movge	r6, #0
 800be56:	2601      	movlt	r6, #1
 800be58:	f7ff fd42 	bl	800b8e0 <_Balloc>
 800be5c:	4602      	mov	r2, r0
 800be5e:	b918      	cbnz	r0, 800be68 <__mdiff+0x5c>
 800be60:	f240 2145 	movw	r1, #581	; 0x245
 800be64:	4b2d      	ldr	r3, [pc, #180]	; (800bf1c <__mdiff+0x110>)
 800be66:	e7e5      	b.n	800be34 <__mdiff+0x28>
 800be68:	f102 0814 	add.w	r8, r2, #20
 800be6c:	46c2      	mov	sl, r8
 800be6e:	f04f 0c00 	mov.w	ip, #0
 800be72:	6927      	ldr	r7, [r4, #16]
 800be74:	60c6      	str	r6, [r0, #12]
 800be76:	692e      	ldr	r6, [r5, #16]
 800be78:	f104 0014 	add.w	r0, r4, #20
 800be7c:	f105 0914 	add.w	r9, r5, #20
 800be80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800be84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be88:	3410      	adds	r4, #16
 800be8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800be8e:	f859 3b04 	ldr.w	r3, [r9], #4
 800be92:	fa1f f18b 	uxth.w	r1, fp
 800be96:	4461      	add	r1, ip
 800be98:	fa1f fc83 	uxth.w	ip, r3
 800be9c:	0c1b      	lsrs	r3, r3, #16
 800be9e:	eba1 010c 	sub.w	r1, r1, ip
 800bea2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bea6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800beaa:	b289      	uxth	r1, r1
 800beac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800beb0:	454e      	cmp	r6, r9
 800beb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800beb6:	f84a 1b04 	str.w	r1, [sl], #4
 800beba:	d8e6      	bhi.n	800be8a <__mdiff+0x7e>
 800bebc:	1b73      	subs	r3, r6, r5
 800bebe:	3b15      	subs	r3, #21
 800bec0:	f023 0303 	bic.w	r3, r3, #3
 800bec4:	3515      	adds	r5, #21
 800bec6:	3304      	adds	r3, #4
 800bec8:	42ae      	cmp	r6, r5
 800beca:	bf38      	it	cc
 800becc:	2304      	movcc	r3, #4
 800bece:	4418      	add	r0, r3
 800bed0:	4443      	add	r3, r8
 800bed2:	461e      	mov	r6, r3
 800bed4:	4605      	mov	r5, r0
 800bed6:	4575      	cmp	r5, lr
 800bed8:	d30e      	bcc.n	800bef8 <__mdiff+0xec>
 800beda:	f10e 0103 	add.w	r1, lr, #3
 800bede:	1a09      	subs	r1, r1, r0
 800bee0:	f021 0103 	bic.w	r1, r1, #3
 800bee4:	3803      	subs	r0, #3
 800bee6:	4586      	cmp	lr, r0
 800bee8:	bf38      	it	cc
 800beea:	2100      	movcc	r1, #0
 800beec:	440b      	add	r3, r1
 800beee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bef2:	b189      	cbz	r1, 800bf18 <__mdiff+0x10c>
 800bef4:	6117      	str	r7, [r2, #16]
 800bef6:	e7a3      	b.n	800be40 <__mdiff+0x34>
 800bef8:	f855 8b04 	ldr.w	r8, [r5], #4
 800befc:	fa1f f188 	uxth.w	r1, r8
 800bf00:	4461      	add	r1, ip
 800bf02:	140c      	asrs	r4, r1, #16
 800bf04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf08:	b289      	uxth	r1, r1
 800bf0a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bf0e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bf12:	f846 1b04 	str.w	r1, [r6], #4
 800bf16:	e7de      	b.n	800bed6 <__mdiff+0xca>
 800bf18:	3f01      	subs	r7, #1
 800bf1a:	e7e8      	b.n	800beee <__mdiff+0xe2>
 800bf1c:	0800d4cc 	.word	0x0800d4cc
 800bf20:	0800d4dd 	.word	0x0800d4dd

0800bf24 <__d2b>:
 800bf24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf26:	2101      	movs	r1, #1
 800bf28:	4617      	mov	r7, r2
 800bf2a:	461c      	mov	r4, r3
 800bf2c:	9e08      	ldr	r6, [sp, #32]
 800bf2e:	f7ff fcd7 	bl	800b8e0 <_Balloc>
 800bf32:	4605      	mov	r5, r0
 800bf34:	b930      	cbnz	r0, 800bf44 <__d2b+0x20>
 800bf36:	4602      	mov	r2, r0
 800bf38:	f240 310f 	movw	r1, #783	; 0x30f
 800bf3c:	4b22      	ldr	r3, [pc, #136]	; (800bfc8 <__d2b+0xa4>)
 800bf3e:	4823      	ldr	r0, [pc, #140]	; (800bfcc <__d2b+0xa8>)
 800bf40:	f000 fa72 	bl	800c428 <__assert_func>
 800bf44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bf48:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bf4c:	bb24      	cbnz	r4, 800bf98 <__d2b+0x74>
 800bf4e:	2f00      	cmp	r7, #0
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	d026      	beq.n	800bfa2 <__d2b+0x7e>
 800bf54:	4668      	mov	r0, sp
 800bf56:	9700      	str	r7, [sp, #0]
 800bf58:	f7ff fd8a 	bl	800ba70 <__lo0bits>
 800bf5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf60:	b1e8      	cbz	r0, 800bf9e <__d2b+0x7a>
 800bf62:	f1c0 0320 	rsb	r3, r0, #32
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	430b      	orrs	r3, r1
 800bf6c:	40c2      	lsrs	r2, r0
 800bf6e:	616b      	str	r3, [r5, #20]
 800bf70:	9201      	str	r2, [sp, #4]
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bf14      	ite	ne
 800bf78:	2102      	movne	r1, #2
 800bf7a:	2101      	moveq	r1, #1
 800bf7c:	61ab      	str	r3, [r5, #24]
 800bf7e:	6129      	str	r1, [r5, #16]
 800bf80:	b1bc      	cbz	r4, 800bfb2 <__d2b+0x8e>
 800bf82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf86:	4404      	add	r4, r0
 800bf88:	6034      	str	r4, [r6, #0]
 800bf8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	6018      	str	r0, [r3, #0]
 800bf92:	4628      	mov	r0, r5
 800bf94:	b003      	add	sp, #12
 800bf96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf9c:	e7d7      	b.n	800bf4e <__d2b+0x2a>
 800bf9e:	6169      	str	r1, [r5, #20]
 800bfa0:	e7e7      	b.n	800bf72 <__d2b+0x4e>
 800bfa2:	a801      	add	r0, sp, #4
 800bfa4:	f7ff fd64 	bl	800ba70 <__lo0bits>
 800bfa8:	9b01      	ldr	r3, [sp, #4]
 800bfaa:	2101      	movs	r1, #1
 800bfac:	616b      	str	r3, [r5, #20]
 800bfae:	3020      	adds	r0, #32
 800bfb0:	e7e5      	b.n	800bf7e <__d2b+0x5a>
 800bfb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfb6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bfba:	6030      	str	r0, [r6, #0]
 800bfbc:	6918      	ldr	r0, [r3, #16]
 800bfbe:	f7ff fd37 	bl	800ba30 <__hi0bits>
 800bfc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bfc6:	e7e2      	b.n	800bf8e <__d2b+0x6a>
 800bfc8:	0800d4cc 	.word	0x0800d4cc
 800bfcc:	0800d4dd 	.word	0x0800d4dd

0800bfd0 <__ssputs_r>:
 800bfd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd4:	461f      	mov	r7, r3
 800bfd6:	688e      	ldr	r6, [r1, #8]
 800bfd8:	4682      	mov	sl, r0
 800bfda:	42be      	cmp	r6, r7
 800bfdc:	460c      	mov	r4, r1
 800bfde:	4690      	mov	r8, r2
 800bfe0:	680b      	ldr	r3, [r1, #0]
 800bfe2:	d82c      	bhi.n	800c03e <__ssputs_r+0x6e>
 800bfe4:	898a      	ldrh	r2, [r1, #12]
 800bfe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfea:	d026      	beq.n	800c03a <__ssputs_r+0x6a>
 800bfec:	6965      	ldr	r5, [r4, #20]
 800bfee:	6909      	ldr	r1, [r1, #16]
 800bff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bff4:	eba3 0901 	sub.w	r9, r3, r1
 800bff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bffc:	1c7b      	adds	r3, r7, #1
 800bffe:	444b      	add	r3, r9
 800c000:	106d      	asrs	r5, r5, #1
 800c002:	429d      	cmp	r5, r3
 800c004:	bf38      	it	cc
 800c006:	461d      	movcc	r5, r3
 800c008:	0553      	lsls	r3, r2, #21
 800c00a:	d527      	bpl.n	800c05c <__ssputs_r+0x8c>
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7ff fbdb 	bl	800b7c8 <_malloc_r>
 800c012:	4606      	mov	r6, r0
 800c014:	b360      	cbz	r0, 800c070 <__ssputs_r+0xa0>
 800c016:	464a      	mov	r2, r9
 800c018:	6921      	ldr	r1, [r4, #16]
 800c01a:	f7fe fcea 	bl	800a9f2 <memcpy>
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c028:	81a3      	strh	r3, [r4, #12]
 800c02a:	6126      	str	r6, [r4, #16]
 800c02c:	444e      	add	r6, r9
 800c02e:	6026      	str	r6, [r4, #0]
 800c030:	463e      	mov	r6, r7
 800c032:	6165      	str	r5, [r4, #20]
 800c034:	eba5 0509 	sub.w	r5, r5, r9
 800c038:	60a5      	str	r5, [r4, #8]
 800c03a:	42be      	cmp	r6, r7
 800c03c:	d900      	bls.n	800c040 <__ssputs_r+0x70>
 800c03e:	463e      	mov	r6, r7
 800c040:	4632      	mov	r2, r6
 800c042:	4641      	mov	r1, r8
 800c044:	6820      	ldr	r0, [r4, #0]
 800c046:	f000 f9c5 	bl	800c3d4 <memmove>
 800c04a:	2000      	movs	r0, #0
 800c04c:	68a3      	ldr	r3, [r4, #8]
 800c04e:	1b9b      	subs	r3, r3, r6
 800c050:	60a3      	str	r3, [r4, #8]
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	4433      	add	r3, r6
 800c056:	6023      	str	r3, [r4, #0]
 800c058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05c:	462a      	mov	r2, r5
 800c05e:	f000 fa27 	bl	800c4b0 <_realloc_r>
 800c062:	4606      	mov	r6, r0
 800c064:	2800      	cmp	r0, #0
 800c066:	d1e0      	bne.n	800c02a <__ssputs_r+0x5a>
 800c068:	4650      	mov	r0, sl
 800c06a:	6921      	ldr	r1, [r4, #16]
 800c06c:	f7ff fb3c 	bl	800b6e8 <_free_r>
 800c070:	230c      	movs	r3, #12
 800c072:	f8ca 3000 	str.w	r3, [sl]
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	e7e9      	b.n	800c058 <__ssputs_r+0x88>

0800c084 <_svfiprintf_r>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	4698      	mov	r8, r3
 800c08a:	898b      	ldrh	r3, [r1, #12]
 800c08c:	4607      	mov	r7, r0
 800c08e:	061b      	lsls	r3, r3, #24
 800c090:	460d      	mov	r5, r1
 800c092:	4614      	mov	r4, r2
 800c094:	b09d      	sub	sp, #116	; 0x74
 800c096:	d50e      	bpl.n	800c0b6 <_svfiprintf_r+0x32>
 800c098:	690b      	ldr	r3, [r1, #16]
 800c09a:	b963      	cbnz	r3, 800c0b6 <_svfiprintf_r+0x32>
 800c09c:	2140      	movs	r1, #64	; 0x40
 800c09e:	f7ff fb93 	bl	800b7c8 <_malloc_r>
 800c0a2:	6028      	str	r0, [r5, #0]
 800c0a4:	6128      	str	r0, [r5, #16]
 800c0a6:	b920      	cbnz	r0, 800c0b2 <_svfiprintf_r+0x2e>
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	e0d0      	b.n	800c254 <_svfiprintf_r+0x1d0>
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	616b      	str	r3, [r5, #20]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ba:	2320      	movs	r3, #32
 800c0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0c0:	2330      	movs	r3, #48	; 0x30
 800c0c2:	f04f 0901 	mov.w	r9, #1
 800c0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c26c <_svfiprintf_r+0x1e8>
 800c0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0d2:	4623      	mov	r3, r4
 800c0d4:	469a      	mov	sl, r3
 800c0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0da:	b10a      	cbz	r2, 800c0e0 <_svfiprintf_r+0x5c>
 800c0dc:	2a25      	cmp	r2, #37	; 0x25
 800c0de:	d1f9      	bne.n	800c0d4 <_svfiprintf_r+0x50>
 800c0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c0e4:	d00b      	beq.n	800c0fe <_svfiprintf_r+0x7a>
 800c0e6:	465b      	mov	r3, fp
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff ff6f 	bl	800bfd0 <__ssputs_r>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	f000 80a9 	beq.w	800c24a <_svfiprintf_r+0x1c6>
 800c0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0fa:	445a      	add	r2, fp
 800c0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 80a1 	beq.w	800c24a <_svfiprintf_r+0x1c6>
 800c108:	2300      	movs	r3, #0
 800c10a:	f04f 32ff 	mov.w	r2, #4294967295
 800c10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c112:	f10a 0a01 	add.w	sl, sl, #1
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c11e:	931a      	str	r3, [sp, #104]	; 0x68
 800c120:	4654      	mov	r4, sl
 800c122:	2205      	movs	r2, #5
 800c124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c128:	4850      	ldr	r0, [pc, #320]	; (800c26c <_svfiprintf_r+0x1e8>)
 800c12a:	f7fe fc54 	bl	800a9d6 <memchr>
 800c12e:	9a04      	ldr	r2, [sp, #16]
 800c130:	b9d8      	cbnz	r0, 800c16a <_svfiprintf_r+0xe6>
 800c132:	06d0      	lsls	r0, r2, #27
 800c134:	bf44      	itt	mi
 800c136:	2320      	movmi	r3, #32
 800c138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c13c:	0711      	lsls	r1, r2, #28
 800c13e:	bf44      	itt	mi
 800c140:	232b      	movmi	r3, #43	; 0x2b
 800c142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b2a      	cmp	r3, #42	; 0x2a
 800c14c:	d015      	beq.n	800c17a <_svfiprintf_r+0xf6>
 800c14e:	4654      	mov	r4, sl
 800c150:	2000      	movs	r0, #0
 800c152:	f04f 0c0a 	mov.w	ip, #10
 800c156:	9a07      	ldr	r2, [sp, #28]
 800c158:	4621      	mov	r1, r4
 800c15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c15e:	3b30      	subs	r3, #48	; 0x30
 800c160:	2b09      	cmp	r3, #9
 800c162:	d94d      	bls.n	800c200 <_svfiprintf_r+0x17c>
 800c164:	b1b0      	cbz	r0, 800c194 <_svfiprintf_r+0x110>
 800c166:	9207      	str	r2, [sp, #28]
 800c168:	e014      	b.n	800c194 <_svfiprintf_r+0x110>
 800c16a:	eba0 0308 	sub.w	r3, r0, r8
 800c16e:	fa09 f303 	lsl.w	r3, r9, r3
 800c172:	4313      	orrs	r3, r2
 800c174:	46a2      	mov	sl, r4
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	e7d2      	b.n	800c120 <_svfiprintf_r+0x9c>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	1d19      	adds	r1, r3, #4
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	9103      	str	r1, [sp, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	bfbb      	ittet	lt
 800c186:	425b      	neglt	r3, r3
 800c188:	f042 0202 	orrlt.w	r2, r2, #2
 800c18c:	9307      	strge	r3, [sp, #28]
 800c18e:	9307      	strlt	r3, [sp, #28]
 800c190:	bfb8      	it	lt
 800c192:	9204      	strlt	r2, [sp, #16]
 800c194:	7823      	ldrb	r3, [r4, #0]
 800c196:	2b2e      	cmp	r3, #46	; 0x2e
 800c198:	d10c      	bne.n	800c1b4 <_svfiprintf_r+0x130>
 800c19a:	7863      	ldrb	r3, [r4, #1]
 800c19c:	2b2a      	cmp	r3, #42	; 0x2a
 800c19e:	d134      	bne.n	800c20a <_svfiprintf_r+0x186>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	3402      	adds	r4, #2
 800c1a4:	1d1a      	adds	r2, r3, #4
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	9203      	str	r2, [sp, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	bfb8      	it	lt
 800c1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c270 <_svfiprintf_r+0x1ec>
 800c1b8:	2203      	movs	r2, #3
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	7821      	ldrb	r1, [r4, #0]
 800c1be:	f7fe fc0a 	bl	800a9d6 <memchr>
 800c1c2:	b138      	cbz	r0, 800c1d4 <_svfiprintf_r+0x150>
 800c1c4:	2240      	movs	r2, #64	; 0x40
 800c1c6:	9b04      	ldr	r3, [sp, #16]
 800c1c8:	eba0 000a 	sub.w	r0, r0, sl
 800c1cc:	4082      	lsls	r2, r0
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	3401      	adds	r4, #1
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d8:	2206      	movs	r2, #6
 800c1da:	4826      	ldr	r0, [pc, #152]	; (800c274 <_svfiprintf_r+0x1f0>)
 800c1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1e0:	f7fe fbf9 	bl	800a9d6 <memchr>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d038      	beq.n	800c25a <_svfiprintf_r+0x1d6>
 800c1e8:	4b23      	ldr	r3, [pc, #140]	; (800c278 <_svfiprintf_r+0x1f4>)
 800c1ea:	bb1b      	cbnz	r3, 800c234 <_svfiprintf_r+0x1b0>
 800c1ec:	9b03      	ldr	r3, [sp, #12]
 800c1ee:	3307      	adds	r3, #7
 800c1f0:	f023 0307 	bic.w	r3, r3, #7
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	9303      	str	r3, [sp, #12]
 800c1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1fa:	4433      	add	r3, r6
 800c1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1fe:	e768      	b.n	800c0d2 <_svfiprintf_r+0x4e>
 800c200:	460c      	mov	r4, r1
 800c202:	2001      	movs	r0, #1
 800c204:	fb0c 3202 	mla	r2, ip, r2, r3
 800c208:	e7a6      	b.n	800c158 <_svfiprintf_r+0xd4>
 800c20a:	2300      	movs	r3, #0
 800c20c:	f04f 0c0a 	mov.w	ip, #10
 800c210:	4619      	mov	r1, r3
 800c212:	3401      	adds	r4, #1
 800c214:	9305      	str	r3, [sp, #20]
 800c216:	4620      	mov	r0, r4
 800c218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c21c:	3a30      	subs	r2, #48	; 0x30
 800c21e:	2a09      	cmp	r2, #9
 800c220:	d903      	bls.n	800c22a <_svfiprintf_r+0x1a6>
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0c6      	beq.n	800c1b4 <_svfiprintf_r+0x130>
 800c226:	9105      	str	r1, [sp, #20]
 800c228:	e7c4      	b.n	800c1b4 <_svfiprintf_r+0x130>
 800c22a:	4604      	mov	r4, r0
 800c22c:	2301      	movs	r3, #1
 800c22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c232:	e7f0      	b.n	800c216 <_svfiprintf_r+0x192>
 800c234:	ab03      	add	r3, sp, #12
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	462a      	mov	r2, r5
 800c23a:	4638      	mov	r0, r7
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <_svfiprintf_r+0x1f8>)
 800c23e:	a904      	add	r1, sp, #16
 800c240:	f7fd fe50 	bl	8009ee4 <_printf_float>
 800c244:	1c42      	adds	r2, r0, #1
 800c246:	4606      	mov	r6, r0
 800c248:	d1d6      	bne.n	800c1f8 <_svfiprintf_r+0x174>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	065b      	lsls	r3, r3, #25
 800c24e:	f53f af2d 	bmi.w	800c0ac <_svfiprintf_r+0x28>
 800c252:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c254:	b01d      	add	sp, #116	; 0x74
 800c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25a:	ab03      	add	r3, sp, #12
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	462a      	mov	r2, r5
 800c260:	4638      	mov	r0, r7
 800c262:	4b06      	ldr	r3, [pc, #24]	; (800c27c <_svfiprintf_r+0x1f8>)
 800c264:	a904      	add	r1, sp, #16
 800c266:	f7fe f8dd 	bl	800a424 <_printf_i>
 800c26a:	e7eb      	b.n	800c244 <_svfiprintf_r+0x1c0>
 800c26c:	0800d634 	.word	0x0800d634
 800c270:	0800d63a 	.word	0x0800d63a
 800c274:	0800d63e 	.word	0x0800d63e
 800c278:	08009ee5 	.word	0x08009ee5
 800c27c:	0800bfd1 	.word	0x0800bfd1

0800c280 <__sflush_r>:
 800c280:	898a      	ldrh	r2, [r1, #12]
 800c282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c284:	4605      	mov	r5, r0
 800c286:	0710      	lsls	r0, r2, #28
 800c288:	460c      	mov	r4, r1
 800c28a:	d457      	bmi.n	800c33c <__sflush_r+0xbc>
 800c28c:	684b      	ldr	r3, [r1, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	dc04      	bgt.n	800c29c <__sflush_r+0x1c>
 800c292:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	dc01      	bgt.n	800c29c <__sflush_r+0x1c>
 800c298:	2000      	movs	r0, #0
 800c29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	d0fa      	beq.n	800c298 <__sflush_r+0x18>
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2a8:	682f      	ldr	r7, [r5, #0]
 800c2aa:	6a21      	ldr	r1, [r4, #32]
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	d032      	beq.n	800c316 <__sflush_r+0x96>
 800c2b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	075a      	lsls	r2, r3, #29
 800c2b6:	d505      	bpl.n	800c2c4 <__sflush_r+0x44>
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	1ac0      	subs	r0, r0, r3
 800c2bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2be:	b10b      	cbz	r3, 800c2c4 <__sflush_r+0x44>
 800c2c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2c2:	1ac0      	subs	r0, r0, r3
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	6a21      	ldr	r1, [r4, #32]
 800c2ce:	47b0      	blx	r6
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	d106      	bne.n	800c2e4 <__sflush_r+0x64>
 800c2d6:	6829      	ldr	r1, [r5, #0]
 800c2d8:	291d      	cmp	r1, #29
 800c2da:	d82b      	bhi.n	800c334 <__sflush_r+0xb4>
 800c2dc:	4a28      	ldr	r2, [pc, #160]	; (800c380 <__sflush_r+0x100>)
 800c2de:	410a      	asrs	r2, r1
 800c2e0:	07d6      	lsls	r6, r2, #31
 800c2e2:	d427      	bmi.n	800c334 <__sflush_r+0xb4>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	6062      	str	r2, [r4, #4]
 800c2e8:	6922      	ldr	r2, [r4, #16]
 800c2ea:	04d9      	lsls	r1, r3, #19
 800c2ec:	6022      	str	r2, [r4, #0]
 800c2ee:	d504      	bpl.n	800c2fa <__sflush_r+0x7a>
 800c2f0:	1c42      	adds	r2, r0, #1
 800c2f2:	d101      	bne.n	800c2f8 <__sflush_r+0x78>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	b903      	cbnz	r3, 800c2fa <__sflush_r+0x7a>
 800c2f8:	6560      	str	r0, [r4, #84]	; 0x54
 800c2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2fc:	602f      	str	r7, [r5, #0]
 800c2fe:	2900      	cmp	r1, #0
 800c300:	d0ca      	beq.n	800c298 <__sflush_r+0x18>
 800c302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c306:	4299      	cmp	r1, r3
 800c308:	d002      	beq.n	800c310 <__sflush_r+0x90>
 800c30a:	4628      	mov	r0, r5
 800c30c:	f7ff f9ec 	bl	800b6e8 <_free_r>
 800c310:	2000      	movs	r0, #0
 800c312:	6360      	str	r0, [r4, #52]	; 0x34
 800c314:	e7c1      	b.n	800c29a <__sflush_r+0x1a>
 800c316:	2301      	movs	r3, #1
 800c318:	4628      	mov	r0, r5
 800c31a:	47b0      	blx	r6
 800c31c:	1c41      	adds	r1, r0, #1
 800c31e:	d1c8      	bne.n	800c2b2 <__sflush_r+0x32>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0c5      	beq.n	800c2b2 <__sflush_r+0x32>
 800c326:	2b1d      	cmp	r3, #29
 800c328:	d001      	beq.n	800c32e <__sflush_r+0xae>
 800c32a:	2b16      	cmp	r3, #22
 800c32c:	d101      	bne.n	800c332 <__sflush_r+0xb2>
 800c32e:	602f      	str	r7, [r5, #0]
 800c330:	e7b2      	b.n	800c298 <__sflush_r+0x18>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c338:	81a3      	strh	r3, [r4, #12]
 800c33a:	e7ae      	b.n	800c29a <__sflush_r+0x1a>
 800c33c:	690f      	ldr	r7, [r1, #16]
 800c33e:	2f00      	cmp	r7, #0
 800c340:	d0aa      	beq.n	800c298 <__sflush_r+0x18>
 800c342:	0793      	lsls	r3, r2, #30
 800c344:	bf18      	it	ne
 800c346:	2300      	movne	r3, #0
 800c348:	680e      	ldr	r6, [r1, #0]
 800c34a:	bf08      	it	eq
 800c34c:	694b      	ldreq	r3, [r1, #20]
 800c34e:	1bf6      	subs	r6, r6, r7
 800c350:	600f      	str	r7, [r1, #0]
 800c352:	608b      	str	r3, [r1, #8]
 800c354:	2e00      	cmp	r6, #0
 800c356:	dd9f      	ble.n	800c298 <__sflush_r+0x18>
 800c358:	4633      	mov	r3, r6
 800c35a:	463a      	mov	r2, r7
 800c35c:	4628      	mov	r0, r5
 800c35e:	6a21      	ldr	r1, [r4, #32]
 800c360:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c364:	47e0      	blx	ip
 800c366:	2800      	cmp	r0, #0
 800c368:	dc06      	bgt.n	800c378 <__sflush_r+0xf8>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295
 800c370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	e790      	b.n	800c29a <__sflush_r+0x1a>
 800c378:	4407      	add	r7, r0
 800c37a:	1a36      	subs	r6, r6, r0
 800c37c:	e7ea      	b.n	800c354 <__sflush_r+0xd4>
 800c37e:	bf00      	nop
 800c380:	dfbffffe 	.word	0xdfbffffe

0800c384 <_fflush_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	690b      	ldr	r3, [r1, #16]
 800c388:	4605      	mov	r5, r0
 800c38a:	460c      	mov	r4, r1
 800c38c:	b913      	cbnz	r3, 800c394 <_fflush_r+0x10>
 800c38e:	2500      	movs	r5, #0
 800c390:	4628      	mov	r0, r5
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	b118      	cbz	r0, 800c39e <_fflush_r+0x1a>
 800c396:	6a03      	ldr	r3, [r0, #32]
 800c398:	b90b      	cbnz	r3, 800c39e <_fflush_r+0x1a>
 800c39a:	f7fe f9f1 	bl	800a780 <__sinit>
 800c39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0f3      	beq.n	800c38e <_fflush_r+0xa>
 800c3a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3a8:	07d0      	lsls	r0, r2, #31
 800c3aa:	d404      	bmi.n	800c3b6 <_fflush_r+0x32>
 800c3ac:	0599      	lsls	r1, r3, #22
 800c3ae:	d402      	bmi.n	800c3b6 <_fflush_r+0x32>
 800c3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b2:	f7fe fb0e 	bl	800a9d2 <__retarget_lock_acquire_recursive>
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f7ff ff61 	bl	800c280 <__sflush_r>
 800c3be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	07da      	lsls	r2, r3, #31
 800c3c4:	d4e4      	bmi.n	800c390 <_fflush_r+0xc>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	059b      	lsls	r3, r3, #22
 800c3ca:	d4e1      	bmi.n	800c390 <_fflush_r+0xc>
 800c3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ce:	f7fe fb01 	bl	800a9d4 <__retarget_lock_release_recursive>
 800c3d2:	e7dd      	b.n	800c390 <_fflush_r+0xc>

0800c3d4 <memmove>:
 800c3d4:	4288      	cmp	r0, r1
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	eb01 0402 	add.w	r4, r1, r2
 800c3dc:	d902      	bls.n	800c3e4 <memmove+0x10>
 800c3de:	4284      	cmp	r4, r0
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	d807      	bhi.n	800c3f4 <memmove+0x20>
 800c3e4:	1e43      	subs	r3, r0, #1
 800c3e6:	42a1      	cmp	r1, r4
 800c3e8:	d008      	beq.n	800c3fc <memmove+0x28>
 800c3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3f2:	e7f8      	b.n	800c3e6 <memmove+0x12>
 800c3f4:	4601      	mov	r1, r0
 800c3f6:	4402      	add	r2, r0
 800c3f8:	428a      	cmp	r2, r1
 800c3fa:	d100      	bne.n	800c3fe <memmove+0x2a>
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c406:	e7f7      	b.n	800c3f8 <memmove+0x24>

0800c408 <_sbrk_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	2300      	movs	r3, #0
 800c40c:	4d05      	ldr	r5, [pc, #20]	; (800c424 <_sbrk_r+0x1c>)
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	f7f6 fa0e 	bl	8002834 <_sbrk>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d102      	bne.n	800c422 <_sbrk_r+0x1a>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	b103      	cbz	r3, 800c422 <_sbrk_r+0x1a>
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	20001a54 	.word	0x20001a54

0800c428 <__assert_func>:
 800c428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c42a:	4614      	mov	r4, r2
 800c42c:	461a      	mov	r2, r3
 800c42e:	4b09      	ldr	r3, [pc, #36]	; (800c454 <__assert_func+0x2c>)
 800c430:	4605      	mov	r5, r0
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68d8      	ldr	r0, [r3, #12]
 800c436:	b14c      	cbz	r4, 800c44c <__assert_func+0x24>
 800c438:	4b07      	ldr	r3, [pc, #28]	; (800c458 <__assert_func+0x30>)
 800c43a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c43e:	9100      	str	r1, [sp, #0]
 800c440:	462b      	mov	r3, r5
 800c442:	4906      	ldr	r1, [pc, #24]	; (800c45c <__assert_func+0x34>)
 800c444:	f000 f870 	bl	800c528 <fiprintf>
 800c448:	f000 f880 	bl	800c54c <abort>
 800c44c:	4b04      	ldr	r3, [pc, #16]	; (800c460 <__assert_func+0x38>)
 800c44e:	461c      	mov	r4, r3
 800c450:	e7f3      	b.n	800c43a <__assert_func+0x12>
 800c452:	bf00      	nop
 800c454:	200001d4 	.word	0x200001d4
 800c458:	0800d64f 	.word	0x0800d64f
 800c45c:	0800d65c 	.word	0x0800d65c
 800c460:	0800d68a 	.word	0x0800d68a

0800c464 <_calloc_r>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	fba1 5402 	umull	r5, r4, r1, r2
 800c46a:	b934      	cbnz	r4, 800c47a <_calloc_r+0x16>
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7ff f9ab 	bl	800b7c8 <_malloc_r>
 800c472:	4606      	mov	r6, r0
 800c474:	b928      	cbnz	r0, 800c482 <_calloc_r+0x1e>
 800c476:	4630      	mov	r0, r6
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	220c      	movs	r2, #12
 800c47c:	2600      	movs	r6, #0
 800c47e:	6002      	str	r2, [r0, #0]
 800c480:	e7f9      	b.n	800c476 <_calloc_r+0x12>
 800c482:	462a      	mov	r2, r5
 800c484:	4621      	mov	r1, r4
 800c486:	f7fe fa14 	bl	800a8b2 <memset>
 800c48a:	e7f4      	b.n	800c476 <_calloc_r+0x12>

0800c48c <__ascii_mbtowc>:
 800c48c:	b082      	sub	sp, #8
 800c48e:	b901      	cbnz	r1, 800c492 <__ascii_mbtowc+0x6>
 800c490:	a901      	add	r1, sp, #4
 800c492:	b142      	cbz	r2, 800c4a6 <__ascii_mbtowc+0x1a>
 800c494:	b14b      	cbz	r3, 800c4aa <__ascii_mbtowc+0x1e>
 800c496:	7813      	ldrb	r3, [r2, #0]
 800c498:	600b      	str	r3, [r1, #0]
 800c49a:	7812      	ldrb	r2, [r2, #0]
 800c49c:	1e10      	subs	r0, r2, #0
 800c49e:	bf18      	it	ne
 800c4a0:	2001      	movne	r0, #1
 800c4a2:	b002      	add	sp, #8
 800c4a4:	4770      	bx	lr
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	e7fb      	b.n	800c4a2 <__ascii_mbtowc+0x16>
 800c4aa:	f06f 0001 	mvn.w	r0, #1
 800c4ae:	e7f8      	b.n	800c4a2 <__ascii_mbtowc+0x16>

0800c4b0 <_realloc_r>:
 800c4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b4:	4680      	mov	r8, r0
 800c4b6:	4614      	mov	r4, r2
 800c4b8:	460e      	mov	r6, r1
 800c4ba:	b921      	cbnz	r1, 800c4c6 <_realloc_r+0x16>
 800c4bc:	4611      	mov	r1, r2
 800c4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c2:	f7ff b981 	b.w	800b7c8 <_malloc_r>
 800c4c6:	b92a      	cbnz	r2, 800c4d4 <_realloc_r+0x24>
 800c4c8:	f7ff f90e 	bl	800b6e8 <_free_r>
 800c4cc:	4625      	mov	r5, r4
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d4:	f000 f841 	bl	800c55a <_malloc_usable_size_r>
 800c4d8:	4284      	cmp	r4, r0
 800c4da:	4607      	mov	r7, r0
 800c4dc:	d802      	bhi.n	800c4e4 <_realloc_r+0x34>
 800c4de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4e2:	d812      	bhi.n	800c50a <_realloc_r+0x5a>
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	f7ff f96e 	bl	800b7c8 <_malloc_r>
 800c4ec:	4605      	mov	r5, r0
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0ed      	beq.n	800c4ce <_realloc_r+0x1e>
 800c4f2:	42bc      	cmp	r4, r7
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	bf28      	it	cs
 800c4fa:	463a      	movcs	r2, r7
 800c4fc:	f7fe fa79 	bl	800a9f2 <memcpy>
 800c500:	4631      	mov	r1, r6
 800c502:	4640      	mov	r0, r8
 800c504:	f7ff f8f0 	bl	800b6e8 <_free_r>
 800c508:	e7e1      	b.n	800c4ce <_realloc_r+0x1e>
 800c50a:	4635      	mov	r5, r6
 800c50c:	e7df      	b.n	800c4ce <_realloc_r+0x1e>

0800c50e <__ascii_wctomb>:
 800c50e:	4603      	mov	r3, r0
 800c510:	4608      	mov	r0, r1
 800c512:	b141      	cbz	r1, 800c526 <__ascii_wctomb+0x18>
 800c514:	2aff      	cmp	r2, #255	; 0xff
 800c516:	d904      	bls.n	800c522 <__ascii_wctomb+0x14>
 800c518:	228a      	movs	r2, #138	; 0x8a
 800c51a:	f04f 30ff 	mov.w	r0, #4294967295
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	4770      	bx	lr
 800c522:	2001      	movs	r0, #1
 800c524:	700a      	strb	r2, [r1, #0]
 800c526:	4770      	bx	lr

0800c528 <fiprintf>:
 800c528:	b40e      	push	{r1, r2, r3}
 800c52a:	b503      	push	{r0, r1, lr}
 800c52c:	4601      	mov	r1, r0
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	4805      	ldr	r0, [pc, #20]	; (800c548 <fiprintf+0x20>)
 800c532:	f853 2b04 	ldr.w	r2, [r3], #4
 800c536:	6800      	ldr	r0, [r0, #0]
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	f000 f83d 	bl	800c5b8 <_vfiprintf_r>
 800c53e:	b002      	add	sp, #8
 800c540:	f85d eb04 	ldr.w	lr, [sp], #4
 800c544:	b003      	add	sp, #12
 800c546:	4770      	bx	lr
 800c548:	200001d4 	.word	0x200001d4

0800c54c <abort>:
 800c54c:	2006      	movs	r0, #6
 800c54e:	b508      	push	{r3, lr}
 800c550:	f000 fa0a 	bl	800c968 <raise>
 800c554:	2001      	movs	r0, #1
 800c556:	f7f6 f8fa 	bl	800274e <_exit>

0800c55a <_malloc_usable_size_r>:
 800c55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55e:	1f18      	subs	r0, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfbc      	itt	lt
 800c564:	580b      	ldrlt	r3, [r1, r0]
 800c566:	18c0      	addlt	r0, r0, r3
 800c568:	4770      	bx	lr

0800c56a <__sfputc_r>:
 800c56a:	6893      	ldr	r3, [r2, #8]
 800c56c:	b410      	push	{r4}
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	6093      	str	r3, [r2, #8]
 800c574:	da07      	bge.n	800c586 <__sfputc_r+0x1c>
 800c576:	6994      	ldr	r4, [r2, #24]
 800c578:	42a3      	cmp	r3, r4
 800c57a:	db01      	blt.n	800c580 <__sfputc_r+0x16>
 800c57c:	290a      	cmp	r1, #10
 800c57e:	d102      	bne.n	800c586 <__sfputc_r+0x1c>
 800c580:	bc10      	pop	{r4}
 800c582:	f000 b933 	b.w	800c7ec <__swbuf_r>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	1c58      	adds	r0, r3, #1
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	7019      	strb	r1, [r3, #0]
 800c58e:	4608      	mov	r0, r1
 800c590:	bc10      	pop	{r4}
 800c592:	4770      	bx	lr

0800c594 <__sfputs_r>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	4606      	mov	r6, r0
 800c598:	460f      	mov	r7, r1
 800c59a:	4614      	mov	r4, r2
 800c59c:	18d5      	adds	r5, r2, r3
 800c59e:	42ac      	cmp	r4, r5
 800c5a0:	d101      	bne.n	800c5a6 <__sfputs_r+0x12>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e007      	b.n	800c5b6 <__sfputs_r+0x22>
 800c5a6:	463a      	mov	r2, r7
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ae:	f7ff ffdc 	bl	800c56a <__sfputc_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d1f3      	bne.n	800c59e <__sfputs_r+0xa>
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b8 <_vfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	4614      	mov	r4, r2
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	4606      	mov	r6, r0
 800c5c4:	b09d      	sub	sp, #116	; 0x74
 800c5c6:	b118      	cbz	r0, 800c5d0 <_vfiprintf_r+0x18>
 800c5c8:	6a03      	ldr	r3, [r0, #32]
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <_vfiprintf_r+0x18>
 800c5cc:	f7fe f8d8 	bl	800a780 <__sinit>
 800c5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d2:	07d9      	lsls	r1, r3, #31
 800c5d4:	d405      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	059a      	lsls	r2, r3, #22
 800c5da:	d402      	bmi.n	800c5e2 <_vfiprintf_r+0x2a>
 800c5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5de:	f7fe f9f8 	bl	800a9d2 <__retarget_lock_acquire_recursive>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	071b      	lsls	r3, r3, #28
 800c5e6:	d501      	bpl.n	800c5ec <_vfiprintf_r+0x34>
 800c5e8:	692b      	ldr	r3, [r5, #16]
 800c5ea:	b99b      	cbnz	r3, 800c614 <_vfiprintf_r+0x5c>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f000 f93a 	bl	800c868 <__swsetup_r>
 800c5f4:	b170      	cbz	r0, 800c614 <_vfiprintf_r+0x5c>
 800c5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f8:	07dc      	lsls	r4, r3, #31
 800c5fa:	d504      	bpl.n	800c606 <_vfiprintf_r+0x4e>
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	b01d      	add	sp, #116	; 0x74
 800c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	89ab      	ldrh	r3, [r5, #12]
 800c608:	0598      	lsls	r0, r3, #22
 800c60a:	d4f7      	bmi.n	800c5fc <_vfiprintf_r+0x44>
 800c60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60e:	f7fe f9e1 	bl	800a9d4 <__retarget_lock_release_recursive>
 800c612:	e7f3      	b.n	800c5fc <_vfiprintf_r+0x44>
 800c614:	2300      	movs	r3, #0
 800c616:	9309      	str	r3, [sp, #36]	; 0x24
 800c618:	2320      	movs	r3, #32
 800c61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61e:	2330      	movs	r3, #48	; 0x30
 800c620:	f04f 0901 	mov.w	r9, #1
 800c624:	f8cd 800c 	str.w	r8, [sp, #12]
 800c628:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c7d8 <_vfiprintf_r+0x220>
 800c62c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c630:	4623      	mov	r3, r4
 800c632:	469a      	mov	sl, r3
 800c634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c638:	b10a      	cbz	r2, 800c63e <_vfiprintf_r+0x86>
 800c63a:	2a25      	cmp	r2, #37	; 0x25
 800c63c:	d1f9      	bne.n	800c632 <_vfiprintf_r+0x7a>
 800c63e:	ebba 0b04 	subs.w	fp, sl, r4
 800c642:	d00b      	beq.n	800c65c <_vfiprintf_r+0xa4>
 800c644:	465b      	mov	r3, fp
 800c646:	4622      	mov	r2, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ffa2 	bl	800c594 <__sfputs_r>
 800c650:	3001      	adds	r0, #1
 800c652:	f000 80a9 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c658:	445a      	add	r2, fp
 800c65a:	9209      	str	r2, [sp, #36]	; 0x24
 800c65c:	f89a 3000 	ldrb.w	r3, [sl]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f000 80a1 	beq.w	800c7a8 <_vfiprintf_r+0x1f0>
 800c666:	2300      	movs	r3, #0
 800c668:	f04f 32ff 	mov.w	r2, #4294967295
 800c66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c670:	f10a 0a01 	add.w	sl, sl, #1
 800c674:	9304      	str	r3, [sp, #16]
 800c676:	9307      	str	r3, [sp, #28]
 800c678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c67c:	931a      	str	r3, [sp, #104]	; 0x68
 800c67e:	4654      	mov	r4, sl
 800c680:	2205      	movs	r2, #5
 800c682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c686:	4854      	ldr	r0, [pc, #336]	; (800c7d8 <_vfiprintf_r+0x220>)
 800c688:	f7fe f9a5 	bl	800a9d6 <memchr>
 800c68c:	9a04      	ldr	r2, [sp, #16]
 800c68e:	b9d8      	cbnz	r0, 800c6c8 <_vfiprintf_r+0x110>
 800c690:	06d1      	lsls	r1, r2, #27
 800c692:	bf44      	itt	mi
 800c694:	2320      	movmi	r3, #32
 800c696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c69a:	0713      	lsls	r3, r2, #28
 800c69c:	bf44      	itt	mi
 800c69e:	232b      	movmi	r3, #43	; 0x2b
 800c6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6aa:	d015      	beq.n	800c6d8 <_vfiprintf_r+0x120>
 800c6ac:	4654      	mov	r4, sl
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	f04f 0c0a 	mov.w	ip, #10
 800c6b4:	9a07      	ldr	r2, [sp, #28]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6bc:	3b30      	subs	r3, #48	; 0x30
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	d94d      	bls.n	800c75e <_vfiprintf_r+0x1a6>
 800c6c2:	b1b0      	cbz	r0, 800c6f2 <_vfiprintf_r+0x13a>
 800c6c4:	9207      	str	r2, [sp, #28]
 800c6c6:	e014      	b.n	800c6f2 <_vfiprintf_r+0x13a>
 800c6c8:	eba0 0308 	sub.w	r3, r0, r8
 800c6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	46a2      	mov	sl, r4
 800c6d4:	9304      	str	r3, [sp, #16]
 800c6d6:	e7d2      	b.n	800c67e <_vfiprintf_r+0xc6>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d19      	adds	r1, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9103      	str	r1, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfbb      	ittet	lt
 800c6e4:	425b      	neglt	r3, r3
 800c6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ea:	9307      	strge	r3, [sp, #28]
 800c6ec:	9307      	strlt	r3, [sp, #28]
 800c6ee:	bfb8      	it	lt
 800c6f0:	9204      	strlt	r2, [sp, #16]
 800c6f2:	7823      	ldrb	r3, [r4, #0]
 800c6f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c6f6:	d10c      	bne.n	800c712 <_vfiprintf_r+0x15a>
 800c6f8:	7863      	ldrb	r3, [r4, #1]
 800c6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c6fc:	d134      	bne.n	800c768 <_vfiprintf_r+0x1b0>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	3402      	adds	r4, #2
 800c702:	1d1a      	adds	r2, r3, #4
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	9203      	str	r2, [sp, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfb8      	it	lt
 800c70c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c710:	9305      	str	r3, [sp, #20]
 800c712:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7dc <_vfiprintf_r+0x224>
 800c716:	2203      	movs	r2, #3
 800c718:	4650      	mov	r0, sl
 800c71a:	7821      	ldrb	r1, [r4, #0]
 800c71c:	f7fe f95b 	bl	800a9d6 <memchr>
 800c720:	b138      	cbz	r0, 800c732 <_vfiprintf_r+0x17a>
 800c722:	2240      	movs	r2, #64	; 0x40
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	eba0 000a 	sub.w	r0, r0, sl
 800c72a:	4082      	lsls	r2, r0
 800c72c:	4313      	orrs	r3, r2
 800c72e:	3401      	adds	r4, #1
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c736:	2206      	movs	r2, #6
 800c738:	4829      	ldr	r0, [pc, #164]	; (800c7e0 <_vfiprintf_r+0x228>)
 800c73a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c73e:	f7fe f94a 	bl	800a9d6 <memchr>
 800c742:	2800      	cmp	r0, #0
 800c744:	d03f      	beq.n	800c7c6 <_vfiprintf_r+0x20e>
 800c746:	4b27      	ldr	r3, [pc, #156]	; (800c7e4 <_vfiprintf_r+0x22c>)
 800c748:	bb1b      	cbnz	r3, 800c792 <_vfiprintf_r+0x1da>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	3307      	adds	r3, #7
 800c74e:	f023 0307 	bic.w	r3, r3, #7
 800c752:	3308      	adds	r3, #8
 800c754:	9303      	str	r3, [sp, #12]
 800c756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c758:	443b      	add	r3, r7
 800c75a:	9309      	str	r3, [sp, #36]	; 0x24
 800c75c:	e768      	b.n	800c630 <_vfiprintf_r+0x78>
 800c75e:	460c      	mov	r4, r1
 800c760:	2001      	movs	r0, #1
 800c762:	fb0c 3202 	mla	r2, ip, r2, r3
 800c766:	e7a6      	b.n	800c6b6 <_vfiprintf_r+0xfe>
 800c768:	2300      	movs	r3, #0
 800c76a:	f04f 0c0a 	mov.w	ip, #10
 800c76e:	4619      	mov	r1, r3
 800c770:	3401      	adds	r4, #1
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	4620      	mov	r0, r4
 800c776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c77a:	3a30      	subs	r2, #48	; 0x30
 800c77c:	2a09      	cmp	r2, #9
 800c77e:	d903      	bls.n	800c788 <_vfiprintf_r+0x1d0>
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0c6      	beq.n	800c712 <_vfiprintf_r+0x15a>
 800c784:	9105      	str	r1, [sp, #20]
 800c786:	e7c4      	b.n	800c712 <_vfiprintf_r+0x15a>
 800c788:	4604      	mov	r4, r0
 800c78a:	2301      	movs	r3, #1
 800c78c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c790:	e7f0      	b.n	800c774 <_vfiprintf_r+0x1bc>
 800c792:	ab03      	add	r3, sp, #12
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	462a      	mov	r2, r5
 800c798:	4630      	mov	r0, r6
 800c79a:	4b13      	ldr	r3, [pc, #76]	; (800c7e8 <_vfiprintf_r+0x230>)
 800c79c:	a904      	add	r1, sp, #16
 800c79e:	f7fd fba1 	bl	8009ee4 <_printf_float>
 800c7a2:	4607      	mov	r7, r0
 800c7a4:	1c78      	adds	r0, r7, #1
 800c7a6:	d1d6      	bne.n	800c756 <_vfiprintf_r+0x19e>
 800c7a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7aa:	07d9      	lsls	r1, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	059a      	lsls	r2, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_vfiprintf_r+0x202>
 800c7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b6:	f7fe f90d 	bl	800a9d4 <__retarget_lock_release_recursive>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	065b      	lsls	r3, r3, #25
 800c7be:	f53f af1d 	bmi.w	800c5fc <_vfiprintf_r+0x44>
 800c7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7c4:	e71c      	b.n	800c600 <_vfiprintf_r+0x48>
 800c7c6:	ab03      	add	r3, sp, #12
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <_vfiprintf_r+0x230>)
 800c7d0:	a904      	add	r1, sp, #16
 800c7d2:	f7fd fe27 	bl	800a424 <_printf_i>
 800c7d6:	e7e4      	b.n	800c7a2 <_vfiprintf_r+0x1ea>
 800c7d8:	0800d634 	.word	0x0800d634
 800c7dc:	0800d63a 	.word	0x0800d63a
 800c7e0:	0800d63e 	.word	0x0800d63e
 800c7e4:	08009ee5 	.word	0x08009ee5
 800c7e8:	0800c595 	.word	0x0800c595

0800c7ec <__swbuf_r>:
 800c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ee:	460e      	mov	r6, r1
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	b118      	cbz	r0, 800c7fe <__swbuf_r+0x12>
 800c7f6:	6a03      	ldr	r3, [r0, #32]
 800c7f8:	b90b      	cbnz	r3, 800c7fe <__swbuf_r+0x12>
 800c7fa:	f7fd ffc1 	bl	800a780 <__sinit>
 800c7fe:	69a3      	ldr	r3, [r4, #24]
 800c800:	60a3      	str	r3, [r4, #8]
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	071a      	lsls	r2, r3, #28
 800c806:	d525      	bpl.n	800c854 <__swbuf_r+0x68>
 800c808:	6923      	ldr	r3, [r4, #16]
 800c80a:	b31b      	cbz	r3, 800c854 <__swbuf_r+0x68>
 800c80c:	6823      	ldr	r3, [r4, #0]
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	b2f6      	uxtb	r6, r6
 800c812:	1a98      	subs	r0, r3, r2
 800c814:	6963      	ldr	r3, [r4, #20]
 800c816:	4637      	mov	r7, r6
 800c818:	4283      	cmp	r3, r0
 800c81a:	dc04      	bgt.n	800c826 <__swbuf_r+0x3a>
 800c81c:	4621      	mov	r1, r4
 800c81e:	4628      	mov	r0, r5
 800c820:	f7ff fdb0 	bl	800c384 <_fflush_r>
 800c824:	b9e0      	cbnz	r0, 800c860 <__swbuf_r+0x74>
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	3b01      	subs	r3, #1
 800c82a:	60a3      	str	r3, [r4, #8]
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	6022      	str	r2, [r4, #0]
 800c832:	701e      	strb	r6, [r3, #0]
 800c834:	6962      	ldr	r2, [r4, #20]
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	429a      	cmp	r2, r3
 800c83a:	d004      	beq.n	800c846 <__swbuf_r+0x5a>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	07db      	lsls	r3, r3, #31
 800c840:	d506      	bpl.n	800c850 <__swbuf_r+0x64>
 800c842:	2e0a      	cmp	r6, #10
 800c844:	d104      	bne.n	800c850 <__swbuf_r+0x64>
 800c846:	4621      	mov	r1, r4
 800c848:	4628      	mov	r0, r5
 800c84a:	f7ff fd9b 	bl	800c384 <_fflush_r>
 800c84e:	b938      	cbnz	r0, 800c860 <__swbuf_r+0x74>
 800c850:	4638      	mov	r0, r7
 800c852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c854:	4621      	mov	r1, r4
 800c856:	4628      	mov	r0, r5
 800c858:	f000 f806 	bl	800c868 <__swsetup_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0d5      	beq.n	800c80c <__swbuf_r+0x20>
 800c860:	f04f 37ff 	mov.w	r7, #4294967295
 800c864:	e7f4      	b.n	800c850 <__swbuf_r+0x64>
	...

0800c868 <__swsetup_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4b2a      	ldr	r3, [pc, #168]	; (800c914 <__swsetup_r+0xac>)
 800c86c:	4605      	mov	r5, r0
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	460c      	mov	r4, r1
 800c872:	b118      	cbz	r0, 800c87c <__swsetup_r+0x14>
 800c874:	6a03      	ldr	r3, [r0, #32]
 800c876:	b90b      	cbnz	r3, 800c87c <__swsetup_r+0x14>
 800c878:	f7fd ff82 	bl	800a780 <__sinit>
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c882:	0718      	lsls	r0, r3, #28
 800c884:	d422      	bmi.n	800c8cc <__swsetup_r+0x64>
 800c886:	06d9      	lsls	r1, r3, #27
 800c888:	d407      	bmi.n	800c89a <__swsetup_r+0x32>
 800c88a:	2309      	movs	r3, #9
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	e034      	b.n	800c904 <__swsetup_r+0x9c>
 800c89a:	0758      	lsls	r0, r3, #29
 800c89c:	d512      	bpl.n	800c8c4 <__swsetup_r+0x5c>
 800c89e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8a0:	b141      	cbz	r1, 800c8b4 <__swsetup_r+0x4c>
 800c8a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8a6:	4299      	cmp	r1, r3
 800c8a8:	d002      	beq.n	800c8b0 <__swsetup_r+0x48>
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f7fe ff1c 	bl	800b6e8 <_free_r>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8ba:	81a3      	strh	r3, [r4, #12]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	6923      	ldr	r3, [r4, #16]
 800c8c2:	6023      	str	r3, [r4, #0]
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f043 0308 	orr.w	r3, r3, #8
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	b94b      	cbnz	r3, 800c8e4 <__swsetup_r+0x7c>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8da:	d003      	beq.n	800c8e4 <__swsetup_r+0x7c>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 f883 	bl	800c9ea <__smakebuf_r>
 800c8e4:	89a0      	ldrh	r0, [r4, #12]
 800c8e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8ea:	f010 0301 	ands.w	r3, r0, #1
 800c8ee:	d00a      	beq.n	800c906 <__swsetup_r+0x9e>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60a3      	str	r3, [r4, #8]
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	425b      	negs	r3, r3
 800c8f8:	61a3      	str	r3, [r4, #24]
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	b943      	cbnz	r3, 800c910 <__swsetup_r+0xa8>
 800c8fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c902:	d1c4      	bne.n	800c88e <__swsetup_r+0x26>
 800c904:	bd38      	pop	{r3, r4, r5, pc}
 800c906:	0781      	lsls	r1, r0, #30
 800c908:	bf58      	it	pl
 800c90a:	6963      	ldrpl	r3, [r4, #20]
 800c90c:	60a3      	str	r3, [r4, #8]
 800c90e:	e7f4      	b.n	800c8fa <__swsetup_r+0x92>
 800c910:	2000      	movs	r0, #0
 800c912:	e7f7      	b.n	800c904 <__swsetup_r+0x9c>
 800c914:	200001d4 	.word	0x200001d4

0800c918 <_raise_r>:
 800c918:	291f      	cmp	r1, #31
 800c91a:	b538      	push	{r3, r4, r5, lr}
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	d904      	bls.n	800c92c <_raise_r+0x14>
 800c922:	2316      	movs	r3, #22
 800c924:	6003      	str	r3, [r0, #0]
 800c926:	f04f 30ff 	mov.w	r0, #4294967295
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c92e:	b112      	cbz	r2, 800c936 <_raise_r+0x1e>
 800c930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c934:	b94b      	cbnz	r3, 800c94a <_raise_r+0x32>
 800c936:	4620      	mov	r0, r4
 800c938:	f000 f830 	bl	800c99c <_getpid_r>
 800c93c:	462a      	mov	r2, r5
 800c93e:	4601      	mov	r1, r0
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c946:	f000 b817 	b.w	800c978 <_kill_r>
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d00a      	beq.n	800c964 <_raise_r+0x4c>
 800c94e:	1c59      	adds	r1, r3, #1
 800c950:	d103      	bne.n	800c95a <_raise_r+0x42>
 800c952:	2316      	movs	r3, #22
 800c954:	6003      	str	r3, [r0, #0]
 800c956:	2001      	movs	r0, #1
 800c958:	e7e7      	b.n	800c92a <_raise_r+0x12>
 800c95a:	2400      	movs	r4, #0
 800c95c:	4628      	mov	r0, r5
 800c95e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c962:	4798      	blx	r3
 800c964:	2000      	movs	r0, #0
 800c966:	e7e0      	b.n	800c92a <_raise_r+0x12>

0800c968 <raise>:
 800c968:	4b02      	ldr	r3, [pc, #8]	; (800c974 <raise+0xc>)
 800c96a:	4601      	mov	r1, r0
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	f7ff bfd3 	b.w	800c918 <_raise_r>
 800c972:	bf00      	nop
 800c974:	200001d4 	.word	0x200001d4

0800c978 <_kill_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	2300      	movs	r3, #0
 800c97c:	4d06      	ldr	r5, [pc, #24]	; (800c998 <_kill_r+0x20>)
 800c97e:	4604      	mov	r4, r0
 800c980:	4608      	mov	r0, r1
 800c982:	4611      	mov	r1, r2
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	f7f5 fed2 	bl	800272e <_kill>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	d102      	bne.n	800c994 <_kill_r+0x1c>
 800c98e:	682b      	ldr	r3, [r5, #0]
 800c990:	b103      	cbz	r3, 800c994 <_kill_r+0x1c>
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	bd38      	pop	{r3, r4, r5, pc}
 800c996:	bf00      	nop
 800c998:	20001a54 	.word	0x20001a54

0800c99c <_getpid_r>:
 800c99c:	f7f5 bec0 	b.w	8002720 <_getpid>

0800c9a0 <__swhatbuf_r>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a8:	4615      	mov	r5, r2
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	461e      	mov	r6, r3
 800c9ae:	b096      	sub	sp, #88	; 0x58
 800c9b0:	da0c      	bge.n	800c9cc <__swhatbuf_r+0x2c>
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c9ba:	bf0c      	ite	eq
 800c9bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c9c0:	2340      	movne	r3, #64	; 0x40
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	6031      	str	r1, [r6, #0]
 800c9c6:	602b      	str	r3, [r5, #0]
 800c9c8:	b016      	add	sp, #88	; 0x58
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	466a      	mov	r2, sp
 800c9ce:	f000 f849 	bl	800ca64 <_fstat_r>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	dbed      	blt.n	800c9b2 <__swhatbuf_r+0x12>
 800c9d6:	9901      	ldr	r1, [sp, #4]
 800c9d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c9dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c9e0:	4259      	negs	r1, r3
 800c9e2:	4159      	adcs	r1, r3
 800c9e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e8:	e7eb      	b.n	800c9c2 <__swhatbuf_r+0x22>

0800c9ea <__smakebuf_r>:
 800c9ea:	898b      	ldrh	r3, [r1, #12]
 800c9ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9ee:	079d      	lsls	r5, r3, #30
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	d507      	bpl.n	800ca06 <__smakebuf_r+0x1c>
 800c9f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	2301      	movs	r3, #1
 800ca00:	6163      	str	r3, [r4, #20]
 800ca02:	b002      	add	sp, #8
 800ca04:	bd70      	pop	{r4, r5, r6, pc}
 800ca06:	466a      	mov	r2, sp
 800ca08:	ab01      	add	r3, sp, #4
 800ca0a:	f7ff ffc9 	bl	800c9a0 <__swhatbuf_r>
 800ca0e:	9900      	ldr	r1, [sp, #0]
 800ca10:	4605      	mov	r5, r0
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7fe fed8 	bl	800b7c8 <_malloc_r>
 800ca18:	b948      	cbnz	r0, 800ca2e <__smakebuf_r+0x44>
 800ca1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca1e:	059a      	lsls	r2, r3, #22
 800ca20:	d4ef      	bmi.n	800ca02 <__smakebuf_r+0x18>
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	f043 0302 	orr.w	r3, r3, #2
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	e7e3      	b.n	800c9f6 <__smakebuf_r+0xc>
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	6020      	str	r0, [r4, #0]
 800ca32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	9b00      	ldr	r3, [sp, #0]
 800ca3a:	6120      	str	r0, [r4, #16]
 800ca3c:	6163      	str	r3, [r4, #20]
 800ca3e:	9b01      	ldr	r3, [sp, #4]
 800ca40:	b15b      	cbz	r3, 800ca5a <__smakebuf_r+0x70>
 800ca42:	4630      	mov	r0, r6
 800ca44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca48:	f000 f81e 	bl	800ca88 <_isatty_r>
 800ca4c:	b128      	cbz	r0, 800ca5a <__smakebuf_r+0x70>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f023 0303 	bic.w	r3, r3, #3
 800ca54:	f043 0301 	orr.w	r3, r3, #1
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	431d      	orrs	r5, r3
 800ca5e:	81a5      	strh	r5, [r4, #12]
 800ca60:	e7cf      	b.n	800ca02 <__smakebuf_r+0x18>
	...

0800ca64 <_fstat_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	2300      	movs	r3, #0
 800ca68:	4d06      	ldr	r5, [pc, #24]	; (800ca84 <_fstat_r+0x20>)
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	f7f5 feba 	bl	80027ea <_fstat>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_fstat_r+0x1c>
 800ca7a:	682b      	ldr	r3, [r5, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_fstat_r+0x1c>
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	20001a54 	.word	0x20001a54

0800ca88 <_isatty_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4d05      	ldr	r5, [pc, #20]	; (800caa4 <_isatty_r+0x1c>)
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f5 feb8 	bl	8002808 <_isatty>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_isatty_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_isatty_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20001a54 	.word	0x20001a54

0800caa8 <log>:
 800caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	f000 f833 	bl	800cb18 <__ieee754_log>
 800cab2:	4622      	mov	r2, r4
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	462b      	mov	r3, r5
 800caba:	4620      	mov	r0, r4
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7f4 f811 	bl	8000ae4 <__aeabi_dcmpun>
 800cac2:	b998      	cbnz	r0, 800caec <log+0x44>
 800cac4:	2200      	movs	r2, #0
 800cac6:	2300      	movs	r3, #0
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f4 f800 	bl	8000ad0 <__aeabi_dcmpgt>
 800cad0:	b960      	cbnz	r0, 800caec <log+0x44>
 800cad2:	2200      	movs	r2, #0
 800cad4:	2300      	movs	r3, #0
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 ffd1 	bl	8000a80 <__aeabi_dcmpeq>
 800cade:	b140      	cbz	r0, 800caf2 <log+0x4a>
 800cae0:	f7fd ff4c 	bl	800a97c <__errno>
 800cae4:	2322      	movs	r3, #34	; 0x22
 800cae6:	2600      	movs	r6, #0
 800cae8:	4f06      	ldr	r7, [pc, #24]	; (800cb04 <log+0x5c>)
 800caea:	6003      	str	r3, [r0, #0]
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf2:	f7fd ff43 	bl	800a97c <__errno>
 800caf6:	2321      	movs	r3, #33	; 0x21
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	4803      	ldr	r0, [pc, #12]	; (800cb08 <log+0x60>)
 800cafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cb00:	f000 b804 	b.w	800cb0c <nan>
 800cb04:	fff00000 	.word	0xfff00000
 800cb08:	0800d68a 	.word	0x0800d68a

0800cb0c <nan>:
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	4901      	ldr	r1, [pc, #4]	; (800cb14 <nan+0x8>)
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	7ff80000 	.word	0x7ff80000

0800cb18 <__ieee754_log>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	460d      	mov	r5, r1
 800cb26:	b087      	sub	sp, #28
 800cb28:	da24      	bge.n	800cb74 <__ieee754_log+0x5c>
 800cb2a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cb2e:	4304      	orrs	r4, r0
 800cb30:	d108      	bne.n	800cb44 <__ieee754_log+0x2c>
 800cb32:	2200      	movs	r2, #0
 800cb34:	2300      	movs	r3, #0
 800cb36:	2000      	movs	r0, #0
 800cb38:	49cb      	ldr	r1, [pc, #812]	; (800ce68 <__ieee754_log+0x350>)
 800cb3a:	f7f3 fe63 	bl	8000804 <__aeabi_ddiv>
 800cb3e:	b007      	add	sp, #28
 800cb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb44:	2900      	cmp	r1, #0
 800cb46:	da04      	bge.n	800cb52 <__ieee754_log+0x3a>
 800cb48:	f7f3 fb7a 	bl	8000240 <__aeabi_dsub>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e7f3      	b.n	800cb3a <__ieee754_log+0x22>
 800cb52:	2200      	movs	r2, #0
 800cb54:	4bc5      	ldr	r3, [pc, #788]	; (800ce6c <__ieee754_log+0x354>)
 800cb56:	f7f3 fd2b 	bl	80005b0 <__aeabi_dmul>
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	460d      	mov	r5, r1
 800cb5e:	4602      	mov	r2, r0
 800cb60:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800cb64:	48c2      	ldr	r0, [pc, #776]	; (800ce70 <__ieee754_log+0x358>)
 800cb66:	4285      	cmp	r5, r0
 800cb68:	dd06      	ble.n	800cb78 <__ieee754_log+0x60>
 800cb6a:	4610      	mov	r0, r2
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	f7f3 fb69 	bl	8000244 <__adddf3>
 800cb72:	e7e4      	b.n	800cb3e <__ieee754_log+0x26>
 800cb74:	2100      	movs	r1, #0
 800cb76:	e7f5      	b.n	800cb64 <__ieee754_log+0x4c>
 800cb78:	152c      	asrs	r4, r5, #20
 800cb7a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cb7e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cb82:	440c      	add	r4, r1
 800cb84:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800cb88:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800cb8c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800cb90:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800cb94:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800cb98:	ea41 0305 	orr.w	r3, r1, r5
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4619      	mov	r1, r3
 800cba0:	2200      	movs	r2, #0
 800cba2:	4bb4      	ldr	r3, [pc, #720]	; (800ce74 <__ieee754_log+0x35c>)
 800cba4:	f7f3 fb4c 	bl	8000240 <__aeabi_dsub>
 800cba8:	1cab      	adds	r3, r5, #2
 800cbaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	468b      	mov	fp, r1
 800cbb4:	f04f 0200 	mov.w	r2, #0
 800cbb8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800cbbc:	dc53      	bgt.n	800cc66 <__ieee754_log+0x14e>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f7f3 ff5e 	bl	8000a80 <__aeabi_dcmpeq>
 800cbc4:	b1d0      	cbz	r0, 800cbfc <__ieee754_log+0xe4>
 800cbc6:	2c00      	cmp	r4, #0
 800cbc8:	f000 8122 	beq.w	800ce10 <__ieee754_log+0x2f8>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f7f3 fc85 	bl	80004dc <__aeabi_i2d>
 800cbd2:	a391      	add	r3, pc, #580	; (adr r3, 800ce18 <__ieee754_log+0x300>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460f      	mov	r7, r1
 800cbdc:	f7f3 fce8 	bl	80005b0 <__aeabi_dmul>
 800cbe0:	a38f      	add	r3, pc, #572	; (adr r3, 800ce20 <__ieee754_log+0x308>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fcdf 	bl	80005b0 <__aeabi_dmul>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	e7b8      	b.n	800cb6e <__ieee754_log+0x56>
 800cbfc:	a38a      	add	r3, pc, #552	; (adr r3, 800ce28 <__ieee754_log+0x310>)
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	4650      	mov	r0, sl
 800cc04:	4659      	mov	r1, fp
 800cc06:	f7f3 fcd3 	bl	80005b0 <__aeabi_dmul>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	2000      	movs	r0, #0
 800cc10:	4999      	ldr	r1, [pc, #612]	; (800ce78 <__ieee754_log+0x360>)
 800cc12:	f7f3 fb15 	bl	8000240 <__aeabi_dsub>
 800cc16:	4652      	mov	r2, sl
 800cc18:	4606      	mov	r6, r0
 800cc1a:	460f      	mov	r7, r1
 800cc1c:	465b      	mov	r3, fp
 800cc1e:	4650      	mov	r0, sl
 800cc20:	4659      	mov	r1, fp
 800cc22:	f7f3 fcc5 	bl	80005b0 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	f7f3 fcbf 	bl	80005b0 <__aeabi_dmul>
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	b914      	cbnz	r4, 800cc3e <__ieee754_log+0x126>
 800cc38:	4632      	mov	r2, r6
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	e0a2      	b.n	800cd84 <__ieee754_log+0x26c>
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f7f3 fc4c 	bl	80004dc <__aeabi_i2d>
 800cc44:	a374      	add	r3, pc, #464	; (adr r3, 800ce18 <__ieee754_log+0x300>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	4689      	mov	r9, r1
 800cc4e:	f7f3 fcaf 	bl	80005b0 <__aeabi_dmul>
 800cc52:	a373      	add	r3, pc, #460	; (adr r3, 800ce20 <__ieee754_log+0x308>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	4604      	mov	r4, r0
 800cc5a:	460d      	mov	r5, r1
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	4649      	mov	r1, r9
 800cc60:	f7f3 fca6 	bl	80005b0 <__aeabi_dmul>
 800cc64:	e0a7      	b.n	800cdb6 <__ieee754_log+0x29e>
 800cc66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc6a:	f7f3 faeb 	bl	8000244 <__adddf3>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4650      	mov	r0, sl
 800cc74:	4659      	mov	r1, fp
 800cc76:	f7f3 fdc5 	bl	8000804 <__aeabi_ddiv>
 800cc7a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f7f3 fc2c 	bl	80004dc <__aeabi_i2d>
 800cc84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4619      	mov	r1, r3
 800cc90:	f7f3 fc8e 	bl	80005b0 <__aeabi_dmul>
 800cc94:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cc98:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	9305      	str	r3, [sp, #20]
 800cca0:	460b      	mov	r3, r1
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	f7f3 fc83 	bl	80005b0 <__aeabi_dmul>
 800ccaa:	a361      	add	r3, pc, #388	; (adr r3, 800ce30 <__ieee754_log+0x318>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	4689      	mov	r9, r1
 800ccb4:	f7f3 fc7c 	bl	80005b0 <__aeabi_dmul>
 800ccb8:	a35f      	add	r3, pc, #380	; (adr r3, 800ce38 <__ieee754_log+0x320>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fac1 	bl	8000244 <__adddf3>
 800ccc2:	4642      	mov	r2, r8
 800ccc4:	464b      	mov	r3, r9
 800ccc6:	f7f3 fc73 	bl	80005b0 <__aeabi_dmul>
 800ccca:	a35d      	add	r3, pc, #372	; (adr r3, 800ce40 <__ieee754_log+0x328>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	f7f3 fab8 	bl	8000244 <__adddf3>
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	464b      	mov	r3, r9
 800ccd8:	f7f3 fc6a 	bl	80005b0 <__aeabi_dmul>
 800ccdc:	a35a      	add	r3, pc, #360	; (adr r3, 800ce48 <__ieee754_log+0x330>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 faaf 	bl	8000244 <__adddf3>
 800cce6:	4632      	mov	r2, r6
 800cce8:	463b      	mov	r3, r7
 800ccea:	f7f3 fc61 	bl	80005b0 <__aeabi_dmul>
 800ccee:	a358      	add	r3, pc, #352	; (adr r3, 800ce50 <__ieee754_log+0x338>)
 800ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 fc58 	bl	80005b0 <__aeabi_dmul>
 800cd00:	a355      	add	r3, pc, #340	; (adr r3, 800ce58 <__ieee754_log+0x340>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7f3 fa9d 	bl	8000244 <__adddf3>
 800cd0a:	4642      	mov	r2, r8
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	f7f3 fc4f 	bl	80005b0 <__aeabi_dmul>
 800cd12:	a353      	add	r3, pc, #332	; (adr r3, 800ce60 <__ieee754_log+0x348>)
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f7f3 fa94 	bl	8000244 <__adddf3>
 800cd1c:	4642      	mov	r2, r8
 800cd1e:	464b      	mov	r3, r9
 800cd20:	f7f3 fc46 	bl	80005b0 <__aeabi_dmul>
 800cd24:	460b      	mov	r3, r1
 800cd26:	4602      	mov	r2, r0
 800cd28:	4639      	mov	r1, r7
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7f3 fa8a 	bl	8000244 <__adddf3>
 800cd30:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cd34:	9b05      	ldr	r3, [sp, #20]
 800cd36:	3551      	adds	r5, #81	; 0x51
 800cd38:	431d      	orrs	r5, r3
 800cd3a:	2d00      	cmp	r5, #0
 800cd3c:	4680      	mov	r8, r0
 800cd3e:	4689      	mov	r9, r1
 800cd40:	dd48      	ble.n	800cdd4 <__ieee754_log+0x2bc>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4b4c      	ldr	r3, [pc, #304]	; (800ce78 <__ieee754_log+0x360>)
 800cd46:	4650      	mov	r0, sl
 800cd48:	4659      	mov	r1, fp
 800cd4a:	f7f3 fc31 	bl	80005b0 <__aeabi_dmul>
 800cd4e:	4652      	mov	r2, sl
 800cd50:	465b      	mov	r3, fp
 800cd52:	f7f3 fc2d 	bl	80005b0 <__aeabi_dmul>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	4640      	mov	r0, r8
 800cd60:	4649      	mov	r1, r9
 800cd62:	f7f3 fa6f 	bl	8000244 <__adddf3>
 800cd66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd6a:	f7f3 fc21 	bl	80005b0 <__aeabi_dmul>
 800cd6e:	4680      	mov	r8, r0
 800cd70:	4689      	mov	r9, r1
 800cd72:	b964      	cbnz	r4, 800cd8e <__ieee754_log+0x276>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f7f3 fa60 	bl	8000240 <__aeabi_dsub>
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	4650      	mov	r0, sl
 800cd86:	4659      	mov	r1, fp
 800cd88:	f7f3 fa5a 	bl	8000240 <__aeabi_dsub>
 800cd8c:	e6d7      	b.n	800cb3e <__ieee754_log+0x26>
 800cd8e:	a322      	add	r3, pc, #136	; (adr r3, 800ce18 <__ieee754_log+0x300>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd98:	f7f3 fc0a 	bl	80005b0 <__aeabi_dmul>
 800cd9c:	a320      	add	r3, pc, #128	; (adr r3, 800ce20 <__ieee754_log+0x308>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	4604      	mov	r4, r0
 800cda4:	460d      	mov	r5, r1
 800cda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdaa:	f7f3 fc01 	bl	80005b0 <__aeabi_dmul>
 800cdae:	4642      	mov	r2, r8
 800cdb0:	464b      	mov	r3, r9
 800cdb2:	f7f3 fa47 	bl	8000244 <__adddf3>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	4630      	mov	r0, r6
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	f7f3 fa3f 	bl	8000240 <__aeabi_dsub>
 800cdc2:	4652      	mov	r2, sl
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	f7f3 fa3b 	bl	8000240 <__aeabi_dsub>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4620      	mov	r0, r4
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	e7d9      	b.n	800cd88 <__ieee754_log+0x270>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4659      	mov	r1, fp
 800cddc:	f7f3 fa30 	bl	8000240 <__aeabi_dsub>
 800cde0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cde4:	f7f3 fbe4 	bl	80005b0 <__aeabi_dmul>
 800cde8:	4606      	mov	r6, r0
 800cdea:	460f      	mov	r7, r1
 800cdec:	2c00      	cmp	r4, #0
 800cdee:	f43f af23 	beq.w	800cc38 <__ieee754_log+0x120>
 800cdf2:	a309      	add	r3, pc, #36	; (adr r3, 800ce18 <__ieee754_log+0x300>)
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdfc:	f7f3 fbd8 	bl	80005b0 <__aeabi_dmul>
 800ce00:	a307      	add	r3, pc, #28	; (adr r3, 800ce20 <__ieee754_log+0x308>)
 800ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce06:	4604      	mov	r4, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce0e:	e727      	b.n	800cc60 <__ieee754_log+0x148>
 800ce10:	2000      	movs	r0, #0
 800ce12:	2100      	movs	r1, #0
 800ce14:	e693      	b.n	800cb3e <__ieee754_log+0x26>
 800ce16:	bf00      	nop
 800ce18:	fee00000 	.word	0xfee00000
 800ce1c:	3fe62e42 	.word	0x3fe62e42
 800ce20:	35793c76 	.word	0x35793c76
 800ce24:	3dea39ef 	.word	0x3dea39ef
 800ce28:	55555555 	.word	0x55555555
 800ce2c:	3fd55555 	.word	0x3fd55555
 800ce30:	df3e5244 	.word	0xdf3e5244
 800ce34:	3fc2f112 	.word	0x3fc2f112
 800ce38:	96cb03de 	.word	0x96cb03de
 800ce3c:	3fc74664 	.word	0x3fc74664
 800ce40:	94229359 	.word	0x94229359
 800ce44:	3fd24924 	.word	0x3fd24924
 800ce48:	55555593 	.word	0x55555593
 800ce4c:	3fe55555 	.word	0x3fe55555
 800ce50:	d078c69f 	.word	0xd078c69f
 800ce54:	3fc39a09 	.word	0x3fc39a09
 800ce58:	1d8e78af 	.word	0x1d8e78af
 800ce5c:	3fcc71c5 	.word	0x3fcc71c5
 800ce60:	9997fa04 	.word	0x9997fa04
 800ce64:	3fd99999 	.word	0x3fd99999
 800ce68:	c3500000 	.word	0xc3500000
 800ce6c:	43500000 	.word	0x43500000
 800ce70:	7fefffff 	.word	0x7fefffff
 800ce74:	3ff00000 	.word	0x3ff00000
 800ce78:	3fe00000 	.word	0x3fe00000

0800ce7c <_init>:
 800ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7e:	bf00      	nop
 800ce80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce82:	bc08      	pop	{r3}
 800ce84:	469e      	mov	lr, r3
 800ce86:	4770      	bx	lr

0800ce88 <_fini>:
 800ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8a:	bf00      	nop
 800ce8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8e:	bc08      	pop	{r3}
 800ce90:	469e      	mov	lr, r3
 800ce92:	4770      	bx	lr
