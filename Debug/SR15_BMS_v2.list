
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a4  080093a4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093ac  080093ac  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080093b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200001cc  08009580  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  08009580  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001987b  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004809  00000000  00000000  00039ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0003e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127f  00000000  00000000  0003faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023923  00000000  00000000  00040d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f820  00000000  00000000  00064692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07bd  00000000  00000000  00083eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006994  00000000  00000000  00144670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014b004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08008ec0 	.word	0x08008ec0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08008ec0 	.word	0x08008ec0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_PEC15_Calc>:
                                            };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate a PEC
                   )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000540:	2310      	movs	r3, #16
 8000542:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	e018      	b.n	800057c <LTC_PEC15_Calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	09db      	lsrs	r3, r3, #7
 800054e:	b29a      	uxth	r2, r3
 8000550:	7b7b      	ldrb	r3, [r7, #13]
 8000552:	6839      	ldr	r1, [r7, #0]
 8000554:	440b      	add	r3, r1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b29a      	uxth	r2, r3
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	490a      	ldr	r1, [pc, #40]	; (8000594 <LTC_PEC15_Calc+0x60>)
 800056c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000570:	b29b      	uxth	r3, r3
 8000572:	4053      	eors	r3, r2
 8000574:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	3301      	adds	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
 800057c:	7b7a      	ldrb	r2, [r7, #13]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3e2      	bcc.n	800054a <LTC_PEC15_Calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b29b      	uxth	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	08008f38 	.word	0x08008f38

08000598 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	if (num) num_devices = num; //Non-zero
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <LTC_Set_Num_Devices+0x16>
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <LTC_Set_Num_Devices+0x20>)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	7013      	strb	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	200001e8 	.word	0x200001e8

080005bc <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	return num_devices;
 80005c0:	4b02      	ldr	r3, [pc, #8]	; (80005cc <LTC_Get_Num_Devices+0x10>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200001e8 	.word	0x200001e8

080005d0 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18)) num_series_groups = num; //Non-zero and 18 or less
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b12      	cmp	r3, #18
 80005e4:	d802      	bhi.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <LTC_Set_Num_Series_Groups+0x28>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	7013      	strb	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200001e9 	.word	0x200001e9

080005fc <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	return num_series_groups;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <LTC_Get_Num_Series_Groups+0x10>)
 8000602:	781b      	ldrb	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	200001e9 	.word	0x200001e9

08000610 <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	717b      	strb	r3, [r7, #5]

	LTC_nCS_Low(); //Pull CS low
 800061e:	f000 fd7d 	bl	800111c <LTC_nCS_Low>

	hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 8000622:	1d79      	adds	r1, r7, #5
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LTC_Wakeup_Idle+0x50>)
 800062a:	f003 fdbf 	bl	80041ac <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	71bb      	strb	r3, [r7, #6]
	if (hal_ret) { //Non-zero means error
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <LTC_Wakeup_Idle+0x40>
		//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
		ret |= (1 << (hal_ret+LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2200      	movs	r2, #0
 800063c:	4413      	add	r3, r2
 800063e:	2201      	movs	r2, #1
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	b25a      	sxtb	r2, r3
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	4313      	orrs	r3, r2
 800064c:	b25b      	sxtb	r3, r3
 800064e:	71fb      	strb	r3, [r7, #7]
	}

	LTC_nCS_High(); //Pull CS high
 8000650:	f000 fd58 	bl	8001104 <LTC_nCS_High>

	return ret;
 8000654:	79fb      	ldrb	r3, [r7, #7]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200002a0 	.word	0x200002a0

08000664 <LTC_ReadRawCellVoltages>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 8000664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000668:	b089      	sub	sp, #36	; 0x24
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	466b      	mov	r3, sp
 8000670:	461e      	mov	r6, r3
  LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	77fb      	strb	r3, [r7, #31]
  LTC_SPI_StatusTypeDef hal_ret;
  const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 8000676:	f7ff ffa1 	bl	80005bc <LTC_Get_Num_Devices>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	2308      	movs	r3, #8
 8000680:	fb02 f303 	mul.w	r3, r2, r3
 8000684:	773b      	strb	r3, [r7, #28]
  uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8000686:	7f3b      	ldrb	r3, [r7, #28]
 8000688:	3b01      	subs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
 800068c:	7f3b      	ldrb	r3, [r7, #28]
 800068e:	2200      	movs	r2, #0
 8000690:	4698      	mov	r8, r3
 8000692:	4691      	mov	r9, r2
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006a8:	7f3b      	ldrb	r3, [r7, #28]
 80006aa:	2200      	movs	r2, #0
 80006ac:	461c      	mov	r4, r3
 80006ae:	4615      	mov	r5, r2
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	00eb      	lsls	r3, r5, #3
 80006ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006be:	00e2      	lsls	r2, r4, #3
 80006c0:	7f3b      	ldrb	r3, [r7, #28]
 80006c2:	3307      	adds	r3, #7
 80006c4:	08db      	lsrs	r3, r3, #3
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	ebad 0d03 	sub.w	sp, sp, r3
 80006cc:	466b      	mov	r3, sp
 80006ce:	3300      	adds	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	77bb      	strb	r3, [r7, #30]
 80006d6:	e083      	b.n	80007e0 <LTC_ReadRawCellVoltages+0x17c>
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 80006d8:	7fbb      	ldrb	r3, [r7, #30]
 80006da:	4a4b      	ldr	r2, [pc, #300]	; (8000808 <LTC_ReadRawCellVoltages+0x1a4>)
 80006dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	723b      	strb	r3, [r7, #8]
    cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	4a47      	ldr	r2, [pc, #284]	; (8000808 <LTC_ReadRawCellVoltages+0x1a4>)
 80006ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	727b      	strb	r3, [r7, #9]
    cmd_pec = LTC_PEC15_Calc(2, cmd);
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff ff1a 	bl	8000534 <LTC_PEC15_Calc>
 8000700:	4603      	mov	r3, r0
 8000702:	827b      	strh	r3, [r7, #18]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000704:	8a7b      	ldrh	r3, [r7, #18]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	72bb      	strb	r3, [r7, #10]
    cmd[3] = (uint8_t)(cmd_pec);
 800070e:	8a7b      	ldrh	r3, [r7, #18]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	72fb      	strb	r3, [r7, #11]

    ret |= LTC_Wakeup_Idle(); //Wake LTC up
 8000714:	f7ff ff7c 	bl	8000610 <LTC_Wakeup_Idle>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	4313      	orrs	r3, r2
 8000720:	77fb      	strb	r3, [r7, #31]

    LTC_nCS_Low(); //Pull CS low
 8000722:	f000 fcfb 	bl	800111c <LTC_nCS_Low>

    hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8000726:	f107 0108 	add.w	r1, r7, #8
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2204      	movs	r2, #4
 800072e:	4837      	ldr	r0, [pc, #220]	; (800080c <LTC_ReadRawCellVoltages+0x1a8>)
 8000730:	f003 fd3c 	bl	80041ac <HAL_SPI_Transmit>
 8000734:	4603      	mov	r3, r0
 8000736:	747b      	strb	r3, [r7, #17]
    if (hal_ret) { //Non-zero means error
 8000738:	7c7b      	ldrb	r3, [r7, #17]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00b      	beq.n	8000756 <LTC_ReadRawCellVoltages+0xf2>
      ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 800073e:	7c7b      	ldrb	r3, [r7, #17]
 8000740:	2200      	movs	r2, #0
 8000742:	4413      	add	r3, r2
 8000744:	2201      	movs	r2, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	b25a      	sxtb	r2, r3
 800074c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000750:	4313      	orrs	r3, r2
 8000752:	b25b      	sxtb	r3, r3
 8000754:	77fb      	strb	r3, [r7, #31]
    }

    hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_voltages_reg, ARR_SIZE_REG, 100);
 8000756:	7f3b      	ldrb	r3, [r7, #28]
 8000758:	b29a      	uxth	r2, r3
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	6979      	ldr	r1, [r7, #20]
 800075e:	482b      	ldr	r0, [pc, #172]	; (800080c <LTC_ReadRawCellVoltages+0x1a8>)
 8000760:	f003 fe67 	bl	8004432 <HAL_SPI_Receive>
 8000764:	4603      	mov	r3, r0
 8000766:	747b      	strb	r3, [r7, #17]
    if (hal_ret) { //Non-zero means error
 8000768:	7c7b      	ldrb	r3, [r7, #17]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00b      	beq.n	8000786 <LTC_ReadRawCellVoltages+0x122>
      ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 800076e:	7c7b      	ldrb	r3, [r7, #17]
 8000770:	2204      	movs	r2, #4
 8000772:	4413      	add	r3, r2
 8000774:	2201      	movs	r2, #1
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	b25a      	sxtb	r2, r3
 800077c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000780:	4313      	orrs	r3, r2
 8000782:	b25b      	sxtb	r3, r3
 8000784:	77fb      	strb	r3, [r7, #31]
    }

    // Process the received data
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8000786:	2300      	movs	r3, #0
 8000788:	777b      	strb	r3, [r7, #29]
 800078a:	e01d      	b.n	80007c8 <LTC_ReadRawCellVoltages+0x164>
      // Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
      // PEC for each device is the last two bytes of its data segment
      uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 800078c:	7f7b      	ldrb	r3, [r7, #29]
 800078e:	2208      	movs	r2, #8
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]

		// If PEC matches, copy the voltage data, omitting the PEC bytes
		memcpy(&read_voltages[dev_idx * LTC_Get_Num_Series_Groups() + i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr, REG_LEN - 2);
 800079a:	7f7c      	ldrb	r4, [r7, #29]
 800079c:	f7ff ff2e 	bl	80005fc <LTC_Get_Num_Series_Groups>
 80007a0:	4603      	mov	r3, r0
 80007a2:	fb03 f204 	mul.w	r2, r3, r4
 80007a6:	7fbb      	ldrb	r3, [r7, #30]
 80007a8:	2103      	movs	r1, #3
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	2208      	movs	r2, #8
 80007b8:	3a02      	subs	r2, #2
 80007ba:	68f9      	ldr	r1, [r7, #12]
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 ff21 	bl	8008604 <memcpy>
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80007c2:	7f7b      	ldrb	r3, [r7, #29]
 80007c4:	3301      	adds	r3, #1
 80007c6:	777b      	strb	r3, [r7, #29]
 80007c8:	f7ff fef8 	bl	80005bc <LTC_Get_Num_Devices>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	7f7b      	ldrb	r3, [r7, #29]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d3da      	bcc.n	800078c <LTC_ReadRawCellVoltages+0x128>

    }

    LTC_nCS_High(); //Pull CS high
 80007d6:	f000 fc95 	bl	8001104 <LTC_nCS_High>
  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 80007da:	7fbb      	ldrb	r3, [r7, #30]
 80007dc:	3301      	adds	r3, #1
 80007de:	77bb      	strb	r3, [r7, #30]
 80007e0:	f7ff ff0c 	bl	80005fc <LTC_Get_Num_Series_Groups>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	2303      	movs	r3, #3
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	7fba      	ldrb	r2, [r7, #30]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	f4ff af70 	bcc.w	80006d8 <LTC_ReadRawCellVoltages+0x74>
  }

  return ret;
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	46b5      	mov	sp, r6
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3724      	adds	r7, #36	; 0x24
 8000800:	46bd      	mov	sp, r7
 8000802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000806:	bf00      	nop
 8000808:	08008f30 	.word	0x08008f30
 800080c:	200002a0 	.word	0x200002a0

08000810 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_ADC1_Init+0x74>)
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <MX_ADC1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_ADC1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_ADC1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ADC1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ADC1_Init+0x74>)
 800083a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800083e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ADC1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_ADC1_Init+0x74>)
 8000848:	2201      	movs	r2, #1
 800084a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_ADC1_Init+0x74>)
 800084e:	f000 feeb 	bl	8001628 <HAL_ADC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 fbce 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800085c:	230e      	movs	r3, #14
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2301      	movs	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_ADC1_Init+0x74>)
 800086e:	f000 ffb3 	bl	80017d8 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000878:	f000 fbbe 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001ec 	.word	0x200001ec
 8000888:	40012400 	.word	0x40012400

0800088c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_ADC2_Init+0x74>)
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <MX_ADC2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_ADC2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_ADC2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_ADC2_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_ADC2_Init+0x74>)
 80008b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC2_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_ADC2_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_ADC2_Init+0x74>)
 80008ca:	f000 fead 	bl	8001628 <HAL_ADC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 fb90 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008d8:	230a      	movs	r3, #10
 80008da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008dc:	2301      	movs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_ADC2_Init+0x74>)
 80008ea:	f000 ff75 	bl	80017d8 <HAL_ADC_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80008f4:	f000 fb80 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000021c 	.word	0x2000021c
 8000904:	40012800 	.word	0x40012800

08000908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <HAL_ADC_MspInit+0xbc>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d122      	bne.n	800096e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000958:	2330      	movs	r3, #48	; 0x30
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095c:	2303      	movs	r3, #3
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	4819      	ldr	r0, [pc, #100]	; (80009cc <HAL_ADC_MspInit+0xc4>)
 8000968:	f001 fa78 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800096c:	e026      	b.n	80009bc <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_ADC_MspInit+0xc8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d121      	bne.n	80009bc <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_ADC_MspInit+0xc0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009a8:	230f      	movs	r3, #15
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ac:	2303      	movs	r3, #3
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_ADC_MspInit+0xc4>)
 80009b8:	f001 fa50 	bl	8001e5c <HAL_GPIO_Init>
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40012400 	.word	0x40012400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40012800 	.word	0x40012800

080009d4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_CAN1_Init+0x64>)
 80009dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_CAN1_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_CAN1_Init+0x60>)
 8000a22:	f001 f812 	bl	8001a4a <HAL_CAN_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 fae4 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000024c 	.word	0x2000024c
 8000a38:	40006400 	.word	0x40006400

08000a3c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <MX_CAN2_Init+0x64>)
 8000a44:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a48:	2210      	movs	r2, #16
 8000a4a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_CAN2_Init+0x60>)
 8000a8a:	f000 ffde 	bl	8001a4a <HAL_CAN_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fab0 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000274 	.word	0x20000274
 8000aa0:	40006800 	.word	0x40006800

08000aa4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a50      	ldr	r2, [pc, #320]	; (8000c00 <HAL_CAN_MspInit+0x15c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d14d      	bne.n	8000b60 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ac4:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000acc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d10b      	bne.n	8000aee <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad6:	4b4c      	ldr	r3, [pc, #304]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b49      	ldr	r3, [pc, #292]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483c      	ldr	r0, [pc, #240]	; (8000c0c <HAL_CAN_MspInit+0x168>)
 8000b1c:	f001 f99e 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4835      	ldr	r0, [pc, #212]	; (8000c0c <HAL_CAN_MspInit+0x168>)
 8000b36:	f001 f991 	bl	8001e5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_CAN_MspInit+0x16c>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b58:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <HAL_CAN_MspInit+0x16c>)
 8000b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000b5e:	e04b      	b.n	8000bf8 <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <HAL_CAN_MspInit+0x170>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d146      	bne.n	8000bf8 <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000b8a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_CAN_MspInit+0x160>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d10b      	bne.n	8000bac <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	61d3      	str	r3, [r2, #28]
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_CAN_MspInit+0x164>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <HAL_CAN_MspInit+0x168>)
 8000bda:	f001 f93f 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_CAN_MspInit+0x168>)
 8000bf4:	f001 f932 	bl	8001e5c <HAL_GPIO_Init>
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40006400 	.word	0x40006400
 8000c04:	2000029c 	.word	0x2000029c
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010c00 	.word	0x40010c00
 8000c10:	40010000 	.word	0x40010000
 8000c14:	40006800 	.word	0x40006800

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a2c      	ldr	r2, [pc, #176]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_GPIO_Init+0xe4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000c92:	f001 fa67 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	481a      	ldr	r0, [pc, #104]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000c9c:	f001 fa62 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0xe8>)
 8000cb8:	f001 f8d0 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000cd4:	f001 f8c2 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xec>)
 8000cee:	f001 f8b5 	bl	8001e5c <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3720      	adds	r7, #32
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40011000 	.word	0x40011000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	f6ad 0d78 	subw	sp, sp, #2168	; 0x878
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fc04 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f894 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f7ff ff7e 	bl	8000c18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d1c:	f7ff fd78 	bl	8000810 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d20:	f7ff fdb4 	bl	800088c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d24:	f7ff fe56 	bl	80009d4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d28:	f7ff fe88 	bl	8000a3c <MX_CAN2_Init>
  MX_TIM7_Init();
 8000d2c:	f000 faa2 	bl	8001274 <MX_TIM7_Init>
  MX_SPI1_Init();
 8000d30:	f000 f968 	bl	8001004 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d34:	f000 faf2 	bl	800131c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d38:	f000 fb1a 	bl	8001370 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000d3c:	f006 ff12 	bl	8007b64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin);
 8000d40:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	493c      	ldr	r1, [pc, #240]	; (8000e38 <main+0x130>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f8e5 	bl	8000f18 <GpioTimePacket_Init>
  TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000d4e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8000d52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f91e 	bl	8000f98 <TimerPacket_Init>

  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8000d5c:	f000 f9d2 	bl	8001104 <LTC_nCS_High>

  LTC_Set_Num_Devices(NUM_DEVICES);
 8000d60:	2002      	movs	r0, #2
 8000d62:	f7ff fc19 	bl	8000598 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(12);
 8000d66:	200c      	movs	r0, #12
 8000d68:	f7ff fc32 	bl	80005d0 <LTC_Set_Num_Series_Groups>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8000d6c:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8000d70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f8ec 	bl	8000f52 <GpioFixedToggle>

		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8000d7a:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f91d 	bl	8000fbe <TimerPacket_FixedPulse>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f0      	beq.n	8000d6c <main+0x64>
			char buf[30];
			char out_buf[2048] = "";
 8000d8a:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8000d8e:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	3304      	adds	r3, #4
 8000d98:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 fbe8 	bl	8008574 <memset>
			char char_to_str[2];

			LTC_ReadRawCellVoltages((uint16_t *)read_val);
 8000da4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc5b 	bl	8000664 <LTC_ReadRawCellVoltages>

			char_to_str[0] = '\n';
 8000dae:	230a      	movs	r3, #10
 8000db0:	f887 3804 	strb.w	r3, [r7, #2052]	; 0x804
			char_to_str[1] = '\0';
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3805 	strb.w	r3, [r7, #2053]	; 0x805

			for (uint8_t i = 0; i < 24; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
 8000dc0:	e022      	b.n	8000e08 <main+0x100>
				sprintf(buf, "C%u:%u/1000 V", i+1, read_val[i]);
 8000dc2:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000dd8:	f607 0008 	addw	r0, r7, #2056	; 0x808
 8000ddc:	4917      	ldr	r1, [pc, #92]	; (8000e3c <main+0x134>)
 8000dde:	f007 fba9 	bl	8008534 <siprintf>
				strncat(out_buf, buf, 24);
 8000de2:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2218      	movs	r2, #24
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 fbca 	bl	8008584 <strncat>
				strncat(out_buf, char_to_str, 3);
 8000df0:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2203      	movs	r2, #3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 fbc3 	bl	8008584 <strncat>
			for (uint8_t i = 0; i < 24; i++) {
 8000dfe:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000e02:	3301      	adds	r3, #1
 8000e04:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
 8000e08:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000e0c:	2b17      	cmp	r3, #23
 8000e0e:	d9d8      	bls.n	8000dc2 <main+0xba>
			}
			strncat(out_buf, char_to_str, 3);
 8000e10:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2203      	movs	r2, #3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 fbb3 	bl	8008584 <strncat>

			USB_Transmit(out_buf, strlen(out_buf));
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff f9ff 	bl	8000224 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fe89 	bl	8007b46 <USB_Transmit>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8000e34:	e79a      	b.n	8000d6c <main+0x64>
 8000e36:	bf00      	nop
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	08008ed8 	.word	0x08008ed8

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09c      	sub	sp, #112	; 0x70
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e4a:	2238      	movs	r2, #56	; 0x38
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f007 fb90 	bl	8008574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2220      	movs	r2, #32
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fb82 	bl	8008574 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e96:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000e9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ea0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fabc 	bl	8003428 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eb6:	f000 f89f 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fdbc 	bl	8003a54 <HAL_RCC_ClockConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ee2:	f000 f889 	bl	8000ff8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ee6:	2312      	movs	r3, #18
 8000ee8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 ffa2 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f02:	f000 f879 	bl	8000ff8 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SystemClock_Config+0xd4>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3770      	adds	r7, #112	; 0x70
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	42420070 	.word	0x42420070

08000f18 <GpioTimePacket_Init>:
/* USER CODE BEGIN 4 */

//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	68b8      	ldr	r0, [r7, #8]
 8000f2e:	f001 f919 	bl	8002164 <HAL_GPIO_WritePin>
	gtp->gpio_port	= port;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin	= pin;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev 	= 0; //Init to 0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	gtp->ts_curr 	= 0; //Init to 0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <GpioFixedToggle>:

//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8000f5e:	f000 fb35 	bl	80015cc <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]

	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	887b      	ldrh	r3, [r7, #2]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d90b      	bls.n	8000f90 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	889b      	ldrh	r3, [r3, #4]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	f001 f906 	bl	8002194 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <TimerPacket_Init>:

//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	tp->ts_prev 	= 0;		//Init to 0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	tp->ts_curr 	= 0; 		//Init to 0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
	tp->delay		= delay;	//Init to user value
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	609a      	str	r2, [r3, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <TimerPacket_FixedPulse>:

//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8000fc6:	f000 fb01 	bl	80015cc <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	605a      	str	r2, [r3, #4]

	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1ad2      	subs	r2, r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d905      	bls.n	8000fee <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>
	...

08001004 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2228      	movs	r2, #40	; 0x28
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f003 f825 	bl	80040a4 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f7ff ffca 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200002a0 	.word	0x200002a0
 800106c:	40013000 	.word	0x40013000

08001070 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d12f      	bne.n	80010f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 8001096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <HAL_SPI_MspInit+0x90>)
 80010d4:	f000 fec2 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_SPI_MspInit+0x90>)
 80010ec:	f000 feb6 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40013000 	.word	0x40013000
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800

08001104 <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <LTC_nCS_High+0x14>)
 800110e:	f001 f829 	bl	8002164 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40010800 	.word	0x40010800

0800111c <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001120:	2200      	movs	r2, #0
 8001122:	2110      	movs	r1, #16
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <LTC_nCS_Low+0x14>)
 8001126:	f001 f81d 	bl	8002164 <HAL_GPIO_WritePin>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010800 	.word	0x40010800

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_MspInit+0x5c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6193      	str	r3, [r2, #24]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_MspInit+0x5c>)
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_MspInit+0x5c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_MspInit+0x5c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_MspInit+0x60>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_MspInit+0x60>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f9e3 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <OTG_FS_IRQHandler+0x10>)
 80011ee:	f001 f929 	bl	8002444 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200010a0 	.word	0x200010a0

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f007 f9be 	bl	80085ac <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20010000 	.word	0x20010000
 800125c:	00000400 	.word	0x00000400
 8001260:	200002f8 	.word	0x200002f8
 8001264:	20001910 	.word	0x20001910

08001268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001284:	4a15      	ldr	r2, [pc, #84]	; (80012dc <MX_TIM7_Init+0x68>)
 8001286:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_TIM7_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM7_Init+0x64>)
 8001296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM7_Init+0x64>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <MX_TIM7_Init+0x64>)
 80012a4:	f003 fc86 	bl	8004bb4 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012ae:	f7ff fea3 	bl	8000ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_TIM7_Init+0x64>)
 80012c0:	f003 fd34 	bl	8004d2c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f7ff fe95 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002fc 	.word	0x200002fc
 80012dc:	40001400 	.word	0x40001400

080012e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_TIM_Base_MspInit+0x34>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_Base_MspInit+0x38>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_TIM_Base_MspInit+0x38>)
 80012f8:	f043 0320 	orr.w	r3, r3, #32
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_TIM_Base_MspInit+0x38>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40001400 	.word	0x40001400
 8001318:	40021000 	.word	0x40021000

0800131c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_USART2_UART_Init+0x50>)
 8001324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x4c>)
 8001354:	f003 fd50 	bl	8004df8 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800135e:	f7ff fe4b 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000344 	.word	0x20000344
 800136c:	40004400 	.word	0x40004400

08001370 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART3_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 80013a8:	f003 fd26 	bl	8004df8 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f7ff fe21 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000038c 	.word	0x2000038c
 80013c0:	40004800 	.word	0x40004800

080013c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a37      	ldr	r2, [pc, #220]	; (80014bc <HAL_UART_MspInit+0xf8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d130      	bne.n	8001446 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a35      	ldr	r2, [pc, #212]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001414:	2304      	movs	r3, #4
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4619      	mov	r1, r3
 8001426:	4827      	ldr	r0, [pc, #156]	; (80014c4 <HAL_UART_MspInit+0x100>)
 8001428:	f000 fd18 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142c:	2308      	movs	r3, #8
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	4619      	mov	r1, r3
 800143e:	4821      	ldr	r0, [pc, #132]	; (80014c4 <HAL_UART_MspInit+0x100>)
 8001440:	f000 fd0c 	bl	8001e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001444:	e036      	b.n	80014b4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_UART_MspInit+0x104>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d131      	bne.n	80014b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 8001456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_UART_MspInit+0xfc>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4619      	mov	r1, r3
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <HAL_UART_MspInit+0x108>)
 8001496:	f000 fce1 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800149a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_UART_MspInit+0x108>)
 80014b0:	f000 fcd4 	bl	8001e5c <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d0:	f7ff feca 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d6:	490c      	ldr	r1, [pc, #48]	; (8001508 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <LoopFillZerobss+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014ec:	4c09      	ldr	r4, [pc, #36]	; (8001514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014fa:	f007 f85d 	bl	80085b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fe:	f7ff fc03 	bl	8000d08 <main>
  bx lr
 8001502:	4770      	bx	lr
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800150c:	080093b4 	.word	0x080093b4
  ldr r2, =_sbss
 8001510:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001514:	2000190c 	.word	0x2000190c

08001518 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x28>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x28>)
 8001526:	f043 0310 	orr.w	r3, r3, #16
 800152a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fc53 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	200f      	movs	r0, #15
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fdfc 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fc6b 	bl	8001e42 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 fc33 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x1c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x20>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a03      	ldr	r2, [pc, #12]	; (80015c8 <HAL_IncTick+0x20>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000008 	.word	0x20000008
 80015c8:	200003d4 	.word	0x200003d4

080015cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_GetTick+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	200003d4 	.word	0x200003d4

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff fff0 	bl	80015cc <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_Delay+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffe0 	bl	80015cc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000008 	.word	0x20000008

08001628 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0be      	b.n	80017c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff f94e 	bl	8000908 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f9ab 	bl	80019c8 <ADC_ConversionStop_Disable>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 8099 	bne.w	80017b6 <HAL_ADC_Init+0x18e>
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8095 	bne.w	80017b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001694:	f023 0302 	bic.w	r3, r3, #2
 8001698:	f043 0202 	orr.w	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7b1b      	ldrb	r3, [r3, #12]
 80016ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c0:	d003      	beq.n	80016ca <HAL_ADC_Init+0xa2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d102      	bne.n	80016d0 <HAL_ADC_Init+0xa8>
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	e000      	b.n	80016d2 <HAL_ADC_Init+0xaa>
 80016d0:	2300      	movs	r3, #0
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7d1b      	ldrb	r3, [r3, #20]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d119      	bne.n	8001714 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	035a      	lsls	r2, r3, #13
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e00b      	b.n	8001714 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f043 0220 	orr.w	r2, r3, #32
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_ADC_Init+0x1a8>)
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	430b      	orrs	r3, r1
 800173a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001744:	d003      	beq.n	800174e <HAL_ADC_Init+0x126>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d104      	bne.n	8001758 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	3b01      	subs	r3, #1
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	430a      	orrs	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_ADC_Init+0x1ac>)
 8001774:	4013      	ands	r3, r2
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	429a      	cmp	r2, r3
 800177a:	d10b      	bne.n	8001794 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001792:	e018      	b.n	80017c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f023 0312 	bic.w	r3, r3, #18
 800179c:	f043 0210 	orr.w	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f043 0210 	orr.w	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	ffe1f7fd 	.word	0xffe1f7fd
 80017d4:	ff1f0efe 	.word	0xff1f0efe

080017d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x20>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0dc      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1da>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b06      	cmp	r3, #6
 8001806:	d81c      	bhi.n	8001842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b05      	subs	r3, #5
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	4019      	ands	r1, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	fa00 f203 	lsl.w	r2, r0, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
 8001840:	e03c      	b.n	80018bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b0c      	cmp	r3, #12
 8001848:	d81c      	bhi.n	8001884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b23      	subs	r3, #35	; 0x23
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	4019      	ands	r1, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	3b23      	subs	r3, #35	; 0x23
 8001876:	fa00 f203 	lsl.w	r2, r0, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	e01b      	b.n	80018bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b41      	subs	r3, #65	; 0x41
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b41      	subs	r3, #65	; 0x41
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d91c      	bls.n	80018fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	4019      	ands	r1, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6898      	ldr	r0, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	fa00 f203 	lsl.w	r2, r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	e019      	b.n	8001932 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6919      	ldr	r1, [r3, #16]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6898      	ldr	r0, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193e:	2b11      	cmp	r3, #17
 8001940:	d132      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d125      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d126      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001968:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b10      	cmp	r3, #16
 8001970:	d11a      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9a      	lsrs	r2, r3, #18
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001988:	e002      	b.n	8001990 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3b01      	subs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f9      	bne.n	800198a <HAL_ADC_ConfigChannel+0x1b2>
 8001996:	e007      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40012400 	.word	0x40012400
 80019c0:	20000000 	.word	0x20000000
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d12e      	bne.n	8001a40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019f2:	f7ff fdeb 	bl	80015cc <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	e01b      	b.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019fa:	f7ff fde7 	bl	80015cc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d914      	bls.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10d      	bne.n	8001a32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f043 0210 	orr.w	r2, r3, #16
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e007      	b.n	8001a42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d0dc      	beq.n	80019fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0ed      	b.n	8001c38 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f81b 	bl	8000aa4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a7e:	f7ff fda5 	bl	80015cc <HAL_GetTick>
 8001a82:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a84:	e012      	b.n	8001aac <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a86:	f7ff fda1 	bl	80015cc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d90b      	bls.n	8001aac <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0c5      	b.n	8001c38 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0e5      	beq.n	8001a86 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0202 	bic.w	r2, r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aca:	f7ff fd7f 	bl	80015cc <HAL_GetTick>
 8001ace:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad0:	e012      	b.n	8001af8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad2:	f7ff fd7b 	bl	80015cc <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b0a      	cmp	r3, #10
 8001ade:	d90b      	bls.n	8001af8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2205      	movs	r2, #5
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e09f      	b.n	8001c38 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e5      	bne.n	8001ad2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e1b      	ldrb	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d108      	bne.n	8001b20 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	e007      	b.n	8001b30 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7e5b      	ldrb	r3, [r3, #25]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7e9b      	ldrb	r3, [r3, #26]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0220 	orr.w	r2, r2, #32
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e007      	b.n	8001b84 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0220 	bic.w	r2, r2, #32
 8001b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7edb      	ldrb	r3, [r3, #27]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0210 	bic.w	r2, r2, #16
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0210 	orr.w	r2, r2, #16
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7f1b      	ldrb	r3, [r3, #28]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0208 	orr.w	r2, r2, #8
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0208 	bic.w	r2, r2, #8
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7f5b      	ldrb	r3, [r3, #29]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0204 	orr.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0204 	bic.w	r2, r2, #4
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	ea42 0103 	orr.w	r1, r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <__NVIC_EnableIRQ+0x34>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff90 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff2d 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff42 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff90 	bl	8001d30 <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5f 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff35 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	e169      	b.n	8002144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e70:	2201      	movs	r2, #1
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8158 	bne.w	800213e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a9a      	ldr	r2, [pc, #616]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d05e      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001e98:	4a98      	ldr	r2, [pc, #608]	; (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d875      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001e9e:	4a98      	ldr	r2, [pc, #608]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d058      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a96      	ldr	r2, [pc, #600]	; (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d86f      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eaa:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d052      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a94      	ldr	r2, [pc, #592]	; (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d869      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eb6:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04c      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d863      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ec2:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d046      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a90      	ldr	r2, [pc, #576]	; (800210c <HAL_GPIO_Init+0x2b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d85d      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d82a      	bhi.n	8001f28 <HAL_GPIO_Init+0xcc>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d859      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_GPIO_Init+0x80>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f57 	.word	0x08001f57
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08001f43 	.word	0x08001f43
 8001ee8:	08001f85 	.word	0x08001f85
 8001eec:	08001f8b 	.word	0x08001f8b
 8001ef0:	08001f8b 	.word	0x08001f8b
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	08001f8b 	.word	0x08001f8b
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f8b 	.word	0x08001f8b
 8001f04:	08001f8b 	.word	0x08001f8b
 8001f08:	08001f8b 	.word	0x08001f8b
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f8b 	.word	0x08001f8b
 8001f18:	08001f8b 	.word	0x08001f8b
 8001f1c:	08001f8b 	.word	0x08001f8b
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	4a79      	ldr	r2, [pc, #484]	; (8002110 <HAL_GPIO_Init+0x2b4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2e:	e02c      	b.n	8001f8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e029      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e024      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	3308      	adds	r3, #8
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e01f      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	330c      	adds	r3, #12
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e01a      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e013      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	611a      	str	r2, [r3, #16]
          break;
 8001f76:	e009      	b.n	8001f8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	615a      	str	r2, [r3, #20]
          break;
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          break;
 8001f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d801      	bhi.n	8001f96 <HAL_GPIO_Init+0x13a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_Init+0x13e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_GPIO_Init+0x14c>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x152>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	3b08      	subs	r3, #8
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80b1 	beq.w	800213e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a40      	ldr	r2, [pc, #256]	; (800211c <HAL_GPIO_Init+0x2c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <HAL_GPIO_Init+0x2c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <HAL_GPIO_Init+0x2c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <HAL_GPIO_Init+0x2cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1e0>
 8002038:	2303      	movs	r3, #3
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 800203c:	2304      	movs	r3, #4
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002048:	2300      	movs	r3, #0
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205a:	492f      	ldr	r1, [pc, #188]	; (8002118 <HAL_GPIO_Init+0x2bc>)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	492c      	ldr	r1, [pc, #176]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_GPIO_Init+0x2d0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4928      	ldr	r1, [pc, #160]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_GPIO_Init+0x2d0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	491e      	ldr	r1, [pc, #120]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4918      	ldr	r1, [pc, #96]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4914      	ldr	r1, [pc, #80]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x2e2>
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40011400 	.word	0x40011400
 800212c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_GPIO_Init+0x304>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	43db      	mvns	r3, r3
 8002138:	4909      	ldr	r1, [pc, #36]	; (8002160 <HAL_GPIO_Init+0x304>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	3301      	adds	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	f47f ae8e 	bne.w	8001e70 <HAL_GPIO_Init+0x14>
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	372c      	adds	r7, #44	; 0x2c
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43d9      	mvns	r1, r3
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	400b      	ands	r3, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b08f      	sub	sp, #60	; 0x3c
 80021ca:	af0a      	add	r7, sp, #40	; 0x28
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e10f      	b.n	80023f8 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 fea8 	bl	8007f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f002 ff9a 	bl	8005150 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f002 feb8 	bl	8004fb4 <USB_CoreInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0d0      	b.n	80023f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f002 ff87 	bl	8005170 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e04a      	b.n	80022fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333d      	adds	r3, #61	; 0x3d
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b298      	uxth	r0, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3356      	adds	r3, #86	; 0x56
 80022a4:	4602      	mov	r2, r0
 80022a6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3340      	adds	r3, #64	; 0x40
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3344      	adds	r3, #68	; 0x44
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	3348      	adds	r3, #72	; 0x48
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	; 0x4c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3af      	bcc.n	8002268 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e044      	b.n	8002398 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3b5      	bcc.n	800230e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	687e      	ldr	r6, [r7, #4]
 80023aa:	466d      	mov	r5, sp
 80023ac:	f106 0410 	add.w	r4, r6, #16
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c0:	1d33      	adds	r3, r6, #4
 80023c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f002 ff1f 	bl	8005208 <USB_DevInit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00d      	b.n	80023f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fea9 	bl	8006148 <USB_DevDisconnect>

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002400 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_Start+0x16>
 8002412:	2302      	movs	r3, #2
 8002414:	e012      	b.n	800243c <HAL_PCD_Start+0x3c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fe84 	bl	8005130 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fe6b 	bl	8006108 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b08d      	sub	sp, #52	; 0x34
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f003 ff22 	bl	80062a4 <USB_GetMode>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8443 	bne.w	8002cee <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f003 fe8b 	bl	8006188 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8439 	beq.w	8002cec <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fe78 	bl	8006188 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 0202 	and.w	r2, r2, #2
 80024b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fe66 	bl	8006188 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d161      	bne.n	800258a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0210 	bic.w	r2, r2, #16
 80024d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	0c5b      	lsrs	r3, r3, #17
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d124      	bne.n	800254c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d035      	beq.n	800257a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6a38      	ldr	r0, [r7, #32]
 8002522:	f003 fca3 	bl	8005e6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002532:	441a      	add	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002544:	441a      	add	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	e016      	b.n	800257a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	0c5b      	lsrs	r3, r3, #17
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	2b06      	cmp	r3, #6
 8002556:	d110      	bne.n	800257a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800255e:	2208      	movs	r2, #8
 8002560:	4619      	mov	r1, r3
 8002562:	6a38      	ldr	r0, [r7, #32]
 8002564:	f003 fc82 	bl	8005e6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002574:	441a      	add	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0210 	orr.w	r2, r2, #16
 8002588:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fdfa 	bl	8006188 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800259e:	f040 80a7 	bne.w	80026f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fdfe 	bl	80061ac <USB_ReadDevAllOutEpInterrupt>
 80025b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025b2:	e099      	b.n	80026e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 808e 	beq.w	80026dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fe20 	bl	8006210 <USB_ReadDevOutEPInterrupt>
 80025d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fe41 	bl	8003278 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	2308      	movs	r3, #8
 8002610:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fe7d 	bl	8003314 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2310      	movs	r3, #16
 8002634:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d030      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d109      	bne.n	8002660 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	3304      	adds	r3, #4
 8002674:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f005 fd4a 	bl	8008124 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269c:	461a      	mov	r2, r3
 800269e:	2302      	movs	r3, #2
 80026a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	2320      	movs	r3, #32
 80026bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f47f af62 	bne.w	80025b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fd47 	bl	8006188 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002704:	f040 80a4 	bne.w	8002850 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fd66 	bl	80061de <USB_ReadDevAllInEpInterrupt>
 8002712:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002718:	e096      	b.n	8002848 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808b 	beq.w	800283c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fd8a 	bl	800624a <USB_ReadDevInEPInterrupt>
 8002736:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2201      	movs	r2, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	69f9      	ldr	r1, [r7, #28]
 800275e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002762:	4013      	ands	r3, r2
 8002764:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	2301      	movs	r3, #1
 8002776:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f005 fc55 	bl	800802e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2310      	movs	r3, #16
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	6a38      	ldr	r0, [r7, #32]
 80027e6:	f002 fe31 	bl	800544c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	3304      	adds	r3, #4
 80027fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d108      	bne.n	8002818 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f005 fc98 	bl	8008148 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002824:	461a      	mov	r2, r3
 8002826:	2302      	movs	r3, #2
 8002828:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fc96 	bl	8003168 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	3301      	adds	r3, #1
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	f47f af65 	bne.w	800271a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fc97 	bl	8006188 <USB_ReadInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002864:	d114      	bne.n	8002890 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f005 fc44 	bl	8008108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800288e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f003 fc77 	bl	8006188 <USB_ReadInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a4:	d112      	bne.n	80028cc <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f005 fc00 	bl	80080bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028ca:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fc59 	bl	8006188 <USB_ReadInterrupts>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	f040 80b5 	bne.w	8002a4e <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2110      	movs	r1, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fda4 	bl	800544c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002908:	e046      	b.n	8002998 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002916:	461a      	mov	r2, r3
 8002918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800291c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292e:	0151      	lsls	r1, r2, #5
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	440a      	add	r2, r1
 8002934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800293c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294a:	461a      	mov	r2, r3
 800294c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002950:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	440a      	add	r2, r1
 8002968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800296c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002982:	0151      	lsls	r1, r2, #5
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	440a      	add	r2, r1
 8002988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800298c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002990:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	3301      	adds	r3, #1
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3b3      	bcc.n	800290a <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f043 030b 	orr.w	r3, r3, #11
 80029d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e4:	f043 030b 	orr.w	r3, r3, #11
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	e015      	b.n	8002a18 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a12:	f043 030b 	orr.w	r3, r3, #11
 8002a16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f003 fc63 	bl	8006304 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fb98 	bl	8006188 <USB_ReadInterrupts>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a62:	d124      	bne.n	8002aae <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fc28 	bl	80062be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fd66 	bl	8005544 <USB_GetDevSpeed>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681c      	ldr	r4, [r3, #0]
 8002a84:	f001 f98c 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8002a88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	4620      	mov	r0, r4
 8002a94:	f002 fab0 	bl	8004ff8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f005 faf0 	bl	800807e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fb68 	bl	8006188 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 facd 	bl	8008062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f002 0208 	and.w	r2, r2, #8
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fb53 	bl	8006188 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d122      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af8:	2301      	movs	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e014      	b.n	8002b28 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 faf2 	bl	8003106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3e5      	bcc.n	8002afe <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fb26 	bl	8006188 <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b46:	d13b      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b48:	2301      	movs	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	e02b      	b.n	8002ba6 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3340      	adds	r3, #64	; 0x40
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d115      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da12      	bge.n	8002ba0 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	333f      	adds	r3, #63	; 0x3f
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fab3 	bl	8003106 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3ce      	bcc.n	8002b4e <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fadf 	bl	8006188 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd4:	d155      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	e045      	b.n	8002c68 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d12e      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da2b      	bge.n	8002c62 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d121      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5e:	6053      	str	r3, [r2, #4]
            break;
 8002c60:	e007      	b.n	8002c72 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	3301      	adds	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d3b4      	bcc.n	8002bdc <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fa7e 	bl	8006188 <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d10a      	bne.n	8002cae <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f005 fa67 	bl	800816c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fa68 	bl	8006188 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d115      	bne.n	8002cee <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f005 fa57 	bl	8008188 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	e000      	b.n	8002cee <HAL_PCD_IRQHandler+0x8aa>
      return;
 8002cec:	bf00      	nop
    }
  }
}
 8002cee:	3734      	adds	r7, #52	; 0x34
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}

08002cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_SetAddress+0x1a>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e013      	b.n	8002d36 <HAL_PCD_SetAddress+0x42>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 f9c9 	bl	80060be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	4608      	mov	r0, r1
 8002d48:	4611      	mov	r1, r2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	70fb      	strb	r3, [r7, #3]
 8002d50:	460b      	mov	r3, r1
 8002d52:	803b      	strh	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da0f      	bge.n	8002d84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 020f 	and.w	r2, r3, #15
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	3338      	adds	r3, #56	; 0x38
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	705a      	strb	r2, [r3, #1]
 8002d82:	e00f      	b.n	8002da4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f003 020f 	and.w	r2, r3, #15
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002db0:	883a      	ldrh	r2, [r7, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	78ba      	ldrb	r2, [r7, #2]
 8002dba:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dce:	78bb      	ldrb	r3, [r7, #2]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d102      	bne.n	8002dda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_EP_Open+0xaa>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e00e      	b.n	8002e06 <HAL_PCD_EP_Open+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68f9      	ldr	r1, [r7, #12]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fbc2 	bl	8005580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e04:	7afb      	ldrb	r3, [r7, #11]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da0f      	bge.n	8002e42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3338      	adds	r3, #56	; 0x38
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	705a      	strb	r2, [r3, #1]
 8002e40:	e00f      	b.n	8002e62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_PCD_EP_Close+0x6e>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e00e      	b.n	8002e9a <HAL_PCD_EP_Close+0x8c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 fbfe 	bl	800568c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fca4 	bl	8005844 <USB_EPStartXfer>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002f28:	681b      	ldr	r3, [r3, #0]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	460b      	mov	r3, r1
 8002f42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3338      	adds	r3, #56	; 0x38
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2201      	movs	r2, #1
 8002f72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 fc5c 	bl	8005844 <USB_EPStartXfer>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d901      	bls.n	8002fb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e04e      	b.n	8003052 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0f      	bge.n	8002fdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3338      	adds	r3, #56	; 0x38
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
 8002fda:	e00d      	b.n	8002ff8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_PCD_EP_SetStall+0x82>
 8003014:	2302      	movs	r3, #2
 8003016:	e01c      	b.n	8003052 <HAL_PCD_EP_SetStall+0xbc>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	4618      	mov	r0, r3
 8003028:	f002 ff77 	bl	8005f1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f003 f95e 	bl	8006304 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e042      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307c:	2b00      	cmp	r3, #0
 800307e:	da0f      	bge.n	80030a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 020f 	and.w	r2, r3, #15
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3338      	adds	r3, #56	; 0x38
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	3304      	adds	r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
 800309e:	e00f      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_EP_ClrStall+0x86>
 80030dc:	2302      	movs	r3, #2
 80030de:	e00e      	b.n	80030fe <HAL_PCD_EP_ClrStall+0xa4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68f9      	ldr	r1, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 ff80 	bl	8005ff4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0c      	bge.n	8003134 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3338      	adds	r3, #56	; 0x38
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e00c      	b.n	800314e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fda7 	bl	8005ca8 <USB_EPStopXfer>
 800315a:	4603      	mov	r3, r0
 800315c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800315e:	7afb      	ldrb	r3, [r7, #11]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d901      	bls.n	80031a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e067      	b.n	8003270 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d902      	bls.n	80031bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	3303      	adds	r3, #3
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c4:	e026      	b.n	8003214 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d902      	bls.n	80031e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3303      	adds	r3, #3
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f002 fdff 	bl	8005dfa <USB_WritePacket>

    ep->xfer_buff  += len;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	441a      	add	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	441a      	add	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	429a      	cmp	r2, r3
 8003228:	d809      	bhi.n	800323e <PCD_WriteEmptyTxFifo+0xd6>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003232:	429a      	cmp	r2, r3
 8003234:	d203      	bcs.n	800323e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1c3      	bne.n	80031c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	429a      	cmp	r2, r3
 8003248:	d811      	bhi.n	800326e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	2201      	movs	r2, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	43db      	mvns	r3, r3
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326a:	4013      	ands	r3, r2
 800326c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	333c      	adds	r3, #60	; 0x3c
 8003290:	3304      	adds	r3, #4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <PCD_EP_OutXfrComplete_int+0x98>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d124      	bne.n	80032f8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e01a      	b.n	8003304 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e4:	461a      	mov	r2, r3
 80032e6:	2320      	movs	r3, #32
 80032e8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4619      	mov	r1, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f004 fe81 	bl	8007ff8 <HAL_PCD_DataOutStageCallback>
 80032f6:	e005      	b.n	8003304 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f004 fe7a 	bl	8007ff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	4f54310a 	.word	0x4f54310a

08003314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	333c      	adds	r3, #60	; 0x3c
 800332c:	3304      	adds	r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <PCD_EP_OutSetupPacket_int+0x64>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d90e      	bls.n	8003368 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	461a      	mov	r2, r3
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f004 fe33 	bl	8007fd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	4f54300a 	.word	0x4f54300a

0800337c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
 8003388:	4613      	mov	r3, r2
 800338a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800339a:	883b      	ldrh	r3, [r7, #0]
 800339c:	0419      	lsls	r1, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
 80033a8:	e028      	b.n	80033fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e00d      	b.n	80033da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	3340      	adds	r3, #64	; 0x40
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	3b01      	subs	r3, #1
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3ec      	bcc.n	80033be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033e4:	883b      	ldrh	r3, [r7, #0]
 80033e6:	0418      	lsls	r0, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	4302      	orrs	r2, r0
 80033f4:	3340      	adds	r3, #64	; 0x40
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e304      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8087 	beq.w	8003556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003448:	4b92      	ldr	r3, [pc, #584]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b04      	cmp	r3, #4
 8003452:	d00c      	beq.n	800346e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d112      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
 8003460:	4b8c      	ldr	r3, [pc, #560]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d10b      	bne.n	8003486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346e:	4b89      	ldr	r3, [pc, #548]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d06c      	beq.n	8003554 <HAL_RCC_OscConfig+0x12c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d168      	bne.n	8003554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e2de      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x76>
 8003490:	4b80      	ldr	r3, [pc, #512]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7f      	ldr	r2, [pc, #508]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e02e      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x98>
 80034a6:	4b7b      	ldr	r3, [pc, #492]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a7a      	ldr	r2, [pc, #488]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	4b78      	ldr	r3, [pc, #480]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a77      	ldr	r2, [pc, #476]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e01d      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0xbc>
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a71      	ldr	r2, [pc, #452]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	e00b      	b.n	80034fc <HAL_RCC_OscConfig+0xd4>
 80034e4:	4b6b      	ldr	r3, [pc, #428]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a67      	ldr	r2, [pc, #412]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe f862 	bl	80015cc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe f85e 	bl	80015cc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e292      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0xe4>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe f84e 	bl	80015cc <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe f84a 	bl	80015cc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e27e      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x10c>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d063      	beq.n	800362a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003562:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800356e:	4b49      	ldr	r3, [pc, #292]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b08      	cmp	r3, #8
 8003578:	d11c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d116      	bne.n	80035b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e252      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4939      	ldr	r1, [pc, #228]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	e03a      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCC_OscConfig+0x270>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe f803 	bl	80015cc <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fd ffff 	bl	80015cc <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e233      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4927      	ldr	r1, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
 80035fc:	e015      	b.n	800362a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCC_OscConfig+0x270>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd ffe2 	bl	80015cc <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360c:	f7fd ffde 	bl	80015cc <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e212      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d03a      	beq.n	80036ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d019      	beq.n	8003672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <HAL_RCC_OscConfig+0x274>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003644:	f7fd ffc2 	bl	80015cc <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364c:	f7fd ffbe 	bl	80015cc <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e1f2      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_RCC_OscConfig+0x26c>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800366a:	2001      	movs	r0, #1
 800366c:	f000 fbca 	bl	8003e04 <RCC_Delay>
 8003670:	e01c      	b.n	80036ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_OscConfig+0x274>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fd ffa8 	bl	80015cc <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367e:	e00f      	b.n	80036a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd ffa4 	bl	80015cc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d908      	bls.n	80036a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1d8      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	42420000 	.word	0x42420000
 800369c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	4b9b      	ldr	r3, [pc, #620]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e9      	bne.n	8003680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a6 	beq.w	8003806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b91      	ldr	r3, [pc, #580]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a90      	ldr	r2, [pc, #576]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b8e      	ldr	r3, [pc, #568]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b8b      	ldr	r3, [pc, #556]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a87      	ldr	r2, [pc, #540]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7fd ff65 	bl	80015cc <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7fd ff61 	bl	80015cc <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b64      	cmp	r3, #100	; 0x64
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e195      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x312>
 800372c:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4a77      	ldr	r2, [pc, #476]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6213      	str	r3, [r2, #32]
 8003738:	e02d      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x334>
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a72      	ldr	r2, [pc, #456]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4a6f      	ldr	r2, [pc, #444]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	e01c      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x356>
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a69      	ldr	r2, [pc, #420]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a66      	ldr	r2, [pc, #408]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6213      	str	r3, [r2, #32]
 800377c:	e00b      	b.n	8003796 <HAL_RCC_OscConfig+0x36e>
 800377e:	4b64      	ldr	r3, [pc, #400]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a63      	ldr	r2, [pc, #396]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a60      	ldr	r2, [pc, #384]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d015      	beq.n	80037ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379e:	f7fd ff15 	bl	80015cc <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	e00a      	b.n	80037bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a6:	f7fd ff11 	bl	80015cc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e143      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0ee      	beq.n	80037a6 <HAL_RCC_OscConfig+0x37e>
 80037c8:	e014      	b.n	80037f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ca:	f7fd feff 	bl	80015cc <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fd fefb 	bl	80015cc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e12d      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	4b49      	ldr	r3, [pc, #292]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ee      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b45      	ldr	r3, [pc, #276]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a44      	ldr	r2, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 808c 	beq.w	8003928 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003810:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d10e      	bne.n	800383c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800381e:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003826:	2b08      	cmp	r3, #8
 8003828:	d108      	bne.n	800383c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e103      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	2b02      	cmp	r3, #2
 8003842:	d14e      	bne.n	80038e2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003844:	4b32      	ldr	r3, [pc, #200]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0ef      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCC_OscConfig+0x4f0>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd feaf 	bl	80015cc <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003872:	f7fd feab 	bl	80015cc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0df      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003890:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	491c      	ldr	r1, [pc, #112]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80038a2:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4918      	ldr	r1, [pc, #96]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_OscConfig+0x4f0>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fe87 	bl	80015cc <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038c2:	f7fd fe83 	bl	80015cc <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	; 0x64
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e0b7      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80038d4:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x49a>
 80038e0:	e022      	b.n	8003928 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <HAL_RCC_OscConfig+0x4e8>)
 80038e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_OscConfig+0x4f0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd fe6a 	bl	80015cc <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80038fa:	e00f      	b.n	800391c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038fc:	f7fd fe66 	bl	80015cc <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d908      	bls.n	800391c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e09a      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	40007000 	.word	0x40007000
 8003918:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800391c:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e9      	bne.n	80038fc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8088 	beq.w	8003a42 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003932:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b08      	cmp	r3, #8
 800393c:	d068      	beq.n	8003a10 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d14d      	bne.n	80039e2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <HAL_RCC_OscConfig+0x628>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fe3e 	bl	80015cc <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fd fe3a 	bl	80015cc <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e06e      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397a:	d10f      	bne.n	800399c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4931      	ldr	r1, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003986:	4313      	orrs	r3, r2
 8003988:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f023 020f 	bic.w	r2, r3, #15
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	492d      	ldr	r1, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003998:	4313      	orrs	r3, r2
 800399a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	430b      	orrs	r3, r1
 80039ae:	4927      	ldr	r1, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCC_OscConfig+0x628>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ba:	f7fd fe07 	bl	80015cc <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd fe03 	bl	80015cc <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e037      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x59a>
 80039e0:	e02f      	b.n	8003a42 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x628>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fdf0 	bl	80015cc <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fdec 	bl	80015cc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e020      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x5c8>
 8003a0e:	e018      	b.n	8003a42 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e013      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x624>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	42420060 	.word	0x42420060

08003a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0d0      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 0207 	bic.w	r2, r3, #7
 8003a7e:	4965      	ldr	r1, [pc, #404]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a52      	ldr	r2, [pc, #328]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	494d      	ldr	r1, [pc, #308]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d040      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e073      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06b      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4936      	ldr	r1, [pc, #216]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fd42 	bl	80015cc <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fd fd3e 	bl	80015cc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e053      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d210      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0207 	bic.w	r2, r3, #7
 8003b8a:	4922      	ldr	r1, [pc, #136]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4916      	ldr	r1, [pc, #88]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be2:	f000 f821 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	490a      	ldr	r1, [pc, #40]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	5ccb      	ldrb	r3, [r1, r3]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1cc>)
 8003bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1d0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd fca0 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40022000 	.word	0x40022000
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08009338 	.word	0x08009338
 8003c20:	20000000 	.word	0x20000000
 8003c24:	20000004 	.word	0x20000004

08003c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b08e      	sub	sp, #56	; 0x38
 8003c2e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c34:	2300      	movs	r3, #0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c38:	2300      	movs	r3, #0
 8003c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c4c:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d002      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	e089      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c66:	e089      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	0c9b      	lsrs	r3, r3, #18
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c72:	5c9b      	ldrb	r3, [r3, r2]
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d072      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c80:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d053      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003ca8:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	469a      	mov	sl, r3
 8003cbc:	4693      	mov	fp, r2
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	617a      	str	r2, [r7, #20]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	fb03 f20b 	mul.w	r2, r3, fp
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	fb0a f303 	mul.w	r3, sl, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	fbaa 0102 	umull	r0, r1, sl, r2
 8003cda:	440b      	add	r3, r1
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003ce0:	fb03 f201 	mul.w	r2, r3, r1
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	fb00 f303 	mul.w	r3, r0, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	4a27      	ldr	r2, [pc, #156]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003cee:	fba0 4502 	umull	r4, r5, r0, r2
 8003cf2:	442b      	add	r3, r5
 8003cf4:	461d      	mov	r5, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	60fa      	str	r2, [r7, #12]
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2200      	movs	r2, #0
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d10:	4652      	mov	r2, sl
 8003d12:	fb02 f203 	mul.w	r2, r2, r3
 8003d16:	465b      	mov	r3, fp
 8003d18:	4684      	mov	ip, r0
 8003d1a:	fb0c f303 	mul.w	r3, ip, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	4602      	mov	r2, r0
 8003d22:	4651      	mov	r1, sl
 8003d24:	fba2 8901 	umull	r8, r9, r2, r1
 8003d28:	444b      	add	r3, r9
 8003d2a:	4699      	mov	r9, r3
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	4620      	mov	r0, r4
 8003d32:	4629      	mov	r1, r5
 8003d34:	f7fc fa7e 	bl	8000234 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d40:	e007      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8003d46:	fb03 f202 	mul.w	r2, r3, r2
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d54:	7b5b      	ldrb	r3, [r3, #13]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	e004      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <HAL_RCC_GetSysClockFreq+0x170>)
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d74:	e002      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x174>)
 8003d78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3738      	adds	r7, #56	; 0x38
 8003d82:	46bd      	mov	sp, r7
 8003d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	017d7840 	.word	0x017d7840
 8003d90:	08009350 	.word	0x08009350
 8003d94:	08009360 	.word	0x08009360
 8003d98:	003d0900 	.word	0x003d0900
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db8:	f7ff fff2 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08009348 	.word	0x08009348

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003de0:	f7ff ffde 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	0adb      	lsrs	r3, r3, #11
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08009348 	.word	0x08009348

08003e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <RCC_Delay+0x34>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <RCC_Delay+0x38>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a5b      	lsrs	r3, r3, #9
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e20:	bf00      	nop
  }
  while (Delay --);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	60fa      	str	r2, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <RCC_Delay+0x1c>
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d07d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e64:	4b8b      	ldr	r3, [pc, #556]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4a87      	ldr	r2, [pc, #540]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	61d3      	str	r3, [r2, #28]
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b82      	ldr	r3, [pc, #520]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d118      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e98:	4b7f      	ldr	r3, [pc, #508]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7e      	ldr	r2, [pc, #504]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fb92 	bl	80015cc <HAL_GetTick>
 8003ea8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	e008      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eac:	f7fd fb8e 	bl	80015cc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0e5      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02e      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d027      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef2:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003efe:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d014      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd fb5d 	bl	80015cc <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd fb59 	bl	80015cc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0ae      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4953      	ldr	r1, [pc, #332]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f4a:	7efb      	ldrb	r3, [r7, #27]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4a4f      	ldr	r2, [pc, #316]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f68:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4947      	ldr	r1, [pc, #284]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4940      	ldr	r1, [pc, #256]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4938      	ldr	r1, [pc, #224]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d105      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d148      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003fd8:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d138      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e042      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4920      	ldr	r1, [pc, #128]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004012:	4313      	orrs	r3, r2
 8004014:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004016:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	491c      	ldr	r1, [pc, #112]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004024:	4313      	orrs	r3, r2
 8004026:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd facd 	bl	80015cc <HAL_GetTick>
 8004032:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004036:	f7fd fac9 	bl	80015cc <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e020      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004054:	e009      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e00f      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4904      	ldr	r1, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	42420440 	.word	0x42420440
 80040a0:	42420070 	.word	0x42420070

080040a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e076      	b.n	80041a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c6:	d009      	beq.n	80040dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
 80040ce:	e005      	b.n	80040dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc ffba 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	ea42 0103 	orr.w	r1, r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	0c1a      	lsrs	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f002 0204 	and.w	r2, r2, #4
 8004182:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004192:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Transmit+0x22>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e12d      	b.n	800442a <HAL_SPI_Transmit+0x27e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041d6:	f7fd f9f9 	bl	80015cc <HAL_GetTick>
 80041da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041f0:	e116      	b.n	8004420 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_SPI_Transmit+0x52>
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004202:	e10d      	b.n	8004420 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2203      	movs	r2, #3
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424a:	d10f      	bne.n	800426c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800426a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d007      	beq.n	800428a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004292:	d14f      	bne.n	8004334 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_SPI_Transmit+0xf6>
 800429c:	8afb      	ldrh	r3, [r7, #22]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d142      	bne.n	8004328 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042c6:	e02f      	b.n	8004328 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d112      	bne.n	80042fc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80042fa:	e015      	b.n	8004328 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042fc:	f7fd f966 	bl	80015cc <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d803      	bhi.n	8004314 <HAL_SPI_Transmit+0x168>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d102      	bne.n	800431a <HAL_SPI_Transmit+0x16e>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004326:	e07b      	b.n	8004420 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1ca      	bne.n	80042c8 <HAL_SPI_Transmit+0x11c>
 8004332:	e050      	b.n	80043d6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_SPI_Transmit+0x196>
 800433c:	8afb      	ldrh	r3, [r7, #22]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d144      	bne.n	80043cc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004368:	e030      	b.n	80043cc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d113      	bne.n	80043a0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	86da      	strh	r2, [r3, #54]	; 0x36
 800439e:	e015      	b.n	80043cc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a0:	f7fd f914 	bl	80015cc <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d803      	bhi.n	80043b8 <HAL_SPI_Transmit+0x20c>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Transmit+0x212>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043ca:	e029      	b.n	8004420 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1c9      	bne.n	800436a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fbcc 	bl	8004b78 <SPI_EndRxTxTransaction>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e003      	b.n	8004420 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004428:	7ffb      	ldrb	r3, [r7, #31]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b088      	sub	sp, #32
 8004436:	af02      	add	r7, sp, #8
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004452:	2302      	movs	r3, #2
 8004454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004456:	e0fb      	b.n	8004650 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004460:	d112      	bne.n	8004488 <HAL_SPI_Receive+0x56>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2204      	movs	r2, #4
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f8ef 	bl	8004662 <HAL_SPI_TransmitReceive>
 8004484:	4603      	mov	r3, r0
 8004486:	e0e8      	b.n	800465a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_SPI_Receive+0x64>
 8004492:	2302      	movs	r3, #2
 8004494:	e0e1      	b.n	800465a <HAL_SPI_Receive+0x228>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449e:	f7fd f895 	bl	80015cc <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Receive+0x7e>
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044b4:	e0cc      	b.n	8004650 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2204      	movs	r2, #4
 80044ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	d10f      	bne.n	800451e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d007      	beq.n	800453c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d16a      	bne.n	800461a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004544:	e032      	b.n	80045ac <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d115      	bne.n	8004580 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f103 020c 	add.w	r2, r3, #12
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	7812      	ldrb	r2, [r2, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800457e:	e015      	b.n	80045ac <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004580:	f7fd f824 	bl	80015cc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d803      	bhi.n	8004598 <HAL_SPI_Receive+0x166>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d102      	bne.n	800459e <HAL_SPI_Receive+0x16c>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80045aa:	e051      	b.n	8004650 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1c7      	bne.n	8004546 <HAL_SPI_Receive+0x114>
 80045b6:	e035      	b.n	8004624 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d113      	bne.n	80045ee <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	b292      	uxth	r2, r2
 80045d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	1c9a      	adds	r2, r3, #2
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ec:	e015      	b.n	800461a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ee:	f7fc ffed 	bl	80015cc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d803      	bhi.n	8004606 <HAL_SPI_Receive+0x1d4>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d102      	bne.n	800460c <HAL_SPI_Receive+0x1da>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004618:	e01a      	b.n	8004650 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1c9      	bne.n	80045b8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	6839      	ldr	r1, [r7, #0]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fa53 	bl	8004ad4 <SPI_EndRxTransaction>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
 8004646:	e003      	b.n	8004650 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08c      	sub	sp, #48	; 0x30
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x26>
 8004684:	2302      	movs	r3, #2
 8004686:	e198      	b.n	80049ba <HAL_SPI_TransmitReceive+0x358>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004690:	f7fc ff9c 	bl	80015cc <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00f      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b8:	d107      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
 80046c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046d0:	e16d      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046ea:	e160      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d003      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2205      	movs	r2, #5
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d007      	beq.n	8004754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d17c      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SPI_TransmitReceive+0x10a>
 8004766:	8b7b      	ldrh	r3, [r7, #26]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d16a      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004790:	e057      	b.n	8004842 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11b      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d113      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d119      	bne.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800481a:	f7fc fed7 	bl	80015cc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004826:	429a      	cmp	r2, r3
 8004828:	d80b      	bhi.n	8004842 <HAL_SPI_TransmitReceive+0x1e0>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d007      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004840:	e0b5      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1a2      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d19d      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 8004856:	e080      	b.n	800495a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_SPI_TransmitReceive+0x204>
 8004860:	8b7b      	ldrh	r3, [r7, #26]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d16f      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488c:	e05b      	b.n	8004946 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d11c      	bne.n	80048d6 <HAL_SPI_TransmitReceive+0x274>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x274>
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d114      	bne.n	80048d6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d119      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x2b6>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004914:	2301      	movs	r3, #1
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004918:	f7fc fe58 	bl	80015cc <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_TransmitReceive+0x2ce>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004944:	e033      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d19e      	bne.n	800488e <HAL_SPI_TransmitReceive+0x22c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d199      	bne.n	800488e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f90a 	bl	8004b78 <SPI_EndRxTxTransaction>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004976:	e01a      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10a      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a4:	e003      	b.n	80049ae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3730      	adds	r7, #48	; 0x30
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049d4:	f7fc fdfa 	bl	80015cc <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049e4:	f7fc fdf2 	bl	80015cc <HAL_GetTick>
 80049e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	015b      	lsls	r3, r3, #5
 80049f0:	0d1b      	lsrs	r3, r3, #20
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fa:	e054      	b.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d050      	beq.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a04:	f7fc fde2 	bl	80015cc <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d902      	bls.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d13d      	bne.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a32:	d111      	bne.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3c:	d004      	beq.n	8004a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a46:	d107      	bne.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d10f      	bne.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e017      	b.n	8004ac6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d19b      	bne.n	80049fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae8:	d111      	bne.n	8004b0e <SPI_EndRxTransaction+0x3a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af2:	d004      	beq.n	8004afe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d107      	bne.n	8004b0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b16:	d117      	bne.n	8004b48 <SPI_EndRxTransaction+0x74>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d112      	bne.n	8004b48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff ff49 	bl	80049c4 <SPI_WaitFlagStateUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01a      	beq.n	8004b6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e013      	b.n	8004b70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff ff36 	bl	80049c4 <SPI_WaitFlagStateUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0220 	orr.w	r2, r3, #32
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e000      	b.n	8004b70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff18 	bl	80049c4 <SPI_WaitFlagStateUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e000      	b.n	8004bac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fb80 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 f82e 	bl	8004c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <TIM_Base_SetConfig+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <TIM_Base_SetConfig+0xcc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <TIM_Base_SetConfig+0xd0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <TIM_Base_SetConfig+0xd4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <TIM_Base_SetConfig+0xc8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00f      	beq.n	8004cc6 <TIM_Base_SetConfig+0x72>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d00b      	beq.n	8004cc6 <TIM_Base_SetConfig+0x72>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <TIM_Base_SetConfig+0xcc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <TIM_Base_SetConfig+0x72>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <TIM_Base_SetConfig+0xd0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_Base_SetConfig+0x72>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <TIM_Base_SetConfig+0xd4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d108      	bne.n	8004cd8 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <TIM_Base_SetConfig+0xc8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	615a      	str	r2, [r3, #20]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00

08004d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e04b      	b.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d00e      	beq.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10c      	bne.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00

08004df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e042      	b.n	8004e90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc fad0 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	; 0x24
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f82b 	bl	8004e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ed2:	f023 030c 	bic.w	r3, r3, #12
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	430b      	orrs	r3, r1
 8004ede:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <UART_SetConfig+0x114>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fe ff6c 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	e002      	b.n	8004f0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe ff54 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <UART_SetConfig+0x118>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	0119      	lsls	r1, r3, #4
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009a      	lsls	r2, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <UART_SetConfig+0x118>)
 8004f46:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2064      	movs	r0, #100	; 0x64
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	3332      	adds	r3, #50	; 0x32
 8004f58:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <UART_SetConfig+0x118>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f64:	4419      	add	r1, r3
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <UART_SetConfig+0x118>)
 8004f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	2064      	movs	r0, #100	; 0x64
 8004f86:	fb00 f303 	mul.w	r3, r0, r3
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	3332      	adds	r3, #50	; 0x32
 8004f90:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <UART_SetConfig+0x118>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	f003 020f 	and.w	r2, r3, #15
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	f107 001c 	add.w	r0, r7, #28
 8004fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 f9de 	bl	8006394 <USB_CoreReset>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff4:	b004      	add	sp, #16
 8004ff6:	4770      	bx	lr

08004ff8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d165      	bne.n	80050d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4a3e      	ldr	r2, [pc, #248]	; (8005108 <USB_SetTurnaroundTime+0x110>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d906      	bls.n	8005022 <USB_SetTurnaroundTime+0x2a>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <USB_SetTurnaroundTime+0x114>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d202      	bcs.n	8005022 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800501c:	230f      	movs	r3, #15
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e05c      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4a39      	ldr	r2, [pc, #228]	; (800510c <USB_SetTurnaroundTime+0x114>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d306      	bcc.n	8005038 <USB_SetTurnaroundTime+0x40>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a38      	ldr	r2, [pc, #224]	; (8005110 <USB_SetTurnaroundTime+0x118>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d202      	bcs.n	8005038 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005032:	230e      	movs	r3, #14
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e051      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a35      	ldr	r2, [pc, #212]	; (8005110 <USB_SetTurnaroundTime+0x118>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d306      	bcc.n	800504e <USB_SetTurnaroundTime+0x56>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a34      	ldr	r2, [pc, #208]	; (8005114 <USB_SetTurnaroundTime+0x11c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d202      	bcs.n	800504e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005048:	230d      	movs	r3, #13
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e046      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a30      	ldr	r2, [pc, #192]	; (8005114 <USB_SetTurnaroundTime+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d306      	bcc.n	8005064 <USB_SetTurnaroundTime+0x6c>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <USB_SetTurnaroundTime+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d802      	bhi.n	8005064 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800505e:	230c      	movs	r3, #12
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e03b      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <USB_SetTurnaroundTime+0x120>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d906      	bls.n	800507a <USB_SetTurnaroundTime+0x82>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a2b      	ldr	r2, [pc, #172]	; (800511c <USB_SetTurnaroundTime+0x124>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d802      	bhi.n	800507a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005074:	230b      	movs	r3, #11
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e030      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a27      	ldr	r2, [pc, #156]	; (800511c <USB_SetTurnaroundTime+0x124>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d906      	bls.n	8005090 <USB_SetTurnaroundTime+0x98>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a26      	ldr	r2, [pc, #152]	; (8005120 <USB_SetTurnaroundTime+0x128>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d802      	bhi.n	8005090 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800508a:	230a      	movs	r3, #10
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e025      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <USB_SetTurnaroundTime+0x128>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d906      	bls.n	80050a6 <USB_SetTurnaroundTime+0xae>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a22      	ldr	r2, [pc, #136]	; (8005124 <USB_SetTurnaroundTime+0x12c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d202      	bcs.n	80050a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050a0:	2309      	movs	r3, #9
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e01a      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <USB_SetTurnaroundTime+0x12c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d306      	bcc.n	80050bc <USB_SetTurnaroundTime+0xc4>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <USB_SetTurnaroundTime+0x130>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050b6:	2308      	movs	r3, #8
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e00f      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a1a      	ldr	r2, [pc, #104]	; (8005128 <USB_SetTurnaroundTime+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d906      	bls.n	80050d2 <USB_SetTurnaroundTime+0xda>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a19      	ldr	r2, [pc, #100]	; (800512c <USB_SetTurnaroundTime+0x134>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d202      	bcs.n	80050d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050cc:	2307      	movs	r3, #7
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e004      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050d2:	2306      	movs	r3, #6
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	e001      	b.n	80050dc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050d8:	2309      	movs	r3, #9
 80050da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	029b      	lsls	r3, r3, #10
 80050f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	00d8acbf 	.word	0x00d8acbf
 800510c:	00e4e1c0 	.word	0x00e4e1c0
 8005110:	00f42400 	.word	0x00f42400
 8005114:	01067380 	.word	0x01067380
 8005118:	011a499f 	.word	0x011a499f
 800511c:	01312cff 	.word	0x01312cff
 8005120:	014ca43f 	.word	0x014ca43f
 8005124:	016e3600 	.word	0x016e3600
 8005128:	01a6ab1f 	.word	0x01a6ab1f
 800512c:	01e84800 	.word	0x01e84800

08005130 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f043 0201 	orr.w	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 0201 	bic.w	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d115      	bne.n	80051be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800519e:	2001      	movs	r0, #1
 80051a0:	f7fc fa1e 	bl	80015e0 <HAL_Delay>
      ms++;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3301      	adds	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 f87a 	bl	80062a4 <USB_GetMode>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d01e      	beq.n	80051f4 <USB_SetCurrentMode+0x84>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b31      	cmp	r3, #49	; 0x31
 80051ba:	d9f0      	bls.n	800519e <USB_SetCurrentMode+0x2e>
 80051bc:	e01a      	b.n	80051f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d115      	bne.n	80051f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051d0:	2001      	movs	r0, #1
 80051d2:	f7fc fa05 	bl	80015e0 <HAL_Delay>
      ms++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 f861 	bl	80062a4 <USB_GetMode>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <USB_SetCurrentMode+0x84>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b31      	cmp	r3, #49	; 0x31
 80051ec:	d9f0      	bls.n	80051d0 <USB_SetCurrentMode+0x60>
 80051ee:	e001      	b.n	80051f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e005      	b.n	8005200 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b32      	cmp	r3, #50	; 0x32
 80051f8:	d101      	bne.n	80051fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005208:	b084      	sub	sp, #16
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e009      	b.n	800523c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3340      	adds	r3, #64	; 0x40
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	2200      	movs	r2, #0
 8005234:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3301      	adds	r3, #1
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b0e      	cmp	r3, #14
 8005240:	d9f2      	bls.n	8005228 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005254:	461a      	mov	r2, r3
 8005256:	2300      	movs	r3, #0
 8005258:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800525a:	2103      	movs	r1, #3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f959 	bl	8005514 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005262:	2110      	movs	r1, #16
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8f1 	bl	800544c <USB_FlushTxFifo>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f91d 	bl	80054b4 <USB_FlushRxFifo>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	461a      	mov	r2, r3
 800528c:	2300      	movs	r3, #0
 800528e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e043      	b.n	8005336 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d118      	bne.n	80052f8 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	e013      	b.n	800530a <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e008      	b.n	800530a <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	461a      	mov	r2, r3
 8005318:	2300      	movs	r3, #0
 800531a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	461a      	mov	r2, r3
 800532a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800532e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	3301      	adds	r3, #1
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	d3b7      	bcc.n	80052ae <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e043      	b.n	80053cc <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535a:	d118      	bne.n	800538e <USB_DevInit+0x186>
    {
      if (i == 0U)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e013      	b.n	80053a0 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e008      	b.n	80053a0 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	461a      	mov	r2, r3
 80053c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3301      	adds	r3, #1
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d3b7      	bcc.n	8005344 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f043 0210 	orr.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <USB_DevInit+0x240>)
 8005408:	4313      	orrs	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f043 0208 	orr.w	r2, r3, #8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542e:	f043 0304 	orr.w	r3, r3, #4
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005442:	b004      	add	sp, #16
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	803c3800 	.word	0x803c3800

0800544c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <USB_FlushTxFifo+0x64>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e01b      	b.n	80054a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	daf2      	bge.n	800545a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	019b      	lsls	r3, r3, #6
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <USB_FlushTxFifo+0x64>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e006      	b.n	80054a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d0f0      	beq.n	8005484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	00030d40 	.word	0x00030d40

080054b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <USB_FlushRxFifo+0x5c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e018      	b.n	8005504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	daf2      	bge.n	80054c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2210      	movs	r2, #16
 80054e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <USB_FlushRxFifo+0x5c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e006      	b.n	8005504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d0f0      	beq.n	80054e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	00030d40 	.word	0x00030d40

08005514 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0306 	and.w	r3, r3, #6
 800555c:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d002      	beq.n	800556a <USB_GetDevSpeed+0x26>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d102      	bne.n	8005570 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800556a:	2302      	movs	r3, #2
 800556c:	75fb      	strb	r3, [r7, #23]
 800556e:	e001      	b.n	8005574 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005570:	230f      	movs	r3, #15
 8005572:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d13a      	bne.n	8005612 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d155      	bne.n	8005680 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	059b      	lsls	r3, r3, #22
 80055f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055f8:	4313      	orrs	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e036      	b.n	8005680 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005630:	4313      	orrs	r3, r2
 8005632:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11a      	bne.n	8005680 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	791b      	ldrb	r3, [r3, #4]
 8005664:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005666:	430b      	orrs	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d161      	bne.n	800576c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056be:	d11f      	bne.n	8005700 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	b29b      	uxth	r3, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005720:	4013      	ands	r3, r2
 8005722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	b29b      	uxth	r3, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0159      	lsls	r1, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	440b      	add	r3, r1
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	4619      	mov	r1, r3
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <USB_DeactivateEndpoint+0x1b0>)
 8005766:	4013      	ands	r3, r2
 8005768:	600b      	str	r3, [r1, #0]
 800576a:	e060      	b.n	800582e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005782:	d11f      	bne.n	80057c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	2101      	movs	r1, #1
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	43db      	mvns	r3, r3
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e4:	4013      	ands	r3, r2
 80057e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	43db      	mvns	r3, r3
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005808:	4013      	ands	r3, r2
 800580a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	440b      	add	r3, r1
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	4619      	mov	r1, r3
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <USB_DeactivateEndpoint+0x1b4>)
 800582a:	4013      	ands	r3, r2
 800582c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	ec337800 	.word	0xec337800
 8005840:	eff37800 	.word	0xeff37800

08005844 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b01      	cmp	r3, #1
 800585e:	f040 8128 	bne.w	8005ab2 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d132      	bne.n	80058d0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005888:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800588c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	0cdb      	lsrs	r3, r3, #19
 80058ca:	04db      	lsls	r3, r3, #19
 80058cc:	6113      	str	r3, [r2, #16]
 80058ce:	e092      	b.n	80059f6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	0cdb      	lsrs	r3, r3, #19
 80058ec:	04db      	lsls	r3, r3, #19
 80058ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800590e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005912:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11a      	bne.n	8005950 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800594c:	6113      	str	r3, [r2, #16]
 800594e:	e01b      	b.n	8005988 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6919      	ldr	r1, [r3, #16]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	440b      	add	r3, r1
 8005968:	1e59      	subs	r1, r3, #1
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005972:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005974:	4b8d      	ldr	r3, [pc, #564]	; (8005bac <USB_EPStartXfer+0x368>)
 8005976:	400b      	ands	r3, r1
 8005978:	6939      	ldr	r1, [r7, #16]
 800597a:	0148      	lsls	r0, r1, #5
 800597c:	6979      	ldr	r1, [r7, #20]
 800597e:	4401      	add	r1, r0
 8005980:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005984:	4313      	orrs	r3, r2
 8005986:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599e:	6939      	ldr	r1, [r7, #16]
 80059a0:	0148      	lsls	r0, r1, #5
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	4401      	add	r1, r0
 80059a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059aa:	4313      	orrs	r3, r2
 80059ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	791b      	ldrb	r3, [r3, #4]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d11f      	bne.n	80059f6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059f4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a14:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d015      	beq.n	8005a4a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8139 	beq.w	8005c9a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4313      	orrs	r3, r2
 8005a46:	634b      	str	r3, [r1, #52]	; 0x34
 8005a48:	e127      	b.n	8005c9a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00f      	b.n	8005a9c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68d9      	ldr	r1, [r3, #12]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9a5 	bl	8005dfa <USB_WritePacket>
 8005ab0:	e0f3      	b.n	8005c9a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d12f      	bne.n	8005b5c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	691a      	ldr	r2, [r3, #16]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	0148      	lsls	r0, r1, #5
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	4401      	add	r1, r0
 8005b32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b36:	4313      	orrs	r3, r2
 8005b38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b58:	6113      	str	r3, [r2, #16]
 8005b5a:	e061      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d125      	bne.n	8005bb0 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b7a:	6939      	ldr	r1, [r7, #16]
 8005b7c:	0148      	lsls	r0, r1, #5
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	4401      	add	r1, r0
 8005b82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b86:	4313      	orrs	r3, r2
 8005b88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
 8005baa:	e039      	b.n	8005c20 <USB_EPStartXfer+0x3dc>
 8005bac:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc4:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	89fa      	ldrh	r2, [r7, #14]
 8005bcc:	fb03 f202 	mul.w	r2, r3, r2
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	89fb      	ldrh	r3, [r7, #14]
 8005be4:	04d9      	lsls	r1, r3, #19
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <USB_EPStartXfer+0x460>)
 8005be8:	400b      	ands	r3, r1
 8005bea:	6939      	ldr	r1, [r7, #16]
 8005bec:	0148      	lsls	r0, r1, #5
 8005bee:	6979      	ldr	r1, [r7, #20]
 8005bf0:	4401      	add	r1, r0
 8005bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c10:	6939      	ldr	r1, [r7, #16]
 8005c12:	0148      	lsls	r0, r1, #5
 8005c14:	6979      	ldr	r1, [r7, #20]
 8005c16:	4401      	add	r1, r0
 8005c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	791b      	ldrb	r3, [r3, #4]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d128      	bne.n	8005c7a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d110      	bne.n	8005c5a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	e00f      	b.n	8005c7a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	1ff80000 	.word	0x1ff80000

08005ca8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d14a      	bne.n	8005d5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cde:	f040 8086 	bne.w	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d902      	bls.n	8005d40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e056      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d58:	d0e7      	beq.n	8005d2a <USB_EPStopXfer+0x82>
 8005d5a:	e048      	b.n	8005dee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d13b      	bne.n	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d902      	bls.n	8005dd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd2:	e00c      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dec:	d0e7      	beq.n	8005dbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b089      	sub	sp, #36	; 0x24
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	4611      	mov	r1, r2
 8005e06:	461a      	mov	r2, r3
 8005e08:	460b      	mov	r3, r1
 8005e0a:	71fb      	strb	r3, [r7, #7]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	3303      	adds	r3, #3
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e018      	b.n	8005e58 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	031a      	lsls	r2, r3, #12
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	461a      	mov	r2, r3
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d3e2      	bcc.n	8005e26 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3724      	adds	r7, #36	; 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08b      	sub	sp, #44	; 0x2c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	e014      	b.n	8005ec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3e6      	bcc.n	8005e98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eca:	8bfb      	ldrh	r3, [r7, #30]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	461a      	mov	r2, r3
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f02:	8bfb      	ldrh	r3, [r7, #30]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ea      	bne.n	8005ee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	372c      	adds	r7, #44	; 0x2c
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d12c      	bne.n	8005f90 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	db12      	blt.n	8005f6e <USB_EPSetStall+0x54>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00f      	beq.n	8005f6e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f6c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e02b      	b.n	8005fe8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db12      	blt.n	8005fc8 <USB_EPSetStall+0xae>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d128      	bne.n	8006062 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800602e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	791b      	ldrb	r3, [r3, #4]
 8006034:	2b03      	cmp	r3, #3
 8006036:	d003      	beq.n	8006040 <USB_EPClearStall+0x4c>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	2b02      	cmp	r3, #2
 800603e:	d138      	bne.n	80060b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e027      	b.n	80060b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	791b      	ldrb	r3, [r3, #4]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d003      	beq.n	8006092 <USB_EPClearStall+0x9e>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d10f      	bne.n	80060b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr

080060be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f8:	4313      	orrs	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr

08006108 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006136:	f023 0302 	bic.w	r3, r3, #2
 800613a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006176:	f043 0302 	orr.w	r3, r3, #2
 800617a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4013      	ands	r3, r2
 80061ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	0c1b      	lsrs	r3, r3, #16
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	b29b      	uxth	r3, r3
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800623e:	68bb      	ldr	r3, [r7, #8]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800624a:	b480      	push	{r7}
 800624c:	b087      	sub	sp, #28
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	b2db      	uxtb	r3, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4013      	ands	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006298:	68bb      	ldr	r3, [r7, #8]
}
 800629a:	4618      	mov	r0, r3
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0301 	and.w	r3, r3, #1
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062dc:	f023 0307 	bic.w	r3, r3, #7
 80062e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr
	...

08006304 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	333c      	adds	r3, #60	; 0x3c
 8006316:	3304      	adds	r3, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <USB_EP0_OutStart+0x8c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d90a      	bls.n	800633a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006334:	d101      	bne.n	800633a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e024      	b.n	8006384 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006368:	f043 0318 	orr.w	r3, r3, #24
 800636c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006380:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	4f54300a 	.word	0x4f54300a

08006394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a12      	ldr	r2, [pc, #72]	; (80063f4 <USB_CoreReset+0x60>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e01b      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	daf2      	bge.n	80063a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3301      	adds	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <USB_CoreReset+0x60>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d901      	bls.n	80063dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e006      	b.n	80063ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d0f0      	beq.n	80063ca <USB_CoreReset+0x36>

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	00030d40 	.word	0x00030d40

080063f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	7c1b      	ldrb	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d115      	bne.n	800643c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006414:	2202      	movs	r2, #2
 8006416:	2181      	movs	r1, #129	; 0x81
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 ff22 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006428:	2202      	movs	r2, #2
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 ff18 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800643a:	e012      	b.n	8006462 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	2202      	movs	r2, #2
 8006440:	2181      	movs	r1, #129	; 0x81
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 ff0d 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800644e:	2340      	movs	r3, #64	; 0x40
 8006450:	2202      	movs	r2, #2
 8006452:	2101      	movs	r1, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 ff04 	bl	8008262 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006462:	2308      	movs	r3, #8
 8006464:	2203      	movs	r2, #3
 8006466:	2182      	movs	r1, #130	; 0x82
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fefa 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006474:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006478:	f002 f81a 	bl	80084b0 <USBD_static_malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
 8006492:	e026      	b.n	80064e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	7c1b      	ldrb	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c8:	2101      	movs	r1, #1
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f001 ffb9 	bl	8008442 <USBD_LL_PrepareReceive>
 80064d0:	e007      	b.n	80064e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	2101      	movs	r1, #1
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 ffb0 	bl	8008442 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064fc:	2181      	movs	r1, #129	; 0x81
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fed5 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800650a:	2101      	movs	r1, #1
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fece 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800651a:	2182      	movs	r1, #130	; 0x82
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fec6 	bl	80082ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	4618      	mov	r0, r3
 8006544:	f001 ffc0 	bl	80084c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006580:	2b00      	cmp	r3, #0
 8006582:	d039      	beq.n	80065f8 <USBD_CDC_Setup+0x9e>
 8006584:	2b20      	cmp	r3, #32
 8006586:	d17f      	bne.n	8006688 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	88db      	ldrh	r3, [r3, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d029      	beq.n	80065e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b25b      	sxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	da11      	bge.n	80065be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80065a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	88d2      	ldrh	r2, [r2, #6]
 80065ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065ae:	6939      	ldr	r1, [r7, #16]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	88db      	ldrh	r3, [r3, #6]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fa41 	bl	8007a3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80065bc:	e06b      	b.n	8006696 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	785a      	ldrb	r2, [r3, #1]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	88db      	ldrh	r3, [r3, #6]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80065d4:	6939      	ldr	r1, [r7, #16]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	88db      	ldrh	r3, [r3, #6]
 80065da:	461a      	mov	r2, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 fa5c 	bl	8007a9a <USBD_CtlPrepareRx>
      break;
 80065e2:	e058      	b.n	8006696 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	7850      	ldrb	r0, [r2, #1]
 80065f0:	2200      	movs	r2, #0
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	4798      	blx	r3
      break;
 80065f6:	e04e      	b.n	8006696 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d02e      	beq.n	800665e <USBD_CDC_Setup+0x104>
 8006600:	2b0b      	cmp	r3, #11
 8006602:	dc38      	bgt.n	8006676 <USBD_CDC_Setup+0x11c>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <USBD_CDC_Setup+0xb4>
 8006608:	2b0a      	cmp	r3, #10
 800660a:	d014      	beq.n	8006636 <USBD_CDC_Setup+0xdc>
 800660c:	e033      	b.n	8006676 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	2b03      	cmp	r3, #3
 8006616:	d107      	bne.n	8006628 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	2202      	movs	r2, #2
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fa0c 	bl	8007a3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006626:	e02e      	b.n	8006686 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f99d 	bl	800796a <USBD_CtlError>
            ret = USBD_FAIL;
 8006630:	2302      	movs	r3, #2
 8006632:	75fb      	strb	r3, [r7, #23]
          break;
 8006634:	e027      	b.n	8006686 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	2b03      	cmp	r3, #3
 800663e:	d107      	bne.n	8006650 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006640:	f107 030f 	add.w	r3, r7, #15
 8006644:	2201      	movs	r2, #1
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f9f8 	bl	8007a3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800664e:	e01a      	b.n	8006686 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f989 	bl	800796a <USBD_CtlError>
            ret = USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	75fb      	strb	r3, [r7, #23]
          break;
 800665c:	e013      	b.n	8006686 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006664:	2b03      	cmp	r3, #3
 8006666:	d00d      	beq.n	8006684 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 f97d 	bl	800796a <USBD_CtlError>
            ret = USBD_FAIL;
 8006670:	2302      	movs	r3, #2
 8006672:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006674:	e006      	b.n	8006684 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f976 	bl	800796a <USBD_CtlError>
          ret = USBD_FAIL;
 800667e:	2302      	movs	r3, #2
 8006680:	75fb      	strb	r3, [r7, #23]
          break;
 8006682:	e000      	b.n	8006686 <USBD_CDC_Setup+0x12c>
          break;
 8006684:	bf00      	nop
      }
      break;
 8006686:	e006      	b.n	8006696 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f96d 	bl	800796a <USBD_CtlError>
      ret = USBD_FAIL;
 8006690:	2302      	movs	r3, #2
 8006692:	75fb      	strb	r3, [r7, #23]
      break;
 8006694:	bf00      	nop
  }

  return ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03a      	beq.n	800673c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	331c      	adds	r3, #28
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d029      	beq.n	8006730 <USBD_CDC_DataIn+0x90>
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	331c      	adds	r3, #28
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	78f9      	ldrb	r1, [r7, #3]
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	460b      	mov	r3, r1
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	440b      	add	r3, r1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4403      	add	r3, r0
 80066fc:	3344      	adds	r3, #68	; 0x44
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	fbb2 f1f3 	udiv	r1, r2, r3
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d110      	bne.n	8006730 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	331c      	adds	r3, #28
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006722:	78f9      	ldrb	r1, [r7, #3]
 8006724:	2300      	movs	r3, #0
 8006726:	2200      	movs	r2, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fe67 	bl	80083fc <USBD_LL_Transmit>
 800672e:	e003      	b.n	8006738 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fe92 	bl	8008488 <USBD_LL_GetRxDataSize>
 8006764:	4602      	mov	r2, r0
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800678a:	4611      	mov	r1, r2
 800678c:	4798      	blx	r3

    return USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d015      	beq.n	80067e2 <USBD_CDC_EP0_RxReady+0x46>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067bc:	2bff      	cmp	r3, #255	; 0xff
 80067be:	d010      	beq.n	80067e2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80067ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067d6:	b292      	uxth	r2, r2
 80067d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22ff      	movs	r2, #255	; 0xff
 80067de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2243      	movs	r2, #67	; 0x43
 80067f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80067fa:	4b03      	ldr	r3, [pc, #12]	; (8006808 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000094 	.word	0x20000094

0800680c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2243      	movs	r2, #67	; 0x43
 8006818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800681a:	4b03      	ldr	r3, [pc, #12]	; (8006828 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000050 	.word	0x20000050

0800682c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2243      	movs	r2, #67	; 0x43
 8006838:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800683a:	4b03      	ldr	r3, [pc, #12]	; (8006848 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	200000d8 	.word	0x200000d8

0800684c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	220a      	movs	r2, #10
 8006858:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	2000000c 	.word	0x2000000c

0800686c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006876:	2302      	movs	r3, #2
 8006878:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr

080068ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d01c      	beq.n	8006944 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006910:	2b00      	cmp	r3, #0
 8006912:	d115      	bne.n	8006940 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006932:	b29b      	uxth	r3, r3
 8006934:	2181      	movs	r1, #129	; 0x81
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fd60 	bl	80083fc <USBD_LL_Transmit>

      return USBD_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e002      	b.n	8006946 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006944:	2302      	movs	r3, #2
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7c1b      	ldrb	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d109      	bne.n	8006984 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800697a:	2101      	movs	r1, #1
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fd60 	bl	8008442 <USBD_LL_PrepareReceive>
 8006982:	e007      	b.n	8006994 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800698a:	2340      	movs	r3, #64	; 0x40
 800698c:	2101      	movs	r1, #1
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f001 fd57 	bl	8008442 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	4613      	mov	r3, r2
 80069ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069b6:	2302      	movs	r3, #2
 80069b8:	e01a      	b.n	80069f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	79fa      	ldrb	r2, [r7, #7]
 80069e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fbdb 	bl	80081a4 <USBD_LL_Init>

  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e001      	b.n	8006a1e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fbfa 	bl	800822c <USBD_LL_Start>

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	78fa      	ldrb	r2, [r7, #3]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	78fa      	ldrb	r2, [r7, #3]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 ff10 	bl	80078f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006aee:	f003 031f 	and.w	r3, r3, #31
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d016      	beq.n	8006b24 <USBD_LL_SetupStage+0x6a>
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d81c      	bhi.n	8006b34 <USBD_LL_SetupStage+0x7a>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <USBD_LL_SetupStage+0x4a>
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d008      	beq.n	8006b14 <USBD_LL_SetupStage+0x5a>
 8006b02:	e017      	b.n	8006b34 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fa03 	bl	8006f18 <USBD_StdDevReq>
      break;
 8006b12:	e01a      	b.n	8006b4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa65 	bl	8006fec <USBD_StdItfReq>
      break;
 8006b22:	e012      	b.n	8006b4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 faa5 	bl	800707c <USBD_StdEPReq>
      break;
 8006b32:	e00a      	b.n	8006b4a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fbd2 	bl	80082ec <USBD_LL_StallEP>
      break;
 8006b48:	bf00      	nop
  }

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d14b      	bne.n	8006c00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d134      	bne.n	8006be4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d919      	bls.n	8006bba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d203      	bcs.n	8006ba8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	e002      	b.n	8006bae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 ff8f 	bl	8007ad6 <USBD_CtlContinueRx>
 8006bb8:	e038      	b.n	8006c2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d105      	bne.n	8006bdc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 ff8c 	bl	8007afa <USBD_CtlSendStatus>
 8006be2:	e023      	b.n	8006c2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d11e      	bne.n	8006c2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f001 fb77 	bl	80082ec <USBD_LL_StallEP>
 8006bfe:	e015      	b.n	8006c2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00d      	beq.n	8006c28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d108      	bne.n	8006c28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	7afa      	ldrb	r2, [r7, #11]
 8006c20:	4611      	mov	r1, r2
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	4798      	blx	r3
 8006c26:	e001      	b.n	8006c2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e000      	b.n	8006c2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d17f      	bne.n	8006d4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d15c      	bne.n	8006d14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d915      	bls.n	8006c92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fef9 	bl	8007a76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c84:	2300      	movs	r3, #0
 8006c86:	2200      	movs	r2, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f001 fbd9 	bl	8008442 <USBD_LL_PrepareReceive>
 8006c90:	e04e      	b.n	8006d30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	6912      	ldr	r2, [r2, #16]
 8006c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c9e:	fb01 f202 	mul.w	r2, r1, r2
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11c      	bne.n	8006ce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d316      	bcc.n	8006ce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d20f      	bcs.n	8006ce2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fed5 	bl	8007a76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 fbb1 	bl	8008442 <USBD_LL_PrepareReceive>
 8006ce0:	e026      	b.n	8006d30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d105      	bne.n	8006d04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f001 faf0 	bl	80082ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 ff07 	bl	8007b20 <USBD_CtlReceiveStatus>
 8006d12:	e00d      	b.n	8006d30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d004      	beq.n	8006d28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d28:	2180      	movs	r1, #128	; 0x80
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 fade 	bl	80082ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d11d      	bne.n	8006d76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff fe81 	bl	8006a42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d48:	e015      	b.n	8006d76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00d      	beq.n	8006d72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d108      	bne.n	8006d72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	4798      	blx	r3
 8006d70:	e001      	b.n	8006d76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	e000      	b.n	8006d78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d88:	2340      	movs	r3, #64	; 0x40
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fa67 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2240      	movs	r2, #64	; 0x40
 8006da0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	2200      	movs	r2, #0
 8006da8:	2180      	movs	r1, #128	; 0x80
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fa59 	bl	8008262 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6852      	ldr	r2, [r2, #4]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	4611      	mov	r1, r2
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	4798      	blx	r3
  }

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d105      	bne.n	8006e66 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d10b      	bne.n	8006e9c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6852      	ldr	r2, [r2, #4]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	4611      	mov	r1, r2
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d005      	beq.n	8006f3e <USBD_StdDevReq+0x26>
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d84f      	bhi.n	8006fd6 <USBD_StdDevReq+0xbe>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <USBD_StdDevReq+0x36>
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d14b      	bne.n	8006fd6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
      break;
 8006f4c:	e048      	b.n	8006fe0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b09      	cmp	r3, #9
 8006f54:	d839      	bhi.n	8006fca <USBD_StdDevReq+0xb2>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <USBD_StdDevReq+0x44>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006fad 	.word	0x08006fad
 8006f60:	08006fc1 	.word	0x08006fc1
 8006f64:	08006fcb 	.word	0x08006fcb
 8006f68:	08006fb7 	.word	0x08006fb7
 8006f6c:	08006fcb 	.word	0x08006fcb
 8006f70:	08006f8f 	.word	0x08006f8f
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006fcb 	.word	0x08006fcb
 8006f7c:	08006fa3 	.word	0x08006fa3
 8006f80:	08006f99 	.word	0x08006f99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f9dc 	bl	8007344 <USBD_GetDescriptor>
          break;
 8006f8c:	e022      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb3f 	bl	8007614 <USBD_SetAddress>
          break;
 8006f96:	e01d      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb7e 	bl	800769c <USBD_SetConfig>
          break;
 8006fa0:	e018      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fc07 	bl	80077b8 <USBD_GetConfig>
          break;
 8006faa:	e013      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fc37 	bl	8007822 <USBD_GetStatus>
          break;
 8006fb4:	e00e      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc65 	bl	8007888 <USBD_SetFeature>
          break;
 8006fbe:	e009      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fc74 	bl	80078b0 <USBD_ClrFeature>
          break;
 8006fc8:	e004      	b.n	8006fd4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fccc 	bl	800796a <USBD_CtlError>
          break;
 8006fd2:	bf00      	nop
      }
      break;
 8006fd4:	e004      	b.n	8006fe0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fcc6 	bl	800796a <USBD_CtlError>
      break;
 8006fde:	bf00      	nop
  }

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d005      	beq.n	8007012 <USBD_StdItfReq+0x26>
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d82e      	bhi.n	8007068 <USBD_StdItfReq+0x7c>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <USBD_StdItfReq+0x26>
 800700e:	2b20      	cmp	r3, #32
 8007010:	d12a      	bne.n	8007068 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007018:	3b01      	subs	r3, #1
 800701a:	2b02      	cmp	r3, #2
 800701c:	d81d      	bhi.n	800705a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	889b      	ldrh	r3, [r3, #4]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d813      	bhi.n	8007050 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d110      	bne.n	8007064 <USBD_StdItfReq+0x78>
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10d      	bne.n	8007064 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fd56 	bl	8007afa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800704e:	e009      	b.n	8007064 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fc89 	bl	800796a <USBD_CtlError>
          break;
 8007058:	e004      	b.n	8007064 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc84 	bl	800796a <USBD_CtlError>
          break;
 8007062:	e000      	b.n	8007066 <USBD_StdItfReq+0x7a>
          break;
 8007064:	bf00      	nop
      }
      break;
 8007066:	e004      	b.n	8007072 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fc7d 	bl	800796a <USBD_CtlError>
      break;
 8007070:	bf00      	nop
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	889b      	ldrh	r3, [r3, #4]
 800708e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d007      	beq.n	80070ac <USBD_StdEPReq+0x30>
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	f200 8146 	bhi.w	800732e <USBD_StdEPReq+0x2b2>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <USBD_StdEPReq+0x40>
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	f040 8141 	bne.w	800732e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      break;
 80070ba:	e13d      	b.n	8007338 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d10a      	bne.n	80070de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	e12d      	b.n	800733a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d007      	beq.n	80070f6 <USBD_StdEPReq+0x7a>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	f300 811b 	bgt.w	8007322 <USBD_StdEPReq+0x2a6>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d072      	beq.n	80071d6 <USBD_StdEPReq+0x15a>
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d03a      	beq.n	800716a <USBD_StdEPReq+0xee>
 80070f4:	e115      	b.n	8007322 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d002      	beq.n	8007106 <USBD_StdEPReq+0x8a>
 8007100:	2b03      	cmp	r3, #3
 8007102:	d015      	beq.n	8007130 <USBD_StdEPReq+0xb4>
 8007104:	e02b      	b.n	800715e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <USBD_StdEPReq+0xaa>
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d009      	beq.n	8007126 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f8e8 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f8e4 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007124:	e020      	b.n	8007168 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc1e 	bl	800796a <USBD_CtlError>
              break;
 800712e:	e01b      	b.n	8007168 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	885b      	ldrh	r3, [r3, #2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10e      	bne.n	8007156 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <USBD_StdEPReq+0xda>
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d008      	beq.n	8007156 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	88db      	ldrh	r3, [r3, #6]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f8cb 	bl	80082ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fccf 	bl	8007afa <USBD_CtlSendStatus>

              break;
 800715c:	e004      	b.n	8007168 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc02 	bl	800796a <USBD_CtlError>
              break;
 8007166:	bf00      	nop
          }
          break;
 8007168:	e0e0      	b.n	800732c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	2b02      	cmp	r3, #2
 8007172:	d002      	beq.n	800717a <USBD_StdEPReq+0xfe>
 8007174:	2b03      	cmp	r3, #3
 8007176:	d015      	beq.n	80071a4 <USBD_StdEPReq+0x128>
 8007178:	e026      	b.n	80071c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00c      	beq.n	800719a <USBD_StdEPReq+0x11e>
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b80      	cmp	r3, #128	; 0x80
 8007184:	d009      	beq.n	800719a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 f8ae 	bl	80082ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007190:	2180      	movs	r1, #128	; 0x80
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 f8aa 	bl	80082ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007198:	e01c      	b.n	80071d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fbe4 	bl	800796a <USBD_CtlError>
              break;
 80071a2:	e017      	b.n	80071d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	885b      	ldrh	r3, [r3, #2]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d112      	bne.n	80071d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f8b5 	bl	800832a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc9a 	bl	8007afa <USBD_CtlSendStatus>
              }
              break;
 80071c6:	e004      	b.n	80071d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fbcd 	bl	800796a <USBD_CtlError>
              break;
 80071d0:	e000      	b.n	80071d4 <USBD_StdEPReq+0x158>
              break;
 80071d2:	bf00      	nop
          }
          break;
 80071d4:	e0aa      	b.n	800732c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d002      	beq.n	80071e6 <USBD_StdEPReq+0x16a>
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d032      	beq.n	800724a <USBD_StdEPReq+0x1ce>
 80071e4:	e097      	b.n	8007316 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d007      	beq.n	80071fc <USBD_StdEPReq+0x180>
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d004      	beq.n	80071fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fbb8 	bl	800796a <USBD_CtlError>
                break;
 80071fa:	e091      	b.n	8007320 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	da0b      	bge.n	800721c <USBD_StdEPReq+0x1a0>
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	3310      	adds	r3, #16
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4413      	add	r3, r2
 8007218:	3304      	adds	r3, #4
 800721a:	e00b      	b.n	8007234 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	3304      	adds	r3, #4
 8007234:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2202      	movs	r2, #2
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fbfb 	bl	8007a3e <USBD_CtlSendData>
              break;
 8007248:	e06a      	b.n	8007320 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800724a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	da11      	bge.n	8007276 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	3318      	adds	r3, #24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d117      	bne.n	800729c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb7b 	bl	800796a <USBD_CtlError>
                  break;
 8007274:	e054      	b.n	8007320 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fb68 	bl	800796a <USBD_CtlError>
                  break;
 800729a:	e041      	b.n	8007320 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800729c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	da0b      	bge.n	80072bc <USBD_StdEPReq+0x240>
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	3310      	adds	r3, #16
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	3304      	adds	r3, #4
 80072ba:	e00b      	b.n	80072d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4413      	add	r3, r2
 80072d2:	3304      	adds	r3, #4
 80072d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <USBD_StdEPReq+0x266>
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b80      	cmp	r3, #128	; 0x80
 80072e0:	d103      	bne.n	80072ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e00e      	b.n	8007308 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 f83a 	bl	8008368 <USBD_LL_IsStallEP>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d003      	beq.n	8007302 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e002      	b.n	8007308 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2202      	movs	r2, #2
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fb95 	bl	8007a3e <USBD_CtlSendData>
              break;
 8007314:	e004      	b.n	8007320 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb26 	bl	800796a <USBD_CtlError>
              break;
 800731e:	bf00      	nop
          }
          break;
 8007320:	e004      	b.n	800732c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb20 	bl	800796a <USBD_CtlError>
          break;
 800732a:	bf00      	nop
      }
      break;
 800732c:	e004      	b.n	8007338 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb1a 	bl	800796a <USBD_CtlError>
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	885b      	ldrh	r3, [r3, #2]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	2b06      	cmp	r3, #6
 8007366:	f200 8128 	bhi.w	80075ba <USBD_GetDescriptor+0x276>
 800736a:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <USBD_GetDescriptor+0x2c>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	0800738d 	.word	0x0800738d
 8007374:	080073a5 	.word	0x080073a5
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080075bb 	.word	0x080075bb
 8007380:	080075bb 	.word	0x080075bb
 8007384:	0800755b 	.word	0x0800755b
 8007388:	08007587 	.word	0x08007587
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7c12      	ldrb	r2, [r2, #16]
 8007398:	f107 0108 	add.w	r1, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
      break;
 80073a2:	e112      	b.n	80075ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7c1b      	ldrb	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f107 0208 	add.w	r2, r7, #8
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
 80073bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	2202      	movs	r2, #2
 80073c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073c6:	e100      	b.n	80075ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	f107 0208 	add.w	r2, r7, #8
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	2202      	movs	r2, #2
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	e0f2      	b.n	80075ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	885b      	ldrh	r3, [r3, #2]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	f200 80ac 	bhi.w	8007548 <USBD_GetDescriptor+0x204>
 80073f0:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <USBD_GetDescriptor+0xb4>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	08007411 	.word	0x08007411
 80073fc:	08007445 	.word	0x08007445
 8007400:	08007479 	.word	0x08007479
 8007404:	080074ad 	.word	0x080074ad
 8007408:	080074e1 	.word	0x080074e1
 800740c:	08007515 	.word	0x08007515
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007432:	e091      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa97 	bl	800796a <USBD_CtlError>
            err++;
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	3301      	adds	r3, #1
 8007440:	72fb      	strb	r3, [r7, #11]
          break;
 8007442:	e089      	b.n	8007558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	7c12      	ldrb	r2, [r2, #16]
 800745c:	f107 0108 	add.w	r1, r7, #8
 8007460:	4610      	mov	r0, r2
 8007462:	4798      	blx	r3
 8007464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007466:	e077      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa7d 	bl	800796a <USBD_CtlError>
            err++;
 8007470:	7afb      	ldrb	r3, [r7, #11]
 8007472:	3301      	adds	r3, #1
 8007474:	72fb      	strb	r3, [r7, #11]
          break;
 8007476:	e06f      	b.n	8007558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	7c12      	ldrb	r2, [r2, #16]
 8007490:	f107 0108 	add.w	r1, r7, #8
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
 8007498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749a:	e05d      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa63 	bl	800796a <USBD_CtlError>
            err++;
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	3301      	adds	r3, #1
 80074a8:	72fb      	strb	r3, [r7, #11]
          break;
 80074aa:	e055      	b.n	8007558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	7c12      	ldrb	r2, [r2, #16]
 80074c4:	f107 0108 	add.w	r1, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ce:	e043      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa49 	bl	800796a <USBD_CtlError>
            err++;
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	3301      	adds	r3, #1
 80074dc:	72fb      	strb	r3, [r7, #11]
          break;
 80074de:	e03b      	b.n	8007558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e029      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa2f 	bl	800796a <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e021      	b.n	8007558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e00f      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fa15 	bl	800796a <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e007      	b.n	8007558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa0d 	bl	800796a <USBD_CtlError>
          err++;
 8007550:	7afb      	ldrb	r3, [r7, #11]
 8007552:	3301      	adds	r3, #1
 8007554:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007556:	e038      	b.n	80075ca <USBD_GetDescriptor+0x286>
 8007558:	e037      	b.n	80075ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7c1b      	ldrb	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	f107 0208 	add.w	r2, r7, #8
 800756e:	4610      	mov	r0, r2
 8007570:	4798      	blx	r3
 8007572:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007574:	e029      	b.n	80075ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9f6 	bl	800796a <USBD_CtlError>
        err++;
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	3301      	adds	r3, #1
 8007582:	72fb      	strb	r3, [r7, #11]
      break;
 8007584:	e021      	b.n	80075ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	7c1b      	ldrb	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	f107 0208 	add.w	r2, r7, #8
 800759a:	4610      	mov	r0, r2
 800759c:	4798      	blx	r3
 800759e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	2207      	movs	r2, #7
 80075a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075a8:	e00f      	b.n	80075ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9dc 	bl	800796a <USBD_CtlError>
        err++;
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	3301      	adds	r3, #1
 80075b6:	72fb      	strb	r3, [r7, #11]
      break;
 80075b8:	e007      	b.n	80075ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f9d4 	bl	800796a <USBD_CtlError>
      err++;
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	3301      	adds	r3, #1
 80075c6:	72fb      	strb	r3, [r7, #11]
      break;
 80075c8:	bf00      	nop
  }

  if (err != 0U)
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11c      	bne.n	800760a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075d0:	893b      	ldrh	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d011      	beq.n	80075fa <USBD_GetDescriptor+0x2b6>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	88da      	ldrh	r2, [r3, #6]
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	bf28      	it	cs
 80075e8:	4613      	movcs	r3, r2
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	461a      	mov	r2, r3
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa22 	bl	8007a3e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	88db      	ldrh	r3, [r3, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa79 	bl	8007afa <USBD_CtlSendStatus>
 8007608:	e000      	b.n	800760c <USBD_GetDescriptor+0x2c8>
    return;
 800760a:	bf00      	nop
    }
  }
}
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	889b      	ldrh	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d130      	bne.n	8007688 <USBD_SetAddress+0x74>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d12c      	bne.n	8007688 <USBD_SetAddress+0x74>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	2b7f      	cmp	r3, #127	; 0x7f
 8007634:	d828      	bhi.n	8007688 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	885b      	ldrh	r3, [r3, #2]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007640:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	2b03      	cmp	r3, #3
 800764a:	d104      	bne.n	8007656 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f98b 	bl	800796a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007654:	e01d      	b.n	8007692 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7bfa      	ldrb	r2, [r7, #15]
 800765a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 feab 	bl	80083be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa46 	bl	8007afa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d004      	beq.n	800767e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767c:	e009      	b.n	8007692 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007686:	e004      	b.n	8007692 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f96d 	bl	800796a <USBD_CtlError>
  }
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	885b      	ldrh	r3, [r3, #2]
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <USBD_SetConfig+0x118>)
 80076ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076b0:	4b40      	ldr	r3, [pc, #256]	; (80077b4 <USBD_SetConfig+0x118>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d904      	bls.n	80076c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f955 	bl	800796a <USBD_CtlError>
 80076c0:	e075      	b.n	80077ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d002      	beq.n	80076d2 <USBD_SetConfig+0x36>
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d023      	beq.n	8007718 <USBD_SetConfig+0x7c>
 80076d0:	e062      	b.n	8007798 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80076d2:	4b38      	ldr	r3, [pc, #224]	; (80077b4 <USBD_SetConfig+0x118>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01a      	beq.n	8007710 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076da:	4b36      	ldr	r3, [pc, #216]	; (80077b4 <USBD_SetConfig+0x118>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2203      	movs	r2, #3
 80076e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076ec:	4b31      	ldr	r3, [pc, #196]	; (80077b4 <USBD_SetConfig+0x118>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f9af 	bl	8006a56 <USBD_SetClassConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d104      	bne.n	8007708 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f932 	bl	800796a <USBD_CtlError>
            return;
 8007706:	e052      	b.n	80077ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f9f6 	bl	8007afa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800770e:	e04e      	b.n	80077ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9f2 	bl	8007afa <USBD_CtlSendStatus>
        break;
 8007716:	e04a      	b.n	80077ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007718:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <USBD_SetConfig+0x118>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d112      	bne.n	8007746 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007728:	4b22      	ldr	r3, [pc, #136]	; (80077b4 <USBD_SetConfig+0x118>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <USBD_SetConfig+0x118>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff f9ab 	bl	8006a94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9db 	bl	8007afa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007744:	e033      	b.n	80077ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007746:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <USBD_SetConfig+0x118>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d01d      	beq.n	8007790 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff f999 	bl	8006a94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <USBD_SetConfig+0x118>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800776c:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <USBD_SetConfig+0x118>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff f96f 	bl	8006a56 <USBD_SetClassConfig>
 8007778:	4603      	mov	r3, r0
 800777a:	2b02      	cmp	r3, #2
 800777c:	d104      	bne.n	8007788 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f8f2 	bl	800796a <USBD_CtlError>
            return;
 8007786:	e012      	b.n	80077ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f9b6 	bl	8007afa <USBD_CtlSendStatus>
        break;
 800778e:	e00e      	b.n	80077ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f9b2 	bl	8007afa <USBD_CtlSendStatus>
        break;
 8007796:	e00a      	b.n	80077ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f8e5 	bl	800796a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80077a0:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <USBD_SetConfig+0x118>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff f974 	bl	8006a94 <USBD_ClrClassConfig>
        break;
 80077ac:	bf00      	nop
    }
  }
}
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	200003d8 	.word	0x200003d8

080077b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	88db      	ldrh	r3, [r3, #6]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d004      	beq.n	80077d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8cc 	bl	800796a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077d2:	e022      	b.n	800781a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077da:	2b02      	cmp	r3, #2
 80077dc:	dc02      	bgt.n	80077e4 <USBD_GetConfig+0x2c>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dc03      	bgt.n	80077ea <USBD_GetConfig+0x32>
 80077e2:	e015      	b.n	8007810 <USBD_GetConfig+0x58>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d00b      	beq.n	8007800 <USBD_GetConfig+0x48>
 80077e8:	e012      	b.n	8007810 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3308      	adds	r3, #8
 80077f4:	2201      	movs	r2, #1
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f920 	bl	8007a3e <USBD_CtlSendData>
        break;
 80077fe:	e00c      	b.n	800781a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	2201      	movs	r2, #1
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f918 	bl	8007a3e <USBD_CtlSendData>
        break;
 800780e:	e004      	b.n	800781a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8a9 	bl	800796a <USBD_CtlError>
        break;
 8007818:	bf00      	nop
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007832:	3b01      	subs	r3, #1
 8007834:	2b02      	cmp	r3, #2
 8007836:	d81e      	bhi.n	8007876 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d004      	beq.n	800784a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f891 	bl	800796a <USBD_CtlError>
        break;
 8007848:	e01a      	b.n	8007880 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f043 0202 	orr.w	r2, r3, #2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	330c      	adds	r3, #12
 800786a:	2202      	movs	r2, #2
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8e5 	bl	8007a3e <USBD_CtlSendData>
      break;
 8007874:	e004      	b.n	8007880 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f876 	bl	800796a <USBD_CtlError>
      break;
 800787e:	bf00      	nop
  }
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	885b      	ldrh	r3, [r3, #2]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d106      	bne.n	80078a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f929 	bl	8007afa <USBD_CtlSendStatus>
  }
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	3b01      	subs	r3, #1
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d80b      	bhi.n	80078de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d10c      	bne.n	80078e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f90f 	bl	8007afa <USBD_CtlSendStatus>
      }
      break;
 80078dc:	e004      	b.n	80078e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f842 	bl	800796a <USBD_CtlError>
      break;
 80078e6:	e000      	b.n	80078ea <USBD_ClrFeature+0x3a>
      break;
 80078e8:	bf00      	nop
  }
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	785a      	ldrb	r2, [r3, #1]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	3302      	adds	r3, #2
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	3303      	adds	r3, #3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29b      	uxth	r3, r3
 8007920:	4413      	add	r3, r2
 8007922:	b29a      	uxth	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	3304      	adds	r3, #4
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b29a      	uxth	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	3305      	adds	r3, #5
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b29b      	uxth	r3, r3
 800793c:	4413      	add	r3, r2
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	3306      	adds	r3, #6
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	b29a      	uxth	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	3307      	adds	r3, #7
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	b29b      	uxth	r3, r3
 8007958:	4413      	add	r3, r2
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	80da      	strh	r2, [r3, #6]

}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr

0800796a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007974:	2180      	movs	r1, #128	; 0x80
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fcb8 	bl	80082ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcb4 	bl	80082ec <USBD_LL_StallEP>
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d032      	beq.n	8007a08 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f834 	bl	8007a10 <USBD_GetLen>
 80079a8:	4603      	mov	r3, r0
 80079aa:	3301      	adds	r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	75fa      	strb	r2, [r7, #23]
 80079bc:	461a      	mov	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	75fa      	strb	r2, [r7, #23]
 80079ce:	461a      	mov	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4413      	add	r3, r2
 80079d4:	2203      	movs	r2, #3
 80079d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079d8:	e012      	b.n	8007a00 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	60fa      	str	r2, [r7, #12]
 80079e0:	7dfa      	ldrb	r2, [r7, #23]
 80079e2:	1c51      	adds	r1, r2, #1
 80079e4:	75f9      	strb	r1, [r7, #23]
 80079e6:	4611      	mov	r1, r2
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	440a      	add	r2, r1
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	75fa      	strb	r2, [r7, #23]
 80079f6:	461a      	mov	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4413      	add	r3, r2
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e8      	bne.n	80079da <USBD_GetString+0x4e>
    }
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007a1c:	e005      	b.n	8007a2a <USBD_GetLen+0x1a>
  {
    len++;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	3301      	adds	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3301      	adds	r3, #1
 8007a28:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f5      	bne.n	8007a1e <USBD_GetLen+0xe>
  }

  return len;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a5a:	88fa      	ldrh	r2, [r7, #6]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fcc8 	bl	80083fc <USBD_LL_Transmit>

  return USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	4613      	mov	r3, r2
 8007a82:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fcb6 	bl	80083fc <USBD_LL_Transmit>

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fcbb 	bl	8008442 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fca9 	bl	8008442 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2204      	movs	r2, #4
 8007b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2100      	movs	r1, #0
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc73 	bl	80083fc <USBD_LL_Transmit>

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fc83 	bl	8008442 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USB_Transmit>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USB_Transmit(char* Buf, uint16_t Len)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007b52:	887b      	ldrh	r3, [r7, #2]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8c2 	bl	8007ce0 <CDC_Transmit_FS>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4912      	ldr	r1, [pc, #72]	; (8007bb4 <MX_USB_DEVICE_Init+0x50>)
 8007b6c:	4812      	ldr	r0, [pc, #72]	; (8007bb8 <MX_USB_DEVICE_Init+0x54>)
 8007b6e:	f7fe ff18 	bl	80069a2 <USBD_Init>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b78:	f7f9 fa3e 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b7c:	490f      	ldr	r1, [pc, #60]	; (8007bbc <MX_USB_DEVICE_Init+0x58>)
 8007b7e:	480e      	ldr	r0, [pc, #56]	; (8007bb8 <MX_USB_DEVICE_Init+0x54>)
 8007b80:	f7fe ff3a 	bl	80069f8 <USBD_RegisterClass>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b8a:	f7f9 fa35 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b8e:	490c      	ldr	r1, [pc, #48]	; (8007bc0 <MX_USB_DEVICE_Init+0x5c>)
 8007b90:	4809      	ldr	r0, [pc, #36]	; (8007bb8 <MX_USB_DEVICE_Init+0x54>)
 8007b92:	f7fe fe6b 	bl	800686c <USBD_CDC_RegisterInterface>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b9c:	f7f9 fa2c 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ba0:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <MX_USB_DEVICE_Init+0x54>)
 8007ba2:	f7fe ff42 	bl	8006a2a <USBD_Start>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bac:	f7f9 fa24 	bl	8000ff8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bb0:	bf00      	nop
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	2000012c 	.word	0x2000012c
 8007bb8:	200003dc 	.word	0x200003dc
 8007bbc:	20000018 	.word	0x20000018
 8007bc0:	2000011c 	.word	0x2000011c

08007bc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4905      	ldr	r1, [pc, #20]	; (8007be0 <CDC_Init_FS+0x1c>)
 8007bcc:	4805      	ldr	r0, [pc, #20]	; (8007be4 <CDC_Init_FS+0x20>)
 8007bce:	f7fe fe63 	bl	8006898 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bd2:	4905      	ldr	r1, [pc, #20]	; (8007be8 <CDC_Init_FS+0x24>)
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <CDC_Init_FS+0x20>)
 8007bd6:	f7fe fe78 	bl	80068ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000aa0 	.word	0x20000aa0
 8007be4:	200003dc 	.word	0x200003dc
 8007be8:	200006a0 	.word	0x200006a0

08007bec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bf0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bc80      	pop	{r7}
 8007bf8:	4770      	bx	lr
	...

08007bfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b23      	cmp	r3, #35	; 0x23
 8007c10:	d84a      	bhi.n	8007ca8 <CDC_Control_FS+0xac>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <CDC_Control_FS+0x1c>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007ca9 	.word	0x08007ca9
 8007c1c:	08007ca9 	.word	0x08007ca9
 8007c20:	08007ca9 	.word	0x08007ca9
 8007c24:	08007ca9 	.word	0x08007ca9
 8007c28:	08007ca9 	.word	0x08007ca9
 8007c2c:	08007ca9 	.word	0x08007ca9
 8007c30:	08007ca9 	.word	0x08007ca9
 8007c34:	08007ca9 	.word	0x08007ca9
 8007c38:	08007ca9 	.word	0x08007ca9
 8007c3c:	08007ca9 	.word	0x08007ca9
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007ca9 	.word	0x08007ca9
 8007c4c:	08007ca9 	.word	0x08007ca9
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007ca9 	.word	0x08007ca9
 8007c5c:	08007ca9 	.word	0x08007ca9
 8007c60:	08007ca9 	.word	0x08007ca9
 8007c64:	08007ca9 	.word	0x08007ca9
 8007c68:	08007ca9 	.word	0x08007ca9
 8007c6c:	08007ca9 	.word	0x08007ca9
 8007c70:	08007ca9 	.word	0x08007ca9
 8007c74:	08007ca9 	.word	0x08007ca9
 8007c78:	08007ca9 	.word	0x08007ca9
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007ca9 	.word	0x08007ca9
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	08007ca9 	.word	0x08007ca9
 8007c94:	08007ca9 	.word	0x08007ca9
 8007c98:	08007ca9 	.word	0x08007ca9
 8007c9c:	08007ca9 	.word	0x08007ca9
 8007ca0:	08007ca9 	.word	0x08007ca9
 8007ca4:	08007ca9 	.word	0x08007ca9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ca8:	bf00      	nop
  }

  return (USBD_OK);
 8007caa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <CDC_Receive_FS+0x24>)
 8007cc6:	f7fe fe00 	bl	80068ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cca:	4804      	ldr	r0, [pc, #16]	; (8007cdc <CDC_Receive_FS+0x24>)
 8007ccc:	f7fe fe3f 	bl	800694e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007cd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	200003dc 	.word	0x200003dc

08007ce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <CDC_Transmit_FS+0x48>)
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e00b      	b.n	8007d1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	4806      	ldr	r0, [pc, #24]	; (8007d28 <CDC_Transmit_FS+0x48>)
 8007d0e:	f7fe fdc3 	bl	8006898 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d12:	4805      	ldr	r0, [pc, #20]	; (8007d28 <CDC_Transmit_FS+0x48>)
 8007d14:	f7fe fdec 	bl	80068f0 <USBD_CDC_TransmitPacket>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	200003dc 	.word	0x200003dc

08007d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2212      	movs	r2, #18
 8007d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000148 	.word	0x20000148

08007d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d62:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	2000015c 	.word	0x2000015c

08007d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4907      	ldr	r1, [pc, #28]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d8a:	4808      	ldr	r0, [pc, #32]	; (8007dac <USBD_FS_ProductStrDescriptor+0x38>)
 8007d8c:	f7ff fdfe 	bl	800798c <USBD_GetString>
 8007d90:	e004      	b.n	8007d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4904      	ldr	r1, [pc, #16]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d96:	4805      	ldr	r0, [pc, #20]	; (8007dac <USBD_FS_ProductStrDescriptor+0x38>)
 8007d98:	f7ff fdf8 	bl	800798c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000ea0 	.word	0x20000ea0
 8007dac:	08008ee8 	.word	0x08008ee8

08007db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	4904      	ldr	r1, [pc, #16]	; (8007dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dc0:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dc2:	f7ff fde3 	bl	800798c <USBD_GetString>
  return USBD_StrDesc;
 8007dc6:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000ea0 	.word	0x20000ea0
 8007dd4:	08008f00 	.word	0x08008f00

08007dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	221a      	movs	r2, #26
 8007de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dea:	f000 f843 	bl	8007e74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dee:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20000160 	.word	0x20000160

08007dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4907      	ldr	r1, [pc, #28]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e12:	4808      	ldr	r0, [pc, #32]	; (8007e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e14:	f7ff fdba 	bl	800798c <USBD_GetString>
 8007e18:	e004      	b.n	8007e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4904      	ldr	r1, [pc, #16]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e20:	f7ff fdb4 	bl	800798c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000ea0 	.word	0x20000ea0
 8007e34:	08008f14 	.word	0x08008f14

08007e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4907      	ldr	r1, [pc, #28]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e4e:	4808      	ldr	r0, [pc, #32]	; (8007e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e50:	f7ff fd9c 	bl	800798c <USBD_GetString>
 8007e54:	e004      	b.n	8007e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4904      	ldr	r1, [pc, #16]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e5a:	4805      	ldr	r0, [pc, #20]	; (8007e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e5c:	f7ff fd96 	bl	800798c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000ea0 	.word	0x20000ea0
 8007e70:	08008f20 	.word	0x08008f20

08007e74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <Get_SerialNum+0x44>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <Get_SerialNum+0x48>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e86:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <Get_SerialNum+0x4c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4909      	ldr	r1, [pc, #36]	; (8007ec4 <Get_SerialNum+0x50>)
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f814 	bl	8007ecc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <Get_SerialNum+0x54>)
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f000 f80f 	bl	8007ecc <IntToUnicode>
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	1ffff7e8 	.word	0x1ffff7e8
 8007ebc:	1ffff7ec 	.word	0x1ffff7ec
 8007ec0:	1ffff7f0 	.word	0x1ffff7f0
 8007ec4:	20000162 	.word	0x20000162
 8007ec8:	20000172 	.word	0x20000172

08007ecc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
 8007ee2:	e027      	b.n	8007f34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	0f1b      	lsrs	r3, r3, #28
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d80b      	bhi.n	8007f04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0f1b      	lsrs	r3, r3, #28
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	440b      	add	r3, r1
 8007efc:	3230      	adds	r2, #48	; 0x30
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e00a      	b.n	8007f1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	3237      	adds	r2, #55	; 0x37
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	3301      	adds	r3, #1
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4413      	add	r3, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	3301      	adds	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
 8007f34:	7dfa      	ldrb	r2, [r7, #23]
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d3d3      	bcc.n	8007ee4 <IntToUnicode+0x18>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f50:	f107 0310 	add.w	r3, r7, #16
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f66:	d12c      	bne.n	8007fc2 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f68:	4b18      	ldr	r3, [pc, #96]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	4a17      	ldr	r2, [pc, #92]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	6193      	str	r3, [r2, #24]
 8007f74:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f8e:	f107 0310 	add.w	r3, r7, #16
 8007f92:	4619      	mov	r1, r3
 8007f94:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <HAL_PCD_MspInit+0x88>)
 8007f96:	f7f9 ff61 	bl	8001e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fa4:	6153      	str	r3, [r2, #20]
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_PCD_MspInit+0x84>)
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fae:	60bb      	str	r3, [r7, #8]
 8007fb0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	2043      	movs	r0, #67	; 0x43
 8007fb8:	f7f9 ff19 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fbc:	2043      	movs	r0, #67	; 0x43
 8007fbe:	f7f9 ff32 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	40010800 	.word	0x40010800

08007fd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7fe fd65 	bl	8006aba <USBD_LL_SetupStage>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4613      	mov	r3, r2
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	440b      	add	r3, r1
 8008018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	4619      	mov	r1, r3
 8008022:	f7fe fd97 	bl	8006b54 <USBD_LL_DataOutStage>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	3348      	adds	r3, #72	; 0x48
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	4619      	mov	r1, r3
 8008056:	f7fe fdee 	bl	8006c36 <USBD_LL_DataInStage>
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fefe 	bl	8006e72 <USBD_LL_SOF>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d001      	beq.n	8008096 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008092:	f7f8 ffb1 	bl	8000ff8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800809c:	7bfa      	ldrb	r2, [r7, #15]
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe feae 	bl	8006e02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe fe67 	bl	8006d80 <USBD_LL_Reset>
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fea8 	bl	8006e20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080e2:	f043 0301 	orr.w	r3, r3, #1
 80080e6:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080f0:	4b04      	ldr	r3, [pc, #16]	; (8008104 <HAL_PCD_SuspendCallback+0x48>)
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	4a03      	ldr	r2, [pc, #12]	; (8008104 <HAL_PCD_SuspendCallback+0x48>)
 80080f6:	f043 0306 	orr.w	r3, r3, #6
 80080fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe96 	bl	8006e48 <USBD_LL_Resume>
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe febf 	bl	8006ebe <USBD_LL_IsoOUTIncomplete>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe fea1 	bl	8006ea6 <USBD_LL_IsoINIncomplete>
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe feab 	bl	8006ed6 <USBD_LL_DevConnected>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fea7 	bl	8006eea <USBD_LL_DevDisconnected>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d133      	bne.n	800821c <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081b4:	4a1c      	ldr	r2, [pc, #112]	; (8008228 <USBD_LL_Init+0x84>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1a      	ldr	r2, [pc, #104]	; (8008228 <USBD_LL_Init+0x84>)
 80081c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081c4:	4b18      	ldr	r3, [pc, #96]	; (8008228 <USBD_LL_Init+0x84>)
 80081c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <USBD_LL_Init+0x84>)
 80081ce:	2204      	movs	r2, #4
 80081d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <USBD_LL_Init+0x84>)
 80081d4:	2202      	movs	r2, #2
 80081d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081d8:	4b13      	ldr	r3, [pc, #76]	; (8008228 <USBD_LL_Init+0x84>)
 80081da:	2202      	movs	r2, #2
 80081dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <USBD_LL_Init+0x84>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <USBD_LL_Init+0x84>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <USBD_LL_Init+0x84>)
 80081ec:	2201      	movs	r2, #1
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081f0:	480d      	ldr	r0, [pc, #52]	; (8008228 <USBD_LL_Init+0x84>)
 80081f2:	f7f9 ffe8 	bl	80021c6 <HAL_PCD_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80081fc:	f7f8 fefc 	bl	8000ff8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008200:	2180      	movs	r1, #128	; 0x80
 8008202:	4809      	ldr	r0, [pc, #36]	; (8008228 <USBD_LL_Init+0x84>)
 8008204:	f7fb f900 	bl	8003408 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	2100      	movs	r1, #0
 800820c:	4806      	ldr	r0, [pc, #24]	; (8008228 <USBD_LL_Init+0x84>)
 800820e:	f7fb f8b5 	bl	800337c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008212:	2280      	movs	r2, #128	; 0x80
 8008214:	2101      	movs	r1, #1
 8008216:	4804      	ldr	r0, [pc, #16]	; (8008228 <USBD_LL_Init+0x84>)
 8008218:	f7fb f8b0 	bl	800337c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200010a0 	.word	0x200010a0

0800822c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008242:	4618      	mov	r0, r3
 8008244:	f7fa f8dc 	bl	8002400 <HAL_PCD_Start>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	4618      	mov	r0, r3
 8008250:	f000 f944 	bl	80084dc <USBD_Get_USB_Status>
 8008254:	4603      	mov	r3, r0
 8008256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008258:	7bbb      	ldrb	r3, [r7, #14]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b084      	sub	sp, #16
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	4603      	mov	r3, r0
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	460b      	mov	r3, r1
 8008276:	70bb      	strb	r3, [r7, #2]
 8008278:	4613      	mov	r3, r2
 800827a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800828a:	78bb      	ldrb	r3, [r7, #2]
 800828c:	883a      	ldrh	r2, [r7, #0]
 800828e:	78f9      	ldrb	r1, [r7, #3]
 8008290:	f7fa fd55 	bl	8002d3e <HAL_PCD_EP_Open>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f91e 	bl	80084dc <USBD_Get_USB_Status>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fa fd9e 	bl	8002e0e <HAL_PCD_EP_Close>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f8ff 	bl	80084dc <USBD_Get_USB_Status>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fa fe43 	bl	8002f96 <HAL_PCD_EP_SetStall>
 8008310:	4603      	mov	r3, r0
 8008312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f8e0 	bl	80084dc <USBD_Get_USB_Status>
 800831c:	4603      	mov	r3, r0
 800831e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008320:	7bbb      	ldrb	r3, [r7, #14]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008344:	78fa      	ldrb	r2, [r7, #3]
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f7fa fe86 	bl	800305a <HAL_PCD_EP_ClrStall>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 f8c1 	bl	80084dc <USBD_Get_USB_Status>
 800835a:	4603      	mov	r3, r0
 800835c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800837c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da0b      	bge.n	800839c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	333e      	adds	r3, #62	; 0x3e
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	e00b      	b.n	80083b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fa fc89 	bl	8002cf4 <HAL_PCD_SetAddress>
 80083e2:	4603      	mov	r3, r0
 80083e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 f877 	bl	80084dc <USBD_Get_USB_Status>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	72fb      	strb	r3, [r7, #11]
 800840c:	4613      	mov	r3, r2
 800840e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800841e:	893b      	ldrh	r3, [r7, #8]
 8008420:	7af9      	ldrb	r1, [r7, #11]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	f7fa fd86 	bl	8002f34 <HAL_PCD_EP_Transmit>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f854 	bl	80084dc <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008438:	7dbb      	ldrb	r3, [r7, #22]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	461a      	mov	r2, r3
 800844e:	460b      	mov	r3, r1
 8008450:	72fb      	strb	r3, [r7, #11]
 8008452:	4613      	mov	r3, r2
 8008454:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008464:	893b      	ldrh	r3, [r7, #8]
 8008466:	7af9      	ldrb	r1, [r7, #11]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f7fa fd1a 	bl	8002ea2 <HAL_PCD_EP_Receive>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 f831 	bl	80084dc <USBD_Get_USB_Status>
 800847a:	4603      	mov	r3, r0
 800847c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800847e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fa fd31 	bl	8002f06 <HAL_PCD_EP_GetRxCount>
 80084a4:	4603      	mov	r3, r0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_static_malloc+0x14>)
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	200015a4 	.word	0x200015a4

080084c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
	...

080084dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d817      	bhi.n	8008520 <USBD_Get_USB_Status+0x44>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_Get_USB_Status+0x1c>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008509 	.word	0x08008509
 80084fc:	0800850f 	.word	0x0800850f
 8008500:	08008515 	.word	0x08008515
 8008504:	0800851b 	.word	0x0800851b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
    break;
 800850c:	e00b      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800850e:	2302      	movs	r3, #2
 8008510:	73fb      	strb	r3, [r7, #15]
    break;
 8008512:	e008      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	e005      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	73fb      	strb	r3, [r7, #15]
    break;
 800851e:	e002      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008520:	2302      	movs	r3, #2
 8008522:	73fb      	strb	r3, [r7, #15]
    break;
 8008524:	bf00      	nop
  }
  return usb_status;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop

08008534 <siprintf>:
 8008534:	b40e      	push	{r1, r2, r3}
 8008536:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800853a:	b500      	push	{lr}
 800853c:	b09c      	sub	sp, #112	; 0x70
 800853e:	ab1d      	add	r3, sp, #116	; 0x74
 8008540:	9002      	str	r0, [sp, #8]
 8008542:	9006      	str	r0, [sp, #24]
 8008544:	9107      	str	r1, [sp, #28]
 8008546:	9104      	str	r1, [sp, #16]
 8008548:	4808      	ldr	r0, [pc, #32]	; (800856c <siprintf+0x38>)
 800854a:	4909      	ldr	r1, [pc, #36]	; (8008570 <siprintf+0x3c>)
 800854c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	6800      	ldr	r0, [r0, #0]
 8008554:	a902      	add	r1, sp, #8
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	f000 f9b0 	bl	80088bc <_svfiprintf_r>
 800855c:	2200      	movs	r2, #0
 800855e:	9b02      	ldr	r3, [sp, #8]
 8008560:	701a      	strb	r2, [r3, #0]
 8008562:	b01c      	add	sp, #112	; 0x70
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	200001c8 	.word	0x200001c8
 8008570:	ffff0208 	.word	0xffff0208

08008574 <memset>:
 8008574:	4603      	mov	r3, r0
 8008576:	4402      	add	r2, r0
 8008578:	4293      	cmp	r3, r2
 800857a:	d100      	bne.n	800857e <memset+0xa>
 800857c:	4770      	bx	lr
 800857e:	f803 1b01 	strb.w	r1, [r3], #1
 8008582:	e7f9      	b.n	8008578 <memset+0x4>

08008584 <strncat>:
 8008584:	b530      	push	{r4, r5, lr}
 8008586:	4604      	mov	r4, r0
 8008588:	7825      	ldrb	r5, [r4, #0]
 800858a:	4623      	mov	r3, r4
 800858c:	3401      	adds	r4, #1
 800858e:	2d00      	cmp	r5, #0
 8008590:	d1fa      	bne.n	8008588 <strncat+0x4>
 8008592:	3a01      	subs	r2, #1
 8008594:	d304      	bcc.n	80085a0 <strncat+0x1c>
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4b01 	strb.w	r4, [r3], #1
 800859e:	b904      	cbnz	r4, 80085a2 <strncat+0x1e>
 80085a0:	bd30      	pop	{r4, r5, pc}
 80085a2:	2a00      	cmp	r2, #0
 80085a4:	d1f5      	bne.n	8008592 <strncat+0xe>
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e7f3      	b.n	8008592 <strncat+0xe>
	...

080085ac <__errno>:
 80085ac:	4b01      	ldr	r3, [pc, #4]	; (80085b4 <__errno+0x8>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	200001c8 	.word	0x200001c8

080085b8 <__libc_init_array>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	2600      	movs	r6, #0
 80085bc:	4d0c      	ldr	r5, [pc, #48]	; (80085f0 <__libc_init_array+0x38>)
 80085be:	4c0d      	ldr	r4, [pc, #52]	; (80085f4 <__libc_init_array+0x3c>)
 80085c0:	1b64      	subs	r4, r4, r5
 80085c2:	10a4      	asrs	r4, r4, #2
 80085c4:	42a6      	cmp	r6, r4
 80085c6:	d109      	bne.n	80085dc <__libc_init_array+0x24>
 80085c8:	f000 fc7a 	bl	8008ec0 <_init>
 80085cc:	2600      	movs	r6, #0
 80085ce:	4d0a      	ldr	r5, [pc, #40]	; (80085f8 <__libc_init_array+0x40>)
 80085d0:	4c0a      	ldr	r4, [pc, #40]	; (80085fc <__libc_init_array+0x44>)
 80085d2:	1b64      	subs	r4, r4, r5
 80085d4:	10a4      	asrs	r4, r4, #2
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d105      	bne.n	80085e6 <__libc_init_array+0x2e>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e0:	4798      	blx	r3
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7ee      	b.n	80085c4 <__libc_init_array+0xc>
 80085e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ea:	4798      	blx	r3
 80085ec:	3601      	adds	r6, #1
 80085ee:	e7f2      	b.n	80085d6 <__libc_init_array+0x1e>
 80085f0:	080093ac 	.word	0x080093ac
 80085f4:	080093ac 	.word	0x080093ac
 80085f8:	080093ac 	.word	0x080093ac
 80085fc:	080093b0 	.word	0x080093b0

08008600 <__retarget_lock_acquire_recursive>:
 8008600:	4770      	bx	lr

08008602 <__retarget_lock_release_recursive>:
 8008602:	4770      	bx	lr

08008604 <memcpy>:
 8008604:	440a      	add	r2, r1
 8008606:	4291      	cmp	r1, r2
 8008608:	f100 33ff 	add.w	r3, r0, #4294967295
 800860c:	d100      	bne.n	8008610 <memcpy+0xc>
 800860e:	4770      	bx	lr
 8008610:	b510      	push	{r4, lr}
 8008612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008616:	4291      	cmp	r1, r2
 8008618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861c:	d1f9      	bne.n	8008612 <memcpy+0xe>
 800861e:	bd10      	pop	{r4, pc}

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d040      	beq.n	80086aa <_free_r+0x8a>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f8dc 	bl	80087f0 <__malloc_lock>
 8008638:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <_free_r+0x8c>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	b933      	cbnz	r3, 800864c <_free_r+0x2c>
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008648:	f000 b8d8 	b.w	80087fc <__malloc_unlock>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d908      	bls.n	8008662 <_free_r+0x42>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	1821      	adds	r1, r4, r0
 8008654:	428b      	cmp	r3, r1
 8008656:	bf01      	itttt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	1809      	addeq	r1, r1, r0
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	e7ed      	b.n	800863e <_free_r+0x1e>
 8008662:	461a      	mov	r2, r3
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b10b      	cbz	r3, 800866c <_free_r+0x4c>
 8008668:	42a3      	cmp	r3, r4
 800866a:	d9fa      	bls.n	8008662 <_free_r+0x42>
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	1850      	adds	r0, r2, r1
 8008670:	42a0      	cmp	r0, r4
 8008672:	d10b      	bne.n	800868c <_free_r+0x6c>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	4401      	add	r1, r0
 8008678:	1850      	adds	r0, r2, r1
 800867a:	4283      	cmp	r3, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	d1e0      	bne.n	8008642 <_free_r+0x22>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4408      	add	r0, r1
 8008686:	6010      	str	r0, [r2, #0]
 8008688:	6053      	str	r3, [r2, #4]
 800868a:	e7da      	b.n	8008642 <_free_r+0x22>
 800868c:	d902      	bls.n	8008694 <_free_r+0x74>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d6      	b.n	8008642 <_free_r+0x22>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6054      	str	r4, [r2, #4]
 80086a8:	e7cb      	b.n	8008642 <_free_r+0x22>
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20001904 	.word	0x20001904

080086b0 <sbrk_aligned>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4e0e      	ldr	r6, [pc, #56]	; (80086ec <sbrk_aligned+0x3c>)
 80086b4:	460c      	mov	r4, r1
 80086b6:	6831      	ldr	r1, [r6, #0]
 80086b8:	4605      	mov	r5, r0
 80086ba:	b911      	cbnz	r1, 80086c2 <sbrk_aligned+0x12>
 80086bc:	f000 fbaa 	bl	8008e14 <_sbrk_r>
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 fba5 	bl	8008e14 <_sbrk_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d00a      	beq.n	80086e4 <sbrk_aligned+0x34>
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d007      	beq.n	80086e8 <sbrk_aligned+0x38>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fb9a 	bl	8008e14 <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d101      	bne.n	80086e8 <sbrk_aligned+0x38>
 80086e4:	f04f 34ff 	mov.w	r4, #4294967295
 80086e8:	4620      	mov	r0, r4
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	20001908 	.word	0x20001908

080086f0 <_malloc_r>:
 80086f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4607      	mov	r7, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d905      	bls.n	8008718 <_malloc_r+0x28>
 800870c:	230c      	movs	r3, #12
 800870e:	2600      	movs	r6, #0
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4630      	mov	r0, r6
 8008714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087ec <_malloc_r+0xfc>
 800871c:	f000 f868 	bl	80087f0 <__malloc_lock>
 8008720:	f8d8 3000 	ldr.w	r3, [r8]
 8008724:	461c      	mov	r4, r3
 8008726:	bb5c      	cbnz	r4, 8008780 <_malloc_r+0x90>
 8008728:	4629      	mov	r1, r5
 800872a:	4638      	mov	r0, r7
 800872c:	f7ff ffc0 	bl	80086b0 <sbrk_aligned>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	4604      	mov	r4, r0
 8008734:	d155      	bne.n	80087e2 <_malloc_r+0xf2>
 8008736:	f8d8 4000 	ldr.w	r4, [r8]
 800873a:	4626      	mov	r6, r4
 800873c:	2e00      	cmp	r6, #0
 800873e:	d145      	bne.n	80087cc <_malloc_r+0xdc>
 8008740:	2c00      	cmp	r4, #0
 8008742:	d048      	beq.n	80087d6 <_malloc_r+0xe6>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	4631      	mov	r1, r6
 8008748:	4638      	mov	r0, r7
 800874a:	eb04 0903 	add.w	r9, r4, r3
 800874e:	f000 fb61 	bl	8008e14 <_sbrk_r>
 8008752:	4581      	cmp	r9, r0
 8008754:	d13f      	bne.n	80087d6 <_malloc_r+0xe6>
 8008756:	6821      	ldr	r1, [r4, #0]
 8008758:	4638      	mov	r0, r7
 800875a:	1a6d      	subs	r5, r5, r1
 800875c:	4629      	mov	r1, r5
 800875e:	f7ff ffa7 	bl	80086b0 <sbrk_aligned>
 8008762:	3001      	adds	r0, #1
 8008764:	d037      	beq.n	80087d6 <_malloc_r+0xe6>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	442b      	add	r3, r5
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	f8d8 3000 	ldr.w	r3, [r8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d038      	beq.n	80087e6 <_malloc_r+0xf6>
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	42a2      	cmp	r2, r4
 8008778:	d12b      	bne.n	80087d2 <_malloc_r+0xe2>
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	e00f      	b.n	80087a0 <_malloc_r+0xb0>
 8008780:	6822      	ldr	r2, [r4, #0]
 8008782:	1b52      	subs	r2, r2, r5
 8008784:	d41f      	bmi.n	80087c6 <_malloc_r+0xd6>
 8008786:	2a0b      	cmp	r2, #11
 8008788:	d917      	bls.n	80087ba <_malloc_r+0xca>
 800878a:	1961      	adds	r1, r4, r5
 800878c:	42a3      	cmp	r3, r4
 800878e:	6025      	str	r5, [r4, #0]
 8008790:	bf18      	it	ne
 8008792:	6059      	strne	r1, [r3, #4]
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	bf08      	it	eq
 8008798:	f8c8 1000 	streq.w	r1, [r8]
 800879c:	5162      	str	r2, [r4, r5]
 800879e:	604b      	str	r3, [r1, #4]
 80087a0:	4638      	mov	r0, r7
 80087a2:	f104 060b 	add.w	r6, r4, #11
 80087a6:	f000 f829 	bl	80087fc <__malloc_unlock>
 80087aa:	f026 0607 	bic.w	r6, r6, #7
 80087ae:	1d23      	adds	r3, r4, #4
 80087b0:	1af2      	subs	r2, r6, r3
 80087b2:	d0ae      	beq.n	8008712 <_malloc_r+0x22>
 80087b4:	1b9b      	subs	r3, r3, r6
 80087b6:	50a3      	str	r3, [r4, r2]
 80087b8:	e7ab      	b.n	8008712 <_malloc_r+0x22>
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	6862      	ldr	r2, [r4, #4]
 80087be:	d1dd      	bne.n	800877c <_malloc_r+0x8c>
 80087c0:	f8c8 2000 	str.w	r2, [r8]
 80087c4:	e7ec      	b.n	80087a0 <_malloc_r+0xb0>
 80087c6:	4623      	mov	r3, r4
 80087c8:	6864      	ldr	r4, [r4, #4]
 80087ca:	e7ac      	b.n	8008726 <_malloc_r+0x36>
 80087cc:	4634      	mov	r4, r6
 80087ce:	6876      	ldr	r6, [r6, #4]
 80087d0:	e7b4      	b.n	800873c <_malloc_r+0x4c>
 80087d2:	4613      	mov	r3, r2
 80087d4:	e7cc      	b.n	8008770 <_malloc_r+0x80>
 80087d6:	230c      	movs	r3, #12
 80087d8:	4638      	mov	r0, r7
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	f000 f80e 	bl	80087fc <__malloc_unlock>
 80087e0:	e797      	b.n	8008712 <_malloc_r+0x22>
 80087e2:	6025      	str	r5, [r4, #0]
 80087e4:	e7dc      	b.n	80087a0 <_malloc_r+0xb0>
 80087e6:	605b      	str	r3, [r3, #4]
 80087e8:	deff      	udf	#255	; 0xff
 80087ea:	bf00      	nop
 80087ec:	20001904 	.word	0x20001904

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__malloc_lock+0x8>)
 80087f2:	f7ff bf05 	b.w	8008600 <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	20001900 	.word	0x20001900

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__malloc_unlock+0x8>)
 80087fe:	f7ff bf00 	b.w	8008602 <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	20001900 	.word	0x20001900

08008808 <__ssputs_r>:
 8008808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800880c:	461f      	mov	r7, r3
 800880e:	688e      	ldr	r6, [r1, #8]
 8008810:	4682      	mov	sl, r0
 8008812:	42be      	cmp	r6, r7
 8008814:	460c      	mov	r4, r1
 8008816:	4690      	mov	r8, r2
 8008818:	680b      	ldr	r3, [r1, #0]
 800881a:	d82c      	bhi.n	8008876 <__ssputs_r+0x6e>
 800881c:	898a      	ldrh	r2, [r1, #12]
 800881e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008822:	d026      	beq.n	8008872 <__ssputs_r+0x6a>
 8008824:	6965      	ldr	r5, [r4, #20]
 8008826:	6909      	ldr	r1, [r1, #16]
 8008828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800882c:	eba3 0901 	sub.w	r9, r3, r1
 8008830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008834:	1c7b      	adds	r3, r7, #1
 8008836:	444b      	add	r3, r9
 8008838:	106d      	asrs	r5, r5, #1
 800883a:	429d      	cmp	r5, r3
 800883c:	bf38      	it	cc
 800883e:	461d      	movcc	r5, r3
 8008840:	0553      	lsls	r3, r2, #21
 8008842:	d527      	bpl.n	8008894 <__ssputs_r+0x8c>
 8008844:	4629      	mov	r1, r5
 8008846:	f7ff ff53 	bl	80086f0 <_malloc_r>
 800884a:	4606      	mov	r6, r0
 800884c:	b360      	cbz	r0, 80088a8 <__ssputs_r+0xa0>
 800884e:	464a      	mov	r2, r9
 8008850:	6921      	ldr	r1, [r4, #16]
 8008852:	f7ff fed7 	bl	8008604 <memcpy>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800885c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	6126      	str	r6, [r4, #16]
 8008864:	444e      	add	r6, r9
 8008866:	6026      	str	r6, [r4, #0]
 8008868:	463e      	mov	r6, r7
 800886a:	6165      	str	r5, [r4, #20]
 800886c:	eba5 0509 	sub.w	r5, r5, r9
 8008870:	60a5      	str	r5, [r4, #8]
 8008872:	42be      	cmp	r6, r7
 8008874:	d900      	bls.n	8008878 <__ssputs_r+0x70>
 8008876:	463e      	mov	r6, r7
 8008878:	4632      	mov	r2, r6
 800887a:	4641      	mov	r1, r8
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	f000 faaf 	bl	8008de0 <memmove>
 8008882:	2000      	movs	r0, #0
 8008884:	68a3      	ldr	r3, [r4, #8]
 8008886:	1b9b      	subs	r3, r3, r6
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	4433      	add	r3, r6
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008894:	462a      	mov	r2, r5
 8008896:	f000 fadb 	bl	8008e50 <_realloc_r>
 800889a:	4606      	mov	r6, r0
 800889c:	2800      	cmp	r0, #0
 800889e:	d1e0      	bne.n	8008862 <__ssputs_r+0x5a>
 80088a0:	4650      	mov	r0, sl
 80088a2:	6921      	ldr	r1, [r4, #16]
 80088a4:	f7ff febc 	bl	8008620 <_free_r>
 80088a8:	230c      	movs	r3, #12
 80088aa:	f8ca 3000 	str.w	r3, [sl]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	e7e9      	b.n	8008890 <__ssputs_r+0x88>

080088bc <_svfiprintf_r>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	4698      	mov	r8, r3
 80088c2:	898b      	ldrh	r3, [r1, #12]
 80088c4:	4607      	mov	r7, r0
 80088c6:	061b      	lsls	r3, r3, #24
 80088c8:	460d      	mov	r5, r1
 80088ca:	4614      	mov	r4, r2
 80088cc:	b09d      	sub	sp, #116	; 0x74
 80088ce:	d50e      	bpl.n	80088ee <_svfiprintf_r+0x32>
 80088d0:	690b      	ldr	r3, [r1, #16]
 80088d2:	b963      	cbnz	r3, 80088ee <_svfiprintf_r+0x32>
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	f7ff ff0b 	bl	80086f0 <_malloc_r>
 80088da:	6028      	str	r0, [r5, #0]
 80088dc:	6128      	str	r0, [r5, #16]
 80088de:	b920      	cbnz	r0, 80088ea <_svfiprintf_r+0x2e>
 80088e0:	230c      	movs	r3, #12
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e0d0      	b.n	8008a8c <_svfiprintf_r+0x1d0>
 80088ea:	2340      	movs	r3, #64	; 0x40
 80088ec:	616b      	str	r3, [r5, #20]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9309      	str	r3, [sp, #36]	; 0x24
 80088f2:	2320      	movs	r3, #32
 80088f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088f8:	2330      	movs	r3, #48	; 0x30
 80088fa:	f04f 0901 	mov.w	r9, #1
 80088fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008902:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008aa4 <_svfiprintf_r+0x1e8>
 8008906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800890a:	4623      	mov	r3, r4
 800890c:	469a      	mov	sl, r3
 800890e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008912:	b10a      	cbz	r2, 8008918 <_svfiprintf_r+0x5c>
 8008914:	2a25      	cmp	r2, #37	; 0x25
 8008916:	d1f9      	bne.n	800890c <_svfiprintf_r+0x50>
 8008918:	ebba 0b04 	subs.w	fp, sl, r4
 800891c:	d00b      	beq.n	8008936 <_svfiprintf_r+0x7a>
 800891e:	465b      	mov	r3, fp
 8008920:	4622      	mov	r2, r4
 8008922:	4629      	mov	r1, r5
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff ff6f 	bl	8008808 <__ssputs_r>
 800892a:	3001      	adds	r0, #1
 800892c:	f000 80a9 	beq.w	8008a82 <_svfiprintf_r+0x1c6>
 8008930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008932:	445a      	add	r2, fp
 8008934:	9209      	str	r2, [sp, #36]	; 0x24
 8008936:	f89a 3000 	ldrb.w	r3, [sl]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80a1 	beq.w	8008a82 <_svfiprintf_r+0x1c6>
 8008940:	2300      	movs	r3, #0
 8008942:	f04f 32ff 	mov.w	r2, #4294967295
 8008946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800894a:	f10a 0a01 	add.w	sl, sl, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008956:	931a      	str	r3, [sp, #104]	; 0x68
 8008958:	4654      	mov	r4, sl
 800895a:	2205      	movs	r2, #5
 800895c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008960:	4850      	ldr	r0, [pc, #320]	; (8008aa4 <_svfiprintf_r+0x1e8>)
 8008962:	f000 fa67 	bl	8008e34 <memchr>
 8008966:	9a04      	ldr	r2, [sp, #16]
 8008968:	b9d8      	cbnz	r0, 80089a2 <_svfiprintf_r+0xe6>
 800896a:	06d0      	lsls	r0, r2, #27
 800896c:	bf44      	itt	mi
 800896e:	2320      	movmi	r3, #32
 8008970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008974:	0711      	lsls	r1, r2, #28
 8008976:	bf44      	itt	mi
 8008978:	232b      	movmi	r3, #43	; 0x2b
 800897a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800897e:	f89a 3000 	ldrb.w	r3, [sl]
 8008982:	2b2a      	cmp	r3, #42	; 0x2a
 8008984:	d015      	beq.n	80089b2 <_svfiprintf_r+0xf6>
 8008986:	4654      	mov	r4, sl
 8008988:	2000      	movs	r0, #0
 800898a:	f04f 0c0a 	mov.w	ip, #10
 800898e:	9a07      	ldr	r2, [sp, #28]
 8008990:	4621      	mov	r1, r4
 8008992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008996:	3b30      	subs	r3, #48	; 0x30
 8008998:	2b09      	cmp	r3, #9
 800899a:	d94d      	bls.n	8008a38 <_svfiprintf_r+0x17c>
 800899c:	b1b0      	cbz	r0, 80089cc <_svfiprintf_r+0x110>
 800899e:	9207      	str	r2, [sp, #28]
 80089a0:	e014      	b.n	80089cc <_svfiprintf_r+0x110>
 80089a2:	eba0 0308 	sub.w	r3, r0, r8
 80089a6:	fa09 f303 	lsl.w	r3, r9, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	46a2      	mov	sl, r4
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	e7d2      	b.n	8008958 <_svfiprintf_r+0x9c>
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	1d19      	adds	r1, r3, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	9103      	str	r1, [sp, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	bfbb      	ittet	lt
 80089be:	425b      	neglt	r3, r3
 80089c0:	f042 0202 	orrlt.w	r2, r2, #2
 80089c4:	9307      	strge	r3, [sp, #28]
 80089c6:	9307      	strlt	r3, [sp, #28]
 80089c8:	bfb8      	it	lt
 80089ca:	9204      	strlt	r2, [sp, #16]
 80089cc:	7823      	ldrb	r3, [r4, #0]
 80089ce:	2b2e      	cmp	r3, #46	; 0x2e
 80089d0:	d10c      	bne.n	80089ec <_svfiprintf_r+0x130>
 80089d2:	7863      	ldrb	r3, [r4, #1]
 80089d4:	2b2a      	cmp	r3, #42	; 0x2a
 80089d6:	d134      	bne.n	8008a42 <_svfiprintf_r+0x186>
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	3402      	adds	r4, #2
 80089dc:	1d1a      	adds	r2, r3, #4
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	9203      	str	r2, [sp, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bfb8      	it	lt
 80089e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ea:	9305      	str	r3, [sp, #20]
 80089ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008aa8 <_svfiprintf_r+0x1ec>
 80089f0:	2203      	movs	r2, #3
 80089f2:	4650      	mov	r0, sl
 80089f4:	7821      	ldrb	r1, [r4, #0]
 80089f6:	f000 fa1d 	bl	8008e34 <memchr>
 80089fa:	b138      	cbz	r0, 8008a0c <_svfiprintf_r+0x150>
 80089fc:	2240      	movs	r2, #64	; 0x40
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	eba0 000a 	sub.w	r0, r0, sl
 8008a04:	4082      	lsls	r2, r0
 8008a06:	4313      	orrs	r3, r2
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a10:	2206      	movs	r2, #6
 8008a12:	4826      	ldr	r0, [pc, #152]	; (8008aac <_svfiprintf_r+0x1f0>)
 8008a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a18:	f000 fa0c 	bl	8008e34 <memchr>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d038      	beq.n	8008a92 <_svfiprintf_r+0x1d6>
 8008a20:	4b23      	ldr	r3, [pc, #140]	; (8008ab0 <_svfiprintf_r+0x1f4>)
 8008a22:	bb1b      	cbnz	r3, 8008a6c <_svfiprintf_r+0x1b0>
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	3307      	adds	r3, #7
 8008a28:	f023 0307 	bic.w	r3, r3, #7
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	4433      	add	r3, r6
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	e768      	b.n	800890a <_svfiprintf_r+0x4e>
 8008a38:	460c      	mov	r4, r1
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a40:	e7a6      	b.n	8008990 <_svfiprintf_r+0xd4>
 8008a42:	2300      	movs	r3, #0
 8008a44:	f04f 0c0a 	mov.w	ip, #10
 8008a48:	4619      	mov	r1, r3
 8008a4a:	3401      	adds	r4, #1
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a54:	3a30      	subs	r2, #48	; 0x30
 8008a56:	2a09      	cmp	r2, #9
 8008a58:	d903      	bls.n	8008a62 <_svfiprintf_r+0x1a6>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0c6      	beq.n	80089ec <_svfiprintf_r+0x130>
 8008a5e:	9105      	str	r1, [sp, #20]
 8008a60:	e7c4      	b.n	80089ec <_svfiprintf_r+0x130>
 8008a62:	4604      	mov	r4, r0
 8008a64:	2301      	movs	r3, #1
 8008a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a6a:	e7f0      	b.n	8008a4e <_svfiprintf_r+0x192>
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	462a      	mov	r2, r5
 8008a72:	4638      	mov	r0, r7
 8008a74:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a76:	a904      	add	r1, sp, #16
 8008a78:	f3af 8000 	nop.w
 8008a7c:	1c42      	adds	r2, r0, #1
 8008a7e:	4606      	mov	r6, r0
 8008a80:	d1d6      	bne.n	8008a30 <_svfiprintf_r+0x174>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	065b      	lsls	r3, r3, #25
 8008a86:	f53f af2d 	bmi.w	80088e4 <_svfiprintf_r+0x28>
 8008a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8c:	b01d      	add	sp, #116	; 0x74
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	462a      	mov	r2, r5
 8008a98:	4638      	mov	r0, r7
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <_svfiprintf_r+0x1f8>)
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	f000 f87d 	bl	8008b9c <_printf_i>
 8008aa2:	e7eb      	b.n	8008a7c <_svfiprintf_r+0x1c0>
 8008aa4:	08009370 	.word	0x08009370
 8008aa8:	08009376 	.word	0x08009376
 8008aac:	0800937a 	.word	0x0800937a
 8008ab0:	00000000 	.word	0x00000000
 8008ab4:	08008809 	.word	0x08008809

08008ab8 <_printf_common>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	4616      	mov	r6, r2
 8008abe:	4699      	mov	r9, r3
 8008ac0:	688a      	ldr	r2, [r1, #8]
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bfb8      	it	lt
 8008aca:	4613      	movlt	r3, r2
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad8:	b10a      	cbz	r2, 8008ade <_printf_common+0x26>
 8008ada:	3301      	adds	r3, #1
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	0699      	lsls	r1, r3, #26
 8008ae2:	bf42      	ittt	mi
 8008ae4:	6833      	ldrmi	r3, [r6, #0]
 8008ae6:	3302      	addmi	r3, #2
 8008ae8:	6033      	strmi	r3, [r6, #0]
 8008aea:	6825      	ldr	r5, [r4, #0]
 8008aec:	f015 0506 	ands.w	r5, r5, #6
 8008af0:	d106      	bne.n	8008b00 <_printf_common+0x48>
 8008af2:	f104 0a19 	add.w	sl, r4, #25
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	6832      	ldr	r2, [r6, #0]
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dc2b      	bgt.n	8008b58 <_printf_common+0xa0>
 8008b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b04:	1e13      	subs	r3, r2, #0
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	2301      	movne	r3, #1
 8008b0c:	0692      	lsls	r2, r2, #26
 8008b0e:	d430      	bmi.n	8008b72 <_printf_common+0xba>
 8008b10:	4649      	mov	r1, r9
 8008b12:	4638      	mov	r0, r7
 8008b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b18:	47c0      	blx	r8
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d023      	beq.n	8008b66 <_printf_common+0xae>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	f003 0306 	and.w	r3, r3, #6
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	bf14      	ite	ne
 8008b2a:	2500      	movne	r5, #0
 8008b2c:	6833      	ldreq	r3, [r6, #0]
 8008b2e:	f04f 0600 	mov.w	r6, #0
 8008b32:	bf08      	it	eq
 8008b34:	68e5      	ldreq	r5, [r4, #12]
 8008b36:	f104 041a 	add.w	r4, r4, #26
 8008b3a:	bf08      	it	eq
 8008b3c:	1aed      	subeq	r5, r5, r3
 8008b3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b42:	bf08      	it	eq
 8008b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfc4      	itt	gt
 8008b4c:	1a9b      	subgt	r3, r3, r2
 8008b4e:	18ed      	addgt	r5, r5, r3
 8008b50:	42b5      	cmp	r5, r6
 8008b52:	d11a      	bne.n	8008b8a <_printf_common+0xd2>
 8008b54:	2000      	movs	r0, #0
 8008b56:	e008      	b.n	8008b6a <_printf_common+0xb2>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	4638      	mov	r0, r7
 8008b60:	47c0      	blx	r8
 8008b62:	3001      	adds	r0, #1
 8008b64:	d103      	bne.n	8008b6e <_printf_common+0xb6>
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	3501      	adds	r5, #1
 8008b70:	e7c1      	b.n	8008af6 <_printf_common+0x3e>
 8008b72:	2030      	movs	r0, #48	; 0x30
 8008b74:	18e1      	adds	r1, r4, r3
 8008b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b80:	4422      	add	r2, r4
 8008b82:	3302      	adds	r3, #2
 8008b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b88:	e7c2      	b.n	8008b10 <_printf_common+0x58>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c0      	blx	r8
 8008b94:	3001      	adds	r0, #1
 8008b96:	d0e6      	beq.n	8008b66 <_printf_common+0xae>
 8008b98:	3601      	adds	r6, #1
 8008b9a:	e7d9      	b.n	8008b50 <_printf_common+0x98>

08008b9c <_printf_i>:
 8008b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	7e0f      	ldrb	r7, [r1, #24]
 8008ba2:	4691      	mov	r9, r2
 8008ba4:	2f78      	cmp	r7, #120	; 0x78
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	469a      	mov	sl, r3
 8008bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb2:	d807      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bb4:	2f62      	cmp	r7, #98	; 0x62
 8008bb6:	d80a      	bhi.n	8008bce <_printf_i+0x32>
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f000 80d5 	beq.w	8008d68 <_printf_i+0x1cc>
 8008bbe:	2f58      	cmp	r7, #88	; 0x58
 8008bc0:	f000 80c1 	beq.w	8008d46 <_printf_i+0x1aa>
 8008bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bcc:	e03a      	b.n	8008c44 <_printf_i+0xa8>
 8008bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd2:	2b15      	cmp	r3, #21
 8008bd4:	d8f6      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bd6:	a101      	add	r1, pc, #4	; (adr r1, 8008bdc <_printf_i+0x40>)
 8008bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bdc:	08008c35 	.word	0x08008c35
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	08008bc5 	.word	0x08008bc5
 8008be8:	08008bc5 	.word	0x08008bc5
 8008bec:	08008bc5 	.word	0x08008bc5
 8008bf0:	08008bc5 	.word	0x08008bc5
 8008bf4:	08008c49 	.word	0x08008c49
 8008bf8:	08008bc5 	.word	0x08008bc5
 8008bfc:	08008bc5 	.word	0x08008bc5
 8008c00:	08008bc5 	.word	0x08008bc5
 8008c04:	08008bc5 	.word	0x08008bc5
 8008c08:	08008d4f 	.word	0x08008d4f
 8008c0c:	08008c75 	.word	0x08008c75
 8008c10:	08008d09 	.word	0x08008d09
 8008c14:	08008bc5 	.word	0x08008bc5
 8008c18:	08008bc5 	.word	0x08008bc5
 8008c1c:	08008d71 	.word	0x08008d71
 8008c20:	08008bc5 	.word	0x08008bc5
 8008c24:	08008c75 	.word	0x08008c75
 8008c28:	08008bc5 	.word	0x08008bc5
 8008c2c:	08008bc5 	.word	0x08008bc5
 8008c30:	08008d11 	.word	0x08008d11
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	602a      	str	r2, [r5, #0]
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0a0      	b.n	8008d8a <_printf_i+0x1ee>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	0607      	lsls	r7, r0, #24
 8008c4e:	f103 0104 	add.w	r1, r3, #4
 8008c52:	6029      	str	r1, [r5, #0]
 8008c54:	d501      	bpl.n	8008c5a <_printf_i+0xbe>
 8008c56:	681e      	ldr	r6, [r3, #0]
 8008c58:	e003      	b.n	8008c62 <_printf_i+0xc6>
 8008c5a:	0646      	lsls	r6, r0, #25
 8008c5c:	d5fb      	bpl.n	8008c56 <_printf_i+0xba>
 8008c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	da03      	bge.n	8008c6e <_printf_i+0xd2>
 8008c66:	232d      	movs	r3, #45	; 0x2d
 8008c68:	4276      	negs	r6, r6
 8008c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6e:	230a      	movs	r3, #10
 8008c70:	4859      	ldr	r0, [pc, #356]	; (8008dd8 <_printf_i+0x23c>)
 8008c72:	e012      	b.n	8008c9a <_printf_i+0xfe>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	6820      	ldr	r0, [r4, #0]
 8008c78:	1d19      	adds	r1, r3, #4
 8008c7a:	6029      	str	r1, [r5, #0]
 8008c7c:	0605      	lsls	r5, r0, #24
 8008c7e:	d501      	bpl.n	8008c84 <_printf_i+0xe8>
 8008c80:	681e      	ldr	r6, [r3, #0]
 8008c82:	e002      	b.n	8008c8a <_printf_i+0xee>
 8008c84:	0641      	lsls	r1, r0, #25
 8008c86:	d5fb      	bpl.n	8008c80 <_printf_i+0xe4>
 8008c88:	881e      	ldrh	r6, [r3, #0]
 8008c8a:	2f6f      	cmp	r7, #111	; 0x6f
 8008c8c:	bf0c      	ite	eq
 8008c8e:	2308      	moveq	r3, #8
 8008c90:	230a      	movne	r3, #10
 8008c92:	4851      	ldr	r0, [pc, #324]	; (8008dd8 <_printf_i+0x23c>)
 8008c94:	2100      	movs	r1, #0
 8008c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c9a:	6865      	ldr	r5, [r4, #4]
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	bfa8      	it	ge
 8008ca0:	6821      	ldrge	r1, [r4, #0]
 8008ca2:	60a5      	str	r5, [r4, #8]
 8008ca4:	bfa4      	itt	ge
 8008ca6:	f021 0104 	bicge.w	r1, r1, #4
 8008caa:	6021      	strge	r1, [r4, #0]
 8008cac:	b90e      	cbnz	r6, 8008cb2 <_printf_i+0x116>
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	d04b      	beq.n	8008d4a <_printf_i+0x1ae>
 8008cb2:	4615      	mov	r5, r2
 8008cb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cb8:	fb03 6711 	mls	r7, r3, r1, r6
 8008cbc:	5dc7      	ldrb	r7, [r0, r7]
 8008cbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc2:	4637      	mov	r7, r6
 8008cc4:	42bb      	cmp	r3, r7
 8008cc6:	460e      	mov	r6, r1
 8008cc8:	d9f4      	bls.n	8008cb4 <_printf_i+0x118>
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d10b      	bne.n	8008ce6 <_printf_i+0x14a>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	07de      	lsls	r6, r3, #31
 8008cd2:	d508      	bpl.n	8008ce6 <_printf_i+0x14a>
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	6861      	ldr	r1, [r4, #4]
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	bfde      	ittt	le
 8008cdc:	2330      	movle	r3, #48	; 0x30
 8008cde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ce6:	1b52      	subs	r2, r2, r5
 8008ce8:	6122      	str	r2, [r4, #16]
 8008cea:	464b      	mov	r3, r9
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	aa03      	add	r2, sp, #12
 8008cf6:	f7ff fedf 	bl	8008ab8 <_printf_common>
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d14a      	bne.n	8008d94 <_printf_i+0x1f8>
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	b004      	add	sp, #16
 8008d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f043 0320 	orr.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	2778      	movs	r7, #120	; 0x78
 8008d12:	4832      	ldr	r0, [pc, #200]	; (8008ddc <_printf_i+0x240>)
 8008d14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	6829      	ldr	r1, [r5, #0]
 8008d1c:	061f      	lsls	r7, r3, #24
 8008d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d22:	d402      	bmi.n	8008d2a <_printf_i+0x18e>
 8008d24:	065f      	lsls	r7, r3, #25
 8008d26:	bf48      	it	mi
 8008d28:	b2b6      	uxthmi	r6, r6
 8008d2a:	07df      	lsls	r7, r3, #31
 8008d2c:	bf48      	it	mi
 8008d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d32:	6029      	str	r1, [r5, #0]
 8008d34:	bf48      	it	mi
 8008d36:	6023      	strmi	r3, [r4, #0]
 8008d38:	b91e      	cbnz	r6, 8008d42 <_printf_i+0x1a6>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f023 0320 	bic.w	r3, r3, #32
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	2310      	movs	r3, #16
 8008d44:	e7a6      	b.n	8008c94 <_printf_i+0xf8>
 8008d46:	4824      	ldr	r0, [pc, #144]	; (8008dd8 <_printf_i+0x23c>)
 8008d48:	e7e4      	b.n	8008d14 <_printf_i+0x178>
 8008d4a:	4615      	mov	r5, r2
 8008d4c:	e7bd      	b.n	8008cca <_printf_i+0x12e>
 8008d4e:	682b      	ldr	r3, [r5, #0]
 8008d50:	6826      	ldr	r6, [r4, #0]
 8008d52:	1d18      	adds	r0, r3, #4
 8008d54:	6961      	ldr	r1, [r4, #20]
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	0635      	lsls	r5, r6, #24
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	d501      	bpl.n	8008d62 <_printf_i+0x1c6>
 8008d5e:	6019      	str	r1, [r3, #0]
 8008d60:	e002      	b.n	8008d68 <_printf_i+0x1cc>
 8008d62:	0670      	lsls	r0, r6, #25
 8008d64:	d5fb      	bpl.n	8008d5e <_printf_i+0x1c2>
 8008d66:	8019      	strh	r1, [r3, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4615      	mov	r5, r2
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	e7bc      	b.n	8008cea <_printf_i+0x14e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	2100      	movs	r1, #0
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	602a      	str	r2, [r5, #0]
 8008d78:	681d      	ldr	r5, [r3, #0]
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f000 f859 	bl	8008e34 <memchr>
 8008d82:	b108      	cbz	r0, 8008d88 <_printf_i+0x1ec>
 8008d84:	1b40      	subs	r0, r0, r5
 8008d86:	6060      	str	r0, [r4, #4]
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d92:	e7aa      	b.n	8008cea <_printf_i+0x14e>
 8008d94:	462a      	mov	r2, r5
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	47d0      	blx	sl
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d0ad      	beq.n	8008cfe <_printf_i+0x162>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	079b      	lsls	r3, r3, #30
 8008da6:	d413      	bmi.n	8008dd0 <_printf_i+0x234>
 8008da8:	68e0      	ldr	r0, [r4, #12]
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	4298      	cmp	r0, r3
 8008dae:	bfb8      	it	lt
 8008db0:	4618      	movlt	r0, r3
 8008db2:	e7a6      	b.n	8008d02 <_printf_i+0x166>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4632      	mov	r2, r6
 8008db8:	4649      	mov	r1, r9
 8008dba:	4640      	mov	r0, r8
 8008dbc:	47d0      	blx	sl
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d09d      	beq.n	8008cfe <_printf_i+0x162>
 8008dc2:	3501      	adds	r5, #1
 8008dc4:	68e3      	ldr	r3, [r4, #12]
 8008dc6:	9903      	ldr	r1, [sp, #12]
 8008dc8:	1a5b      	subs	r3, r3, r1
 8008dca:	42ab      	cmp	r3, r5
 8008dcc:	dcf2      	bgt.n	8008db4 <_printf_i+0x218>
 8008dce:	e7eb      	b.n	8008da8 <_printf_i+0x20c>
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	f104 0619 	add.w	r6, r4, #25
 8008dd6:	e7f5      	b.n	8008dc4 <_printf_i+0x228>
 8008dd8:	08009381 	.word	0x08009381
 8008ddc:	08009392 	.word	0x08009392

08008de0 <memmove>:
 8008de0:	4288      	cmp	r0, r1
 8008de2:	b510      	push	{r4, lr}
 8008de4:	eb01 0402 	add.w	r4, r1, r2
 8008de8:	d902      	bls.n	8008df0 <memmove+0x10>
 8008dea:	4284      	cmp	r4, r0
 8008dec:	4623      	mov	r3, r4
 8008dee:	d807      	bhi.n	8008e00 <memmove+0x20>
 8008df0:	1e43      	subs	r3, r0, #1
 8008df2:	42a1      	cmp	r1, r4
 8008df4:	d008      	beq.n	8008e08 <memmove+0x28>
 8008df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dfe:	e7f8      	b.n	8008df2 <memmove+0x12>
 8008e00:	4601      	mov	r1, r0
 8008e02:	4402      	add	r2, r0
 8008e04:	428a      	cmp	r2, r1
 8008e06:	d100      	bne.n	8008e0a <memmove+0x2a>
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e12:	e7f7      	b.n	8008e04 <memmove+0x24>

08008e14 <_sbrk_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	2300      	movs	r3, #0
 8008e18:	4d05      	ldr	r5, [pc, #20]	; (8008e30 <_sbrk_r+0x1c>)
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	f7f8 f9ec 	bl	80011fc <_sbrk>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_sbrk_r+0x1a>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_sbrk_r+0x1a>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	200018fc 	.word	0x200018fc

08008e34 <memchr>:
 8008e34:	4603      	mov	r3, r0
 8008e36:	b510      	push	{r4, lr}
 8008e38:	b2c9      	uxtb	r1, r1
 8008e3a:	4402      	add	r2, r0
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	d101      	bne.n	8008e46 <memchr+0x12>
 8008e42:	2000      	movs	r0, #0
 8008e44:	e003      	b.n	8008e4e <memchr+0x1a>
 8008e46:	7804      	ldrb	r4, [r0, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	428c      	cmp	r4, r1
 8008e4c:	d1f6      	bne.n	8008e3c <memchr+0x8>
 8008e4e:	bd10      	pop	{r4, pc}

08008e50 <_realloc_r>:
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	4680      	mov	r8, r0
 8008e56:	4614      	mov	r4, r2
 8008e58:	460e      	mov	r6, r1
 8008e5a:	b921      	cbnz	r1, 8008e66 <_realloc_r+0x16>
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	f7ff bc45 	b.w	80086f0 <_malloc_r>
 8008e66:	b92a      	cbnz	r2, 8008e74 <_realloc_r+0x24>
 8008e68:	f7ff fbda 	bl	8008620 <_free_r>
 8008e6c:	4625      	mov	r5, r4
 8008e6e:	4628      	mov	r0, r5
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	f000 f81b 	bl	8008eae <_malloc_usable_size_r>
 8008e78:	4284      	cmp	r4, r0
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	d802      	bhi.n	8008e84 <_realloc_r+0x34>
 8008e7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e82:	d812      	bhi.n	8008eaa <_realloc_r+0x5a>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4640      	mov	r0, r8
 8008e88:	f7ff fc32 	bl	80086f0 <_malloc_r>
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d0ed      	beq.n	8008e6e <_realloc_r+0x1e>
 8008e92:	42bc      	cmp	r4, r7
 8008e94:	4622      	mov	r2, r4
 8008e96:	4631      	mov	r1, r6
 8008e98:	bf28      	it	cs
 8008e9a:	463a      	movcs	r2, r7
 8008e9c:	f7ff fbb2 	bl	8008604 <memcpy>
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	f7ff fbbc 	bl	8008620 <_free_r>
 8008ea8:	e7e1      	b.n	8008e6e <_realloc_r+0x1e>
 8008eaa:	4635      	mov	r5, r6
 8008eac:	e7df      	b.n	8008e6e <_realloc_r+0x1e>

08008eae <_malloc_usable_size_r>:
 8008eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb2:	1f18      	subs	r0, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfbc      	itt	lt
 8008eb8:	580b      	ldrlt	r3, [r1, r0]
 8008eba:	18c0      	addlt	r0, r0, r3
 8008ebc:	4770      	bx	lr
	...

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	bf00      	nop
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
