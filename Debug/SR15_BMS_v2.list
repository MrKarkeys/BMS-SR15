
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094c4  080094c4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094cc  080094cc  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d0  080094d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080094d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200001cc  080096a0  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  080096a0  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019905  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004814  00000000  00000000  00039b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001285  00000000  00000000  0003fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002392f  00000000  00000000  00040e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f86c  00000000  00000000  00064744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0833  00000000  00000000  00083fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069bc  00000000  00000000  001447e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08008fc8 	.word	0x08008fc8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001d0 	.word	0x200001d0
 8000220:	08008fc8 	.word	0x08008fc8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b972 	b.w	8000530 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14c      	bne.n	800030e <__udivmoddi4+0xaa>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d967      	bls.n	800034a <__udivmoddi4+0xe6>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b153      	cbz	r3, 8000296 <__udivmoddi4+0x32>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	fa01 fe03 	lsl.w	lr, r1, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	ea42 0e0e 	orr.w	lr, r2, lr
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fbbe f1f7 	udiv	r1, lr, r7
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fb07 ee11 	mls	lr, r7, r1, lr
 80002a6:	fb01 f005 	mul.w	r0, r1, r5
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x66>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80002bc:	f080 8119 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8116 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d0:	fb07 2210 	mls	r2, r7, r0, r2
 80002d4:	fb00 f505 	mul.w	r5, r0, r5
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8104 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8101 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa6>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xc0>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ea 	beq.w	80004ec <__udivmoddi4+0x288>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d148      	bne.n	80003be <__udivmoddi4+0x15a>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xd2>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2c2>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4696      	mov	lr, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa6>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa6>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xea>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 808e 	bne.w	8000474 <__udivmoddi4+0x210>
 8000358:	1a88      	subs	r0, r1, r2
 800035a:	2101      	movs	r1, #1
 800035c:	0c17      	lsrs	r7, r2, #16
 800035e:	fa1f fe82 	uxth.w	lr, r2
 8000362:	fbb0 f5f7 	udiv	r5, r0, r7
 8000366:	fb07 0015 	mls	r0, r7, r5, r0
 800036a:	0c22      	lsrs	r2, r4, #16
 800036c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000370:	fb0e f005 	mul.w	r0, lr, r5
 8000374:	4290      	cmp	r0, r2
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x126>
 8000378:	eb1c 0202 	adds.w	r2, ip, r2
 800037c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4290      	cmp	r0, r2
 8000384:	f200 80cc 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 8000388:	4645      	mov	r5, r8
 800038a:	1a12      	subs	r2, r2, r0
 800038c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000390:	fb07 2210 	mls	r2, r7, r0, r2
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039e:	45a6      	cmp	lr, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4610      	mov	r0, r2
 80003b4:	eba4 040e 	sub.w	r4, r4, lr
 80003b8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003bc:	e7a0      	b.n	8000300 <__udivmoddi4+0x9c>
 80003be:	f1c1 0720 	rsb	r7, r1, #32
 80003c2:	408b      	lsls	r3, r1
 80003c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80003cc:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	fbba f8f9 	udiv	r8, sl, r9
 80003d8:	408d      	lsls	r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	432b      	orrs	r3, r5
 80003e8:	fa00 f501 	lsl.w	r5, r0, r1
 80003ec:	fb08 f00e 	mul.w	r0, r8, lr
 80003f0:	0c1c      	lsrs	r4, r3, #16
 80003f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f6:	42a0      	cmp	r0, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	d90b      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	f080 8086 	bcs.w	8000516 <__udivmoddi4+0x2b2>
 800040a:	42a0      	cmp	r0, r4
 800040c:	f240 8083 	bls.w	8000516 <__udivmoddi4+0x2b2>
 8000410:	f1a8 0802 	sub.w	r8, r8, #2
 8000414:	4464      	add	r4, ip
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	b298      	uxth	r0, r3
 800041a:	fbb4 f3f9 	udiv	r3, r4, r9
 800041e:	fb09 4413 	mls	r4, r9, r3, r4
 8000422:	fb03 fe0e 	mul.w	lr, r3, lr
 8000426:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800042a:	45a6      	cmp	lr, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f103 30ff 	add.w	r0, r3, #4294967295
 8000436:	d26a      	bcs.n	800050e <__udivmoddi4+0x2aa>
 8000438:	45a6      	cmp	lr, r4
 800043a:	d968      	bls.n	800050e <__udivmoddi4+0x2aa>
 800043c:	3b02      	subs	r3, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000444:	fba0 9302 	umull	r9, r3, r0, r2
 8000448:	eba4 040e 	sub.w	r4, r4, lr
 800044c:	429c      	cmp	r4, r3
 800044e:	46c8      	mov	r8, r9
 8000450:	469e      	mov	lr, r3
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d067      	beq.n	800052a <__udivmoddi4+0x2c6>
 800045a:	ebb5 0308 	subs.w	r3, r5, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	40cb      	lsrs	r3, r1
 8000464:	fa04 f707 	lsl.w	r7, r4, r7
 8000468:	431f      	orrs	r7, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e74a      	b.n	800030a <__udivmoddi4+0xa6>
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	f1c3 0020 	rsb	r0, r3, #32
 800047c:	40c1      	lsrs	r1, r0
 800047e:	409d      	lsls	r5, r3
 8000480:	fa24 f000 	lsr.w	r0, r4, r0
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	4328      	orrs	r0, r5
 800048a:	fbb1 f5f7 	udiv	r5, r1, r7
 800048e:	fb07 1115 	mls	r1, r7, r5, r1
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	0c02      	lsrs	r2, r0, #16
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	fa04 f403 	lsl.w	r4, r4, r3
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x256>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d22f      	bcs.n	8000512 <__udivmoddi4+0x2ae>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d92d      	bls.n	8000512 <__udivmoddi4+0x2ae>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	fbb2 f1f7 	udiv	r1, r2, r7
 80004c0:	fb07 2211 	mls	r2, r7, r1, r2
 80004c4:	b280      	uxth	r0, r0
 80004c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80004ca:	fb01 f20e 	mul.w	r2, r1, lr
 80004ce:	4282      	cmp	r2, r0
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x280>
 80004d2:	eb1c 0000 	adds.w	r0, ip, r0
 80004d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004da:	d216      	bcs.n	800050a <__udivmoddi4+0x2a6>
 80004dc:	4282      	cmp	r2, r0
 80004de:	d914      	bls.n	800050a <__udivmoddi4+0x2a6>
 80004e0:	3902      	subs	r1, #2
 80004e2:	4460      	add	r0, ip
 80004e4:	1a80      	subs	r0, r0, r2
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4631      	mov	r1, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e70b      	b.n	800030a <__udivmoddi4+0xa6>
 80004f2:	4671      	mov	r1, lr
 80004f4:	e6e9      	b.n	80002ca <__udivmoddi4+0x66>
 80004f6:	4610      	mov	r0, r2
 80004f8:	e6fe      	b.n	80002f8 <__udivmoddi4+0x94>
 80004fa:	454d      	cmp	r5, r9
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb9 0802 	subs.w	r8, r9, r2
 8000502:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a5      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050a:	4641      	mov	r1, r8
 800050c:	e7ea      	b.n	80004e4 <__udivmoddi4+0x280>
 800050e:	4603      	mov	r3, r0
 8000510:	e796      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000512:	4645      	mov	r5, r8
 8000514:	e7d1      	b.n	80004ba <__udivmoddi4+0x256>
 8000516:	46d0      	mov	r8, sl
 8000518:	e77d      	b.n	8000416 <__udivmoddi4+0x1b2>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e731      	b.n	800038a <__udivmoddi4+0x126>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xdc>
 800052a:	4631      	mov	r1, r6
 800052c:	e6ed      	b.n	800030a <__udivmoddi4+0xa6>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LTC_PEC15_Calc>:
                                            };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate a PEC
                   )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8000540:	2310      	movs	r3, #16
 8000542:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
 8000548:	e018      	b.n	800057c <LTC_PEC15_Calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	09db      	lsrs	r3, r3, #7
 800054e:	b29a      	uxth	r2, r3
 8000550:	7b7b      	ldrb	r3, [r7, #13]
 8000552:	6839      	ldr	r1, [r7, #0]
 8000554:	440b      	add	r3, r1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b29b      	uxth	r3, r3
 800055a:	4053      	eors	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	b2db      	uxtb	r3, r3
 8000560:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	021b      	lsls	r3, r3, #8
 8000566:	b29a      	uxth	r2, r3
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	490a      	ldr	r1, [pc, #40]	; (8000594 <LTC_PEC15_Calc+0x60>)
 800056c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000570:	b29b      	uxth	r3, r3
 8000572:	4053      	eors	r3, r2
 8000574:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 8000576:	7b7b      	ldrb	r3, [r7, #13]
 8000578:	3301      	adds	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
 800057c:	7b7a      	ldrb	r2, [r7, #13]
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3e2      	bcc.n	800054a <LTC_PEC15_Calc+0x16>
	}

	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b29b      	uxth	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	08009058 	.word	0x08009058

08000598 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	if (num) num_devices = num; //Non-zero
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <LTC_Set_Num_Devices+0x16>
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <LTC_Set_Num_Devices+0x20>)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	7013      	strb	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	200001e8 	.word	0x200001e8

080005bc <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
	return num_devices;
 80005c0:	4b02      	ldr	r3, [pc, #8]	; (80005cc <LTC_Get_Num_Devices+0x10>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200001e8 	.word	0x200001e8

080005d0 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18)) num_series_groups = num; //Non-zero and 18 or less
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b12      	cmp	r3, #18
 80005e4:	d802      	bhi.n	80005ec <LTC_Set_Num_Series_Groups+0x1c>
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <LTC_Set_Num_Series_Groups+0x28>)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	7013      	strb	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200001e9 	.word	0x200001e9

080005fc <LTC_Get_Num_Series_Groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t LTC_Get_Num_Series_Groups(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	return num_series_groups;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <LTC_Get_Num_Series_Groups+0x10>)
 8000602:	781b      	ldrb	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	200001e9 	.word	0x200001e9

08000610 <LTC_Wakeup_Idle>:

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	717b      	strb	r3, [r7, #5]

	LTC_nCS_Low(); //Pull CS low
 800061e:	f000 fe01 	bl	8001224 <LTC_nCS_Low>

	hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 8000622:	1d79      	adds	r1, r7, #5
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	2201      	movs	r2, #1
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <LTC_Wakeup_Idle+0x50>)
 800062a:	f003 fe43 	bl	80042b4 <HAL_SPI_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	71bb      	strb	r3, [r7, #6]
	if (hal_ret) { //Non-zero means error
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <LTC_Wakeup_Idle+0x40>
		//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
		ret |= (1 << (hal_ret+LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2200      	movs	r2, #0
 800063c:	4413      	add	r3, r2
 800063e:	2201      	movs	r2, #1
 8000640:	fa02 f303 	lsl.w	r3, r2, r3
 8000644:	b25a      	sxtb	r2, r3
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	4313      	orrs	r3, r2
 800064c:	b25b      	sxtb	r3, r3
 800064e:	71fb      	strb	r3, [r7, #7]
	}

	LTC_nCS_High(); //Pull CS high
 8000650:	f000 fddc 	bl	800120c <LTC_nCS_High>

	return ret;
 8000654:	79fb      	ldrb	r3, [r7, #7]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200002a0 	.word	0x200002a0

08000664 <LTC_ReadRawCellVoltages>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef LTC_ReadRawCellVoltages(uint16_t *read_voltages) {
 8000664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000668:	b08b      	sub	sp, #44	; 0x2c
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	466b      	mov	r3, sp
 8000670:	461e      	mov	r6, r3
  LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  LTC_SPI_StatusTypeDef hal_ret;
  const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 8000678:	f7ff ffa0 	bl	80005bc <LTC_Get_Num_Devices>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	2308      	movs	r3, #8
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 800068a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800068e:	3b01      	subs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
 8000692:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000696:	2200      	movs	r2, #0
 8000698:	4698      	mov	r8, r3
 800069a:	4691      	mov	r9, r2
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	f04f 0300 	mov.w	r3, #0
 80006a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006b4:	2200      	movs	r2, #0
 80006b6:	461c      	mov	r4, r3
 80006b8:	4615      	mov	r5, r2
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	f04f 0300 	mov.w	r3, #0
 80006c2:	00eb      	lsls	r3, r5, #3
 80006c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006c8:	00e2      	lsls	r2, r4, #3
 80006ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006ce:	3307      	adds	r3, #7
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	ebad 0d03 	sub.w	sp, sp, r3
 80006d8:	466b      	mov	r3, sp
 80006da:	3300      	adds	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80006e4:	e0b7      	b.n	8000856 <LTC_ReadRawCellVoltages+0x1f2>
    uint8_t cmd[4];
    uint16_t cmd_pec;

    cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); //RDCV Register
 80006e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ea:	4a65      	ldr	r2, [pc, #404]	; (8000880 <LTC_ReadRawCellVoltages+0x21c>)
 80006ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	733b      	strb	r3, [r7, #12]
    cmd[1] = (0xFF & (LTC_CMD_RDCV[i])); //RDCV Register
 80006f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006fc:	4a60      	ldr	r2, [pc, #384]	; (8000880 <LTC_ReadRawCellVoltages+0x21c>)
 80006fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	737b      	strb	r3, [r7, #13]
    cmd_pec = LTC_PEC15_Calc(2, cmd);
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff11 	bl	8000534 <LTC_PEC15_Calc>
 8000712:	4603      	mov	r3, r0
 8000714:	837b      	strh	r3, [r7, #26]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000716:	8b7b      	ldrh	r3, [r7, #26]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	73bb      	strb	r3, [r7, #14]
    cmd[3] = (uint8_t)(cmd_pec);
 8000720:	8b7b      	ldrh	r3, [r7, #26]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]

    ret |= LTC_Wakeup_Idle(); //Wake LTC up
 8000726:	f7ff ff73 	bl	8000610 <LTC_Wakeup_Idle>
 800072a:	4603      	mov	r3, r0
 800072c:	461a      	mov	r2, r3
 800072e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000732:	4313      	orrs	r3, r2
 8000734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    LTC_nCS_Low(); //Pull CS low
 8000738:	f000 fd74 	bl	8001224 <LTC_nCS_Low>

    hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2204      	movs	r2, #4
 8000744:	484f      	ldr	r0, [pc, #316]	; (8000884 <LTC_ReadRawCellVoltages+0x220>)
 8000746:	f003 fdb5 	bl	80042b4 <HAL_SPI_Transmit>
 800074a:	4603      	mov	r3, r0
 800074c:	767b      	strb	r3, [r7, #25]
    if (hal_ret) { //Non-zero means error
 800074e:	7e7b      	ldrb	r3, [r7, #25]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00c      	beq.n	800076e <LTC_ReadRawCellVoltages+0x10a>
      ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8000754:	7e7b      	ldrb	r3, [r7, #25]
 8000756:	2200      	movs	r2, #0
 8000758:	4413      	add	r3, r2
 800075a:	2201      	movs	r2, #1
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	b25a      	sxtb	r2, r3
 8000762:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000766:	4313      	orrs	r3, r2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_voltages_reg, ARR_SIZE_REG, 100);
 800076e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000772:	b29a      	uxth	r2, r3
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	69f9      	ldr	r1, [r7, #28]
 8000778:	4842      	ldr	r0, [pc, #264]	; (8000884 <LTC_ReadRawCellVoltages+0x220>)
 800077a:	f003 fede 	bl	800453a <HAL_SPI_Receive>
 800077e:	4603      	mov	r3, r0
 8000780:	767b      	strb	r3, [r7, #25]
    if (hal_ret) { //Non-zero means error
 8000782:	7e7b      	ldrb	r3, [r7, #25]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00c      	beq.n	80007a2 <LTC_ReadRawCellVoltages+0x13e>
      ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 8000788:	7e7b      	ldrb	r3, [r7, #25]
 800078a:	2204      	movs	r2, #4
 800078c:	4413      	add	r3, r2
 800078e:	2201      	movs	r2, #1
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	b25a      	sxtb	r2, r3
 8000796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800079a:	4313      	orrs	r3, r2
 800079c:	b25b      	sxtb	r3, r3
 800079e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    // Process the received data
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80007a8:	e046      	b.n	8000838 <LTC_ReadRawCellVoltages+0x1d4>
      // Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
      // PEC for each device is the last two bytes of its data segment
      uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80007aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007ae:	2208      	movs	r2, #8
 80007b0:	fb02 f303 	mul.w	r3, r2, r3
 80007b4:	69fa      	ldr	r2, [r7, #28]
 80007b6:	4413      	add	r3, r2
 80007b8:	617b      	str	r3, [r7, #20]
      uint16_t calculated_pec = LTC_PEC15_Calc(REG_LEN - 2, data_ptr); // Calculate PEC based on received data
 80007ba:	2308      	movs	r3, #8
 80007bc:	3b02      	subs	r3, #2
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	6979      	ldr	r1, [r7, #20]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff feb6 	bl	8000534 <LTC_PEC15_Calc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	827b      	strh	r3, [r7, #18]

      // Convert received PEC from two bytes to uint16_t
      uint16_t received_pec = (data_ptr[REG_LEN - 2] << 8) | data_ptr[REG_LEN - 1];
 80007cc:	2308      	movs	r3, #8
 80007ce:	3b02      	subs	r3, #2
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	2308      	movs	r3, #8
 80007dc:	3b01      	subs	r3, #1
 80007de:	6979      	ldr	r1, [r7, #20]
 80007e0:	440b      	add	r3, r1
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	823b      	strh	r3, [r7, #16]

      if (received_pec == calculated_pec) {
 80007ec:	8a3a      	ldrh	r2, [r7, #16]
 80007ee:	8a7b      	ldrh	r3, [r7, #18]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d116      	bne.n	8000822 <LTC_ReadRawCellVoltages+0x1be>
        // If PEC matches, copy the voltage data, omitting the PEC bytes
        memcpy(&read_voltages[dev_idx * LTC_Get_Num_Series_Groups() + i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr, REG_LEN - 2);
 80007f4:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80007f8:	f7ff ff00 	bl	80005fc <LTC_Get_Num_Series_Groups>
 80007fc:	4603      	mov	r3, r0
 80007fe:	fb03 f204 	mul.w	r2, r3, r4
 8000802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000806:	2103      	movs	r1, #3
 8000808:	fb01 f303 	mul.w	r3, r1, r3
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4413      	add	r3, r2
 8000814:	2208      	movs	r2, #8
 8000816:	3a02      	subs	r2, #2
 8000818:	6979      	ldr	r1, [r7, #20]
 800081a:	4618      	mov	r0, r3
 800081c:	f007 ff76 	bl	800870c <memcpy>
 8000820:	e005      	b.n	800082e <LTC_ReadRawCellVoltages+0x1ca>
      } else {
        // Handle PEC mismatch error
        ret |= LTC_SPI_RX_ERROR;
 8000822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800082e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000832:	3301      	adds	r3, #1
 8000834:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000838:	f7ff fec0 	bl	80005bc <LTC_Get_Num_Devices>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000844:	4293      	cmp	r3, r2
 8000846:	d3b0      	bcc.n	80007aa <LTC_ReadRawCellVoltages+0x146>
      }
    }

    LTC_nCS_High(); //Pull CS high
 8000848:	f000 fce0 	bl	800120c <LTC_nCS_High>
  for (uint8_t i = 0; i < (LTC_Get_Num_Series_Groups() / LTC_SERIES_GROUPS_PER_RDCV); i++) {
 800084c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000850:	3301      	adds	r3, #1
 8000852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000856:	f7ff fed1 	bl	80005fc <LTC_Get_Num_Series_Groups>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	2303      	movs	r3, #3
 8000860:	fbb2 f3f3 	udiv	r3, r2, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800086a:	429a      	cmp	r2, r3
 800086c:	f4ff af3b 	bcc.w	80006e6 <LTC_ReadRawCellVoltages+0x82>
  }

  return ret;
 8000870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000874:	46b5      	mov	sp, r6
}
 8000876:	4618      	mov	r0, r3
 8000878:	372c      	adds	r7, #44	; 0x2c
 800087a:	46bd      	mov	sp, r7
 800087c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000880:	08009050 	.word	0x08009050
 8000884:	200002a0 	.word	0x200002a0

08000888 <LTC_CalcPackVoltage>:


/* Read and store raw cell voltages at uint8_t 2d pointer */
int LTC_CalcPackVoltage(uint16_t *read_voltages) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	int packvoltage = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups(); i++){
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	e00b      	b.n	80008b2 <LTC_CalcPackVoltage+0x2a>
		packvoltage += read_voltages[i];
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < LTC_Get_Num_Devices() * LTC_Get_Num_Series_Groups(); i++){
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	f7ff fe83 	bl	80005bc <LTC_Get_Num_Devices>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461c      	mov	r4, r3
 80008ba:	f7ff fe9f 	bl	80005fc <LTC_Get_Num_Series_Groups>
 80008be:	4603      	mov	r3, r0
 80008c0:	fb04 f303 	mul.w	r3, r4, r3
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dbe7      	blt.n	800089a <LTC_CalcPackVoltage+0x12>
	}
	return packvoltage;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_ADC1_Init+0x74>)
 80008e6:	4a19      	ldr	r2, [pc, #100]	; (800094c <MX_ADC1_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ADC1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_ADC1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_ADC1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_ADC1_Init+0x74>)
 80008fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000902:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_ADC1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ADC1_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_ADC1_Init+0x74>)
 8000912:	f000 ff0d 	bl	8001730 <HAL_ADC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 fbf0 	bl	8001100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000920:	230e      	movs	r3, #14
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_ADC1_Init+0x74>)
 8000932:	f000 ffd5 	bl	80018e0 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800093c:	f000 fbe0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001ec 	.word	0x200001ec
 800094c:	40012400 	.word	0x40012400

08000950 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_ADC2_Init+0x74>)
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <MX_ADC2_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_ADC2_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_ADC2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_ADC2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_ADC2_Init+0x74>)
 800097a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800097e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_ADC2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_ADC2_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_ADC2_Init+0x74>)
 800098e:	f000 fecf 	bl	8001730 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000998:	f000 fbb2 	bl	8001100 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800099c:	230a      	movs	r3, #10
 800099e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_ADC2_Init+0x74>)
 80009ae:	f000 ff97 	bl	80018e0 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80009b8:	f000 fba2 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000021c 	.word	0x2000021c
 80009c8:	40012800 	.word	0x40012800

080009cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <HAL_ADC_MspInit+0xbc>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d122      	bne.n	8000a32 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a1c:	2330      	movs	r3, #48	; 0x30
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <HAL_ADC_MspInit+0xc4>)
 8000a2c:	f001 fa9a 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000a30:	e026      	b.n	8000a80 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_ADC_MspInit+0xc8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d121      	bne.n	8000a80 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_ADC_MspInit+0xc0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <HAL_ADC_MspInit+0xc4>)
 8000a7c:	f001 fa72 	bl	8001f64 <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40012400 	.word	0x40012400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40012800 	.word	0x40012800

08000a98 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_CAN1_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_CAN1_Init+0x60>)
 8000ae6:	f001 f834 	bl	8001b52 <HAL_CAN_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f000 fb06 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000024c 	.word	0x2000024c
 8000afc:	40006400 	.word	0x40006400

08000b00 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <MX_CAN2_Init+0x64>)
 8000b08:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_CAN2_Init+0x60>)
 8000b4e:	f001 f800 	bl	8001b52 <HAL_CAN_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000b58:	f000 fad2 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000274 	.word	0x20000274
 8000b64:	40006800 	.word	0x40006800

08000b68 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a50      	ldr	r2, [pc, #320]	; (8000cc4 <HAL_CAN_MspInit+0x15c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14d      	bne.n	8000c24 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a4e      	ldr	r2, [pc, #312]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10b      	bne.n	8000bb2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	483c      	ldr	r0, [pc, #240]	; (8000cd0 <HAL_CAN_MspInit+0x168>)
 8000be0:	f001 f9c0 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4835      	ldr	r0, [pc, #212]	; (8000cd0 <HAL_CAN_MspInit+0x168>)
 8000bfa:	f001 f9b3 	bl	8001f64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_CAN_MspInit+0x16c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c06:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c1c:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <HAL_CAN_MspInit+0x16c>)
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000c22:	e04b      	b.n	8000cbc <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_CAN_MspInit+0x170>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d146      	bne.n	8000cbc <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c2e:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000c4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <HAL_CAN_MspInit+0x160>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10b      	bne.n	8000c70 <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_CAN_MspInit+0x164>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_CAN_MspInit+0x168>)
 8000c9e:	f001 f961 	bl	8001f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_CAN_MspInit+0x168>)
 8000cb8:	f001 f954 	bl	8001f64 <HAL_GPIO_Init>
}
 8000cbc:	bf00      	nop
 8000cbe:	3730      	adds	r7, #48	; 0x30
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	2000029c 	.word	0x2000029c
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40006800 	.word	0x40006800

08000cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a2c      	ldr	r2, [pc, #176]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d0e:	f043 0320 	orr.w	r3, r3, #32
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_GPIO_Init+0xe4>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2110      	movs	r1, #16
 8000d54:	481b      	ldr	r0, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0xe8>)
 8000d56:	f001 fa89 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <MX_GPIO_Init+0xec>)
 8000d60:	f001 fa84 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8000d64:	2310      	movs	r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <MX_GPIO_Init+0xe8>)
 8000d7c:	f001 f8f2 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_GPIO_Init+0xec>)
 8000d98:	f001 f8e4 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_GPIO_Init+0xec>)
 8000db2:	f001 f8d7 	bl	8001f64 <HAL_GPIO_Init>

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40011000 	.word	0x40011000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	f6ad 0d78 	subw	sp, sp, #2168	; 0x878
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fc26 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f8b6 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f7ff ff7e 	bl	8000cdc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000de0:	f7ff fd78 	bl	80008d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000de4:	f7ff fdb4 	bl	8000950 <MX_ADC2_Init>
  MX_CAN1_Init();
 8000de8:	f7ff fe56 	bl	8000a98 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000dec:	f7ff fe88 	bl	8000b00 <MX_CAN2_Init>
  MX_TIM7_Init();
 8000df0:	f000 fac4 	bl	800137c <MX_TIM7_Init>
  MX_SPI1_Init();
 8000df4:	f000 f98a 	bl	800110c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000df8:	f000 fb14 	bl	8001424 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000dfc:	f000 fb3c 	bl	8001478 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000e00:	f006 ff34 	bl	8007c6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin);
 8000e04:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	494c      	ldr	r1, [pc, #304]	; (8000f3c <main+0x170>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f907 	bl	8001020 <GpioTimePacket_Init>
  TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8000e12:	f607 0354 	addw	r3, r7, #2132	; 0x854
 8000e16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f940 	bl	80010a0 <TimerPacket_Init>

  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8000e20:	f000 f9f4 	bl	800120c <LTC_nCS_High>
  LTC_Set_Num_Devices(NUM_DEVICES);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff fbb7 	bl	8000598 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f7ff fbd0 	bl	80005d0 <LTC_Set_Num_Series_Groups>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8000e30:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8000e34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f90e 	bl	800105a <GpioFixedToggle>

		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8000e3e:	f607 0354 	addw	r3, r7, #2132	; 0x854
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f93f 	bl	80010c6 <TimerPacket_FixedPulse>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f0      	beq.n	8000e30 <main+0x64>
			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8000e4e:	f607 0378 	addw	r3, r7, #2168	; 0x878
 8000e52:	f6a3 0374 	subw	r3, r3, #2164	; 0x874
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fc0a 	bl	800867c <memset>
			char char_to_str[2];
			int packvoltage = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3870 	str.w	r3, [r7, #2160]	; 0x870

			LTC_ReadRawCellVoltages((uint16_t *)read_val);
 8000e6e:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fbf6 	bl	8000664 <LTC_ReadRawCellVoltages>
			packvoltage = LTC_CalcPackVoltage((uint16_t *) read_val);
 8000e78:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fd03 	bl	8000888 <LTC_CalcPackVoltage>
 8000e82:	f8c7 0870 	str.w	r0, [r7, #2160]	; 0x870
			sprintf(packV, "Pack Voltage: %d/1000 V", packvoltage);
 8000e86:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000e8a:	f8d7 2870 	ldr.w	r2, [r7, #2160]	; 0x870
 8000e8e:	492c      	ldr	r1, [pc, #176]	; (8000f40 <main+0x174>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f007 fbd3 	bl	800863c <siprintf>
			strncat(out_buf, packV, 30);
 8000e96:	f607 011c 	addw	r1, r7, #2076	; 0x81c
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	221e      	movs	r2, #30
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f007 fbf4 	bl	800868c <strncat>
			strncat(out_buf, char_to_str, 2);
 8000ea4:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f007 fbed 	bl	800868c <strncat>


			char_to_str[0] = '\n';
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	f887 3804 	strb.w	r3, [r7, #2052]	; 0x804
			char_to_str[1] = '\0';
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3805 	strb.w	r3, [r7, #2053]	; 0x805


			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
 8000ec4:	e022      	b.n	8000f0c <main+0x140>
				sprintf(buf, "C%u:%u/1000 V", i+1, read_val[i]);
 8000ec6:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	f603 0378 	addw	r3, r3, #2168	; 0x878
 8000ed6:	443b      	add	r3, r7
 8000ed8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000edc:	f607 0008 	addw	r0, r7, #2056	; 0x808
 8000ee0:	4918      	ldr	r1, [pc, #96]	; (8000f44 <main+0x178>)
 8000ee2:	f007 fbab 	bl	800863c <siprintf>
				strncat(out_buf, buf, 20);
 8000ee6:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2214      	movs	r2, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 fbcc 	bl	800868c <strncat>
				strncat(out_buf, char_to_str, 2);
 8000ef4:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2202      	movs	r2, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f007 fbc5 	bl	800868c <strncat>
			for (uint8_t i = 0; i < NUM_CELLS; i++) {
 8000f02:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000f06:	3301      	adds	r3, #1
 8000f08:	f887 3877 	strb.w	r3, [r7, #2167]	; 0x877
 8000f0c:	f897 3877 	ldrb.w	r3, [r7, #2167]	; 0x877
 8000f10:	2b0b      	cmp	r3, #11
 8000f12:	d9d8      	bls.n	8000ec6 <main+0xfa>
			}
			strncat(out_buf, char_to_str, 2);
 8000f14:	f607 0104 	addw	r1, r7, #2052	; 0x804
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 fbb5 	bl	800868c <strncat>

			USB_Transmit(out_buf, strlen(out_buf));
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff f97d 	bl	8000224 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f006 fe8b 	bl	8007c4e <USB_Transmit>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8000f38:	e77a      	b.n	8000e30 <main+0x64>
 8000f3a:	bf00      	nop
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	08008fe0 	.word	0x08008fe0
 8000f44:	08008ff8 	.word	0x08008ff8

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09c      	sub	sp, #112	; 0x70
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f52:	2238      	movs	r2, #56	; 0x38
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 fb90 	bl	800867c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2220      	movs	r2, #32
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 fb82 	bl	800867c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000f82:	2304      	movs	r3, #4
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f86:	2301      	movs	r3, #1
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000fa4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fabc 	bl	8003530 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fbe:	f000 f89f 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fdbc 	bl	8003b5c <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fea:	f000 f889 	bl	8001100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ffa2 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800100a:	f000 f879 	bl	8001100 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800100e:	4b03      	ldr	r3, [pc, #12]	; (800101c <SystemClock_Config+0xd4>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3770      	adds	r7, #112	; 0x70
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	42420070 	.word	0x42420070

08001020 <GpioTimePacket_Init>:
/* USER CODE BEGIN 4 */

//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f001 f919 	bl	800226c <HAL_GPIO_WritePin>
	gtp->gpio_port	= port;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin	= pin;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev 	= 0; //Init to 0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
	gtp->ts_curr 	= 0; //Init to 0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <GpioFixedToggle>:

//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 8001066:	f000 fb35 	bl	80016d4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	60da      	str	r2, [r3, #12]

	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	429a      	cmp	r2, r3
 800107e:	d90b      	bls.n	8001098 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	889b      	ldrh	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f001 f906 	bl	800229c <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <TimerPacket_Init>:

//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	tp->ts_prev 	= 0;		//Init to 0
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
	tp->ts_curr 	= 0; 		//Init to 0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
	tp->delay		= delay;	//Init to user value
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	609a      	str	r2, [r3, #8]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <TimerPacket_FixedPulse>:

//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80010ce:	f000 fb01 	bl	80016d4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]

	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d905      	bls.n	80010f6 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>
	...

0800110c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_SPI1_Init+0x64>)
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <MX_SPI1_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_SPI1_Init+0x64>)
 8001118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_SPI1_Init+0x64>)
 8001138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_SPI1_Init+0x64>)
 8001140:	2228      	movs	r2, #40	; 0x28
 8001142:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_SPI1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_SPI1_Init+0x64>)
 8001158:	220a      	movs	r2, #10
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_SPI1_Init+0x64>)
 800115e:	f003 f825 	bl	80041ac <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001168:	f7ff ffca 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002a0 	.word	0x200002a0
 8001174:	40013000 	.word	0x40013000

08001178 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_SPI_MspInit+0x88>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d12f      	bne.n	80011f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 800119e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_SPI_MspInit+0x8c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011c8:	23a0      	movs	r3, #160	; 0xa0
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_SPI_MspInit+0x90>)
 80011dc:	f000 fec2 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_SPI_MspInit+0x90>)
 80011f4:	f000 feb6 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013000 	.word	0x40013000
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <LTC_nCS_High+0x14>)
 8001216:	f001 f829 	bl	800226c <HAL_GPIO_WritePin>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40010800 	.word	0x40010800

08001224 <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8001228:	2200      	movs	r2, #0
 800122a:	2110      	movs	r1, #16
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <LTC_nCS_Low+0x14>)
 800122e:	f001 f81d 	bl	800226c <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40010800 	.word	0x40010800

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_MspInit+0x5c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_MspInit+0x5c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_MspInit+0x5c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x5c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x5c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x5c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x60>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_MspInit+0x60>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f9e3 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <OTG_FS_IRQHandler+0x10>)
 80012f6:	f001 f929 	bl	800254c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200010a0 	.word	0x200010a0

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f007 f9be 	bl	80086b4 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20010000 	.word	0x20010000
 8001364:	00000400 	.word	0x00000400
 8001368:	200002f8 	.word	0x200002f8
 800136c:	20001910 	.word	0x20001910

08001370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM7_Init+0x64>)
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_TIM7_Init+0x68>)
 800138e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_TIM7_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_TIM7_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_TIM7_Init+0x64>)
 800139e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_TIM7_Init+0x64>)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <MX_TIM7_Init+0x64>)
 80013ac:	f003 fc86 	bl	8004cbc <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80013b6:	f7ff fea3 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_TIM7_Init+0x64>)
 80013c8:	f003 fd34 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f7ff fe95 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002fc 	.word	0x200002fc
 80013e4:	40001400 	.word	0x40001400

080013e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_TIM_Base_MspInit+0x34>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d10b      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40001400 	.word	0x40001400
 8001420:	40021000 	.word	0x40021000

08001424 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <MX_USART2_UART_Init+0x50>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_USART2_UART_Init+0x4c>)
 800145c:	f003 fd50 	bl	8004f00 <HAL_UART_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001466:	f7ff fe4b 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000344 	.word	0x20000344
 8001474:	40004400 	.word	0x40004400

08001478 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART3_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART3_UART_Init+0x4c>)
 80014b0:	f003 fd26 	bl	8004f00 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f7ff fe21 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000038c 	.word	0x2000038c
 80014c8:	40004800 	.word	0x40004800

080014cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a37      	ldr	r2, [pc, #220]	; (80015c4 <HAL_UART_MspInit+0xf8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d130      	bne.n	800154e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ec:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 80014f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f6:	61d3      	str	r3, [r2, #28]
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800151c:	2304      	movs	r3, #4
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	4619      	mov	r1, r3
 800152e:	4827      	ldr	r0, [pc, #156]	; (80015cc <HAL_UART_MspInit+0x100>)
 8001530:	f000 fd18 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001534:	2308      	movs	r3, #8
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <HAL_UART_MspInit+0x100>)
 8001548:	f000 fd0c 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800154c:	e036      	b.n	80015bc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_UART_MspInit+0x104>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d131      	bne.n	80015bc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 800155e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001562:	61d3      	str	r3, [r2, #28]
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_UART_MspInit+0xfc>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4619      	mov	r1, r3
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_UART_MspInit+0x108>)
 800159e:	f000 fce1 	bl	8001f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4807      	ldr	r0, [pc, #28]	; (80015d4 <HAL_UART_MspInit+0x108>)
 80015b8:	f000 fcd4 	bl	8001f64 <HAL_GPIO_Init>
}
 80015bc:	bf00      	nop
 80015be:	3728      	adds	r7, #40	; 0x28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010800 	.word	0x40010800
 80015d0:	40004800 	.word	0x40004800
 80015d4:	40010c00 	.word	0x40010c00

080015d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d8:	f7ff feca 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015de:	490c      	ldr	r1, [pc, #48]	; (8001610 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015f4:	4c09      	ldr	r4, [pc, #36]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001602:	f007 f85d 	bl	80086c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7ff fbe1 	bl	8000dcc <main>
  bx lr
 800160a:	4770      	bx	lr
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001614:	080094d4 	.word	0x080094d4
  ldr r2, =_sbss
 8001618:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800161c:	2000190c 	.word	0x2000190c

08001620 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fc53 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	200f      	movs	r0, #15
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fdfc 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fc6b 	bl	8001f4a <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 fc33 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200003d4 	.word	0x200003d4

080016d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	200003d4 	.word	0x200003d4

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff fff0 	bl	80016d4 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffe0 	bl	80016d4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0be      	b.n	80018d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff f92c 	bl	80009cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f9ab 	bl	8001ad0 <ADC_ConversionStop_Disable>
 800177a:	4603      	mov	r3, r0
 800177c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 8099 	bne.w	80018be <HAL_ADC_Init+0x18e>
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8095 	bne.w	80018be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800179c:	f023 0302 	bic.w	r3, r3, #2
 80017a0:	f043 0202 	orr.w	r2, r3, #2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
 80017b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4313      	orrs	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017c8:	d003      	beq.n	80017d2 <HAL_ADC_Init+0xa2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_ADC_Init+0xa8>
 80017d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0xaa>
 80017d8:	2300      	movs	r3, #0
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7d1b      	ldrb	r3, [r3, #20]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d119      	bne.n	800181c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7b1b      	ldrb	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	035a      	lsls	r2, r3, #13
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	e00b      	b.n	800181c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f043 0201 	orr.w	r2, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_ADC_Init+0x1a8>)
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	430b      	orrs	r3, r1
 8001842:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800184c:	d003      	beq.n	8001856 <HAL_ADC_Init+0x126>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d104      	bne.n	8001860 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	3b01      	subs	r3, #1
 800185c:	051b      	lsls	r3, r3, #20
 800185e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	430a      	orrs	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_ADC_Init+0x1ac>)
 800187c:	4013      	ands	r3, r2
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	429a      	cmp	r2, r3
 8001882:	d10b      	bne.n	800189c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189a:	e018      	b.n	80018ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f023 0312 	bic.w	r3, r3, #18
 80018a4:	f043 0210 	orr.w	r2, r3, #16
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018bc:	e007      	b.n	80018ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	ffe1f7fd 	.word	0xffe1f7fd
 80018dc:	ff1f0efe 	.word	0xff1f0efe

080018e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x20>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e0dc      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1da>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b06      	cmp	r3, #6
 800190e:	d81c      	bhi.n	800194a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b05      	subs	r3, #5
 8001922:	221f      	movs	r2, #31
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	4019      	ands	r1, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b05      	subs	r3, #5
 800193c:	fa00 f203 	lsl.w	r2, r0, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
 8001948:	e03c      	b.n	80019c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d81c      	bhi.n	800198c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	3b23      	subs	r3, #35	; 0x23
 8001964:	221f      	movs	r2, #31
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	4019      	ands	r1, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b23      	subs	r3, #35	; 0x23
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
 800198a:	e01b      	b.n	80019c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b41      	subs	r3, #65	; 0x41
 800199e:	221f      	movs	r2, #31
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4019      	ands	r1, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b41      	subs	r3, #65	; 0x41
 80019b8:	fa00 f203 	lsl.w	r2, r0, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d91c      	bls.n	8001a06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68d9      	ldr	r1, [r3, #12]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	3b1e      	subs	r3, #30
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	3b1e      	subs	r3, #30
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	e019      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6919      	ldr	r1, [r3, #16]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	2207      	movs	r2, #7
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6898      	ldr	r0, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d003      	beq.n	8001a4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a46:	2b11      	cmp	r3, #17
 8001a48:	d132      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d125      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d126      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b10      	cmp	r3, #16
 8001a78:	d11a      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_ADC_ConfigChannel+0x1ec>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	0c9a      	lsrs	r2, r3, #18
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f9      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x1b2>
 8001a9e:	e007      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40012400 	.word	0x40012400
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	431bde83 	.word	0x431bde83

08001ad0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d12e      	bne.n	8001b48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001afa:	f7ff fdeb 	bl	80016d4 <HAL_GetTick>
 8001afe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b00:	e01b      	b.n	8001b3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b02:	f7ff fde7 	bl	80016d4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d914      	bls.n	8001b3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10d      	bne.n	8001b3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f043 0210 	orr.w	r2, r3, #16
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f043 0201 	orr.w	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e007      	b.n	8001b4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d0dc      	beq.n	8001b02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0ed      	b.n	8001d40 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7fe fff9 	bl	8000b68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b86:	f7ff fda5 	bl	80016d4 <HAL_GetTick>
 8001b8a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8c:	e012      	b.n	8001bb4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b8e:	f7ff fda1 	bl	80016d4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b0a      	cmp	r3, #10
 8001b9a:	d90b      	bls.n	8001bb4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2205      	movs	r2, #5
 8001bac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0c5      	b.n	8001d40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0e5      	beq.n	8001b8e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0202 	bic.w	r2, r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd2:	f7ff fd7f 	bl	80016d4 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bd8:	e012      	b.n	8001c00 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bda:	f7ff fd7b 	bl	80016d4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b0a      	cmp	r3, #10
 8001be6:	d90b      	bls.n	8001c00 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e09f      	b.n	8001d40 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e5      	bne.n	8001bda <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7e1b      	ldrb	r3, [r3, #24]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e5b      	ldrb	r3, [r3, #25]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e9b      	ldrb	r3, [r3, #26]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e007      	b.n	8001c8c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0220 	bic.w	r2, r2, #32
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7edb      	ldrb	r3, [r3, #27]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0210 	orr.w	r2, r2, #16
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7f1b      	ldrb	r3, [r3, #28]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0208 	orr.w	r2, r2, #8
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7f5b      	ldrb	r3, [r3, #29]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0204 	orr.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0204 	bic.w	r2, r2, #4
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4906      	ldr	r1, [pc, #24]	; (8001de0 <__NVIC_EnableIRQ+0x34>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff90 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff2d 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff42 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff90 	bl	8001e38 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5f 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff35 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffa2 	bl	8001e9c <SysTick_Config>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e169      	b.n	800224c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8158 	bne.w	8002246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a9a      	ldr	r2, [pc, #616]	; (8002204 <HAL_GPIO_Init+0x2a0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d05e      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fa0:	4a98      	ldr	r2, [pc, #608]	; (8002204 <HAL_GPIO_Init+0x2a0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d875      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fa6:	4a98      	ldr	r2, [pc, #608]	; (8002208 <HAL_GPIO_Init+0x2a4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d058      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fac:	4a96      	ldr	r2, [pc, #600]	; (8002208 <HAL_GPIO_Init+0x2a4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d86f      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_GPIO_Init+0x2a8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d052      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fb8:	4a94      	ldr	r2, [pc, #592]	; (800220c <HAL_GPIO_Init+0x2a8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d869      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a94      	ldr	r2, [pc, #592]	; (8002210 <HAL_GPIO_Init+0x2ac>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04c      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fc4:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_GPIO_Init+0x2ac>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d863      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fca:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d046      	beq.n	800205e <HAL_GPIO_Init+0xfa>
 8001fd0:	4a90      	ldr	r2, [pc, #576]	; (8002214 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d85d      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fd6:	2b12      	cmp	r3, #18
 8001fd8:	d82a      	bhi.n	8002030 <HAL_GPIO_Init+0xcc>
 8001fda:	2b12      	cmp	r3, #18
 8001fdc:	d859      	bhi.n	8002092 <HAL_GPIO_Init+0x12e>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <HAL_GPIO_Init+0x80>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	0800205f 	.word	0x0800205f
 8001fe8:	08002039 	.word	0x08002039
 8001fec:	0800204b 	.word	0x0800204b
 8001ff0:	0800208d 	.word	0x0800208d
 8001ff4:	08002093 	.word	0x08002093
 8001ff8:	08002093 	.word	0x08002093
 8001ffc:	08002093 	.word	0x08002093
 8002000:	08002093 	.word	0x08002093
 8002004:	08002093 	.word	0x08002093
 8002008:	08002093 	.word	0x08002093
 800200c:	08002093 	.word	0x08002093
 8002010:	08002093 	.word	0x08002093
 8002014:	08002093 	.word	0x08002093
 8002018:	08002093 	.word	0x08002093
 800201c:	08002093 	.word	0x08002093
 8002020:	08002093 	.word	0x08002093
 8002024:	08002093 	.word	0x08002093
 8002028:	08002041 	.word	0x08002041
 800202c:	08002055 	.word	0x08002055
 8002030:	4a79      	ldr	r2, [pc, #484]	; (8002218 <HAL_GPIO_Init+0x2b4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002036:	e02c      	b.n	8002092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e029      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	3304      	adds	r3, #4
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e024      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	3308      	adds	r3, #8
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e01f      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	330c      	adds	r3, #12
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e01a      	b.n	8002094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002066:	2304      	movs	r3, #4
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e013      	b.n	8002094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	611a      	str	r2, [r3, #16]
          break;
 800207e:	e009      	b.n	8002094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002080:	2308      	movs	r3, #8
 8002082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	615a      	str	r2, [r3, #20]
          break;
 800208a:	e003      	b.n	8002094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x130>
          break;
 8002092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d801      	bhi.n	800209e <HAL_GPIO_Init+0x13a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	e001      	b.n	80020a2 <HAL_GPIO_Init+0x13e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d802      	bhi.n	80020b0 <HAL_GPIO_Init+0x14c>
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	e002      	b.n	80020b6 <HAL_GPIO_Init+0x152>
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	3b08      	subs	r3, #8
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	210f      	movs	r1, #15
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80b1 	beq.w	8002246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_GPIO_Init+0x2b8>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020fc:	4a48      	ldr	r2, [pc, #288]	; (8002220 <HAL_GPIO_Init+0x2bc>)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_GPIO_Init+0x2c0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_GPIO_Init+0x1ec>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3f      	ldr	r2, [pc, #252]	; (8002228 <HAL_GPIO_Init+0x2c4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00d      	beq.n	800214c <HAL_GPIO_Init+0x1e8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3e      	ldr	r2, [pc, #248]	; (800222c <HAL_GPIO_Init+0x2c8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_Init+0x1e4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3d      	ldr	r2, [pc, #244]	; (8002230 <HAL_GPIO_Init+0x2cc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_GPIO_Init+0x1e0>
 8002140:	2303      	movs	r3, #3
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002144:	2304      	movs	r3, #4
 8002146:	e004      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002148:	2302      	movs	r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002150:	2300      	movs	r3, #0
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	f002 0203 	and.w	r2, r2, #3
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	4093      	lsls	r3, r2
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002162:	492f      	ldr	r1, [pc, #188]	; (8002220 <HAL_GPIO_Init+0x2bc>)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	492c      	ldr	r1, [pc, #176]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4928      	ldr	r1, [pc, #160]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4922      	ldr	r1, [pc, #136]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	491e      	ldr	r1, [pc, #120]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4914      	ldr	r1, [pc, #80]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e021      	b.n	8002246 <HAL_GPIO_Init+0x2e2>
 8002202:	bf00      	nop
 8002204:	10320000 	.word	0x10320000
 8002208:	10310000 	.word	0x10310000
 800220c:	10220000 	.word	0x10220000
 8002210:	10210000 	.word	0x10210000
 8002214:	10120000 	.word	0x10120000
 8002218:	10110000 	.word	0x10110000
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	40010800 	.word	0x40010800
 8002228:	40010c00 	.word	0x40010c00
 800222c:	40011000 	.word	0x40011000
 8002230:	40011400 	.word	0x40011400
 8002234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_GPIO_Init+0x304>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <HAL_GPIO_Init+0x304>)
 8002242:	4013      	ands	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	3301      	adds	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f ae8e 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	372c      	adds	r7, #44	; 0x2c
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	40010400 	.word	0x40010400

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	611a      	str	r2, [r3, #16]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ae:	887a      	ldrh	r2, [r7, #2]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43d9      	mvns	r1, r3
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	611a      	str	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d0:	b08f      	sub	sp, #60	; 0x3c
 80022d2:	af0a      	add	r7, sp, #40	; 0x28
 80022d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e10f      	b.n	8002500 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f005 fea8 	bl	8008050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f002 ff9a 	bl	8005258 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	687e      	ldr	r6, [r7, #4]
 800232c:	466d      	mov	r5, sp
 800232e:	f106 0410 	add.w	r4, r6, #16
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002342:	1d33      	adds	r3, r6, #4
 8002344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	f002 feb8 	bl	80050bc <USB_CoreInit>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0d0      	b.n	8002500 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f002 ff87 	bl	8005278 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e04a      	b.n	8002406 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	333d      	adds	r3, #61	; 0x3d
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	333c      	adds	r3, #60	; 0x3c
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	b298      	uxth	r0, r3
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3356      	adds	r3, #86	; 0x56
 80023ac:	4602      	mov	r2, r0
 80023ae:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3340      	adds	r3, #64	; 0x40
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3344      	adds	r3, #68	; 0x44
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3348      	adds	r3, #72	; 0x48
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334c      	adds	r3, #76	; 0x4c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	3301      	adds	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	429a      	cmp	r2, r3
 800240e:	d3af      	bcc.n	8002370 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
 8002414:	e044      	b.n	80024a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002458:	7bfa      	ldrb	r2, [r7, #15]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3301      	adds	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3b5      	bcc.n	8002416 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	687e      	ldr	r6, [r7, #4]
 80024b2:	466d      	mov	r5, sp
 80024b4:	f106 0410 	add.w	r4, r6, #16
 80024b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80024c8:	1d33      	adds	r3, r6, #4
 80024ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024cc:	6838      	ldr	r0, [r7, #0]
 80024ce:	f002 ff1f 	bl	8005310 <USB_DevInit>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00d      	b.n	8002500 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fea9 	bl	8006250 <USB_DevDisconnect>

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002508 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_PCD_Start+0x16>
 800251a:	2302      	movs	r3, #2
 800251c:	e012      	b.n	8002544 <HAL_PCD_Start+0x3c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fe84 	bl	8005238 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fe6b 	bl	8006210 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b08d      	sub	sp, #52	; 0x34
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ff22 	bl	80063ac <USB_GetMode>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8443 	bne.w	8002df6 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fe8b 	bl	8006290 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8439 	beq.w	8002df4 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fe78 	bl	8006290 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f002 0202 	and.w	r2, r2, #2
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fe66 	bl	8006290 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d161      	bne.n	8002692 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	0c5b      	lsrs	r3, r3, #17
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	2b02      	cmp	r3, #2
 8002608:	d124      	bne.n	8002654 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d035      	beq.n	8002682 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f003 fca3 	bl	8005f74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	441a      	add	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264c:	441a      	add	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	e016      	b.n	8002682 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	0c5b      	lsrs	r3, r3, #17
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2b06      	cmp	r3, #6
 800265e:	d110      	bne.n	8002682 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002666:	2208      	movs	r2, #8
 8002668:	4619      	mov	r1, r3
 800266a:	6a38      	ldr	r0, [r7, #32]
 800266c:	f003 fc82 	bl	8005f74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267c:	441a      	add	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0210 	orr.w	r2, r2, #16
 8002690:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fdfa 	bl	8006290 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026a6:	f040 80a7 	bne.w	80027f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fdfe 	bl	80062b4 <USB_ReadDevAllOutEpInterrupt>
 80026b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80026ba:	e099      	b.n	80027f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 808e 	beq.w	80027e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fe20 	bl	8006318 <USB_ReadDevOutEPInterrupt>
 80026d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00c      	beq.n	80026fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	2301      	movs	r3, #1
 80026f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fe41 	bl	8003380 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2308      	movs	r3, #8
 8002718:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800271a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fe7d 	bl	800341c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2310      	movs	r3, #16
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d030      	beq.n	80027aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d109      	bne.n	8002768 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002766:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	78db      	ldrb	r3, [r3, #3]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 fd4a 	bl	800822c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2302      	movs	r3, #2
 80027a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c0:	461a      	mov	r2, r3
 80027c2:	2320      	movs	r3, #32
 80027c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3301      	adds	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f47f af62 	bne.w	80026bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fd47 	bl	8006290 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800280c:	f040 80a4 	bne.w	8002958 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 fd66 	bl	80062e6 <USB_ReadDevAllInEpInterrupt>
 800281a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002820:	e096      	b.n	8002950 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808b 	beq.w	8002944 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fd8a 	bl	8006352 <USB_ReadDevInEPInterrupt>
 800283e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d020      	beq.n	800288c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	69f9      	ldr	r1, [r7, #28]
 8002866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800286a:	4013      	ands	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	461a      	mov	r2, r3
 800287c:	2301      	movs	r3, #1
 800287e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 fc55 	bl	8008136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a2:	461a      	mov	r2, r3
 80028a4:	2308      	movs	r3, #8
 80028a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028be:	461a      	mov	r2, r3
 80028c0:	2310      	movs	r3, #16
 80028c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6a38      	ldr	r0, [r7, #32]
 80028ee:	f002 fe31 	bl	8005554 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3338      	adds	r3, #56	; 0x38
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 fc98 	bl	8008250 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2302      	movs	r3, #2
 8002930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800293c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fc96 	bl	8003270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3301      	adds	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	f47f af65 	bne.w	8002822 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fc97 	bl	8006290 <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800296c:	d114      	bne.n	8002998 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f005 fc44 	bl	8008210 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fc77 	bl	8006290 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ac:	d112      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f005 fc00 	bl	80081c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029d2:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fc59 	bl	8006290 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e8:	f040 80b5 	bne.w	8002b56 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2110      	movs	r1, #16
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fda4 	bl	8005554 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a10:	e046      	b.n	8002aa0 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a36:	0151      	lsls	r1, r2, #5
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	461a      	mov	r2, r3
 8002a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8a:	0151      	lsls	r1, r2, #5
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	440a      	add	r2, r1
 8002a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3b3      	bcc.n	8002a12 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002abc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d016      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 030b 	orr.w	r3, r3, #11
 8002ada:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aec:	f043 030b 	orr.w	r3, r3, #11
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	e015      	b.n	8002b20 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1a:	f043 030b 	orr.w	r3, r3, #11
 8002b1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f003 fc63 	bl	800640c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fb98 	bl	8006290 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b6a:	d124      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fc28 	bl	80063c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fd66 	bl	800564c <USB_GetDevSpeed>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681c      	ldr	r4, [r3, #0]
 8002b8c:	f001 f98c 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8002b90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f002 fab0 	bl	8005100 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f005 faf0 	bl	8008186 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fb68 	bl	8006290 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d10a      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f005 facd 	bl	800816a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f002 0208 	and.w	r2, r2, #8
 8002bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fb53 	bl	8006290 <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d122      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c00:	2301      	movs	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	e014      	b.n	8002c30 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d105      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 faf2 	bl	800320e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3e5      	bcc.n	8002c06 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fb26 	bl	8006290 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4e:	d13b      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c50:	2301      	movs	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e02b      	b.n	8002cae <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3340      	adds	r3, #64	; 0x40
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d115      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	da12      	bge.n	8002ca8 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	333f      	adds	r3, #63	; 0x3f
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fab3 	bl	800320e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	3301      	adds	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3ce      	bcc.n	8002c56 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695a      	ldr	r2, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fadf 	bl	8006290 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cdc:	d155      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cde:	2301      	movs	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e045      	b.n	8002d70 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d12e      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	da2b      	bge.n	8002d6a <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d121      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6053      	str	r3, [r2, #4]
            break;
 8002d68:	e007      	b.n	8002d7a <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3b4      	bcc.n	8002ce4 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fa7e 	bl	8006290 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d10a      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fa67 	bl	8008274 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fa68 	bl	8006290 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d115      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f005 fa57 	bl	8008290 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	e000      	b.n	8002df6 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8002df4:	bf00      	nop
    }
  }
}
 8002df6:	3734      	adds	r7, #52	; 0x34
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_SetAddress+0x1a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e013      	b.n	8002e3e <HAL_PCD_SetAddress+0x42>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 f9c9 	bl	80061c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	461a      	mov	r2, r3
 8002e54:	4603      	mov	r3, r0
 8002e56:	70fb      	strb	r3, [r7, #3]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	803b      	strh	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da0f      	bge.n	8002e8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 020f 	and.w	r2, r3, #15
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3338      	adds	r3, #56	; 0x38
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	705a      	strb	r2, [r3, #1]
 8002e8a:	e00f      	b.n	8002eac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	f003 020f 	and.w	r2, r3, #15
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb8:	883a      	ldrh	r2, [r7, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	78ba      	ldrb	r2, [r7, #2]
 8002ec2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ed6:	78bb      	ldrb	r3, [r7, #2]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d102      	bne.n	8002ee2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_EP_Open+0xaa>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e00e      	b.n	8002f0e <HAL_PCD_EP_Open+0xc8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fbc2 	bl	8005688 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da0f      	bge.n	8002f4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3338      	adds	r3, #56	; 0x38
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	705a      	strb	r2, [r3, #1]
 8002f48:	e00f      	b.n	8002f6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 020f 	and.w	r2, r3, #15
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_EP_Close+0x6e>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e00e      	b.n	8002fa2 <HAL_PCD_EP_Close+0x8c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 fbfe 	bl	8005794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	7afb      	ldrb	r3, [r7, #11]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6979      	ldr	r1, [r7, #20]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fca4 	bl	800594c <USB_EPStartXfer>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8003030:	681b      	ldr	r3, [r3, #0]
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	460b      	mov	r3, r1
 800304a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3338      	adds	r3, #56	; 0x38
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2201      	movs	r2, #1
 800307a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	b2da      	uxtb	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	4618      	mov	r0, r3
 8003090:	f002 fc5c 	bl	800594c <USB_EPStartXfer>

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 020f 	and.w	r2, r3, #15
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d901      	bls.n	80030bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e04e      	b.n	800315a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da0f      	bge.n	80030e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 020f 	and.w	r2, r3, #15
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	3338      	adds	r3, #56	; 0x38
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	705a      	strb	r2, [r3, #1]
 80030e2:	e00d      	b.n	8003100 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_PCD_EP_SetStall+0x82>
 800311c:	2302      	movs	r3, #2
 800311e:	e01c      	b.n	800315a <HAL_PCD_EP_SetStall+0xbc>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	f002 ff77 	bl	8006022 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f003 f95e 	bl	800640c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d901      	bls.n	8003180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e042      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da0f      	bge.n	80031a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3338      	adds	r3, #56	; 0x38
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00f      	b.n	80031c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_EP_ClrStall+0x86>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e00e      	b.n	8003206 <HAL_PCD_EP_ClrStall+0xa4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 ff80 	bl	80060fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800321a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321e:	2b00      	cmp	r3, #0
 8003220:	da0c      	bge.n	800323c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	f003 020f 	and.w	r2, r3, #15
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	3338      	adds	r3, #56	; 0x38
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e00c      	b.n	8003256 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fda7 	bl	8005db0 <USB_EPStopXfer>
 8003262:	4603      	mov	r3, r0
 8003264:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003266:	7afb      	ldrb	r3, [r7, #11]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d901      	bls.n	80032a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e067      	b.n	8003378 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3303      	adds	r3, #3
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032cc:	e026      	b.n	800331c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d902      	bls.n	80032ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3303      	adds	r3, #3
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f002 fdff 	bl	8005f02 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d809      	bhi.n	8003346 <PCD_WriteEmptyTxFifo+0xd6>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333a:	429a      	cmp	r2, r3
 800333c:	d203      	bcs.n	8003346 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1c3      	bne.n	80032ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	429a      	cmp	r2, r3
 8003350:	d811      	bhi.n	8003376 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	43db      	mvns	r3, r3
 800336c:	6939      	ldr	r1, [r7, #16]
 800336e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003372:	4013      	ands	r3, r2
 8003374:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	333c      	adds	r3, #60	; 0x3c
 8003398:	3304      	adds	r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <PCD_EP_OutXfrComplete_int+0x98>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d124      	bne.n	8003400 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033cc:	461a      	mov	r2, r3
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	6093      	str	r3, [r2, #8]
 80033d4:	e01a      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f004 fe81 	bl	8008100 <HAL_PCD_DataOutStageCallback>
 80033fe:	e005      	b.n	800340c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f004 fe7a 	bl	8008100 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	4f54310a 	.word	0x4f54310a

0800341c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	333c      	adds	r3, #60	; 0x3c
 8003434:	3304      	adds	r3, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <PCD_EP_OutSetupPacket_int+0x64>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90e      	bls.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f004 fe33 	bl	80080dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	4f54300a 	.word	0x4f54300a

08003484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	4613      	mov	r3, r2
 8003492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800349c:	78fb      	ldrb	r3, [r7, #3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034a2:	883b      	ldrh	r3, [r7, #0]
 80034a4:	0419      	lsls	r1, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
 80034b0:	e028      	b.n	8003504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e00d      	b.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3340      	adds	r3, #64	; 0x40
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	3301      	adds	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3ec      	bcc.n	80034c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034ec:	883b      	ldrh	r3, [r7, #0]
 80034ee:	0418      	lsls	r0, r3, #16
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	4302      	orrs	r2, r0
 80034fc:	3340      	adds	r3, #64	; 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	887a      	ldrh	r2, [r7, #2]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e304      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800355c:	4b8f      	ldr	r3, [pc, #572]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b89      	ldr	r3, [pc, #548]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x12c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e2de      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x76>
 8003598:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x98>
 80035ae:	4b7b      	ldr	r3, [pc, #492]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7a      	ldr	r2, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a77      	ldr	r2, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xbc>
 80035d2:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a71      	ldr	r2, [pc, #452]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd4>
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6a      	ldr	r2, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a67      	ldr	r2, [pc, #412]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe f862 	bl	80016d4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe f85e 	bl	80016d4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e292      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b5d      	ldr	r3, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe4>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe f84e 	bl	80016d4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe f84a 	bl	80016d4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e27e      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x10c>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d063      	beq.n	8003732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003676:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
 8003682:	4b46      	ldr	r3, [pc, #280]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e252      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4939      	ldr	r1, [pc, #228]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e03a      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe f803 	bl	80016d4 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d2:	f7fd ffff 	bl	80016d4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e233      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4927      	ldr	r1, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x270>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd ffe2 	bl	80016d4 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fd ffde 	bl	80016d4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e212      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03a      	beq.n	80037b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d019      	beq.n	800377a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fd ffc2 	bl	80016d4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd ffbe 	bl	80016d4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1f2      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_RCC_OscConfig+0x26c>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003772:	2001      	movs	r0, #1
 8003774:	f000 fbca 	bl	8003f0c <RCC_Delay>
 8003778:	e01c      	b.n	80037b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCC_OscConfig+0x274>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003780:	f7fd ffa8 	bl	80016d4 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003786:	e00f      	b.n	80037a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fd ffa4 	bl	80016d4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d908      	bls.n	80037a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e1d8      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	42420000 	.word	0x42420000
 80037a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b9b      	ldr	r3, [pc, #620]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e9      	bne.n	8003788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80a6 	beq.w	800390e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b94      	ldr	r3, [pc, #592]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b91      	ldr	r3, [pc, #580]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a90      	ldr	r2, [pc, #576]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037dc:	61d3      	str	r3, [r2, #28]
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ee:	4b8b      	ldr	r3, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d118      	bne.n	800382c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fa:	4b88      	ldr	r3, [pc, #544]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003806:	f7fd ff65 	bl	80016d4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380e:	f7fd ff61 	bl	80016d4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e195      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b7e      	ldr	r3, [pc, #504]	; (8003a1c <HAL_RCC_OscConfig+0x4ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x312>
 8003834:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a77      	ldr	r2, [pc, #476]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e02d      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x334>
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a72      	ldr	r2, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a6f      	ldr	r2, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	e01c      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x356>
 800386c:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4a69      	ldr	r2, [pc, #420]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a66      	ldr	r2, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6213      	str	r3, [r2, #32]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x36e>
 8003886:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a63      	ldr	r2, [pc, #396]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a60      	ldr	r2, [pc, #384]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a6:	f7fd ff15 	bl	80016d4 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd ff11 	bl	80016d4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e143      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	4b54      	ldr	r3, [pc, #336]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ee      	beq.n	80038ae <HAL_RCC_OscConfig+0x37e>
 80038d0:	e014      	b.n	80038fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d2:	f7fd feff 	bl	80016d4 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	e00a      	b.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038da:	f7fd fefb 	bl	80016d4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e12d      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ee      	bne.n	80038da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a44      	ldr	r2, [pc, #272]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 808c 	beq.w	8003a30 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d10e      	bne.n	8003944 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003926:	4b3c      	ldr	r3, [pc, #240]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800392e:	2b08      	cmp	r3, #8
 8003930:	d108      	bne.n	8003944 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800393a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e103      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	2b02      	cmp	r3, #2
 800394a:	d14e      	bne.n	80039ea <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003958:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0ef      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800396c:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <HAL_RCC_OscConfig+0x4f0>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003972:	f7fd feaf 	bl	80016d4 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800397a:	f7fd feab 	bl	80016d4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	; 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0df      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003998:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	491c      	ldr	r1, [pc, #112]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80039aa:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4918      	ldr	r1, [pc, #96]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_RCC_OscConfig+0x4f0>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fd fe87 	bl	80016d4 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80039ca:	f7fd fe83 	bl	80016d4 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0b7      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x49a>
 80039e8:	e022      	b.n	8003a30 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_RCC_OscConfig+0x4e8>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_OscConfig+0x4f0>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fd fe6a 	bl	80016d4 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003a02:	e00f      	b.n	8003a24 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a04:	f7fd fe66 	bl	80016d4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d908      	bls.n	8003a24 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e09a      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e9      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8088 	beq.w	8003b4a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3a:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d068      	beq.n	8003b18 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d14d      	bne.n	8003aea <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fe3e 	bl	80016d4 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fd fe3a 	bl	80016d4 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e06e      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a82:	d10f      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4931      	ldr	r1, [pc, #196]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	f023 020f 	bic.w	r2, r3, #15
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	492d      	ldr	r1, [pc, #180]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	4927      	ldr	r1, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fe07 	bl	80016d4 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aca:	f7fd fe03 	bl	80016d4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e037      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x59a>
 8003ae8:	e02f      	b.n	8003b4a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x628>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd fdf0 	bl	80016d4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fdec 	bl	80016d4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e020      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c8>
 8003b16:	e018      	b.n	8003b4a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e013      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_OscConfig+0x624>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	42420060 	.word	0x42420060

08003b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0d0      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d910      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 0207 	bic.w	r2, r3, #7
 8003b86:	4965      	ldr	r1, [pc, #404]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d040      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d115      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e073      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06b      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b39      	ldr	r3, [pc, #228]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4936      	ldr	r1, [pc, #216]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fd42 	bl	80016d4 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7fd fd3e 	bl	80016d4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e053      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2d      	ldr	r3, [pc, #180]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d210      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	4922      	ldr	r1, [pc, #136]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f821 	bl	8003d30 <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	; (8003d28 <HAL_RCC_ClockConfig+0x1cc>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_ClockConfig+0x1d0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fca0 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08009458 	.word	0x08009458
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004

08003d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b08e      	sub	sp, #56	; 0x38
 8003d36:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	2300      	movs	r3, #0
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	2300      	movs	r3, #0
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d54:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d002      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d003      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x40>
 8003d68:	e089      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d6e:	e089      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d072      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f003 020f 	and.w	r2, r3, #15
 8003d90:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x16c>)
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003d96:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d053      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	3301      	adds	r3, #1
 8003dae:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003db0:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3302      	adds	r3, #2
 8003dbc:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	469a      	mov	sl, r3
 8003dc4:	4693      	mov	fp, r2
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	2200      	movs	r2, #0
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	617a      	str	r2, [r7, #20]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	fb03 f20b 	mul.w	r2, r3, fp
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fb0a f303 	mul.w	r3, sl, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	fbaa 0102 	umull	r0, r1, sl, r2
 8003de2:	440b      	add	r3, r1
 8003de4:	4619      	mov	r1, r3
 8003de6:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003de8:	fb03 f201 	mul.w	r2, r3, r1
 8003dec:	2300      	movs	r3, #0
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003df6:	fba0 4502 	umull	r4, r5, r0, r2
 8003dfa:	442b      	add	r3, r5
 8003dfc:	461d      	mov	r5, r3
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2200      	movs	r2, #0
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	60fa      	str	r2, [r7, #12]
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	2200      	movs	r2, #0
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e12:	460b      	mov	r3, r1
 8003e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e18:	4652      	mov	r2, sl
 8003e1a:	fb02 f203 	mul.w	r2, r2, r3
 8003e1e:	465b      	mov	r3, fp
 8003e20:	4684      	mov	ip, r0
 8003e22:	fb0c f303 	mul.w	r3, ip, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	fba2 8901 	umull	r8, r9, r2, r1
 8003e30:	444b      	add	r3, r9
 8003e32:	4699      	mov	r9, r3
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc f9fa 	bl	8000234 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
 8003e48:	e007      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e4e:	fb03 f202 	mul.w	r2, r3, r2
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e5c:	7b5b      	ldrb	r3, [r3, #13]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	085b      	lsrs	r3, r3, #1
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6c:	e004      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x170>)
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e7c:	e002      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x174>)
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3738      	adds	r7, #56	; 0x38
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	017d7840 	.word	0x017d7840
 8003e98:	08009470 	.word	0x08009470
 8003e9c:	08009480 	.word	0x08009480
 8003ea0:	003d0900 	.word	0x003d0900
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b02      	ldr	r3, [pc, #8]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec0:	f7ff fff2 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08009468 	.word	0x08009468

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee8:	f7ff ffde 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08009468 	.word	0x08009468

08003f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <RCC_Delay+0x34>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <RCC_Delay+0x38>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f28:	bf00      	nop
  }
  while (Delay --);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	60fa      	str	r2, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <RCC_Delay+0x1c>
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20000000 	.word	0x20000000
 8003f44:	10624dd3 	.word	0x10624dd3

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07d      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6c:	4b8b      	ldr	r3, [pc, #556]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	4a87      	ldr	r2, [pc, #540]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f82:	61d3      	str	r3, [r2, #28]
 8003f84:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f90:	2301      	movs	r3, #1
 8003f92:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b82      	ldr	r3, [pc, #520]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d118      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa0:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7e      	ldr	r2, [pc, #504]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fac:	f7fd fb92 	bl	80016d4 <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb4:	f7fd fb8e 	bl	80016d4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	; 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0e5      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd2:	4b72      	ldr	r3, [pc, #456]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02e      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d027      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004006:	4a65      	ldr	r2, [pc, #404]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004016:	f7fd fb5d 	bl	80016d4 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fb59 	bl	80016d4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f241 3288 	movw	r2, #5000	; 0x1388
 800402c:	4293      	cmp	r3, r2
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0ae      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004034:	4b59      	ldr	r3, [pc, #356]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ee      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004040:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4953      	ldr	r1, [pc, #332]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800404e:	4313      	orrs	r3, r2
 8004050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004052:	7efb      	ldrb	r3, [r7, #27]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4a4f      	ldr	r2, [pc, #316]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004070:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4947      	ldr	r1, [pc, #284]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800408e:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4940      	ldr	r1, [pc, #256]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800409c:	4313      	orrs	r3, r2
 800409e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4938      	ldr	r1, [pc, #224]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80040be:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80040ca:	4b34      	ldr	r3, [pc, #208]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d148      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80040e0:	4b2e      	ldr	r3, [pc, #184]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d138      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80040f8:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e042      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4920      	ldr	r1, [pc, #128]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800411a:	4313      	orrs	r3, r2
 800411c:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 800411e:	4b1f      	ldr	r3, [pc, #124]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	491c      	ldr	r1, [pc, #112]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800412c:	4313      	orrs	r3, r2
 800412e:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fd facd 	bl	80016d4 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800413e:	f7fd fac9 	bl	80016d4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e020      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800415c:	e009      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	42420440 	.word	0x42420440
 80041a8:	42420070 	.word	0x42420070

080041ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e076      	b.n	80042ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ce:	d009      	beq.n	80041e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
 80041d6:	e005      	b.n	80041e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc ffba 	bl	8001178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	ea42 0103 	orr.w	r1, r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	0c1a      	lsrs	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 0204 	and.w	r2, r2, #4
 800428a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Transmit+0x22>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e12d      	b.n	8004532 <HAL_SPI_Transmit+0x27e>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042de:	f7fd f9f9 	bl	80016d4 <HAL_GetTick>
 80042e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042f8:	e116      	b.n	8004528 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_SPI_Transmit+0x52>
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800430a:	e10d      	b.n	8004528 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2203      	movs	r2, #3
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d10f      	bne.n	8004374 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	d007      	beq.n	8004392 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	d14f      	bne.n	800443c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_SPI_Transmit+0xf6>
 80043a4:	8afb      	ldrh	r3, [r7, #22]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d142      	bne.n	8004430 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	881a      	ldrh	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	1c9a      	adds	r2, r3, #2
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ce:	e02f      	b.n	8004430 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d112      	bne.n	8004404 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	881a      	ldrh	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	1c9a      	adds	r2, r3, #2
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	86da      	strh	r2, [r3, #54]	; 0x36
 8004402:	e015      	b.n	8004430 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004404:	f7fd f966 	bl	80016d4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d803      	bhi.n	800441c <HAL_SPI_Transmit+0x168>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Transmit+0x16e>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800442e:	e07b      	b.n	8004528 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ca      	bne.n	80043d0 <HAL_SPI_Transmit+0x11c>
 800443a:	e050      	b.n	80044de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_SPI_Transmit+0x196>
 8004444:	8afb      	ldrh	r3, [r7, #22]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d144      	bne.n	80044d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004470:	e030      	b.n	80044d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b02      	cmp	r3, #2
 800447e:	d113      	bne.n	80044a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80044a6:	e015      	b.n	80044d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a8:	f7fd f914 	bl	80016d4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d803      	bhi.n	80044c0 <HAL_SPI_Transmit+0x20c>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Transmit+0x212>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044d2:	e029      	b.n	8004528 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1c9      	bne.n	8004472 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fbcc 	bl	8004c80 <SPI_EndRxTxTransaction>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e003      	b.n	8004528 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004530:	7ffb      	ldrb	r3, [r7, #31]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b088      	sub	sp, #32
 800453e:	af02      	add	r7, sp, #8
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800455a:	2302      	movs	r3, #2
 800455c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800455e:	e0fb      	b.n	8004758 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d112      	bne.n	8004590 <HAL_SPI_Receive+0x56>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10e      	bne.n	8004590 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2204      	movs	r2, #4
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8ef 	bl	800476a <HAL_SPI_TransmitReceive>
 800458c:	4603      	mov	r3, r0
 800458e:	e0e8      	b.n	8004762 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_SPI_Receive+0x64>
 800459a:	2302      	movs	r3, #2
 800459c:	e0e1      	b.n	8004762 <HAL_SPI_Receive+0x228>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a6:	f7fd f895 	bl	80016d4 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Receive+0x7e>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045bc:	e0cc      	b.n	8004758 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2204      	movs	r2, #4
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004604:	d10f      	bne.n	8004626 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004624:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d007      	beq.n	8004644 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d16a      	bne.n	8004722 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800464c:	e032      	b.n	80046b4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d115      	bne.n	8004688 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f103 020c 	add.w	r2, r3, #12
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004686:	e015      	b.n	80046b4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004688:	f7fd f824 	bl	80016d4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d803      	bhi.n	80046a0 <HAL_SPI_Receive+0x166>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Receive+0x16c>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80046b2:	e051      	b.n	8004758 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1c7      	bne.n	800464e <HAL_SPI_Receive+0x114>
 80046be:	e035      	b.n	800472c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d113      	bne.n	80046f6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	b292      	uxth	r2, r2
 80046da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e015      	b.n	8004722 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f6:	f7fc ffed 	bl	80016d4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d803      	bhi.n	800470e <HAL_SPI_Receive+0x1d4>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Receive+0x1da>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004720:	e01a      	b.n	8004758 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1c9      	bne.n	80046c0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fa53 	bl	8004bdc <SPI_EndRxTransaction>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e003      	b.n	8004758 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b08c      	sub	sp, #48	; 0x30
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004778:	2301      	movs	r3, #1
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x26>
 800478c:	2302      	movs	r3, #2
 800478e:	e198      	b.n	8004ac2 <HAL_SPI_TransmitReceive+0x358>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004798:	f7fc ff9c 	bl	80016d4 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d00f      	beq.n	80047da <HAL_SPI_TransmitReceive+0x70>
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c0:	d107      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x68>
 80047ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d003      	beq.n	80047da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047d8:	e16d      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x82>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x82>
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80047f2:	e160      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d003      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2205      	movs	r2, #5
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	887a      	ldrh	r2, [r7, #2]
 800481e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	887a      	ldrh	r2, [r7, #2]
 800482a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d007      	beq.n	800485c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004864:	d17c      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x10a>
 800486e:	8b7b      	ldrh	r3, [r7, #26]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d16a      	bne.n	800494a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	881a      	ldrh	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004898:	e057      	b.n	800494a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d11b      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x176>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x176>
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d113      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	881a      	ldrh	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d119      	bne.n	8004922 <HAL_SPI_TransmitReceive+0x1b8>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d014      	beq.n	8004922 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	b292      	uxth	r2, r2
 8004904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	1c9a      	adds	r2, r3, #2
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800491e:	2301      	movs	r3, #1
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004922:	f7fc fed7 	bl	80016d4 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492e:	429a      	cmp	r2, r3
 8004930:	d80b      	bhi.n	800494a <HAL_SPI_TransmitReceive+0x1e0>
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004938:	d007      	beq.n	800494a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004948:	e0b5      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1a2      	bne.n	800489a <HAL_SPI_TransmitReceive+0x130>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d19d      	bne.n	800489a <HAL_SPI_TransmitReceive+0x130>
 800495e:	e080      	b.n	8004a62 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_SPI_TransmitReceive+0x204>
 8004968:	8b7b      	ldrh	r3, [r7, #26]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d16f      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	7812      	ldrb	r2, [r2, #0]
 800497a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004994:	e05b      	b.n	8004a4e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11c      	bne.n	80049de <HAL_SPI_TransmitReceive+0x274>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d017      	beq.n	80049de <HAL_SPI_TransmitReceive+0x274>
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d114      	bne.n	80049de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d119      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x2b6>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a20:	f7fc fe58 	bl	80016d4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d803      	bhi.n	8004a38 <HAL_SPI_TransmitReceive+0x2ce>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_TransmitReceive+0x2d4>
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a4c:	e033      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d19e      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x22c>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d199      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f90a 	bl	8004c80 <SPI_EndRxTxTransaction>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004a7e:	e01a      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aac:	e003      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3730      	adds	r7, #48	; 0x30
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004adc:	f7fc fdfa 	bl	80016d4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	4413      	add	r3, r2
 8004aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004aec:	f7fc fdf2 	bl	80016d4 <HAL_GetTick>
 8004af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	015b      	lsls	r3, r3, #5
 8004af8:	0d1b      	lsrs	r3, r3, #20
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b02:	e054      	b.n	8004bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d050      	beq.n	8004bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b0c:	f7fc fde2 	bl	80016d4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d902      	bls.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d13d      	bne.n	8004b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3a:	d111      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d004      	beq.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d107      	bne.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b68:	d10f      	bne.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e017      	b.n	8004bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d19b      	bne.n	8004b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000000 	.word	0x20000000

08004bdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf0:	d111      	bne.n	8004c16 <SPI_EndRxTransaction+0x3a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfa:	d004      	beq.n	8004c06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c04:	d107      	bne.n	8004c16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c14:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d117      	bne.n	8004c50 <SPI_EndRxTransaction+0x74>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c28:	d112      	bne.n	8004c50 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2101      	movs	r1, #1
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff ff49 	bl	8004acc <SPI_WaitFlagStateUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01a      	beq.n	8004c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e013      	b.n	8004c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff ff36 	bl	8004acc <SPI_WaitFlagStateUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e000      	b.n	8004c78 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2180      	movs	r1, #128	; 0x80
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff ff18 	bl	8004acc <SPI_WaitFlagStateUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e000      	b.n	8004cb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fc fb80 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 f82e 	bl	8004d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <TIM_Base_SetConfig+0xc8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <TIM_Base_SetConfig+0xcc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <TIM_Base_SetConfig+0xd0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <TIM_Base_SetConfig+0xd4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <TIM_Base_SetConfig+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_Base_SetConfig+0x72>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0x72>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <TIM_Base_SetConfig+0xcc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0x72>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <TIM_Base_SetConfig+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <TIM_Base_SetConfig+0xd4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <TIM_Base_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d103      	bne.n	8004e14 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	615a      	str	r2, [r3, #20]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	40012c00 	.word	0x40012c00
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00

08004e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e04b      	b.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e98:	d00e      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d10c      	bne.n	8004ed2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00

08004f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e042      	b.n	8004f98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fc fad0 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2224      	movs	r2, #36	; 0x24
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f82b 	bl	8004fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fda:	f023 030c 	bic.w	r3, r3, #12
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <UART_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005008:	f7fe ff6c 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	e002      	b.n	8005016 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005010:	f7fe ff54 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8005014:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <UART_SetConfig+0x118>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	0119      	lsls	r1, r3, #4
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <UART_SetConfig+0x118>)
 800504e:	fba3 0302 	umull	r0, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2064      	movs	r0, #100	; 0x64
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	3332      	adds	r3, #50	; 0x32
 8005060:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <UART_SetConfig+0x118>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506c:	4419      	add	r1, r3
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009a      	lsls	r2, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	fbb2 f2f3 	udiv	r2, r2, r3
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <UART_SetConfig+0x118>)
 8005086:	fba3 0302 	umull	r0, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2064      	movs	r0, #100	; 0x64
 800508e:	fb00 f303 	mul.w	r3, r0, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	3332      	adds	r3, #50	; 0x32
 8005098:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <UART_SetConfig+0x118>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	440a      	add	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40013800 	.word	0x40013800
 80050b8:	51eb851f 	.word	0x51eb851f

080050bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050bc:	b084      	sub	sp, #16
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	f107 001c 	add.w	r0, r7, #28
 80050ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 f9de 	bl	800649c <USB_CoreReset>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fc:	b004      	add	sp, #16
 80050fe:	4770      	bx	lr

08005100 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d165      	bne.n	80051e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <USB_SetTurnaroundTime+0x110>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d906      	bls.n	800512a <USB_SetTurnaroundTime+0x2a>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a3d      	ldr	r2, [pc, #244]	; (8005214 <USB_SetTurnaroundTime+0x114>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d202      	bcs.n	800512a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005124:	230f      	movs	r3, #15
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e05c      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a39      	ldr	r2, [pc, #228]	; (8005214 <USB_SetTurnaroundTime+0x114>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d306      	bcc.n	8005140 <USB_SetTurnaroundTime+0x40>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a38      	ldr	r2, [pc, #224]	; (8005218 <USB_SetTurnaroundTime+0x118>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d202      	bcs.n	8005140 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800513a:	230e      	movs	r3, #14
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e051      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4a35      	ldr	r2, [pc, #212]	; (8005218 <USB_SetTurnaroundTime+0x118>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d306      	bcc.n	8005156 <USB_SetTurnaroundTime+0x56>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a34      	ldr	r2, [pc, #208]	; (800521c <USB_SetTurnaroundTime+0x11c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d202      	bcs.n	8005156 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005150:	230d      	movs	r3, #13
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e046      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4a30      	ldr	r2, [pc, #192]	; (800521c <USB_SetTurnaroundTime+0x11c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d306      	bcc.n	800516c <USB_SetTurnaroundTime+0x6c>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a2f      	ldr	r2, [pc, #188]	; (8005220 <USB_SetTurnaroundTime+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d802      	bhi.n	800516c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005166:	230c      	movs	r3, #12
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e03b      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <USB_SetTurnaroundTime+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d906      	bls.n	8005182 <USB_SetTurnaroundTime+0x82>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <USB_SetTurnaroundTime+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d802      	bhi.n	8005182 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800517c:	230b      	movs	r3, #11
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e030      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a27      	ldr	r2, [pc, #156]	; (8005224 <USB_SetTurnaroundTime+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d906      	bls.n	8005198 <USB_SetTurnaroundTime+0x98>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <USB_SetTurnaroundTime+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d802      	bhi.n	8005198 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005192:	230a      	movs	r3, #10
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e025      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a23      	ldr	r2, [pc, #140]	; (8005228 <USB_SetTurnaroundTime+0x128>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d906      	bls.n	80051ae <USB_SetTurnaroundTime+0xae>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <USB_SetTurnaroundTime+0x12c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d202      	bcs.n	80051ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80051a8:	2309      	movs	r3, #9
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e01a      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	; (800522c <USB_SetTurnaroundTime+0x12c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d306      	bcc.n	80051c4 <USB_SetTurnaroundTime+0xc4>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <USB_SetTurnaroundTime+0x130>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051be:	2308      	movs	r3, #8
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e00f      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <USB_SetTurnaroundTime+0x130>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0xda>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a19      	ldr	r2, [pc, #100]	; (8005234 <USB_SetTurnaroundTime+0x134>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d202      	bcs.n	80051da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051d4:	2307      	movs	r3, #7
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e004      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051da:	2306      	movs	r3, #6
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e001      	b.n	80051e4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051e0:	2309      	movs	r3, #9
 80051e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	029b      	lsls	r3, r3, #10
 80051f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	00d8acbf 	.word	0x00d8acbf
 8005214:	00e4e1c0 	.word	0x00e4e1c0
 8005218:	00f42400 	.word	0x00f42400
 800521c:	01067380 	.word	0x01067380
 8005220:	011a499f 	.word	0x011a499f
 8005224:	01312cff 	.word	0x01312cff
 8005228:	014ca43f 	.word	0x014ca43f
 800522c:	016e3600 	.word	0x016e3600
 8005230:	01a6ab1f 	.word	0x01a6ab1f
 8005234:	01e84800 	.word	0x01e84800

08005238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f043 0201 	orr.w	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 0201 	bic.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d115      	bne.n	80052c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7fc fa1e 	bl	80016e8 <HAL_Delay>
      ms++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 f87a 	bl	80063ac <USB_GetMode>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d01e      	beq.n	80052fc <USB_SetCurrentMode+0x84>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b31      	cmp	r3, #49	; 0x31
 80052c2:	d9f0      	bls.n	80052a6 <USB_SetCurrentMode+0x2e>
 80052c4:	e01a      	b.n	80052fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052d8:	2001      	movs	r0, #1
 80052da:	f7fc fa05 	bl	80016e8 <HAL_Delay>
      ms++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 f861 	bl	80063ac <USB_GetMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <USB_SetCurrentMode+0x84>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b31      	cmp	r3, #49	; 0x31
 80052f4:	d9f0      	bls.n	80052d8 <USB_SetCurrentMode+0x60>
 80052f6:	e001      	b.n	80052fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e005      	b.n	8005308 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b32      	cmp	r3, #50	; 0x32
 8005300:	d101      	bne.n	8005306 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005310:	b084      	sub	sp, #16
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800531e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e009      	b.n	8005344 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3340      	adds	r3, #64	; 0x40
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b0e      	cmp	r3, #14
 8005348:	d9f2      	bls.n	8005330 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005362:	2103      	movs	r1, #3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f959 	bl	800561c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800536a:	2110      	movs	r1, #16
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8f1 	bl	8005554 <USB_FlushTxFifo>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f91d 	bl	80055bc <USB_FlushRxFifo>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	461a      	mov	r2, r3
 8005394:	2300      	movs	r3, #0
 8005396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e043      	b.n	800543e <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053cc:	d118      	bne.n	8005400 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e013      	b.n	8005412 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	461a      	mov	r2, r3
 80053f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e008      	b.n	8005412 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	461a      	mov	r2, r3
 8005420:	2300      	movs	r3, #0
 8005422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	461a      	mov	r2, r3
 8005432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3301      	adds	r3, #1
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d3b7      	bcc.n	80053b6 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e043      	b.n	80054d4 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800545e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005462:	d118      	bne.n	8005496 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e013      	b.n	80054a8 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e008      	b.n	80054a8 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	461a      	mov	r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	461a      	mov	r2, r3
 80054c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d3b7      	bcc.n	800544c <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <USB_DevInit+0x240>)
 8005510:	4313      	orrs	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0208 	orr.w	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d107      	bne.n	800553e <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005536:	f043 0304 	orr.w	r3, r3, #4
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554a:	b004      	add	sp, #16
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	803c3800 	.word	0x803c3800

08005554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <USB_FlushTxFifo+0x64>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e01b      	b.n	80055ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	daf2      	bge.n	8005562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <USB_FlushTxFifo+0x64>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e006      	b.n	80055ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d0f0      	beq.n	800558c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	00030d40 	.word	0x00030d40

080055bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a11      	ldr	r2, [pc, #68]	; (8005618 <USB_FlushRxFifo+0x5c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e018      	b.n	800560c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	daf2      	bge.n	80055c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2210      	movs	r2, #16
 80055ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a08      	ldr	r2, [pc, #32]	; (8005618 <USB_FlushRxFifo+0x5c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e006      	b.n	800560c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b10      	cmp	r3, #16
 8005608:	d0f0      	beq.n	80055ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0306 	and.w	r3, r3, #6
 8005664:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d002      	beq.n	8005672 <USB_GetDevSpeed+0x26>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d102      	bne.n	8005678 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005672:	2302      	movs	r3, #2
 8005674:	75fb      	strb	r3, [r7, #23]
 8005676:	e001      	b.n	800567c <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005678:	230f      	movs	r3, #15
 800567a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
}
 800567e:	4618      	mov	r0, r3
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d13a      	bne.n	800571a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d155      	bne.n	8005788 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	791b      	ldrb	r3, [r3, #4]
 80056f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	059b      	lsls	r3, r3, #22
 80056fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005700:	4313      	orrs	r3, r2
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	e036      	b.n	8005788 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4313      	orrs	r3, r2
 800573a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11a      	bne.n	8005788 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	791b      	ldrb	r3, [r3, #4]
 800576c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800576e:	430b      	orrs	r3, r1
 8005770:	4313      	orrs	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d161      	bne.n	8005874 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c6:	d11f      	bne.n	8005808 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	2101      	movs	r1, #1
 800581a:	fa01 f303 	lsl.w	r3, r1, r3
 800581e:	b29b      	uxth	r3, r3
 8005820:	43db      	mvns	r3, r3
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005828:	4013      	ands	r3, r2
 800582a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	2101      	movs	r1, #1
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4013      	ands	r3, r2
 800584e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	0159      	lsls	r1, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	440b      	add	r3, r1
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	4619      	mov	r1, r3
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <USB_DeactivateEndpoint+0x1b0>)
 800586e:	4013      	ands	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
 8005872:	e060      	b.n	8005936 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588a:	d11f      	bne.n	80058cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	2101      	movs	r1, #1
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	041b      	lsls	r3, r3, #16
 80058e4:	43db      	mvns	r3, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ec:	4013      	ands	r3, r2
 80058ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	43db      	mvns	r3, r3
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005910:	4013      	ands	r3, r2
 8005912:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	0159      	lsls	r1, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	440b      	add	r3, r1
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	4619      	mov	r1, r3
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <USB_DeactivateEndpoint+0x1b4>)
 8005932:	4013      	ands	r3, r2
 8005934:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	ec337800 	.word	0xec337800
 8005948:	eff37800 	.word	0xeff37800

0800594c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	f040 8128 	bne.w	8005bba <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d132      	bne.n	80059d8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005990:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	0cdb      	lsrs	r3, r3, #19
 80059d2:	04db      	lsls	r3, r3, #19
 80059d4:	6113      	str	r3, [r2, #16]
 80059d6:	e092      	b.n	8005afe <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	0cdb      	lsrs	r3, r3, #19
 80059f4:	04db      	lsls	r3, r3, #19
 80059f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11a      	bne.n	8005a58 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d903      	bls.n	8005a36 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a54:	6113      	str	r3, [r2, #16]
 8005a56:	e01b      	b.n	8005a90 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a64:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6919      	ldr	r1, [r3, #16]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	440b      	add	r3, r1
 8005a70:	1e59      	subs	r1, r3, #1
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a7a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a7c:	4b8d      	ldr	r3, [pc, #564]	; (8005cb4 <USB_EPStartXfer+0x368>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	6939      	ldr	r1, [r7, #16]
 8005a82:	0148      	lsls	r0, r1, #5
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	4401      	add	r1, r0
 8005a88:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11f      	bne.n	8005afe <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005adc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b1c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d015      	beq.n	8005b52 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8139 	beq.w	8005da2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	6979      	ldr	r1, [r7, #20]
 8005b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	634b      	str	r3, [r1, #52]	; 0x34
 8005b50:	e127      	b.n	8005da2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d110      	bne.n	8005b84 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e00f      	b.n	8005ba4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9a5 	bl	8005f02 <USB_WritePacket>
 8005bb8:	e0f3      	b.n	8005da2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	0cdb      	lsrs	r3, r3, #19
 8005bd6:	04db      	lsls	r3, r3, #19
 8005bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bfc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d12f      	bne.n	8005c64 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c32:	6939      	ldr	r1, [r7, #16]
 8005c34:	0148      	lsls	r0, r1, #5
 8005c36:	6979      	ldr	r1, [r7, #20]
 8005c38:	4401      	add	r1, r0
 8005c3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c60:	6113      	str	r3, [r2, #16]
 8005c62:	e061      	b.n	8005d28 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d125      	bne.n	8005cb8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	6939      	ldr	r1, [r7, #16]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
 8005cb2:	e039      	b.n	8005d28 <USB_EPStartXfer+0x3dc>
 8005cb4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	1e5a      	subs	r2, r3, #1
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	89fa      	ldrh	r2, [r7, #14]
 8005cd4:	fb03 f202 	mul.w	r2, r3, r2
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	04d9      	lsls	r1, r3, #19
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <USB_EPStartXfer+0x460>)
 8005cf0:	400b      	ands	r3, r1
 8005cf2:	6939      	ldr	r1, [r7, #16]
 8005cf4:	0148      	lsls	r0, r1, #5
 8005cf6:	6979      	ldr	r1, [r7, #20]
 8005cf8:	4401      	add	r1, r0
 8005cfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d18:	6939      	ldr	r1, [r7, #16]
 8005d1a:	0148      	lsls	r0, r1, #5
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	4401      	add	r1, r0
 8005d20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d24:	4313      	orrs	r3, r2
 8005d26:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	791b      	ldrb	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d128      	bne.n	8005d82 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d110      	bne.n	8005d62 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e00f      	b.n	8005d82 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d80:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	1ff80000 	.word	0x1ff80000

08005db0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d14a      	bne.n	8005e64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	f040 8086 	bne.w	8005ef6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	0151      	lsls	r1, r2, #5
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	440a      	add	r2, r1
 8005e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d902      	bls.n	8005e48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	75fb      	strb	r3, [r7, #23]
          break;
 8005e46:	e056      	b.n	8005ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e60:	d0e7      	beq.n	8005e32 <USB_EPStopXfer+0x82>
 8005e62:	e048      	b.n	8005ef6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7c:	d13b      	bne.n	8005ef6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	7812      	ldrb	r2, [r2, #0]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ea0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d902      	bls.n	8005edc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eda:	e00c      	b.n	8005ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d0e7      	beq.n	8005ec6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b089      	sub	sp, #36	; 0x24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	460b      	mov	r3, r1
 8005f12:	71fb      	strb	r3, [r7, #7]
 8005f14:	4613      	mov	r3, r2
 8005f16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005f20:	88bb      	ldrh	r3, [r7, #4]
 8005f22:	3303      	adds	r3, #3
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e018      	b.n	8005f60 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	031a      	lsls	r2, r3, #12
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d3e2      	bcc.n	8005f2e <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3724      	adds	r7, #36	; 0x24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr

08005f74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b08b      	sub	sp, #44	; 0x2c
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	089b      	lsrs	r3, r3, #2
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	623b      	str	r3, [r7, #32]
 8005f9e:	e014      	b.n	8005fca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	3301      	adds	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	3301      	adds	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3e6      	bcc.n	8005fa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01e      	beq.n	8006016 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f107 0310 	add.w	r3, r7, #16
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	3301      	adds	r3, #1
 8006002:	623b      	str	r3, [r7, #32]
      pDest++;
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800600a:	8bfb      	ldrh	r3, [r7, #30]
 800600c:	3b01      	subs	r3, #1
 800600e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006010:	8bfb      	ldrh	r3, [r7, #30]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1ea      	bne.n	8005fec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006018:	4618      	mov	r0, r3
 800601a:	372c      	adds	r7, #44	; 0x2c
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d12c      	bne.n	8006098 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db12      	blt.n	8006076 <USB_EPSetStall+0x54>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006074:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e02b      	b.n	80060f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	db12      	blt.n	80060d0 <USB_EPSetStall+0xae>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00f      	beq.n	80060d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d128      	bne.n	800616a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006136:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	791b      	ldrb	r3, [r3, #4]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d003      	beq.n	8006148 <USB_EPClearStall+0x4c>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	791b      	ldrb	r3, [r3, #4]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d138      	bne.n	80061ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e027      	b.n	80061ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006188:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d003      	beq.n	800619a <USB_EPClearStall+0x9e>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d10f      	bne.n	80061ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061e8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006200:	4313      	orrs	r3, r2
 8006202:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623e:	f023 0302 	bic.w	r3, r3, #2
 8006242:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr

08006290 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a8:	68fb      	ldr	r3, [r7, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	0c1b      	lsrs	r3, r3, #16
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	b29b      	uxth	r3, r3
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006346:	68bb      	ldr	r3, [r7, #8]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	01db      	lsls	r3, r3, #7
 8006384:	b2db      	uxtb	r3, r3
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4013      	ands	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a0:	68bb      	ldr	r3, [r7, #8]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bc80      	pop	{r7}
 80063aa:	4770      	bx	lr

080063ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	f003 0301 	and.w	r3, r3, #1
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
	...

0800640c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	333c      	adds	r3, #60	; 0x3c
 800641e:	3304      	adds	r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <USB_EP0_OutStart+0x8c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d90a      	bls.n	8006442 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800643c:	d101      	bne.n	8006442 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e024      	b.n	800648c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	2300      	movs	r3, #0
 800644c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006470:	f043 0318 	orr.w	r3, r3, #24
 8006474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006488:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	4f54300a 	.word	0x4f54300a

0800649c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4a12      	ldr	r2, [pc, #72]	; (80064fc <USB_CoreReset+0x60>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e01b      	b.n	80064f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	daf2      	bge.n	80064a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f043 0201 	orr.w	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3301      	adds	r3, #1
 80064d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a08      	ldr	r2, [pc, #32]	; (80064fc <USB_CoreReset+0x60>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d901      	bls.n	80064e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e006      	b.n	80064f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d0f0      	beq.n	80064d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr
 80064fc:	00030d40 	.word	0x00030d40

08006500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	7c1b      	ldrb	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d115      	bne.n	8006544 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800651c:	2202      	movs	r2, #2
 800651e:	2181      	movs	r1, #129	; 0x81
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 ff22 	bl	800836a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800652c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006530:	2202      	movs	r2, #2
 8006532:	2101      	movs	r1, #1
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 ff18 	bl	800836a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006542:	e012      	b.n	800656a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	2202      	movs	r2, #2
 8006548:	2181      	movs	r1, #129	; 0x81
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 ff0d 	bl	800836a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	2202      	movs	r2, #2
 800655a:	2101      	movs	r1, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 ff04 	bl	800836a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800656a:	2308      	movs	r3, #8
 800656c:	2203      	movs	r2, #3
 800656e:	2182      	movs	r1, #130	; 0x82
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fefa 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800657c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006580:	f002 f81a 	bl	80085b8 <USBD_static_malloc>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	e026      	b.n	80065ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	7c1b      	ldrb	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 ffb9 	bl	800854a <USBD_LL_PrepareReceive>
 80065d8:	e007      	b.n	80065ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	2101      	movs	r1, #1
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 ffb0 	bl	800854a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006604:	2181      	movs	r1, #129	; 0x81
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fed5 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006612:	2101      	movs	r1, #1
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fece 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006622:	2182      	movs	r1, #130	; 0x82
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fec6 	bl	80083b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	4618      	mov	r0, r3
 800664c:	f001 ffc0 	bl	80085d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006688:	2b00      	cmp	r3, #0
 800668a:	d039      	beq.n	8006700 <USBD_CDC_Setup+0x9e>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d17f      	bne.n	8006790 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	88db      	ldrh	r3, [r3, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d029      	beq.n	80066ec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b25b      	sxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da11      	bge.n	80066c6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80066ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	88d2      	ldrh	r2, [r2, #6]
 80066b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066b6:	6939      	ldr	r1, [r7, #16]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	88db      	ldrh	r3, [r3, #6]
 80066bc:	461a      	mov	r2, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fa41 	bl	8007b46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80066c4:	e06b      	b.n	800679e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	785a      	ldrb	r2, [r3, #1]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	88db      	ldrh	r3, [r3, #6]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066dc:	6939      	ldr	r1, [r7, #16]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	88db      	ldrh	r3, [r3, #6]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fa5c 	bl	8007ba2 <USBD_CtlPrepareRx>
      break;
 80066ea:	e058      	b.n	800679e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	7850      	ldrb	r0, [r2, #1]
 80066f8:	2200      	movs	r2, #0
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4798      	blx	r3
      break;
 80066fe:	e04e      	b.n	800679e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b0b      	cmp	r3, #11
 8006706:	d02e      	beq.n	8006766 <USBD_CDC_Setup+0x104>
 8006708:	2b0b      	cmp	r3, #11
 800670a:	dc38      	bgt.n	800677e <USBD_CDC_Setup+0x11c>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <USBD_CDC_Setup+0xb4>
 8006710:	2b0a      	cmp	r3, #10
 8006712:	d014      	beq.n	800673e <USBD_CDC_Setup+0xdc>
 8006714:	e033      	b.n	800677e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671c:	2b03      	cmp	r3, #3
 800671e:	d107      	bne.n	8006730 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006720:	f107 030c 	add.w	r3, r7, #12
 8006724:	2202      	movs	r2, #2
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fa0c 	bl	8007b46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800672e:	e02e      	b.n	800678e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 f99d 	bl	8007a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	75fb      	strb	r3, [r7, #23]
          break;
 800673c:	e027      	b.n	800678e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006744:	2b03      	cmp	r3, #3
 8006746:	d107      	bne.n	8006758 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006748:	f107 030f 	add.w	r3, r7, #15
 800674c:	2201      	movs	r2, #1
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f9f8 	bl	8007b46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006756:	e01a      	b.n	800678e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 f989 	bl	8007a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	75fb      	strb	r3, [r7, #23]
          break;
 8006764:	e013      	b.n	800678e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676c:	2b03      	cmp	r3, #3
 800676e:	d00d      	beq.n	800678c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 f97d 	bl	8007a72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800677c:	e006      	b.n	800678c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f976 	bl	8007a72 <USBD_CtlError>
          ret = USBD_FAIL;
 8006786:	2302      	movs	r3, #2
 8006788:	75fb      	strb	r3, [r7, #23]
          break;
 800678a:	e000      	b.n	800678e <USBD_CDC_Setup+0x12c>
          break;
 800678c:	bf00      	nop
      }
      break;
 800678e:	e006      	b.n	800679e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f96d 	bl	8007a72 <USBD_CtlError>
      ret = USBD_FAIL;
 8006798:	2302      	movs	r3, #2
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	bf00      	nop
  }

  return ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03a      	beq.n	8006844 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	331c      	adds	r3, #28
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d029      	beq.n	8006838 <USBD_CDC_DataIn+0x90>
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	331c      	adds	r3, #28
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	78f9      	ldrb	r1, [r7, #3]
 80067f8:	68b8      	ldr	r0, [r7, #8]
 80067fa:	460b      	mov	r3, r1
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	440b      	add	r3, r1
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4403      	add	r3, r0
 8006804:	3344      	adds	r3, #68	; 0x44
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	fbb2 f1f3 	udiv	r1, r2, r3
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d110      	bne.n	8006838 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	331c      	adds	r3, #28
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800682a:	78f9      	ldrb	r1, [r7, #3]
 800682c:	2300      	movs	r3, #0
 800682e:	2200      	movs	r2, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fe67 	bl	8008504 <USBD_LL_Transmit>
 8006836:	e003      	b.n	8006840 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fe92 	bl	8008590 <USBD_LL_GetRxDataSize>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00d      	beq.n	800689a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006892:	4611      	mov	r1, r2
 8006894:	4798      	blx	r3

    return USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e000      	b.n	800689c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800689a:	2302      	movs	r3, #2
  }
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d015      	beq.n	80068ea <USBD_CDC_EP0_RxReady+0x46>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068c4:	2bff      	cmp	r3, #255	; 0xff
 80068c6:	d010      	beq.n	80068ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80068d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068de:	b292      	uxth	r2, r2
 80068e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2243      	movs	r2, #67	; 0x43
 8006900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006902:	4b03      	ldr	r3, [pc, #12]	; (8006910 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000094 	.word	0x20000094

08006914 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2243      	movs	r2, #67	; 0x43
 8006920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006922:	4b03      	ldr	r3, [pc, #12]	; (8006930 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000050 	.word	0x20000050

08006934 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2243      	movs	r2, #67	; 0x43
 8006940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006942:	4b03      	ldr	r3, [pc, #12]	; (8006950 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	200000d8 	.word	0x200000d8

08006954 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	220a      	movs	r2, #10
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c

08006974 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01c      	beq.n	8006a4c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2181      	movs	r1, #129	; 0x81
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fd60 	bl	8008504 <USBD_LL_Transmit>

      return USBD_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	e002      	b.n	8006a4e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7c1b      	ldrb	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a82:	2101      	movs	r1, #1
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fd60 	bl	800854a <USBD_LL_PrepareReceive>
 8006a8a:	e007      	b.n	8006a9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	2101      	movs	r1, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fd57 	bl	800854a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e01a      	b.n	8006af8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	79fa      	ldrb	r2, [r7, #7]
 8006aee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f001 fbdb 	bl	80082ac <USBD_LL_Init>

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	e001      	b.n	8006b26 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b22:	2302      	movs	r3, #2
 8006b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 fbfa 	bl	8008334 <USBD_LL_Start>

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	4611      	mov	r1, r2
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ff10 	bl	80079fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d016      	beq.n	8006c2c <USBD_LL_SetupStage+0x6a>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d81c      	bhi.n	8006c3c <USBD_LL_SetupStage+0x7a>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <USBD_LL_SetupStage+0x4a>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d008      	beq.n	8006c1c <USBD_LL_SetupStage+0x5a>
 8006c0a:	e017      	b.n	8006c3c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa03 	bl	8007020 <USBD_StdDevReq>
      break;
 8006c1a:	e01a      	b.n	8006c52 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa65 	bl	80070f4 <USBD_StdItfReq>
      break;
 8006c2a:	e012      	b.n	8006c52 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faa5 	bl	8007184 <USBD_StdEPReq>
      break;
 8006c3a:	e00a      	b.n	8006c52 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fbd2 	bl	80083f4 <USBD_LL_StallEP>
      break;
 8006c50:	bf00      	nop
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	460b      	mov	r3, r1
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d14b      	bne.n	8006d08 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d134      	bne.n	8006cec <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d919      	bls.n	8006cc2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d203      	bcs.n	8006cb0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	e002      	b.n	8006cb6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 ff8f 	bl	8007bde <USBD_CtlContinueRx>
 8006cc0:	e038      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d105      	bne.n	8006ce4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 ff8c 	bl	8007c02 <USBD_CtlSendStatus>
 8006cea:	e023      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d11e      	bne.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f001 fb77 	bl	80083f4 <USBD_LL_StallEP>
 8006d06:	e015      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d108      	bne.n	8006d30 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	e001      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e000      	b.n	8006d36 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	460b      	mov	r3, r1
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d17f      	bne.n	8006e52 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3314      	adds	r3, #20
 8006d56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d15c      	bne.n	8006e1c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d915      	bls.n	8006d9a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fef9 	bl	8007b7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f001 fbd9 	bl	800854a <USBD_LL_PrepareReceive>
 8006d98:	e04e      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6912      	ldr	r2, [r2, #16]
 8006da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006da6:	fb01 f202 	mul.w	r2, r1, r2
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11c      	bne.n	8006dea <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d316      	bcc.n	8006dea <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d20f      	bcs.n	8006dea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2100      	movs	r1, #0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fed5 	bl	8007b7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f001 fbb1 	bl	800854a <USBD_LL_PrepareReceive>
 8006de8:	e026      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d105      	bne.n	8006e0c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e0c:	2180      	movs	r1, #128	; 0x80
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f001 faf0 	bl	80083f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 ff07 	bl	8007c28 <USBD_CtlReceiveStatus>
 8006e1a:	e00d      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d004      	beq.n	8006e30 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f001 fade 	bl	80083f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d11d      	bne.n	8006e7e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fe81 	bl	8006b4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e50:	e015      	b.n	8006e7e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d108      	bne.n	8006e7a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	7afa      	ldrb	r2, [r7, #11]
 8006e72:	4611      	mov	r1, r2
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	4798      	blx	r3
 8006e78:	e001      	b.n	8006e7e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e000      	b.n	8006e80 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fa67 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f001 fa59 	bl	800836a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6852      	ldr	r2, [r2, #4]
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	4611      	mov	r1, r2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
  }

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d105      	bne.n	8006f6e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d10b      	bne.n	8006fa4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr

08006ff2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6852      	ldr	r2, [r2, #4]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	4611      	mov	r1, r2
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d005      	beq.n	8007046 <USBD_StdDevReq+0x26>
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d84f      	bhi.n	80070de <USBD_StdDevReq+0xbe>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <USBD_StdDevReq+0x36>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d14b      	bne.n	80070de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
      break;
 8007054:	e048      	b.n	80070e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b09      	cmp	r3, #9
 800705c:	d839      	bhi.n	80070d2 <USBD_StdDevReq+0xb2>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBD_StdDevReq+0x44>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b5 	.word	0x080070b5
 8007068:	080070c9 	.word	0x080070c9
 800706c:	080070d3 	.word	0x080070d3
 8007070:	080070bf 	.word	0x080070bf
 8007074:	080070d3 	.word	0x080070d3
 8007078:	08007097 	.word	0x08007097
 800707c:	0800708d 	.word	0x0800708d
 8007080:	080070d3 	.word	0x080070d3
 8007084:	080070ab 	.word	0x080070ab
 8007088:	080070a1 	.word	0x080070a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9dc 	bl	800744c <USBD_GetDescriptor>
          break;
 8007094:	e022      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb3f 	bl	800771c <USBD_SetAddress>
          break;
 800709e:	e01d      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb7e 	bl	80077a4 <USBD_SetConfig>
          break;
 80070a8:	e018      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fc07 	bl	80078c0 <USBD_GetConfig>
          break;
 80070b2:	e013      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc37 	bl	800792a <USBD_GetStatus>
          break;
 80070bc:	e00e      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fc65 	bl	8007990 <USBD_SetFeature>
          break;
 80070c6:	e009      	b.n	80070dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fc74 	bl	80079b8 <USBD_ClrFeature>
          break;
 80070d0:	e004      	b.n	80070dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fccc 	bl	8007a72 <USBD_CtlError>
          break;
 80070da:	bf00      	nop
      }
      break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fcc6 	bl	8007a72 <USBD_CtlError>
      break;
 80070e6:	bf00      	nop
  }

  return ret;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop

080070f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	d005      	beq.n	800711a <USBD_StdItfReq+0x26>
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d82e      	bhi.n	8007170 <USBD_StdItfReq+0x7c>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <USBD_StdItfReq+0x26>
 8007116:	2b20      	cmp	r3, #32
 8007118:	d12a      	bne.n	8007170 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	3b01      	subs	r3, #1
 8007122:	2b02      	cmp	r3, #2
 8007124:	d81d      	bhi.n	8007162 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d813      	bhi.n	8007158 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USBD_StdItfReq+0x78>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fd56 	bl	8007c02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007156:	e009      	b.n	800716c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fc89 	bl	8007a72 <USBD_CtlError>
          break;
 8007160:	e004      	b.n	800716c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc84 	bl	8007a72 <USBD_CtlError>
          break;
 800716a:	e000      	b.n	800716e <USBD_StdItfReq+0x7a>
          break;
 800716c:	bf00      	nop
      }
      break;
 800716e:	e004      	b.n	800717a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc7d 	bl	8007a72 <USBD_CtlError>
      break;
 8007178:	bf00      	nop
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	889b      	ldrh	r3, [r3, #4]
 8007196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d007      	beq.n	80071b4 <USBD_StdEPReq+0x30>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	f200 8146 	bhi.w	8007436 <USBD_StdEPReq+0x2b2>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <USBD_StdEPReq+0x40>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	f040 8141 	bne.w	8007436 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
      break;
 80071c2:	e13d      	b.n	8007440 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d10a      	bne.n	80071e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	e12d      	b.n	8007442 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d007      	beq.n	80071fe <USBD_StdEPReq+0x7a>
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	f300 811b 	bgt.w	800742a <USBD_StdEPReq+0x2a6>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d072      	beq.n	80072de <USBD_StdEPReq+0x15a>
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d03a      	beq.n	8007272 <USBD_StdEPReq+0xee>
 80071fc:	e115      	b.n	800742a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	2b02      	cmp	r3, #2
 8007206:	d002      	beq.n	800720e <USBD_StdEPReq+0x8a>
 8007208:	2b03      	cmp	r3, #3
 800720a:	d015      	beq.n	8007238 <USBD_StdEPReq+0xb4>
 800720c:	e02b      	b.n	8007266 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <USBD_StdEPReq+0xaa>
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d009      	beq.n	800722e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 f8e8 	bl	80083f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007224:	2180      	movs	r1, #128	; 0x80
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 f8e4 	bl	80083f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800722c:	e020      	b.n	8007270 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc1e 	bl	8007a72 <USBD_CtlError>
              break;
 8007236:	e01b      	b.n	8007270 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	885b      	ldrh	r3, [r3, #2]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10e      	bne.n	800725e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <USBD_StdEPReq+0xda>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b80      	cmp	r3, #128	; 0x80
 800724a:	d008      	beq.n	800725e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	88db      	ldrh	r3, [r3, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f8cb 	bl	80083f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fccf 	bl	8007c02 <USBD_CtlSendStatus>

              break;
 8007264:	e004      	b.n	8007270 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fc02 	bl	8007a72 <USBD_CtlError>
              break;
 800726e:	bf00      	nop
          }
          break;
 8007270:	e0e0      	b.n	8007434 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <USBD_StdEPReq+0xfe>
 800727c:	2b03      	cmp	r3, #3
 800727e:	d015      	beq.n	80072ac <USBD_StdEPReq+0x128>
 8007280:	e026      	b.n	80072d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00c      	beq.n	80072a2 <USBD_StdEPReq+0x11e>
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b80      	cmp	r3, #128	; 0x80
 800728c:	d009      	beq.n	80072a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 f8ae 	bl	80083f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007298:	2180      	movs	r1, #128	; 0x80
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 f8aa 	bl	80083f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a0:	e01c      	b.n	80072dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fbe4 	bl	8007a72 <USBD_CtlError>
              break;
 80072aa:	e017      	b.n	80072dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	885b      	ldrh	r3, [r3, #2]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d112      	bne.n	80072da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f8b5 	bl	8008432 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc9a 	bl	8007c02 <USBD_CtlSendStatus>
              }
              break;
 80072ce:	e004      	b.n	80072da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fbcd 	bl	8007a72 <USBD_CtlError>
              break;
 80072d8:	e000      	b.n	80072dc <USBD_StdEPReq+0x158>
              break;
 80072da:	bf00      	nop
          }
          break;
 80072dc:	e0aa      	b.n	8007434 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d002      	beq.n	80072ee <USBD_StdEPReq+0x16a>
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d032      	beq.n	8007352 <USBD_StdEPReq+0x1ce>
 80072ec:	e097      	b.n	800741e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ee:	7bbb      	ldrb	r3, [r7, #14]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <USBD_StdEPReq+0x180>
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b80      	cmp	r3, #128	; 0x80
 80072f8:	d004      	beq.n	8007304 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fbb8 	bl	8007a72 <USBD_CtlError>
                break;
 8007302:	e091      	b.n	8007428 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da0b      	bge.n	8007324 <USBD_StdEPReq+0x1a0>
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	3310      	adds	r3, #16
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	e00b      	b.n	800733c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	4413      	add	r3, r2
 800733a:	3304      	adds	r3, #4
 800733c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2202      	movs	r2, #2
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fbfb 	bl	8007b46 <USBD_CtlSendData>
              break;
 8007350:	e06a      	b.n	8007428 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da11      	bge.n	800737e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3318      	adds	r3, #24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d117      	bne.n	80073a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb7b 	bl	8007a72 <USBD_CtlError>
                  break;
 800737c:	e054      	b.n	8007428 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 020f 	and.w	r2, r3, #15
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fb68 	bl	8007a72 <USBD_CtlError>
                  break;
 80073a2:	e041      	b.n	8007428 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da0b      	bge.n	80073c4 <USBD_StdEPReq+0x240>
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	3310      	adds	r3, #16
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	3304      	adds	r3, #4
 80073c2:	e00b      	b.n	80073dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	3304      	adds	r3, #4
 80073dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <USBD_StdEPReq+0x266>
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d103      	bne.n	80073f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e00e      	b.n	8007410 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 f83a 	bl	8008470 <USBD_LL_IsStallEP>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e002      	b.n	8007410 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2202      	movs	r2, #2
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb95 	bl	8007b46 <USBD_CtlSendData>
              break;
 800741c:	e004      	b.n	8007428 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb26 	bl	8007a72 <USBD_CtlError>
              break;
 8007426:	bf00      	nop
          }
          break;
 8007428:	e004      	b.n	8007434 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fb20 	bl	8007a72 <USBD_CtlError>
          break;
 8007432:	bf00      	nop
      }
      break;
 8007434:	e004      	b.n	8007440 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb1a 	bl	8007a72 <USBD_CtlError>
      break;
 800743e:	bf00      	nop
  }

  return ret;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	2b06      	cmp	r3, #6
 800746e:	f200 8128 	bhi.w	80076c2 <USBD_GetDescriptor+0x276>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <USBD_GetDescriptor+0x2c>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	08007495 	.word	0x08007495
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074ed 	.word	0x080074ed
 8007484:	080076c3 	.word	0x080076c3
 8007488:	080076c3 	.word	0x080076c3
 800748c:	08007663 	.word	0x08007663
 8007490:	0800768f 	.word	0x0800768f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
      break;
 80074aa:	e112      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7c1b      	ldrb	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	f107 0208 	add.w	r2, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ce:	e100      	b.n	80076d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	f107 0208 	add.w	r2, r7, #8
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
 80074e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	2202      	movs	r2, #2
 80074e8:	701a      	strb	r2, [r3, #0]
      break;
 80074ea:	e0f2      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	885b      	ldrh	r3, [r3, #2]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	f200 80ac 	bhi.w	8007650 <USBD_GetDescriptor+0x204>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBD_GetDescriptor+0xb4>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007519 	.word	0x08007519
 8007504:	0800754d 	.word	0x0800754d
 8007508:	08007581 	.word	0x08007581
 800750c:	080075b5 	.word	0x080075b5
 8007510:	080075e9 	.word	0x080075e9
 8007514:	0800761d 	.word	0x0800761d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7c12      	ldrb	r2, [r2, #16]
 8007530:	f107 0108 	add.w	r1, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753a:	e091      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa97 	bl	8007a72 <USBD_CtlError>
            err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
          break;
 800754a:	e089      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756e:	e077      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa7d 	bl	8007a72 <USBD_CtlError>
            err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
          break;
 800757e:	e06f      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00b      	beq.n	80075a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7c12      	ldrb	r2, [r2, #16]
 8007598:	f107 0108 	add.w	r1, r7, #8
 800759c:	4610      	mov	r0, r2
 800759e:	4798      	blx	r3
 80075a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a2:	e05d      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa63 	bl	8007a72 <USBD_CtlError>
            err++;
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	3301      	adds	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
          break;
 80075b2:	e055      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7c12      	ldrb	r2, [r2, #16]
 80075cc:	f107 0108 	add.w	r1, r7, #8
 80075d0:	4610      	mov	r0, r2
 80075d2:	4798      	blx	r3
 80075d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d6:	e043      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa49 	bl	8007a72 <USBD_CtlError>
            err++;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3301      	adds	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]
          break;
 80075e6:	e03b      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	7c12      	ldrb	r2, [r2, #16]
 8007600:	f107 0108 	add.w	r1, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760a:	e029      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa2f 	bl	8007a72 <USBD_CtlError>
            err++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
          break;
 800761a:	e021      	b.n	8007660 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	7c12      	ldrb	r2, [r2, #16]
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763e:	e00f      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa15 	bl	8007a72 <USBD_CtlError>
            err++;
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	3301      	adds	r3, #1
 800764c:	72fb      	strb	r3, [r7, #11]
          break;
 800764e:	e007      	b.n	8007660 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa0d 	bl	8007a72 <USBD_CtlError>
          err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800765e:	e038      	b.n	80076d2 <USBD_GetDescriptor+0x286>
 8007660:	e037      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7c1b      	ldrb	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	f107 0208 	add.w	r2, r7, #8
 8007676:	4610      	mov	r0, r2
 8007678:	4798      	blx	r3
 800767a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800767c:	e029      	b.n	80076d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f9f6 	bl	8007a72 <USBD_CtlError>
        err++;
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	3301      	adds	r3, #1
 800768a:	72fb      	strb	r3, [r7, #11]
      break;
 800768c:	e021      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	7c1b      	ldrb	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f107 0208 	add.w	r2, r7, #8
 80076a2:	4610      	mov	r0, r2
 80076a4:	4798      	blx	r3
 80076a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	2207      	movs	r2, #7
 80076ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b0:	e00f      	b.n	80076d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f9dc 	bl	8007a72 <USBD_CtlError>
        err++;
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	3301      	adds	r3, #1
 80076be:	72fb      	strb	r3, [r7, #11]
      break;
 80076c0:	e007      	b.n	80076d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f9d4 	bl	8007a72 <USBD_CtlError>
      err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	bf00      	nop
  }

  if (err != 0U)
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11c      	bne.n	8007712 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d011      	beq.n	8007702 <USBD_GetDescriptor+0x2b6>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88da      	ldrh	r2, [r3, #6]
 80076ea:	893b      	ldrh	r3, [r7, #8]
 80076ec:	4293      	cmp	r3, r2
 80076ee:	bf28      	it	cs
 80076f0:	4613      	movcs	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa22 	bl	8007b46 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa79 	bl	8007c02 <USBD_CtlSendStatus>
 8007710:	e000      	b.n	8007714 <USBD_GetDescriptor+0x2c8>
    return;
 8007712:	bf00      	nop
    }
  }
}
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop

0800771c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d130      	bne.n	8007790 <USBD_SetAddress+0x74>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	88db      	ldrh	r3, [r3, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d12c      	bne.n	8007790 <USBD_SetAddress+0x74>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	2b7f      	cmp	r3, #127	; 0x7f
 800773c:	d828      	bhi.n	8007790 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007748:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007750:	2b03      	cmp	r3, #3
 8007752:	d104      	bne.n	800775e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f98b 	bl	8007a72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775c:	e01d      	b.n	800779a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7bfa      	ldrb	r2, [r7, #15]
 8007762:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 feab 	bl	80084c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa46 	bl	8007c02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007784:	e009      	b.n	800779a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	e004      	b.n	800779a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f96d 	bl	8007a72 <USBD_CtlError>
  }
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	885b      	ldrh	r3, [r3, #2]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	4b41      	ldr	r3, [pc, #260]	; (80078bc <USBD_SetConfig+0x118>)
 80077b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077b8:	4b40      	ldr	r3, [pc, #256]	; (80078bc <USBD_SetConfig+0x118>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d904      	bls.n	80077ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f955 	bl	8007a72 <USBD_CtlError>
 80077c8:	e075      	b.n	80078b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d002      	beq.n	80077da <USBD_SetConfig+0x36>
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	d023      	beq.n	8007820 <USBD_SetConfig+0x7c>
 80077d8:	e062      	b.n	80078a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077da:	4b38      	ldr	r3, [pc, #224]	; (80078bc <USBD_SetConfig+0x118>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01a      	beq.n	8007818 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077e2:	4b36      	ldr	r3, [pc, #216]	; (80078bc <USBD_SetConfig+0x118>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2203      	movs	r2, #3
 80077f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077f4:	4b31      	ldr	r3, [pc, #196]	; (80078bc <USBD_SetConfig+0x118>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff f9af 	bl	8006b5e <USBD_SetClassConfig>
 8007800:	4603      	mov	r3, r0
 8007802:	2b02      	cmp	r3, #2
 8007804:	d104      	bne.n	8007810 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f932 	bl	8007a72 <USBD_CtlError>
            return;
 800780e:	e052      	b.n	80078b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9f6 	bl	8007c02 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007816:	e04e      	b.n	80078b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9f2 	bl	8007c02 <USBD_CtlSendStatus>
        break;
 800781e:	e04a      	b.n	80078b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007820:	4b26      	ldr	r3, [pc, #152]	; (80078bc <USBD_SetConfig+0x118>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d112      	bne.n	800784e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007830:	4b22      	ldr	r3, [pc, #136]	; (80078bc <USBD_SetConfig+0x118>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800783a:	4b20      	ldr	r3, [pc, #128]	; (80078bc <USBD_SetConfig+0x118>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff f9ab 	bl	8006b9c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9db 	bl	8007c02 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800784c:	e033      	b.n	80078b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800784e:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <USBD_SetConfig+0x118>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d01d      	beq.n	8007898 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff f999 	bl	8006b9c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800786a:	4b14      	ldr	r3, [pc, #80]	; (80078bc <USBD_SetConfig+0x118>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <USBD_SetConfig+0x118>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff f96f 	bl	8006b5e <USBD_SetClassConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	2b02      	cmp	r3, #2
 8007884:	d104      	bne.n	8007890 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8f2 	bl	8007a72 <USBD_CtlError>
            return;
 800788e:	e012      	b.n	80078b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9b6 	bl	8007c02 <USBD_CtlSendStatus>
        break;
 8007896:	e00e      	b.n	80078b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9b2 	bl	8007c02 <USBD_CtlSendStatus>
        break;
 800789e:	e00a      	b.n	80078b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8e5 	bl	8007a72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078a8:	4b04      	ldr	r3, [pc, #16]	; (80078bc <USBD_SetConfig+0x118>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff f974 	bl	8006b9c <USBD_ClrClassConfig>
        break;
 80078b4:	bf00      	nop
    }
  }
}
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200003d8 	.word	0x200003d8

080078c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	88db      	ldrh	r3, [r3, #6]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d004      	beq.n	80078dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8cc 	bl	8007a72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078da:	e022      	b.n	8007922 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	dc02      	bgt.n	80078ec <USBD_GetConfig+0x2c>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	dc03      	bgt.n	80078f2 <USBD_GetConfig+0x32>
 80078ea:	e015      	b.n	8007918 <USBD_GetConfig+0x58>
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d00b      	beq.n	8007908 <USBD_GetConfig+0x48>
 80078f0:	e012      	b.n	8007918 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3308      	adds	r3, #8
 80078fc:	2201      	movs	r2, #1
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f920 	bl	8007b46 <USBD_CtlSendData>
        break;
 8007906:	e00c      	b.n	8007922 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	2201      	movs	r2, #1
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f918 	bl	8007b46 <USBD_CtlSendData>
        break;
 8007916:	e004      	b.n	8007922 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f8a9 	bl	8007a72 <USBD_CtlError>
        break;
 8007920:	bf00      	nop
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793a:	3b01      	subs	r3, #1
 800793c:	2b02      	cmp	r3, #2
 800793e:	d81e      	bhi.n	800797e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	88db      	ldrh	r3, [r3, #6]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d004      	beq.n	8007952 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f891 	bl	8007a72 <USBD_CtlError>
        break;
 8007950:	e01a      	b.n	8007988 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f043 0202 	orr.w	r2, r3, #2
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	330c      	adds	r3, #12
 8007972:	2202      	movs	r2, #2
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8e5 	bl	8007b46 <USBD_CtlSendData>
      break;
 800797c:	e004      	b.n	8007988 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f876 	bl	8007a72 <USBD_CtlError>
      break;
 8007986:	bf00      	nop
  }
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d106      	bne.n	80079b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f929 	bl	8007c02 <USBD_CtlSendStatus>
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	3b01      	subs	r3, #1
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d80b      	bhi.n	80079e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d10c      	bne.n	80079f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f90f 	bl	8007c02 <USBD_CtlSendStatus>
      }
      break;
 80079e4:	e004      	b.n	80079f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f842 	bl	8007a72 <USBD_CtlError>
      break;
 80079ee:	e000      	b.n	80079f2 <USBD_ClrFeature+0x3a>
      break;
 80079f0:	bf00      	nop
  }
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	785a      	ldrb	r2, [r3, #1]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	3302      	adds	r3, #2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	3303      	adds	r3, #3
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4413      	add	r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	3304      	adds	r3, #4
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	3305      	adds	r3, #5
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	3306      	adds	r3, #6
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	3307      	adds	r3, #7
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	80da      	strh	r2, [r3, #6]

}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr

08007a72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fcb8 	bl	80083f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a84:	2100      	movs	r1, #0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fcb4 	bl	80083f4 <USBD_LL_StallEP>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d032      	beq.n	8007b10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f834 	bl	8007b18 <USBD_GetLen>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	75fa      	strb	r2, [r7, #23]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4413      	add	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	75fa      	strb	r2, [r7, #23]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4413      	add	r3, r2
 8007adc:	2203      	movs	r2, #3
 8007ade:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ae0:	e012      	b.n	8007b08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	7dfa      	ldrb	r2, [r7, #23]
 8007aea:	1c51      	adds	r1, r2, #1
 8007aec:	75f9      	strb	r1, [r7, #23]
 8007aee:	4611      	mov	r1, r2
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	440a      	add	r2, r1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	75fa      	strb	r2, [r7, #23]
 8007afe:	461a      	mov	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4413      	add	r3, r2
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e8      	bne.n	8007ae2 <USBD_GetString+0x4e>
    }
  }
}
 8007b10:	bf00      	nop
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b24:	e005      	b.n	8007b32 <USBD_GetLen+0x1a>
  {
    len++;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f5      	bne.n	8007b26 <USBD_GetLen+0xe>
  }

  return len;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr

08007b46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	60f8      	str	r0, [r7, #12]
 8007b4e:	60b9      	str	r1, [r7, #8]
 8007b50:	4613      	mov	r3, r2
 8007b52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b5c:	88fa      	ldrh	r2, [r7, #6]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fcc8 	bl	8008504 <USBD_LL_Transmit>

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 fcb6 	bl	8008504 <USBD_LL_Transmit>

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bc0:	88fa      	ldrh	r2, [r7, #6]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fcbb 	bl	800854a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	4613      	mov	r3, r2
 8007bea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fca9 	bl	800854a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c12:	2300      	movs	r3, #0
 8007c14:	2200      	movs	r2, #0
 8007c16:	2100      	movs	r1, #0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fc73 	bl	8008504 <USBD_LL_Transmit>

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2205      	movs	r2, #5
 8007c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fc83 	bl	800854a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USB_Transmit>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USB_Transmit(char* Buf, uint16_t Len)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8c2 	bl	8007de8 <CDC_Transmit_FS>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c70:	2200      	movs	r2, #0
 8007c72:	4912      	ldr	r1, [pc, #72]	; (8007cbc <MX_USB_DEVICE_Init+0x50>)
 8007c74:	4812      	ldr	r0, [pc, #72]	; (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c76:	f7fe ff18 	bl	8006aaa <USBD_Init>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c80:	f7f9 fa3e 	bl	8001100 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c84:	490f      	ldr	r1, [pc, #60]	; (8007cc4 <MX_USB_DEVICE_Init+0x58>)
 8007c86:	480e      	ldr	r0, [pc, #56]	; (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c88:	f7fe ff3a 	bl	8006b00 <USBD_RegisterClass>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c92:	f7f9 fa35 	bl	8001100 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c96:	490c      	ldr	r1, [pc, #48]	; (8007cc8 <MX_USB_DEVICE_Init+0x5c>)
 8007c98:	4809      	ldr	r0, [pc, #36]	; (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007c9a:	f7fe fe6b 	bl	8006974 <USBD_CDC_RegisterInterface>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ca4:	f7f9 fa2c 	bl	8001100 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca8:	4805      	ldr	r0, [pc, #20]	; (8007cc0 <MX_USB_DEVICE_Init+0x54>)
 8007caa:	f7fe ff42 	bl	8006b32 <USBD_Start>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cb4:	f7f9 fa24 	bl	8001100 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb8:	bf00      	nop
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	2000012c 	.word	0x2000012c
 8007cc0:	200003dc 	.word	0x200003dc
 8007cc4:	20000018 	.word	0x20000018
 8007cc8:	2000011c 	.word	0x2000011c

08007ccc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4905      	ldr	r1, [pc, #20]	; (8007ce8 <CDC_Init_FS+0x1c>)
 8007cd4:	4805      	ldr	r0, [pc, #20]	; (8007cec <CDC_Init_FS+0x20>)
 8007cd6:	f7fe fe63 	bl	80069a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cda:	4905      	ldr	r1, [pc, #20]	; (8007cf0 <CDC_Init_FS+0x24>)
 8007cdc:	4803      	ldr	r0, [pc, #12]	; (8007cec <CDC_Init_FS+0x20>)
 8007cde:	f7fe fe78 	bl	80069d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ce2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000aa0 	.word	0x20000aa0
 8007cec:	200003dc 	.word	0x200003dc
 8007cf0:	200006a0 	.word	0x200006a0

08007cf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr
	...

08007d04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	6039      	str	r1, [r7, #0]
 8007d0e:	71fb      	strb	r3, [r7, #7]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b23      	cmp	r3, #35	; 0x23
 8007d18:	d84a      	bhi.n	8007db0 <CDC_Control_FS+0xac>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <CDC_Control_FS+0x1c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007db1 	.word	0x08007db1
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007db1 	.word	0x08007db1
 8007d34:	08007db1 	.word	0x08007db1
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007db1 	.word	0x08007db1
 8007d40:	08007db1 	.word	0x08007db1
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007db1 	.word	0x08007db1
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007db1 	.word	0x08007db1
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007db1 	.word	0x08007db1
 8007d60:	08007db1 	.word	0x08007db1
 8007d64:	08007db1 	.word	0x08007db1
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007db1 	.word	0x08007db1
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007db1 	.word	0x08007db1
 8007d80:	08007db1 	.word	0x08007db1
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db1 	.word	0x08007db1
 8007da8:	08007db1 	.word	0x08007db1
 8007dac:	08007db1 	.word	0x08007db1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007db0:	bf00      	nop
  }

  return (USBD_OK);
 8007db2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4805      	ldr	r0, [pc, #20]	; (8007de4 <CDC_Receive_FS+0x24>)
 8007dce:	f7fe fe00 	bl	80069d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dd2:	4804      	ldr	r0, [pc, #16]	; (8007de4 <CDC_Receive_FS+0x24>)
 8007dd4:	f7fe fe3f 	bl	8006a56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200003dc 	.word	0x200003dc

08007de8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007df8:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <CDC_Transmit_FS+0x48>)
 8007dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e00b      	b.n	8007e26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e0e:	887b      	ldrh	r3, [r7, #2]
 8007e10:	461a      	mov	r2, r3
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4806      	ldr	r0, [pc, #24]	; (8007e30 <CDC_Transmit_FS+0x48>)
 8007e16:	f7fe fdc3 	bl	80069a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <CDC_Transmit_FS+0x48>)
 8007e1c:	f7fe fdec 	bl	80069f8 <USBD_CDC_TransmitPacket>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200003dc 	.word	0x200003dc

08007e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2212      	movs	r2, #18
 8007e44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e46:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000148 	.word	0x20000148

08007e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2204      	movs	r2, #4
 8007e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e6a:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	2000015c 	.word	0x2000015c

08007e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4907      	ldr	r1, [pc, #28]	; (8007eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e92:	4808      	ldr	r0, [pc, #32]	; (8007eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e94:	f7ff fdfe 	bl	8007a94 <USBD_GetString>
 8007e98:	e004      	b.n	8007ea4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e9e:	4805      	ldr	r0, [pc, #20]	; (8007eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ea0:	f7ff fdf8 	bl	8007a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000ea0 	.word	0x20000ea0
 8007eb4:	08009008 	.word	0x08009008

08007eb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	4904      	ldr	r1, [pc, #16]	; (8007ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ec8:	4804      	ldr	r0, [pc, #16]	; (8007edc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eca:	f7ff fde3 	bl	8007a94 <USBD_GetString>
  return USBD_StrDesc;
 8007ece:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000ea0 	.word	0x20000ea0
 8007edc:	08009020 	.word	0x08009020

08007ee0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	221a      	movs	r2, #26
 8007ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ef2:	f000 f843 	bl	8007f7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ef6:	4b02      	ldr	r3, [pc, #8]	; (8007f00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000160 	.word	0x20000160

08007f04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d105      	bne.n	8007f22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4907      	ldr	r1, [pc, #28]	; (8007f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f1a:	4808      	ldr	r0, [pc, #32]	; (8007f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f1c:	f7ff fdba 	bl	8007a94 <USBD_GetString>
 8007f20:	e004      	b.n	8007f2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4904      	ldr	r1, [pc, #16]	; (8007f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f26:	4805      	ldr	r0, [pc, #20]	; (8007f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f28:	f7ff fdb4 	bl	8007a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000ea0 	.word	0x20000ea0
 8007f3c:	08009034 	.word	0x08009034

08007f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4907      	ldr	r1, [pc, #28]	; (8007f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f56:	4808      	ldr	r0, [pc, #32]	; (8007f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f58:	f7ff fd9c 	bl	8007a94 <USBD_GetString>
 8007f5c:	e004      	b.n	8007f68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	4904      	ldr	r1, [pc, #16]	; (8007f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f62:	4805      	ldr	r0, [pc, #20]	; (8007f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f64:	f7ff fd96 	bl	8007a94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000ea0 	.word	0x20000ea0
 8007f78:	08009040 	.word	0x08009040

08007f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f82:	4b0f      	ldr	r3, [pc, #60]	; (8007fc0 <Get_SerialNum+0x44>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f88:	4b0e      	ldr	r3, [pc, #56]	; (8007fc4 <Get_SerialNum+0x48>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <Get_SerialNum+0x4c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4413      	add	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	4909      	ldr	r1, [pc, #36]	; (8007fcc <Get_SerialNum+0x50>)
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f814 	bl	8007fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fac:	2204      	movs	r2, #4
 8007fae:	4908      	ldr	r1, [pc, #32]	; (8007fd0 <Get_SerialNum+0x54>)
 8007fb0:	68b8      	ldr	r0, [r7, #8]
 8007fb2:	f000 f80f 	bl	8007fd4 <IntToUnicode>
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	1ffff7e8 	.word	0x1ffff7e8
 8007fc4:	1ffff7ec 	.word	0x1ffff7ec
 8007fc8:	1ffff7f0 	.word	0x1ffff7f0
 8007fcc:	20000162 	.word	0x20000162
 8007fd0:	20000172 	.word	0x20000172

08007fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]
 8007fea:	e027      	b.n	800803c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	0f1b      	lsrs	r3, r3, #28
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	d80b      	bhi.n	800800c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	0f1b      	lsrs	r3, r3, #28
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	4619      	mov	r1, r3
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	440b      	add	r3, r1
 8008004:	3230      	adds	r2, #48	; 0x30
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e00a      	b.n	8008022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	0f1b      	lsrs	r3, r3, #28
 8008010:	b2da      	uxtb	r2, r3
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	4619      	mov	r1, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	440b      	add	r3, r1
 800801c:	3237      	adds	r2, #55	; 0x37
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	3301      	adds	r3, #1
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	3301      	adds	r3, #1
 800803a:	75fb      	strb	r3, [r7, #23]
 800803c:	7dfa      	ldrb	r2, [r7, #23]
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3d3      	bcc.n	8007fec <IntToUnicode+0x18>
  }
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008058:	f107 0310 	add.w	r3, r7, #16
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	609a      	str	r2, [r3, #8]
 8008064:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800806e:	d12c      	bne.n	80080ca <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008070:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	4a17      	ldr	r2, [pc, #92]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 8008076:	f043 0304 	orr.w	r3, r3, #4
 800807a:	6193      	str	r3, [r2, #24]
 800807c:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800808c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008096:	f107 0310 	add.w	r3, r7, #16
 800809a:	4619      	mov	r1, r3
 800809c:	480e      	ldr	r0, [pc, #56]	; (80080d8 <HAL_PCD_MspInit+0x88>)
 800809e:	f7f9 ff61 	bl	8001f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	4a0b      	ldr	r2, [pc, #44]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 80080a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080ac:	6153      	str	r3, [r2, #20]
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <HAL_PCD_MspInit+0x84>)
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080b6:	60bb      	str	r3, [r7, #8]
 80080b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	2043      	movs	r0, #67	; 0x43
 80080c0:	f7f9 ff19 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080c4:	2043      	movs	r0, #67	; 0x43
 80080c6:	f7f9 ff32 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080ca:	bf00      	nop
 80080cc:	3720      	adds	r7, #32
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40021000 	.word	0x40021000
 80080d8:	40010800 	.word	0x40010800

080080dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f7fe fd65 	bl	8006bc2 <USBD_LL_SetupStage>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	78fb      	ldrb	r3, [r7, #3]
 8008128:	4619      	mov	r1, r3
 800812a:	f7fe fd97 	bl	8006c5c <USBD_LL_DataOutStage>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8008148:	78fa      	ldrb	r2, [r7, #3]
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	3348      	adds	r3, #72	; 0x48
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	4619      	mov	r1, r3
 800815e:	f7fe fdee 	bl	8006d3e <USBD_LL_DataInStage>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fefe 	bl	8006f7a <USBD_LL_SOF>
}
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800818e:	2301      	movs	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d001      	beq.n	800819e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800819a:	f7f8 ffb1 	bl	8001100 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80081a4:	7bfa      	ldrb	r2, [r7, #15]
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe feae 	bl	8006f0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fe67 	bl	8006e88 <USBD_LL_Reset>
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fea8 	bl	8006f28 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081f8:	4b04      	ldr	r3, [pc, #16]	; (800820c <HAL_PCD_SuspendCallback+0x48>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	4a03      	ldr	r2, [pc, #12]	; (800820c <HAL_PCD_SuspendCallback+0x48>)
 80081fe:	f043 0306 	orr.w	r3, r3, #6
 8008202:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	e000ed00 	.word	0xe000ed00

08008210 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fe96 	bl	8006f50 <USBD_LL_Resume>
}
 8008224:	bf00      	nop
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe febf 	bl	8006fc6 <USBD_LL_IsoOUTIncomplete>
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fea1 	bl	8006fae <USBD_LL_IsoINIncomplete>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe feab 	bl	8006fde <USBD_LL_DevConnected>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fea7 	bl	8006ff2 <USBD_LL_DevDisconnected>
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d133      	bne.n	8008324 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082bc:	4a1c      	ldr	r2, [pc, #112]	; (8008330 <USBD_LL_Init+0x84>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <USBD_LL_Init+0x84>)
 80082c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082cc:	4b18      	ldr	r3, [pc, #96]	; (8008330 <USBD_LL_Init+0x84>)
 80082ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082d4:	4b16      	ldr	r3, [pc, #88]	; (8008330 <USBD_LL_Init+0x84>)
 80082d6:	2204      	movs	r2, #4
 80082d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <USBD_LL_Init+0x84>)
 80082dc:	2202      	movs	r2, #2
 80082de:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082e0:	4b13      	ldr	r3, [pc, #76]	; (8008330 <USBD_LL_Init+0x84>)
 80082e2:	2202      	movs	r2, #2
 80082e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <USBD_LL_Init+0x84>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <USBD_LL_Init+0x84>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80082f2:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <USBD_LL_Init+0x84>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082f8:	480d      	ldr	r0, [pc, #52]	; (8008330 <USBD_LL_Init+0x84>)
 80082fa:	f7f9 ffe8 	bl	80022ce <HAL_PCD_Init>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008304:	f7f8 fefc 	bl	8001100 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008308:	2180      	movs	r1, #128	; 0x80
 800830a:	4809      	ldr	r0, [pc, #36]	; (8008330 <USBD_LL_Init+0x84>)
 800830c:	f7fb f900 	bl	8003510 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008310:	2240      	movs	r2, #64	; 0x40
 8008312:	2100      	movs	r1, #0
 8008314:	4806      	ldr	r0, [pc, #24]	; (8008330 <USBD_LL_Init+0x84>)
 8008316:	f7fb f8b5 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800831a:	2280      	movs	r2, #128	; 0x80
 800831c:	2101      	movs	r1, #1
 800831e:	4804      	ldr	r0, [pc, #16]	; (8008330 <USBD_LL_Init+0x84>)
 8008320:	f7fb f8b0 	bl	8003484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	200010a0 	.word	0x200010a0

08008334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	4618      	mov	r0, r3
 800834c:	f7fa f8dc 	bl	8002508 <HAL_PCD_Start>
 8008350:	4603      	mov	r3, r0
 8008352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f944 	bl	80085e4 <USBD_Get_USB_Status>
 800835c:	4603      	mov	r3, r0
 800835e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008360:	7bbb      	ldrb	r3, [r7, #14]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	461a      	mov	r2, r3
 8008378:	4603      	mov	r3, r0
 800837a:	70fb      	strb	r3, [r7, #3]
 800837c:	460b      	mov	r3, r1
 800837e:	70bb      	strb	r3, [r7, #2]
 8008380:	4613      	mov	r3, r2
 8008382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008392:	78bb      	ldrb	r3, [r7, #2]
 8008394:	883a      	ldrh	r2, [r7, #0]
 8008396:	78f9      	ldrb	r1, [r7, #3]
 8008398:	f7fa fd55 	bl	8002e46 <HAL_PCD_EP_Open>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f91e 	bl	80085e4 <USBD_Get_USB_Status>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fa fd9e 	bl	8002f16 <HAL_PCD_EP_Close>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f8ff 	bl	80085e4 <USBD_Get_USB_Status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7fa fe43 	bl	800309e <HAL_PCD_EP_SetStall>
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f8e0 	bl	80085e4 <USBD_Get_USB_Status>
 8008424:	4603      	mov	r3, r0
 8008426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008428:	7bbb      	ldrb	r3, [r7, #14]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7fa fe86 	bl	8003162 <HAL_PCD_EP_ClrStall>
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f8c1 	bl	80085e4 <USBD_Get_USB_Status>
 8008462:	4603      	mov	r3, r0
 8008464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008466:	7bbb      	ldrb	r3, [r7, #14]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008482:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	da0b      	bge.n	80084a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	4613      	mov	r3, r2
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	333e      	adds	r3, #62	; 0x3e
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	e00b      	b.n	80084bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80084ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e0:	78fa      	ldrb	r2, [r7, #3]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fa fc89 	bl	8002dfc <HAL_PCD_SetAddress>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f877 	bl	80085e4 <USBD_Get_USB_Status>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	461a      	mov	r2, r3
 8008510:	460b      	mov	r3, r1
 8008512:	72fb      	strb	r3, [r7, #11]
 8008514:	4613      	mov	r3, r2
 8008516:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008526:	893b      	ldrh	r3, [r7, #8]
 8008528:	7af9      	ldrb	r1, [r7, #11]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f7fa fd86 	bl	800303c <HAL_PCD_EP_Transmit>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f854 	bl	80085e4 <USBD_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008540:	7dbb      	ldrb	r3, [r7, #22]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b086      	sub	sp, #24
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	461a      	mov	r2, r3
 8008556:	460b      	mov	r3, r1
 8008558:	72fb      	strb	r3, [r7, #11]
 800855a:	4613      	mov	r3, r2
 800855c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800856c:	893b      	ldrh	r3, [r7, #8]
 800856e:	7af9      	ldrb	r1, [r7, #11]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	f7fa fd1a 	bl	8002faa <HAL_PCD_EP_Receive>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f831 	bl	80085e4 <USBD_Get_USB_Status>
 8008582:	4603      	mov	r3, r0
 8008584:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008586:	7dbb      	ldrb	r3, [r7, #22]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fa fd31 	bl	800300e <HAL_PCD_EP_GetRxCount>
 80085ac:	4603      	mov	r3, r0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <USBD_static_malloc+0x14>)
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	200015a4 	.word	0x200015a4

080085d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
	...

080085e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d817      	bhi.n	8008628 <USBD_Get_USB_Status+0x44>
 80085f8:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <USBD_Get_USB_Status+0x1c>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008611 	.word	0x08008611
 8008604:	08008617 	.word	0x08008617
 8008608:	0800861d 	.word	0x0800861d
 800860c:	08008623 	.word	0x08008623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e00b      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008616:	2302      	movs	r3, #2
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e008      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	e005      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008622:	2302      	movs	r3, #2
 8008624:	73fb      	strb	r3, [r7, #15]
    break;
 8008626:	e002      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008628:	2302      	movs	r3, #2
 800862a:	73fb      	strb	r3, [r7, #15]
    break;
 800862c:	bf00      	nop
  }
  return usb_status;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop

0800863c <siprintf>:
 800863c:	b40e      	push	{r1, r2, r3}
 800863e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008642:	b500      	push	{lr}
 8008644:	b09c      	sub	sp, #112	; 0x70
 8008646:	ab1d      	add	r3, sp, #116	; 0x74
 8008648:	9002      	str	r0, [sp, #8]
 800864a:	9006      	str	r0, [sp, #24]
 800864c:	9107      	str	r1, [sp, #28]
 800864e:	9104      	str	r1, [sp, #16]
 8008650:	4808      	ldr	r0, [pc, #32]	; (8008674 <siprintf+0x38>)
 8008652:	4909      	ldr	r1, [pc, #36]	; (8008678 <siprintf+0x3c>)
 8008654:	f853 2b04 	ldr.w	r2, [r3], #4
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	a902      	add	r1, sp, #8
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	f000 f9b0 	bl	80089c4 <_svfiprintf_r>
 8008664:	2200      	movs	r2, #0
 8008666:	9b02      	ldr	r3, [sp, #8]
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	b01c      	add	sp, #112	; 0x70
 800866c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008670:	b003      	add	sp, #12
 8008672:	4770      	bx	lr
 8008674:	200001c8 	.word	0x200001c8
 8008678:	ffff0208 	.word	0xffff0208

0800867c <memset>:
 800867c:	4603      	mov	r3, r0
 800867e:	4402      	add	r2, r0
 8008680:	4293      	cmp	r3, r2
 8008682:	d100      	bne.n	8008686 <memset+0xa>
 8008684:	4770      	bx	lr
 8008686:	f803 1b01 	strb.w	r1, [r3], #1
 800868a:	e7f9      	b.n	8008680 <memset+0x4>

0800868c <strncat>:
 800868c:	b530      	push	{r4, r5, lr}
 800868e:	4604      	mov	r4, r0
 8008690:	7825      	ldrb	r5, [r4, #0]
 8008692:	4623      	mov	r3, r4
 8008694:	3401      	adds	r4, #1
 8008696:	2d00      	cmp	r5, #0
 8008698:	d1fa      	bne.n	8008690 <strncat+0x4>
 800869a:	3a01      	subs	r2, #1
 800869c:	d304      	bcc.n	80086a8 <strncat+0x1c>
 800869e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a2:	f803 4b01 	strb.w	r4, [r3], #1
 80086a6:	b904      	cbnz	r4, 80086aa <strncat+0x1e>
 80086a8:	bd30      	pop	{r4, r5, pc}
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d1f5      	bne.n	800869a <strncat+0xe>
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e7f3      	b.n	800869a <strncat+0xe>
	...

080086b4 <__errno>:
 80086b4:	4b01      	ldr	r3, [pc, #4]	; (80086bc <__errno+0x8>)
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	200001c8 	.word	0x200001c8

080086c0 <__libc_init_array>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	2600      	movs	r6, #0
 80086c4:	4d0c      	ldr	r5, [pc, #48]	; (80086f8 <__libc_init_array+0x38>)
 80086c6:	4c0d      	ldr	r4, [pc, #52]	; (80086fc <__libc_init_array+0x3c>)
 80086c8:	1b64      	subs	r4, r4, r5
 80086ca:	10a4      	asrs	r4, r4, #2
 80086cc:	42a6      	cmp	r6, r4
 80086ce:	d109      	bne.n	80086e4 <__libc_init_array+0x24>
 80086d0:	f000 fc7a 	bl	8008fc8 <_init>
 80086d4:	2600      	movs	r6, #0
 80086d6:	4d0a      	ldr	r5, [pc, #40]	; (8008700 <__libc_init_array+0x40>)
 80086d8:	4c0a      	ldr	r4, [pc, #40]	; (8008704 <__libc_init_array+0x44>)
 80086da:	1b64      	subs	r4, r4, r5
 80086dc:	10a4      	asrs	r4, r4, #2
 80086de:	42a6      	cmp	r6, r4
 80086e0:	d105      	bne.n	80086ee <__libc_init_array+0x2e>
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e8:	4798      	blx	r3
 80086ea:	3601      	adds	r6, #1
 80086ec:	e7ee      	b.n	80086cc <__libc_init_array+0xc>
 80086ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f2:	4798      	blx	r3
 80086f4:	3601      	adds	r6, #1
 80086f6:	e7f2      	b.n	80086de <__libc_init_array+0x1e>
 80086f8:	080094cc 	.word	0x080094cc
 80086fc:	080094cc 	.word	0x080094cc
 8008700:	080094cc 	.word	0x080094cc
 8008704:	080094d0 	.word	0x080094d0

08008708 <__retarget_lock_acquire_recursive>:
 8008708:	4770      	bx	lr

0800870a <__retarget_lock_release_recursive>:
 800870a:	4770      	bx	lr

0800870c <memcpy>:
 800870c:	440a      	add	r2, r1
 800870e:	4291      	cmp	r1, r2
 8008710:	f100 33ff 	add.w	r3, r0, #4294967295
 8008714:	d100      	bne.n	8008718 <memcpy+0xc>
 8008716:	4770      	bx	lr
 8008718:	b510      	push	{r4, lr}
 800871a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871e:	4291      	cmp	r1, r2
 8008720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008724:	d1f9      	bne.n	800871a <memcpy+0xe>
 8008726:	bd10      	pop	{r4, pc}

08008728 <_free_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	2900      	cmp	r1, #0
 800872e:	d040      	beq.n	80087b2 <_free_r+0x8a>
 8008730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008734:	1f0c      	subs	r4, r1, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfb8      	it	lt
 800873a:	18e4      	addlt	r4, r4, r3
 800873c:	f000 f8dc 	bl	80088f8 <__malloc_lock>
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <_free_r+0x8c>)
 8008742:	6813      	ldr	r3, [r2, #0]
 8008744:	b933      	cbnz	r3, 8008754 <_free_r+0x2c>
 8008746:	6063      	str	r3, [r4, #4]
 8008748:	6014      	str	r4, [r2, #0]
 800874a:	4628      	mov	r0, r5
 800874c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008750:	f000 b8d8 	b.w	8008904 <__malloc_unlock>
 8008754:	42a3      	cmp	r3, r4
 8008756:	d908      	bls.n	800876a <_free_r+0x42>
 8008758:	6820      	ldr	r0, [r4, #0]
 800875a:	1821      	adds	r1, r4, r0
 800875c:	428b      	cmp	r3, r1
 800875e:	bf01      	itttt	eq
 8008760:	6819      	ldreq	r1, [r3, #0]
 8008762:	685b      	ldreq	r3, [r3, #4]
 8008764:	1809      	addeq	r1, r1, r0
 8008766:	6021      	streq	r1, [r4, #0]
 8008768:	e7ed      	b.n	8008746 <_free_r+0x1e>
 800876a:	461a      	mov	r2, r3
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	b10b      	cbz	r3, 8008774 <_free_r+0x4c>
 8008770:	42a3      	cmp	r3, r4
 8008772:	d9fa      	bls.n	800876a <_free_r+0x42>
 8008774:	6811      	ldr	r1, [r2, #0]
 8008776:	1850      	adds	r0, r2, r1
 8008778:	42a0      	cmp	r0, r4
 800877a:	d10b      	bne.n	8008794 <_free_r+0x6c>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	4401      	add	r1, r0
 8008780:	1850      	adds	r0, r2, r1
 8008782:	4283      	cmp	r3, r0
 8008784:	6011      	str	r1, [r2, #0]
 8008786:	d1e0      	bne.n	800874a <_free_r+0x22>
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4408      	add	r0, r1
 800878e:	6010      	str	r0, [r2, #0]
 8008790:	6053      	str	r3, [r2, #4]
 8008792:	e7da      	b.n	800874a <_free_r+0x22>
 8008794:	d902      	bls.n	800879c <_free_r+0x74>
 8008796:	230c      	movs	r3, #12
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	e7d6      	b.n	800874a <_free_r+0x22>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	1821      	adds	r1, r4, r0
 80087a0:	428b      	cmp	r3, r1
 80087a2:	bf01      	itttt	eq
 80087a4:	6819      	ldreq	r1, [r3, #0]
 80087a6:	685b      	ldreq	r3, [r3, #4]
 80087a8:	1809      	addeq	r1, r1, r0
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	6054      	str	r4, [r2, #4]
 80087b0:	e7cb      	b.n	800874a <_free_r+0x22>
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20001904 	.word	0x20001904

080087b8 <sbrk_aligned>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4e0e      	ldr	r6, [pc, #56]	; (80087f4 <sbrk_aligned+0x3c>)
 80087bc:	460c      	mov	r4, r1
 80087be:	6831      	ldr	r1, [r6, #0]
 80087c0:	4605      	mov	r5, r0
 80087c2:	b911      	cbnz	r1, 80087ca <sbrk_aligned+0x12>
 80087c4:	f000 fbaa 	bl	8008f1c <_sbrk_r>
 80087c8:	6030      	str	r0, [r6, #0]
 80087ca:	4621      	mov	r1, r4
 80087cc:	4628      	mov	r0, r5
 80087ce:	f000 fba5 	bl	8008f1c <_sbrk_r>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d00a      	beq.n	80087ec <sbrk_aligned+0x34>
 80087d6:	1cc4      	adds	r4, r0, #3
 80087d8:	f024 0403 	bic.w	r4, r4, #3
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d007      	beq.n	80087f0 <sbrk_aligned+0x38>
 80087e0:	1a21      	subs	r1, r4, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 fb9a 	bl	8008f1c <_sbrk_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d101      	bne.n	80087f0 <sbrk_aligned+0x38>
 80087ec:	f04f 34ff 	mov.w	r4, #4294967295
 80087f0:	4620      	mov	r0, r4
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	20001908 	.word	0x20001908

080087f8 <_malloc_r>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	1ccd      	adds	r5, r1, #3
 80087fe:	f025 0503 	bic.w	r5, r5, #3
 8008802:	3508      	adds	r5, #8
 8008804:	2d0c      	cmp	r5, #12
 8008806:	bf38      	it	cc
 8008808:	250c      	movcc	r5, #12
 800880a:	2d00      	cmp	r5, #0
 800880c:	4607      	mov	r7, r0
 800880e:	db01      	blt.n	8008814 <_malloc_r+0x1c>
 8008810:	42a9      	cmp	r1, r5
 8008812:	d905      	bls.n	8008820 <_malloc_r+0x28>
 8008814:	230c      	movs	r3, #12
 8008816:	2600      	movs	r6, #0
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	4630      	mov	r0, r6
 800881c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008820:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088f4 <_malloc_r+0xfc>
 8008824:	f000 f868 	bl	80088f8 <__malloc_lock>
 8008828:	f8d8 3000 	ldr.w	r3, [r8]
 800882c:	461c      	mov	r4, r3
 800882e:	bb5c      	cbnz	r4, 8008888 <_malloc_r+0x90>
 8008830:	4629      	mov	r1, r5
 8008832:	4638      	mov	r0, r7
 8008834:	f7ff ffc0 	bl	80087b8 <sbrk_aligned>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	4604      	mov	r4, r0
 800883c:	d155      	bne.n	80088ea <_malloc_r+0xf2>
 800883e:	f8d8 4000 	ldr.w	r4, [r8]
 8008842:	4626      	mov	r6, r4
 8008844:	2e00      	cmp	r6, #0
 8008846:	d145      	bne.n	80088d4 <_malloc_r+0xdc>
 8008848:	2c00      	cmp	r4, #0
 800884a:	d048      	beq.n	80088de <_malloc_r+0xe6>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	4631      	mov	r1, r6
 8008850:	4638      	mov	r0, r7
 8008852:	eb04 0903 	add.w	r9, r4, r3
 8008856:	f000 fb61 	bl	8008f1c <_sbrk_r>
 800885a:	4581      	cmp	r9, r0
 800885c:	d13f      	bne.n	80088de <_malloc_r+0xe6>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	4638      	mov	r0, r7
 8008862:	1a6d      	subs	r5, r5, r1
 8008864:	4629      	mov	r1, r5
 8008866:	f7ff ffa7 	bl	80087b8 <sbrk_aligned>
 800886a:	3001      	adds	r0, #1
 800886c:	d037      	beq.n	80088de <_malloc_r+0xe6>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	442b      	add	r3, r5
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	f8d8 3000 	ldr.w	r3, [r8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d038      	beq.n	80088ee <_malloc_r+0xf6>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	42a2      	cmp	r2, r4
 8008880:	d12b      	bne.n	80088da <_malloc_r+0xe2>
 8008882:	2200      	movs	r2, #0
 8008884:	605a      	str	r2, [r3, #4]
 8008886:	e00f      	b.n	80088a8 <_malloc_r+0xb0>
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	1b52      	subs	r2, r2, r5
 800888c:	d41f      	bmi.n	80088ce <_malloc_r+0xd6>
 800888e:	2a0b      	cmp	r2, #11
 8008890:	d917      	bls.n	80088c2 <_malloc_r+0xca>
 8008892:	1961      	adds	r1, r4, r5
 8008894:	42a3      	cmp	r3, r4
 8008896:	6025      	str	r5, [r4, #0]
 8008898:	bf18      	it	ne
 800889a:	6059      	strne	r1, [r3, #4]
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	bf08      	it	eq
 80088a0:	f8c8 1000 	streq.w	r1, [r8]
 80088a4:	5162      	str	r2, [r4, r5]
 80088a6:	604b      	str	r3, [r1, #4]
 80088a8:	4638      	mov	r0, r7
 80088aa:	f104 060b 	add.w	r6, r4, #11
 80088ae:	f000 f829 	bl	8008904 <__malloc_unlock>
 80088b2:	f026 0607 	bic.w	r6, r6, #7
 80088b6:	1d23      	adds	r3, r4, #4
 80088b8:	1af2      	subs	r2, r6, r3
 80088ba:	d0ae      	beq.n	800881a <_malloc_r+0x22>
 80088bc:	1b9b      	subs	r3, r3, r6
 80088be:	50a3      	str	r3, [r4, r2]
 80088c0:	e7ab      	b.n	800881a <_malloc_r+0x22>
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	6862      	ldr	r2, [r4, #4]
 80088c6:	d1dd      	bne.n	8008884 <_malloc_r+0x8c>
 80088c8:	f8c8 2000 	str.w	r2, [r8]
 80088cc:	e7ec      	b.n	80088a8 <_malloc_r+0xb0>
 80088ce:	4623      	mov	r3, r4
 80088d0:	6864      	ldr	r4, [r4, #4]
 80088d2:	e7ac      	b.n	800882e <_malloc_r+0x36>
 80088d4:	4634      	mov	r4, r6
 80088d6:	6876      	ldr	r6, [r6, #4]
 80088d8:	e7b4      	b.n	8008844 <_malloc_r+0x4c>
 80088da:	4613      	mov	r3, r2
 80088dc:	e7cc      	b.n	8008878 <_malloc_r+0x80>
 80088de:	230c      	movs	r3, #12
 80088e0:	4638      	mov	r0, r7
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	f000 f80e 	bl	8008904 <__malloc_unlock>
 80088e8:	e797      	b.n	800881a <_malloc_r+0x22>
 80088ea:	6025      	str	r5, [r4, #0]
 80088ec:	e7dc      	b.n	80088a8 <_malloc_r+0xb0>
 80088ee:	605b      	str	r3, [r3, #4]
 80088f0:	deff      	udf	#255	; 0xff
 80088f2:	bf00      	nop
 80088f4:	20001904 	.word	0x20001904

080088f8 <__malloc_lock>:
 80088f8:	4801      	ldr	r0, [pc, #4]	; (8008900 <__malloc_lock+0x8>)
 80088fa:	f7ff bf05 	b.w	8008708 <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	20001900 	.word	0x20001900

08008904 <__malloc_unlock>:
 8008904:	4801      	ldr	r0, [pc, #4]	; (800890c <__malloc_unlock+0x8>)
 8008906:	f7ff bf00 	b.w	800870a <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	20001900 	.word	0x20001900

08008910 <__ssputs_r>:
 8008910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008914:	461f      	mov	r7, r3
 8008916:	688e      	ldr	r6, [r1, #8]
 8008918:	4682      	mov	sl, r0
 800891a:	42be      	cmp	r6, r7
 800891c:	460c      	mov	r4, r1
 800891e:	4690      	mov	r8, r2
 8008920:	680b      	ldr	r3, [r1, #0]
 8008922:	d82c      	bhi.n	800897e <__ssputs_r+0x6e>
 8008924:	898a      	ldrh	r2, [r1, #12]
 8008926:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800892a:	d026      	beq.n	800897a <__ssputs_r+0x6a>
 800892c:	6965      	ldr	r5, [r4, #20]
 800892e:	6909      	ldr	r1, [r1, #16]
 8008930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008934:	eba3 0901 	sub.w	r9, r3, r1
 8008938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800893c:	1c7b      	adds	r3, r7, #1
 800893e:	444b      	add	r3, r9
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	429d      	cmp	r5, r3
 8008944:	bf38      	it	cc
 8008946:	461d      	movcc	r5, r3
 8008948:	0553      	lsls	r3, r2, #21
 800894a:	d527      	bpl.n	800899c <__ssputs_r+0x8c>
 800894c:	4629      	mov	r1, r5
 800894e:	f7ff ff53 	bl	80087f8 <_malloc_r>
 8008952:	4606      	mov	r6, r0
 8008954:	b360      	cbz	r0, 80089b0 <__ssputs_r+0xa0>
 8008956:	464a      	mov	r2, r9
 8008958:	6921      	ldr	r1, [r4, #16]
 800895a:	f7ff fed7 	bl	800870c <memcpy>
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008968:	81a3      	strh	r3, [r4, #12]
 800896a:	6126      	str	r6, [r4, #16]
 800896c:	444e      	add	r6, r9
 800896e:	6026      	str	r6, [r4, #0]
 8008970:	463e      	mov	r6, r7
 8008972:	6165      	str	r5, [r4, #20]
 8008974:	eba5 0509 	sub.w	r5, r5, r9
 8008978:	60a5      	str	r5, [r4, #8]
 800897a:	42be      	cmp	r6, r7
 800897c:	d900      	bls.n	8008980 <__ssputs_r+0x70>
 800897e:	463e      	mov	r6, r7
 8008980:	4632      	mov	r2, r6
 8008982:	4641      	mov	r1, r8
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	f000 faaf 	bl	8008ee8 <memmove>
 800898a:	2000      	movs	r0, #0
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	1b9b      	subs	r3, r3, r6
 8008990:	60a3      	str	r3, [r4, #8]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	4433      	add	r3, r6
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899c:	462a      	mov	r2, r5
 800899e:	f000 fadb 	bl	8008f58 <_realloc_r>
 80089a2:	4606      	mov	r6, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d1e0      	bne.n	800896a <__ssputs_r+0x5a>
 80089a8:	4650      	mov	r0, sl
 80089aa:	6921      	ldr	r1, [r4, #16]
 80089ac:	f7ff febc 	bl	8008728 <_free_r>
 80089b0:	230c      	movs	r3, #12
 80089b2:	f8ca 3000 	str.w	r3, [sl]
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	e7e9      	b.n	8008998 <__ssputs_r+0x88>

080089c4 <_svfiprintf_r>:
 80089c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c8:	4698      	mov	r8, r3
 80089ca:	898b      	ldrh	r3, [r1, #12]
 80089cc:	4607      	mov	r7, r0
 80089ce:	061b      	lsls	r3, r3, #24
 80089d0:	460d      	mov	r5, r1
 80089d2:	4614      	mov	r4, r2
 80089d4:	b09d      	sub	sp, #116	; 0x74
 80089d6:	d50e      	bpl.n	80089f6 <_svfiprintf_r+0x32>
 80089d8:	690b      	ldr	r3, [r1, #16]
 80089da:	b963      	cbnz	r3, 80089f6 <_svfiprintf_r+0x32>
 80089dc:	2140      	movs	r1, #64	; 0x40
 80089de:	f7ff ff0b 	bl	80087f8 <_malloc_r>
 80089e2:	6028      	str	r0, [r5, #0]
 80089e4:	6128      	str	r0, [r5, #16]
 80089e6:	b920      	cbnz	r0, 80089f2 <_svfiprintf_r+0x2e>
 80089e8:	230c      	movs	r3, #12
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295
 80089f0:	e0d0      	b.n	8008b94 <_svfiprintf_r+0x1d0>
 80089f2:	2340      	movs	r3, #64	; 0x40
 80089f4:	616b      	str	r3, [r5, #20]
 80089f6:	2300      	movs	r3, #0
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	2320      	movs	r3, #32
 80089fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	f04f 0901 	mov.w	r9, #1
 8008a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a0a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008bac <_svfiprintf_r+0x1e8>
 8008a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a12:	4623      	mov	r3, r4
 8008a14:	469a      	mov	sl, r3
 8008a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a1a:	b10a      	cbz	r2, 8008a20 <_svfiprintf_r+0x5c>
 8008a1c:	2a25      	cmp	r2, #37	; 0x25
 8008a1e:	d1f9      	bne.n	8008a14 <_svfiprintf_r+0x50>
 8008a20:	ebba 0b04 	subs.w	fp, sl, r4
 8008a24:	d00b      	beq.n	8008a3e <_svfiprintf_r+0x7a>
 8008a26:	465b      	mov	r3, fp
 8008a28:	4622      	mov	r2, r4
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ff6f 	bl	8008910 <__ssputs_r>
 8008a32:	3001      	adds	r0, #1
 8008a34:	f000 80a9 	beq.w	8008b8a <_svfiprintf_r+0x1c6>
 8008a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a3a:	445a      	add	r2, fp
 8008a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80a1 	beq.w	8008b8a <_svfiprintf_r+0x1c6>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a52:	f10a 0a01 	add.w	sl, sl, #1
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	9307      	str	r3, [sp, #28]
 8008a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a60:	4654      	mov	r4, sl
 8008a62:	2205      	movs	r2, #5
 8008a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a68:	4850      	ldr	r0, [pc, #320]	; (8008bac <_svfiprintf_r+0x1e8>)
 8008a6a:	f000 fa67 	bl	8008f3c <memchr>
 8008a6e:	9a04      	ldr	r2, [sp, #16]
 8008a70:	b9d8      	cbnz	r0, 8008aaa <_svfiprintf_r+0xe6>
 8008a72:	06d0      	lsls	r0, r2, #27
 8008a74:	bf44      	itt	mi
 8008a76:	2320      	movmi	r3, #32
 8008a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7c:	0711      	lsls	r1, r2, #28
 8008a7e:	bf44      	itt	mi
 8008a80:	232b      	movmi	r3, #43	; 0x2b
 8008a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a86:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a8c:	d015      	beq.n	8008aba <_svfiprintf_r+0xf6>
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2000      	movs	r0, #0
 8008a92:	f04f 0c0a 	mov.w	ip, #10
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9e:	3b30      	subs	r3, #48	; 0x30
 8008aa0:	2b09      	cmp	r3, #9
 8008aa2:	d94d      	bls.n	8008b40 <_svfiprintf_r+0x17c>
 8008aa4:	b1b0      	cbz	r0, 8008ad4 <_svfiprintf_r+0x110>
 8008aa6:	9207      	str	r2, [sp, #28]
 8008aa8:	e014      	b.n	8008ad4 <_svfiprintf_r+0x110>
 8008aaa:	eba0 0308 	sub.w	r3, r0, r8
 8008aae:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	46a2      	mov	sl, r4
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	e7d2      	b.n	8008a60 <_svfiprintf_r+0x9c>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	1d19      	adds	r1, r3, #4
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	9103      	str	r1, [sp, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bfbb      	ittet	lt
 8008ac6:	425b      	neglt	r3, r3
 8008ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8008acc:	9307      	strge	r3, [sp, #28]
 8008ace:	9307      	strlt	r3, [sp, #28]
 8008ad0:	bfb8      	it	lt
 8008ad2:	9204      	strlt	r2, [sp, #16]
 8008ad4:	7823      	ldrb	r3, [r4, #0]
 8008ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad8:	d10c      	bne.n	8008af4 <_svfiprintf_r+0x130>
 8008ada:	7863      	ldrb	r3, [r4, #1]
 8008adc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ade:	d134      	bne.n	8008b4a <_svfiprintf_r+0x186>
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	3402      	adds	r4, #2
 8008ae4:	1d1a      	adds	r2, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9203      	str	r2, [sp, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfb8      	it	lt
 8008aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008af2:	9305      	str	r3, [sp, #20]
 8008af4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008bb0 <_svfiprintf_r+0x1ec>
 8008af8:	2203      	movs	r2, #3
 8008afa:	4650      	mov	r0, sl
 8008afc:	7821      	ldrb	r1, [r4, #0]
 8008afe:	f000 fa1d 	bl	8008f3c <memchr>
 8008b02:	b138      	cbz	r0, 8008b14 <_svfiprintf_r+0x150>
 8008b04:	2240      	movs	r2, #64	; 0x40
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	eba0 000a 	sub.w	r0, r0, sl
 8008b0c:	4082      	lsls	r2, r0
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	3401      	adds	r4, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b18:	2206      	movs	r2, #6
 8008b1a:	4826      	ldr	r0, [pc, #152]	; (8008bb4 <_svfiprintf_r+0x1f0>)
 8008b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b20:	f000 fa0c 	bl	8008f3c <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d038      	beq.n	8008b9a <_svfiprintf_r+0x1d6>
 8008b28:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <_svfiprintf_r+0x1f4>)
 8008b2a:	bb1b      	cbnz	r3, 8008b74 <_svfiprintf_r+0x1b0>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	3307      	adds	r3, #7
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	4433      	add	r3, r6
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	e768      	b.n	8008a12 <_svfiprintf_r+0x4e>
 8008b40:	460c      	mov	r4, r1
 8008b42:	2001      	movs	r0, #1
 8008b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b48:	e7a6      	b.n	8008a98 <_svfiprintf_r+0xd4>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f04f 0c0a 	mov.w	ip, #10
 8008b50:	4619      	mov	r1, r3
 8008b52:	3401      	adds	r4, #1
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	4620      	mov	r0, r4
 8008b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5c:	3a30      	subs	r2, #48	; 0x30
 8008b5e:	2a09      	cmp	r2, #9
 8008b60:	d903      	bls.n	8008b6a <_svfiprintf_r+0x1a6>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c6      	beq.n	8008af4 <_svfiprintf_r+0x130>
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	e7c4      	b.n	8008af4 <_svfiprintf_r+0x130>
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b72:	e7f0      	b.n	8008b56 <_svfiprintf_r+0x192>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	462a      	mov	r2, r5
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <_svfiprintf_r+0x1f8>)
 8008b7e:	a904      	add	r1, sp, #16
 8008b80:	f3af 8000 	nop.w
 8008b84:	1c42      	adds	r2, r0, #1
 8008b86:	4606      	mov	r6, r0
 8008b88:	d1d6      	bne.n	8008b38 <_svfiprintf_r+0x174>
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	065b      	lsls	r3, r3, #25
 8008b8e:	f53f af2d 	bmi.w	80089ec <_svfiprintf_r+0x28>
 8008b92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b94:	b01d      	add	sp, #116	; 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	ab03      	add	r3, sp, #12
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <_svfiprintf_r+0x1f8>)
 8008ba4:	a904      	add	r1, sp, #16
 8008ba6:	f000 f87d 	bl	8008ca4 <_printf_i>
 8008baa:	e7eb      	b.n	8008b84 <_svfiprintf_r+0x1c0>
 8008bac:	08009490 	.word	0x08009490
 8008bb0:	08009496 	.word	0x08009496
 8008bb4:	0800949a 	.word	0x0800949a
 8008bb8:	00000000 	.word	0x00000000
 8008bbc:	08008911 	.word	0x08008911

08008bc0 <_printf_common>:
 8008bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	4699      	mov	r9, r3
 8008bc8:	688a      	ldr	r2, [r1, #8]
 8008bca:	690b      	ldr	r3, [r1, #16]
 8008bcc:	4607      	mov	r7, r0
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	bfb8      	it	lt
 8008bd2:	4613      	movlt	r3, r2
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bda:	460c      	mov	r4, r1
 8008bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be0:	b10a      	cbz	r2, 8008be6 <_printf_common+0x26>
 8008be2:	3301      	adds	r3, #1
 8008be4:	6033      	str	r3, [r6, #0]
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0699      	lsls	r1, r3, #26
 8008bea:	bf42      	ittt	mi
 8008bec:	6833      	ldrmi	r3, [r6, #0]
 8008bee:	3302      	addmi	r3, #2
 8008bf0:	6033      	strmi	r3, [r6, #0]
 8008bf2:	6825      	ldr	r5, [r4, #0]
 8008bf4:	f015 0506 	ands.w	r5, r5, #6
 8008bf8:	d106      	bne.n	8008c08 <_printf_common+0x48>
 8008bfa:	f104 0a19 	add.w	sl, r4, #25
 8008bfe:	68e3      	ldr	r3, [r4, #12]
 8008c00:	6832      	ldr	r2, [r6, #0]
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	dc2b      	bgt.n	8008c60 <_printf_common+0xa0>
 8008c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c0c:	1e13      	subs	r3, r2, #0
 8008c0e:	6822      	ldr	r2, [r4, #0]
 8008c10:	bf18      	it	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	0692      	lsls	r2, r2, #26
 8008c16:	d430      	bmi.n	8008c7a <_printf_common+0xba>
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d023      	beq.n	8008c6e <_printf_common+0xae>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	f003 0306 	and.w	r3, r3, #6
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	bf14      	ite	ne
 8008c32:	2500      	movne	r5, #0
 8008c34:	6833      	ldreq	r3, [r6, #0]
 8008c36:	f04f 0600 	mov.w	r6, #0
 8008c3a:	bf08      	it	eq
 8008c3c:	68e5      	ldreq	r5, [r4, #12]
 8008c3e:	f104 041a 	add.w	r4, r4, #26
 8008c42:	bf08      	it	eq
 8008c44:	1aed      	subeq	r5, r5, r3
 8008c46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008c4a:	bf08      	it	eq
 8008c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c50:	4293      	cmp	r3, r2
 8008c52:	bfc4      	itt	gt
 8008c54:	1a9b      	subgt	r3, r3, r2
 8008c56:	18ed      	addgt	r5, r5, r3
 8008c58:	42b5      	cmp	r5, r6
 8008c5a:	d11a      	bne.n	8008c92 <_printf_common+0xd2>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e008      	b.n	8008c72 <_printf_common+0xb2>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4652      	mov	r2, sl
 8008c64:	4649      	mov	r1, r9
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d103      	bne.n	8008c76 <_printf_common+0xb6>
 8008c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c76:	3501      	adds	r5, #1
 8008c78:	e7c1      	b.n	8008bfe <_printf_common+0x3e>
 8008c7a:	2030      	movs	r0, #48	; 0x30
 8008c7c:	18e1      	adds	r1, r4, r3
 8008c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c88:	4422      	add	r2, r4
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c90:	e7c2      	b.n	8008c18 <_printf_common+0x58>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4622      	mov	r2, r4
 8008c96:	4649      	mov	r1, r9
 8008c98:	4638      	mov	r0, r7
 8008c9a:	47c0      	blx	r8
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d0e6      	beq.n	8008c6e <_printf_common+0xae>
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7d9      	b.n	8008c58 <_printf_common+0x98>

08008ca4 <_printf_i>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	7e0f      	ldrb	r7, [r1, #24]
 8008caa:	4691      	mov	r9, r2
 8008cac:	2f78      	cmp	r7, #120	; 0x78
 8008cae:	4680      	mov	r8, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	469a      	mov	sl, r3
 8008cb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cba:	d807      	bhi.n	8008ccc <_printf_i+0x28>
 8008cbc:	2f62      	cmp	r7, #98	; 0x62
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x32>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	f000 80d5 	beq.w	8008e70 <_printf_i+0x1cc>
 8008cc6:	2f58      	cmp	r7, #88	; 0x58
 8008cc8:	f000 80c1 	beq.w	8008e4e <_printf_i+0x1aa>
 8008ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd4:	e03a      	b.n	8008d4c <_printf_i+0xa8>
 8008cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cda:	2b15      	cmp	r3, #21
 8008cdc:	d8f6      	bhi.n	8008ccc <_printf_i+0x28>
 8008cde:	a101      	add	r1, pc, #4	; (adr r1, 8008ce4 <_printf_i+0x40>)
 8008ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008ccd 	.word	0x08008ccd
 8008cf0:	08008ccd 	.word	0x08008ccd
 8008cf4:	08008ccd 	.word	0x08008ccd
 8008cf8:	08008ccd 	.word	0x08008ccd
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008ccd 	.word	0x08008ccd
 8008d04:	08008ccd 	.word	0x08008ccd
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008e57 	.word	0x08008e57
 8008d14:	08008d7d 	.word	0x08008d7d
 8008d18:	08008e11 	.word	0x08008e11
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e79 	.word	0x08008e79
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008d7d 	.word	0x08008d7d
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e19 	.word	0x08008e19
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	602a      	str	r2, [r5, #0]
 8008d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0a0      	b.n	8008e92 <_printf_i+0x1ee>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	682b      	ldr	r3, [r5, #0]
 8008d54:	0607      	lsls	r7, r0, #24
 8008d56:	f103 0104 	add.w	r1, r3, #4
 8008d5a:	6029      	str	r1, [r5, #0]
 8008d5c:	d501      	bpl.n	8008d62 <_printf_i+0xbe>
 8008d5e:	681e      	ldr	r6, [r3, #0]
 8008d60:	e003      	b.n	8008d6a <_printf_i+0xc6>
 8008d62:	0646      	lsls	r6, r0, #25
 8008d64:	d5fb      	bpl.n	8008d5e <_printf_i+0xba>
 8008d66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	da03      	bge.n	8008d76 <_printf_i+0xd2>
 8008d6e:	232d      	movs	r3, #45	; 0x2d
 8008d70:	4276      	negs	r6, r6
 8008d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d76:	230a      	movs	r3, #10
 8008d78:	4859      	ldr	r0, [pc, #356]	; (8008ee0 <_printf_i+0x23c>)
 8008d7a:	e012      	b.n	8008da2 <_printf_i+0xfe>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	6029      	str	r1, [r5, #0]
 8008d84:	0605      	lsls	r5, r0, #24
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0xe8>
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0xee>
 8008d8c:	0641      	lsls	r1, r0, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0xe4>
 8008d90:	881e      	ldrh	r6, [r3, #0]
 8008d92:	2f6f      	cmp	r7, #111	; 0x6f
 8008d94:	bf0c      	ite	eq
 8008d96:	2308      	moveq	r3, #8
 8008d98:	230a      	movne	r3, #10
 8008d9a:	4851      	ldr	r0, [pc, #324]	; (8008ee0 <_printf_i+0x23c>)
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008da2:	6865      	ldr	r5, [r4, #4]
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	bfa8      	it	ge
 8008da8:	6821      	ldrge	r1, [r4, #0]
 8008daa:	60a5      	str	r5, [r4, #8]
 8008dac:	bfa4      	itt	ge
 8008dae:	f021 0104 	bicge.w	r1, r1, #4
 8008db2:	6021      	strge	r1, [r4, #0]
 8008db4:	b90e      	cbnz	r6, 8008dba <_printf_i+0x116>
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d04b      	beq.n	8008e52 <_printf_i+0x1ae>
 8008dba:	4615      	mov	r5, r2
 8008dbc:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dc0:	fb03 6711 	mls	r7, r3, r1, r6
 8008dc4:	5dc7      	ldrb	r7, [r0, r7]
 8008dc6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dca:	4637      	mov	r7, r6
 8008dcc:	42bb      	cmp	r3, r7
 8008dce:	460e      	mov	r6, r1
 8008dd0:	d9f4      	bls.n	8008dbc <_printf_i+0x118>
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d10b      	bne.n	8008dee <_printf_i+0x14a>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	07de      	lsls	r6, r3, #31
 8008dda:	d508      	bpl.n	8008dee <_printf_i+0x14a>
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	6861      	ldr	r1, [r4, #4]
 8008de0:	4299      	cmp	r1, r3
 8008de2:	bfde      	ittt	le
 8008de4:	2330      	movle	r3, #48	; 0x30
 8008de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dee:	1b52      	subs	r2, r2, r5
 8008df0:	6122      	str	r2, [r4, #16]
 8008df2:	464b      	mov	r3, r9
 8008df4:	4621      	mov	r1, r4
 8008df6:	4640      	mov	r0, r8
 8008df8:	f8cd a000 	str.w	sl, [sp]
 8008dfc:	aa03      	add	r2, sp, #12
 8008dfe:	f7ff fedf 	bl	8008bc0 <_printf_common>
 8008e02:	3001      	adds	r0, #1
 8008e04:	d14a      	bne.n	8008e9c <_printf_i+0x1f8>
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0a:	b004      	add	sp, #16
 8008e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	f043 0320 	orr.w	r3, r3, #32
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	2778      	movs	r7, #120	; 0x78
 8008e1a:	4832      	ldr	r0, [pc, #200]	; (8008ee4 <_printf_i+0x240>)
 8008e1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	6829      	ldr	r1, [r5, #0]
 8008e24:	061f      	lsls	r7, r3, #24
 8008e26:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e2a:	d402      	bmi.n	8008e32 <_printf_i+0x18e>
 8008e2c:	065f      	lsls	r7, r3, #25
 8008e2e:	bf48      	it	mi
 8008e30:	b2b6      	uxthmi	r6, r6
 8008e32:	07df      	lsls	r7, r3, #31
 8008e34:	bf48      	it	mi
 8008e36:	f043 0320 	orrmi.w	r3, r3, #32
 8008e3a:	6029      	str	r1, [r5, #0]
 8008e3c:	bf48      	it	mi
 8008e3e:	6023      	strmi	r3, [r4, #0]
 8008e40:	b91e      	cbnz	r6, 8008e4a <_printf_i+0x1a6>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	e7a6      	b.n	8008d9c <_printf_i+0xf8>
 8008e4e:	4824      	ldr	r0, [pc, #144]	; (8008ee0 <_printf_i+0x23c>)
 8008e50:	e7e4      	b.n	8008e1c <_printf_i+0x178>
 8008e52:	4615      	mov	r5, r2
 8008e54:	e7bd      	b.n	8008dd2 <_printf_i+0x12e>
 8008e56:	682b      	ldr	r3, [r5, #0]
 8008e58:	6826      	ldr	r6, [r4, #0]
 8008e5a:	1d18      	adds	r0, r3, #4
 8008e5c:	6961      	ldr	r1, [r4, #20]
 8008e5e:	6028      	str	r0, [r5, #0]
 8008e60:	0635      	lsls	r5, r6, #24
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	d501      	bpl.n	8008e6a <_printf_i+0x1c6>
 8008e66:	6019      	str	r1, [r3, #0]
 8008e68:	e002      	b.n	8008e70 <_printf_i+0x1cc>
 8008e6a:	0670      	lsls	r0, r6, #25
 8008e6c:	d5fb      	bpl.n	8008e66 <_printf_i+0x1c2>
 8008e6e:	8019      	strh	r1, [r3, #0]
 8008e70:	2300      	movs	r3, #0
 8008e72:	4615      	mov	r5, r2
 8008e74:	6123      	str	r3, [r4, #16]
 8008e76:	e7bc      	b.n	8008df2 <_printf_i+0x14e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	602a      	str	r2, [r5, #0]
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	4628      	mov	r0, r5
 8008e86:	f000 f859 	bl	8008f3c <memchr>
 8008e8a:	b108      	cbz	r0, 8008e90 <_printf_i+0x1ec>
 8008e8c:	1b40      	subs	r0, r0, r5
 8008e8e:	6060      	str	r0, [r4, #4]
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2300      	movs	r3, #0
 8008e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e9a:	e7aa      	b.n	8008df2 <_printf_i+0x14e>
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	47d0      	blx	sl
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d0ad      	beq.n	8008e06 <_printf_i+0x162>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	079b      	lsls	r3, r3, #30
 8008eae:	d413      	bmi.n	8008ed8 <_printf_i+0x234>
 8008eb0:	68e0      	ldr	r0, [r4, #12]
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	4298      	cmp	r0, r3
 8008eb6:	bfb8      	it	lt
 8008eb8:	4618      	movlt	r0, r3
 8008eba:	e7a6      	b.n	8008e0a <_printf_i+0x166>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	47d0      	blx	sl
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d09d      	beq.n	8008e06 <_printf_i+0x162>
 8008eca:	3501      	adds	r5, #1
 8008ecc:	68e3      	ldr	r3, [r4, #12]
 8008ece:	9903      	ldr	r1, [sp, #12]
 8008ed0:	1a5b      	subs	r3, r3, r1
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	dcf2      	bgt.n	8008ebc <_printf_i+0x218>
 8008ed6:	e7eb      	b.n	8008eb0 <_printf_i+0x20c>
 8008ed8:	2500      	movs	r5, #0
 8008eda:	f104 0619 	add.w	r6, r4, #25
 8008ede:	e7f5      	b.n	8008ecc <_printf_i+0x228>
 8008ee0:	080094a1 	.word	0x080094a1
 8008ee4:	080094b2 	.word	0x080094b2

08008ee8 <memmove>:
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	b510      	push	{r4, lr}
 8008eec:	eb01 0402 	add.w	r4, r1, r2
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0x10>
 8008ef2:	4284      	cmp	r4, r0
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	d807      	bhi.n	8008f08 <memmove+0x20>
 8008ef8:	1e43      	subs	r3, r0, #1
 8008efa:	42a1      	cmp	r1, r4
 8008efc:	d008      	beq.n	8008f10 <memmove+0x28>
 8008efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f06:	e7f8      	b.n	8008efa <memmove+0x12>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4402      	add	r2, r0
 8008f0c:	428a      	cmp	r2, r1
 8008f0e:	d100      	bne.n	8008f12 <memmove+0x2a>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1a:	e7f7      	b.n	8008f0c <memmove+0x24>

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4d05      	ldr	r5, [pc, #20]	; (8008f38 <_sbrk_r+0x1c>)
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7f8 f9ec 	bl	8001304 <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200018fc 	.word	0x200018fc

08008f3c <memchr>:
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	b510      	push	{r4, lr}
 8008f40:	b2c9      	uxtb	r1, r1
 8008f42:	4402      	add	r2, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	d101      	bne.n	8008f4e <memchr+0x12>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e003      	b.n	8008f56 <memchr+0x1a>
 8008f4e:	7804      	ldrb	r4, [r0, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	428c      	cmp	r4, r1
 8008f54:	d1f6      	bne.n	8008f44 <memchr+0x8>
 8008f56:	bd10      	pop	{r4, pc}

08008f58 <_realloc_r>:
 8008f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5c:	4680      	mov	r8, r0
 8008f5e:	4614      	mov	r4, r2
 8008f60:	460e      	mov	r6, r1
 8008f62:	b921      	cbnz	r1, 8008f6e <_realloc_r+0x16>
 8008f64:	4611      	mov	r1, r2
 8008f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	f7ff bc45 	b.w	80087f8 <_malloc_r>
 8008f6e:	b92a      	cbnz	r2, 8008f7c <_realloc_r+0x24>
 8008f70:	f7ff fbda 	bl	8008728 <_free_r>
 8008f74:	4625      	mov	r5, r4
 8008f76:	4628      	mov	r0, r5
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	f000 f81b 	bl	8008fb6 <_malloc_usable_size_r>
 8008f80:	4284      	cmp	r4, r0
 8008f82:	4607      	mov	r7, r0
 8008f84:	d802      	bhi.n	8008f8c <_realloc_r+0x34>
 8008f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f8a:	d812      	bhi.n	8008fb2 <_realloc_r+0x5a>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7ff fc32 	bl	80087f8 <_malloc_r>
 8008f94:	4605      	mov	r5, r0
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d0ed      	beq.n	8008f76 <_realloc_r+0x1e>
 8008f9a:	42bc      	cmp	r4, r7
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	bf28      	it	cs
 8008fa2:	463a      	movcs	r2, r7
 8008fa4:	f7ff fbb2 	bl	800870c <memcpy>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4640      	mov	r0, r8
 8008fac:	f7ff fbbc 	bl	8008728 <_free_r>
 8008fb0:	e7e1      	b.n	8008f76 <_realloc_r+0x1e>
 8008fb2:	4635      	mov	r5, r6
 8008fb4:	e7df      	b.n	8008f76 <_realloc_r+0x1e>

08008fb6 <_malloc_usable_size_r>:
 8008fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fba:	1f18      	subs	r0, r3, #4
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	bfbc      	itt	lt
 8008fc0:	580b      	ldrlt	r3, [r1, r0]
 8008fc2:	18c0      	addlt	r0, r0, r3
 8008fc4:	4770      	bx	lr
	...

08008fc8 <_init>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	bf00      	nop
 8008fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fce:	bc08      	pop	{r3}
 8008fd0:	469e      	mov	lr, r3
 8008fd2:	4770      	bx	lr

08008fd4 <_fini>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	bf00      	nop
 8008fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fda:	bc08      	pop	{r3}
 8008fdc:	469e      	mov	lr, r3
 8008fde:	4770      	bx	lr
