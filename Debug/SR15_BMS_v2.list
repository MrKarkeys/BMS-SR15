
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa34  0800aa34  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa3c  0800aa3c  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa3c  0800aa3c  0001aa3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa40  0800aa40  0001aa40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800aa44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  20000214  0800ac58  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  0800ac58  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ff0  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004706  00000000  00000000  00037270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d0  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  0003d048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b9e  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd56  00000000  00000000  00061d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf1a5  00000000  00000000  0007fa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006450  00000000  00000000  0013ec2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000214 	.word	0x20000214
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a594 	.word	0x0800a594

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000218 	.word	0x20000218
 8000224:	0800a594 	.word	0x0800a594

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b972 	b.w	8001398 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9e08      	ldr	r6, [sp, #32]
 80010d2:	460d      	mov	r5, r1
 80010d4:	4604      	mov	r4, r0
 80010d6:	468e      	mov	lr, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14c      	bne.n	8001176 <__udivmoddi4+0xaa>
 80010dc:	428a      	cmp	r2, r1
 80010de:	4694      	mov	ip, r2
 80010e0:	d967      	bls.n	80011b2 <__udivmoddi4+0xe6>
 80010e2:	fab2 f382 	clz	r3, r2
 80010e6:	b153      	cbz	r3, 80010fe <__udivmoddi4+0x32>
 80010e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010ec:	f1c3 0220 	rsb	r2, r3, #32
 80010f0:	fa01 fe03 	lsl.w	lr, r1, r3
 80010f4:	fa20 f202 	lsr.w	r2, r0, r2
 80010f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80010fc:	409c      	lsls	r4, r3
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fbbe f1f7 	udiv	r1, lr, r7
 8001106:	fa1f f58c 	uxth.w	r5, ip
 800110a:	fb07 ee11 	mls	lr, r7, r1, lr
 800110e:	fb01 f005 	mul.w	r0, r1, r5
 8001112:	0c22      	lsrs	r2, r4, #16
 8001114:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001118:	4290      	cmp	r0, r2
 800111a:	d90a      	bls.n	8001132 <__udivmoddi4+0x66>
 800111c:	eb1c 0202 	adds.w	r2, ip, r2
 8001120:	f101 3eff 	add.w	lr, r1, #4294967295
 8001124:	f080 8119 	bcs.w	800135a <__udivmoddi4+0x28e>
 8001128:	4290      	cmp	r0, r2
 800112a:	f240 8116 	bls.w	800135a <__udivmoddi4+0x28e>
 800112e:	3902      	subs	r1, #2
 8001130:	4462      	add	r2, ip
 8001132:	1a12      	subs	r2, r2, r0
 8001134:	fbb2 f0f7 	udiv	r0, r2, r7
 8001138:	fb07 2210 	mls	r2, r7, r0, r2
 800113c:	fb00 f505 	mul.w	r5, r0, r5
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001146:	42a5      	cmp	r5, r4
 8001148:	d90a      	bls.n	8001160 <__udivmoddi4+0x94>
 800114a:	eb1c 0404 	adds.w	r4, ip, r4
 800114e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001152:	f080 8104 	bcs.w	800135e <__udivmoddi4+0x292>
 8001156:	42a5      	cmp	r5, r4
 8001158:	f240 8101 	bls.w	800135e <__udivmoddi4+0x292>
 800115c:	4464      	add	r4, ip
 800115e:	3802      	subs	r0, #2
 8001160:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001164:	2100      	movs	r1, #0
 8001166:	1b64      	subs	r4, r4, r5
 8001168:	b11e      	cbz	r6, 8001172 <__udivmoddi4+0xa6>
 800116a:	40dc      	lsrs	r4, r3
 800116c:	2300      	movs	r3, #0
 800116e:	e9c6 4300 	strd	r4, r3, [r6]
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	428b      	cmp	r3, r1
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0xc0>
 800117a:	2e00      	cmp	r6, #0
 800117c:	f000 80ea 	beq.w	8001354 <__udivmoddi4+0x288>
 8001180:	2100      	movs	r1, #0
 8001182:	e9c6 0500 	strd	r0, r5, [r6]
 8001186:	4608      	mov	r0, r1
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	fab3 f183 	clz	r1, r3
 8001190:	2900      	cmp	r1, #0
 8001192:	d148      	bne.n	8001226 <__udivmoddi4+0x15a>
 8001194:	42ab      	cmp	r3, r5
 8001196:	d302      	bcc.n	800119e <__udivmoddi4+0xd2>
 8001198:	4282      	cmp	r2, r0
 800119a:	f200 80f8 	bhi.w	800138e <__udivmoddi4+0x2c2>
 800119e:	1a84      	subs	r4, r0, r2
 80011a0:	eb65 0203 	sbc.w	r2, r5, r3
 80011a4:	2001      	movs	r0, #1
 80011a6:	4696      	mov	lr, r2
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d0e2      	beq.n	8001172 <__udivmoddi4+0xa6>
 80011ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80011b0:	e7df      	b.n	8001172 <__udivmoddi4+0xa6>
 80011b2:	b902      	cbnz	r2, 80011b6 <__udivmoddi4+0xea>
 80011b4:	deff      	udf	#255	; 0xff
 80011b6:	fab2 f382 	clz	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 808e 	bne.w	80012dc <__udivmoddi4+0x210>
 80011c0:	1a88      	subs	r0, r1, r2
 80011c2:	2101      	movs	r1, #1
 80011c4:	0c17      	lsrs	r7, r2, #16
 80011c6:	fa1f fe82 	uxth.w	lr, r2
 80011ca:	fbb0 f5f7 	udiv	r5, r0, r7
 80011ce:	fb07 0015 	mls	r0, r7, r5, r0
 80011d2:	0c22      	lsrs	r2, r4, #16
 80011d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011d8:	fb0e f005 	mul.w	r0, lr, r5
 80011dc:	4290      	cmp	r0, r2
 80011de:	d908      	bls.n	80011f2 <__udivmoddi4+0x126>
 80011e0:	eb1c 0202 	adds.w	r2, ip, r2
 80011e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80011e8:	d202      	bcs.n	80011f0 <__udivmoddi4+0x124>
 80011ea:	4290      	cmp	r0, r2
 80011ec:	f200 80cc 	bhi.w	8001388 <__udivmoddi4+0x2bc>
 80011f0:	4645      	mov	r5, r8
 80011f2:	1a12      	subs	r2, r2, r0
 80011f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011f8:	fb07 2210 	mls	r2, r7, r0, r2
 80011fc:	fb0e fe00 	mul.w	lr, lr, r0
 8001200:	b2a4      	uxth	r4, r4
 8001202:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001206:	45a6      	cmp	lr, r4
 8001208:	d908      	bls.n	800121c <__udivmoddi4+0x150>
 800120a:	eb1c 0404 	adds.w	r4, ip, r4
 800120e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001212:	d202      	bcs.n	800121a <__udivmoddi4+0x14e>
 8001214:	45a6      	cmp	lr, r4
 8001216:	f200 80b4 	bhi.w	8001382 <__udivmoddi4+0x2b6>
 800121a:	4610      	mov	r0, r2
 800121c:	eba4 040e 	sub.w	r4, r4, lr
 8001220:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001224:	e7a0      	b.n	8001168 <__udivmoddi4+0x9c>
 8001226:	f1c1 0720 	rsb	r7, r1, #32
 800122a:	408b      	lsls	r3, r1
 800122c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001230:	ea4c 0c03 	orr.w	ip, ip, r3
 8001234:	fa25 fa07 	lsr.w	sl, r5, r7
 8001238:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800123c:	fbba f8f9 	udiv	r8, sl, r9
 8001240:	408d      	lsls	r5, r1
 8001242:	fa20 f307 	lsr.w	r3, r0, r7
 8001246:	fb09 aa18 	mls	sl, r9, r8, sl
 800124a:	fa1f fe8c 	uxth.w	lr, ip
 800124e:	432b      	orrs	r3, r5
 8001250:	fa00 f501 	lsl.w	r5, r0, r1
 8001254:	fb08 f00e 	mul.w	r0, r8, lr
 8001258:	0c1c      	lsrs	r4, r3, #16
 800125a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800125e:	42a0      	cmp	r0, r4
 8001260:	fa02 f201 	lsl.w	r2, r2, r1
 8001264:	d90b      	bls.n	800127e <__udivmoddi4+0x1b2>
 8001266:	eb1c 0404 	adds.w	r4, ip, r4
 800126a:	f108 3aff 	add.w	sl, r8, #4294967295
 800126e:	f080 8086 	bcs.w	800137e <__udivmoddi4+0x2b2>
 8001272:	42a0      	cmp	r0, r4
 8001274:	f240 8083 	bls.w	800137e <__udivmoddi4+0x2b2>
 8001278:	f1a8 0802 	sub.w	r8, r8, #2
 800127c:	4464      	add	r4, ip
 800127e:	1a24      	subs	r4, r4, r0
 8001280:	b298      	uxth	r0, r3
 8001282:	fbb4 f3f9 	udiv	r3, r4, r9
 8001286:	fb09 4413 	mls	r4, r9, r3, r4
 800128a:	fb03 fe0e 	mul.w	lr, r3, lr
 800128e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001292:	45a6      	cmp	lr, r4
 8001294:	d908      	bls.n	80012a8 <__udivmoddi4+0x1dc>
 8001296:	eb1c 0404 	adds.w	r4, ip, r4
 800129a:	f103 30ff 	add.w	r0, r3, #4294967295
 800129e:	d26a      	bcs.n	8001376 <__udivmoddi4+0x2aa>
 80012a0:	45a6      	cmp	lr, r4
 80012a2:	d968      	bls.n	8001376 <__udivmoddi4+0x2aa>
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4464      	add	r4, ip
 80012a8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012ac:	fba0 9302 	umull	r9, r3, r0, r2
 80012b0:	eba4 040e 	sub.w	r4, r4, lr
 80012b4:	429c      	cmp	r4, r3
 80012b6:	46c8      	mov	r8, r9
 80012b8:	469e      	mov	lr, r3
 80012ba:	d354      	bcc.n	8001366 <__udivmoddi4+0x29a>
 80012bc:	d051      	beq.n	8001362 <__udivmoddi4+0x296>
 80012be:	2e00      	cmp	r6, #0
 80012c0:	d067      	beq.n	8001392 <__udivmoddi4+0x2c6>
 80012c2:	ebb5 0308 	subs.w	r3, r5, r8
 80012c6:	eb64 040e 	sbc.w	r4, r4, lr
 80012ca:	40cb      	lsrs	r3, r1
 80012cc:	fa04 f707 	lsl.w	r7, r4, r7
 80012d0:	431f      	orrs	r7, r3
 80012d2:	40cc      	lsrs	r4, r1
 80012d4:	e9c6 7400 	strd	r7, r4, [r6]
 80012d8:	2100      	movs	r1, #0
 80012da:	e74a      	b.n	8001172 <__udivmoddi4+0xa6>
 80012dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80012e0:	f1c3 0020 	rsb	r0, r3, #32
 80012e4:	40c1      	lsrs	r1, r0
 80012e6:	409d      	lsls	r5, r3
 80012e8:	fa24 f000 	lsr.w	r0, r4, r0
 80012ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f0:	4328      	orrs	r0, r5
 80012f2:	fbb1 f5f7 	udiv	r5, r1, r7
 80012f6:	fb07 1115 	mls	r1, r7, r5, r1
 80012fa:	fa1f fe8c 	uxth.w	lr, ip
 80012fe:	0c02      	lsrs	r2, r0, #16
 8001300:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001304:	fb05 f10e 	mul.w	r1, r5, lr
 8001308:	4291      	cmp	r1, r2
 800130a:	fa04 f403 	lsl.w	r4, r4, r3
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x256>
 8001310:	eb1c 0202 	adds.w	r2, ip, r2
 8001314:	f105 38ff 	add.w	r8, r5, #4294967295
 8001318:	d22f      	bcs.n	800137a <__udivmoddi4+0x2ae>
 800131a:	4291      	cmp	r1, r2
 800131c:	d92d      	bls.n	800137a <__udivmoddi4+0x2ae>
 800131e:	3d02      	subs	r5, #2
 8001320:	4462      	add	r2, ip
 8001322:	1a52      	subs	r2, r2, r1
 8001324:	fbb2 f1f7 	udiv	r1, r2, r7
 8001328:	fb07 2211 	mls	r2, r7, r1, r2
 800132c:	b280      	uxth	r0, r0
 800132e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001332:	fb01 f20e 	mul.w	r2, r1, lr
 8001336:	4282      	cmp	r2, r0
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x280>
 800133a:	eb1c 0000 	adds.w	r0, ip, r0
 800133e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001342:	d216      	bcs.n	8001372 <__udivmoddi4+0x2a6>
 8001344:	4282      	cmp	r2, r0
 8001346:	d914      	bls.n	8001372 <__udivmoddi4+0x2a6>
 8001348:	3902      	subs	r1, #2
 800134a:	4460      	add	r0, ip
 800134c:	1a80      	subs	r0, r0, r2
 800134e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001352:	e73a      	b.n	80011ca <__udivmoddi4+0xfe>
 8001354:	4631      	mov	r1, r6
 8001356:	4630      	mov	r0, r6
 8001358:	e70b      	b.n	8001172 <__udivmoddi4+0xa6>
 800135a:	4671      	mov	r1, lr
 800135c:	e6e9      	b.n	8001132 <__udivmoddi4+0x66>
 800135e:	4610      	mov	r0, r2
 8001360:	e6fe      	b.n	8001160 <__udivmoddi4+0x94>
 8001362:	454d      	cmp	r5, r9
 8001364:	d2ab      	bcs.n	80012be <__udivmoddi4+0x1f2>
 8001366:	ebb9 0802 	subs.w	r8, r9, r2
 800136a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800136e:	3801      	subs	r0, #1
 8001370:	e7a5      	b.n	80012be <__udivmoddi4+0x1f2>
 8001372:	4641      	mov	r1, r8
 8001374:	e7ea      	b.n	800134c <__udivmoddi4+0x280>
 8001376:	4603      	mov	r3, r0
 8001378:	e796      	b.n	80012a8 <__udivmoddi4+0x1dc>
 800137a:	4645      	mov	r5, r8
 800137c:	e7d1      	b.n	8001322 <__udivmoddi4+0x256>
 800137e:	46d0      	mov	r8, sl
 8001380:	e77d      	b.n	800127e <__udivmoddi4+0x1b2>
 8001382:	4464      	add	r4, ip
 8001384:	3802      	subs	r0, #2
 8001386:	e749      	b.n	800121c <__udivmoddi4+0x150>
 8001388:	3d02      	subs	r5, #2
 800138a:	4462      	add	r2, ip
 800138c:	e731      	b.n	80011f2 <__udivmoddi4+0x126>
 800138e:	4608      	mov	r0, r1
 8001390:	e70a      	b.n	80011a8 <__udivmoddi4+0xdc>
 8001392:	4631      	mov	r1, r6
 8001394:	e6ed      	b.n	8001172 <__udivmoddi4+0xa6>
 8001396:	bf00      	nop

08001398 <__aeabi_idiv0>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <set_num_devices>:
static uint8_t num_devices;						// Keep visibility within this file
static uint8_t series_groups;					// Number of series groups

/* Set number of LTC6813/slave devices */
void set_num_devices(uint8_t num)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	if (num)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <set_num_devices+0x16>
		num_devices = num; // Non-zero
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <set_num_devices+0x20>)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	7013      	strb	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000230 	.word	0x20000230

080013c0 <get_num_devices>:

/* Get number of LTC6813/slave devices */
uint8_t get_num_devices(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	return num_devices;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <get_num_devices+0x10>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000230 	.word	0x20000230

080013d4 <set_series_groups>:

/* Set number of series groups per LTC6813/slave */
void set_series_groups(uint8_t num)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <set_series_groups+0x1c>
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d802      	bhi.n	80013f0 <set_series_groups+0x1c>
		series_groups = num; // Non-zero and 18 or less
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <set_series_groups+0x28>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	7013      	strb	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000231 	.word	0x20000231

08001400 <get_series_groups>:

/* Get number of series groups per LTC6813/slave */
uint8_t get_series_groups(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	return series_groups;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <get_series_groups+0x10>)
 8001406:	781b      	ldrb	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000231 	.word	0x20000231

08001414 <wakeup_idle>:

/* Wake LTC up from IDLE state into READY state */
void wakeup_idle(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
	uint8_t hex_ff = 0xFF;
 800141a:	23ff      	movs	r3, #255	; 0xff
 800141c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < get_num_devices(); i++)
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	e00c      	b.n	800143e <wakeup_idle+0x2a>
	{
		LTC_nCS_Low();							   // Pull CS low
 8001424:	f001 fc74 	bl	8002d10 <LTC_nCS_Low>
		HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); // Send byte 0xFF to wake LTC up
 8001428:	1cf9      	adds	r1, r7, #3
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	2201      	movs	r2, #1
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <wakeup_idle+0x44>)
 8001430:	f004 fcec 	bl	8005e0c <HAL_SPI_Transmit>
		LTC_nCS_High();							   // Pull CS high
 8001434:	f001 fc60 	bl	8002cf8 <LTC_nCS_High>
	for (int i = 0; i < get_num_devices(); i++)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3301      	adds	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	f7ff ffbf 	bl	80013c0 <get_num_devices>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4293      	cmp	r3, r2
 800144a:	dbeb      	blt.n	8001424 <wakeup_idle+0x10>
	}
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002c4 	.word	0x200002c4

0800145c <wakeup_sleep>:

// wake up sleep
void wakeup_sleep(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

	for (int i = 0; i < get_num_devices(); i++)
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	e00e      	b.n	8001486 <wakeup_sleep+0x2a>
	{
		LTC_nCS_Low();
 8001468:	f001 fc52 	bl	8002d10 <LTC_nCS_Low>
		HAL_Delay(300);
 800146c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001470:	f001 fdd6 	bl	8003020 <HAL_Delay>
		LTC_nCS_High();
 8001474:	f001 fc40 	bl	8002cf8 <LTC_nCS_High>
		HAL_Delay(300);
 8001478:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800147c:	f001 fdd0 	bl	8003020 <HAL_Delay>
	for (int i = 0; i < get_num_devices(); i++)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	f7ff ff9b 	bl	80013c0 <get_num_devices>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4293      	cmp	r3, r2
 8001492:	dbe9      	blt.n	8001468 <wakeup_sleep+0xc>
	}
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <read_cell_volt>:

/* Read and store raw cell voltages at uint8_t 2d pointer */
LTC_SPI_StatusTypeDef read_cell_volt(uint16_t *read_voltages)
{
 80014a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014a4:	b089      	sub	sp, #36	; 0x24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	466b      	mov	r3, sp
 80014ac:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = get_num_devices() * REG_LEN;
 80014b2:	f7ff ff85 	bl	80013c0 <get_num_devices>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	2308      	movs	r3, #8
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	773b      	strb	r3, [r7, #28]
	uint8_t read_voltages_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80014c2:	7f3b      	ldrb	r3, [r7, #28]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	2200      	movs	r2, #0
 80014cc:	4698      	mov	r8, r3
 80014ce:	4691      	mov	r9, r2
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e4:	7f3b      	ldrb	r3, [r7, #28]
 80014e6:	2200      	movs	r2, #0
 80014e8:	461c      	mov	r4, r3
 80014ea:	4615      	mov	r5, r2
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	00eb      	lsls	r3, r5, #3
 80014f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fa:	00e2      	lsls	r2, r4, #3
 80014fc:	7f3b      	ldrb	r3, [r7, #28]
 80014fe:	3307      	adds	r3, #7
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	ebad 0d03 	sub.w	sp, sp, r3
 8001508:	466b      	mov	r3, sp
 800150a:	3300      	adds	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0; i < (get_series_groups() / LTC_SERIES_GROUPS_PER_RDCV);
 800150e:	2300      	movs	r3, #0
 8001510:	77bb      	strb	r3, [r7, #30]
 8001512:	e07e      	b.n	8001612 <read_cell_volt+0x172>
		 i++)
	{
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_RDCV[i] >> 8)); // RDCV Register
 8001514:	7fbb      	ldrb	r3, [r7, #30]
 8001516:	4a48      	ldr	r2, [pc, #288]	; (8001638 <read_cell_volt+0x198>)
 8001518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_RDCV[i]));	  // RDCV Register
 8001524:	7fbb      	ldrb	r3, [r7, #30]
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <read_cell_volt+0x198>)
 8001528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4619      	mov	r1, r3
 8001536:	2002      	movs	r0, #2
 8001538:	f000 fb52 	bl	8001be0 <ltc_pec15_calc>
 800153c:	4603      	mov	r3, r0
 800153e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001540:	8a7b      	ldrh	r3, [r7, #18]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	b29b      	uxth	r3, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800154a:	8a7b      	ldrh	r3, [r7, #18]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8001550:	f7ff ff60 	bl	8001414 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8001554:	f001 fbdc 	bl	8002d10 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001558:	f107 0108 	add.w	r1, r7, #8
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	2204      	movs	r2, #4
 8001560:	4836      	ldr	r0, [pc, #216]	; (800163c <read_cell_volt+0x19c>)
 8001562:	f004 fc53 	bl	8005e0c <HAL_SPI_Transmit>
 8001566:	4603      	mov	r3, r0
 8001568:	747b      	strb	r3, [r7, #17]
		if (hal_ret)
 800156a:	7c7b      	ldrb	r3, [r7, #17]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <read_cell_volt+0xe8>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001570:	7c7b      	ldrb	r3, [r7, #17]
 8001572:	2200      	movs	r2, #0
 8001574:	4413      	add	r3, r2
 8001576:	2201      	movs	r2, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	b25a      	sxtb	r2, r3
 800157e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001582:	4313      	orrs	r3, r2
 8001584:	b25b      	sxtb	r3, r3
 8001586:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_voltages_reg,
 8001588:	7f3b      	ldrb	r3, [r7, #28]
 800158a:	b29a      	uxth	r2, r3
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	6979      	ldr	r1, [r7, #20]
 8001590:	482a      	ldr	r0, [pc, #168]	; (800163c <read_cell_volt+0x19c>)
 8001592:	f004 fd7e 	bl	8006092 <HAL_SPI_Receive>
 8001596:	4603      	mov	r3, r0
 8001598:	747b      	strb	r3, [r7, #17]
								  ARR_SIZE_REG, 100);
		if (hal_ret)
 800159a:	7c7b      	ldrb	r3, [r7, #17]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <read_cell_volt+0x118>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80015a0:	7c7b      	ldrb	r3, [r7, #17]
 80015a2:	2204      	movs	r2, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	2201      	movs	r2, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	b25a      	sxtb	r2, r3
 80015ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	777b      	strb	r3, [r7, #29]
 80015bc:	e01d      	b.n	80015fa <read_cell_volt+0x15a>
		{
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_voltages_reg[dev_idx * REG_LEN];
 80015be:	7f7b      	ldrb	r3, [r7, #29]
 80015c0:	2208      	movs	r2, #8
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
			// If PEC matches, copy the voltage data, omitting the PEC bytes
			memcpy(
				&read_voltages[dev_idx * get_series_groups() + i * LTC_SERIES_GROUPS_PER_RDCV], data_ptr,
 80015cc:	7f7c      	ldrb	r4, [r7, #29]
 80015ce:	f7ff ff17 	bl	8001400 <get_series_groups>
 80015d2:	4603      	mov	r3, r0
 80015d4:	fb03 f204 	mul.w	r2, r3, r4
 80015d8:	7fbb      	ldrb	r3, [r7, #30]
 80015da:	2103      	movs	r1, #3
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4413      	add	r3, r2
				REG_LEN - 2);
 80015e8:	2208      	movs	r2, #8
 80015ea:	3a02      	subs	r2, #2
			memcpy(
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 fd90 	bl	800a114 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 80015f4:	7f7b      	ldrb	r3, [r7, #29]
 80015f6:	3301      	adds	r3, #1
 80015f8:	777b      	strb	r3, [r7, #29]
 80015fa:	f7ff fee1 	bl	80013c0 <get_num_devices>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	7f7b      	ldrb	r3, [r7, #29]
 8001604:	4293      	cmp	r3, r2
 8001606:	d3da      	bcc.n	80015be <read_cell_volt+0x11e>
		}

		LTC_nCS_High(); // Pull CS high
 8001608:	f001 fb76 	bl	8002cf8 <LTC_nCS_High>
		 i++)
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	3301      	adds	r3, #1
 8001610:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i = 0; i < (get_series_groups() / LTC_SERIES_GROUPS_PER_RDCV);
 8001612:	f7ff fef5 	bl	8001400 <get_series_groups>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	2303      	movs	r3, #3
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	7fba      	ldrb	r2, [r7, #30]
 8001624:	429a      	cmp	r2, r3
 8001626:	f4ff af75 	bcc.w	8001514 <read_cell_volt+0x74>
	}

	return ret;
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	46b5      	mov	sp, r6
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001638:	0800a5f4 	.word	0x0800a5f4
 800163c:	200002c4 	.word	0x200002c4

08001640 <ltc6811_wrpwm>:
 * 	write command to all pwm registers. This setup only allows to use 4b'1111 (HIGH) or 4b'0000 (LOW). 
 * @param total_ic		total count of ic (daisy chain)
 * @param pwm			A two dimensional array of the configuration data that will be written
 */
void ltc6811_wrpwm(uint8_t total_ic, uint8_t pwm)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
	const uint8_t BYTES_IN_REG = 6;
 8001650:	2306      	movs	r3, #6
 8001652:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3304      	adds	r3, #4
 800165c:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t pwm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 800165e:	7cfb      	ldrb	r3, [r7, #19]
 8001660:	4618      	mov	r0, r3
 8001662:	f008 fc57 	bl	8009f14 <malloc>
 8001666:	4603      	mov	r3, r0
 8001668:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x00;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x20;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3301      	adds	r3, #1
 8001674:	2220      	movs	r2, #32
 8001676:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	2002      	movs	r0, #2
 800167c:	f000 fab0 	bl	8001be0 <ltc_pec15_calc>
 8001680:	4603      	mov	r3, r0
 8001682:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3302      	adds	r3, #2
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3303      	adds	r3, #3
 8001696:	897a      	ldrh	r2, [r7, #10]
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 800169c:	2304      	movs	r3, #4
 800169e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	75bb      	strb	r3, [r7, #22]
 80016a4:	e02e      	b.n	8001704 <ltc6811_wrpwm+0xc4>
	{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 80016a6:	2300      	movs	r3, #0
 80016a8:	757b      	strb	r3, [r7, #21]
 80016aa:	e00a      	b.n	80016c2 <ltc6811_wrpwm+0x82>
		{
			// current_byte is the byte counter

			cmd[cmd_index] = pwm; // adding the pwm data to the array to be sent
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	79ba      	ldrb	r2, [r7, #6]
 80016b4:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	3301      	adds	r3, #1
 80016ba:	75fb      	strb	r3, [r7, #23]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
 80016be:	3301      	adds	r3, #1
 80016c0:	757b      	strb	r3, [r7, #21]
 80016c2:	7d7a      	ldrb	r2, [r7, #21]
 80016c4:	7d3b      	ldrb	r3, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3f0      	bcc.n	80016ac <ltc6811_wrpwm+0x6c>
		}

		pwm_pec = (uint16_t)ltc_pec15_calc(BYTES_IN_REG, &pwm); // calculating the PEC for each ICs configuration register data
 80016ca:	1dba      	adds	r2, r7, #6
 80016cc:	7d3b      	ldrb	r3, [r7, #20]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fa85 	bl	8001be0 <ltc_pec15_calc>
 80016d6:	4603      	mov	r3, r0
 80016d8:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t)(pwm_pec >> 8);
 80016da:	893b      	ldrh	r3, [r7, #8]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b299      	uxth	r1, r3
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)pwm_pec;
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	3301      	adds	r3, #1
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	893a      	ldrh	r2, [r7, #8]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	3302      	adds	r3, #2
 80016fc:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80016fe:	7dbb      	ldrb	r3, [r7, #22]
 8001700:	3b01      	subs	r3, #1
 8001702:	75bb      	strb	r3, [r7, #22]
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1cd      	bne.n	80016a6 <ltc6811_wrpwm+0x66>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 800170a:	f7ff fe83 	bl	8001414 <wakeup_idle>
	LTC_nCS_Low();
 800170e:	f001 faff 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, CMD_LEN, 100);
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	b29a      	uxth	r2, r3
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <ltc6811_wrpwm+0xf4>)
 800171c:	f004 fb76 	bl	8005e0c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001720:	f001 faea 	bl	8002cf8 <LTC_nCS_High>
	free(cmd);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f008 fbfd 	bl	8009f24 <free>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002c4 	.word	0x200002c4

08001738 <ltc_wrcomm>:

void ltc_wrcomm(uint8_t total_ic, // The number of ICs being written to
				uint8_t comm[6]	  // A two dimensional array of the comm data that will be written
)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001744:	2306      	movs	r3, #6
 8001746:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3304      	adds	r3, #4
 8001750:	74fb      	strb	r3, [r7, #19]
	uint8_t *cmd;
	uint16_t comm_pec;
	uint16_t cmd_pec;
	uint8_t cmd_index; // command counter

	cmd = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 8001752:	7cfb      	ldrb	r3, [r7, #19]
 8001754:	4618      	mov	r0, r3
 8001756:	f008 fbdd 	bl	8009f14 <malloc>
 800175a:	4603      	mov	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]

	cmd[0] = 0x07;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2207      	movs	r2, #7
 8001762:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x21;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3301      	adds	r3, #1
 8001768:	2221      	movs	r2, #33	; 0x21
 800176a:	701a      	strb	r2, [r3, #0]
	cmd_pec = ltc_pec15_calc(2, cmd);
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	2002      	movs	r0, #2
 8001770:	f000 fa36 	bl	8001be0 <ltc_pec15_calc>
 8001774:	4603      	mov	r3, r0
 8001776:	817b      	strh	r3, [r7, #10]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3302      	adds	r3, #2
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
	cmd[3] = (uint8_t)(cmd_pec);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3303      	adds	r3, #3
 800178a:	897a      	ldrh	r2, [r7, #10]
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	701a      	strb	r2, [r3, #0]

	cmd_index = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	75bb      	strb	r3, [r7, #22]
 8001798:	e030      	b.n	80017fc <ltc_wrcomm+0xc4>
	{
		// the last IC on the stack. The first configuration written is
		// received by the last IC in the daisy chain

		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 800179a:	2300      	movs	r3, #0
 800179c:	757b      	strb	r3, [r7, #21]
 800179e:	e00d      	b.n	80017bc <ltc_wrcomm+0x84>
			 current_byte++) // executes for each of the 6 bytes in the CFGR register
		{
			// current_byte is the byte counter
			cmd[cmd_index] = comm[current_byte]; // adding the config data to the array to be sent
 80017a0:	7d7b      	ldrb	r3, [r7, #21]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	441a      	add	r2, r3
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	440b      	add	r3, r1
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	3301      	adds	r3, #1
 80017b4:	75fb      	strb	r3, [r7, #23]
			 current_byte++) // executes for each of the 6 bytes in the CFGR register
 80017b6:	7d7b      	ldrb	r3, [r7, #21]
 80017b8:	3301      	adds	r3, #1
 80017ba:	757b      	strb	r3, [r7, #21]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG;
 80017bc:	7d7a      	ldrb	r2, [r7, #21]
 80017be:	7d3b      	ldrb	r3, [r7, #20]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3ed      	bcc.n	80017a0 <ltc_wrcomm+0x68>
		}
		comm_pec = (uint16_t)ltc_pec15_calc(BYTES_IN_REG, &comm[0]); // calculating the PEC for each ICs configuration register data
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa09 	bl	8001be0 <ltc_pec15_calc>
 80017ce:	4603      	mov	r3, r0
 80017d0:	813b      	strh	r3, [r7, #8]
		cmd[cmd_index] = (uint8_t)(comm_pec >> 8);
 80017d2:	893b      	ldrh	r3, [r7, #8]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	b299      	uxth	r1, r3
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)comm_pec;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	3301      	adds	r3, #1
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	893a      	ldrh	r2, [r7, #8]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	3302      	adds	r3, #2
 80017f4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t current_ic = total_ic; current_ic > 0; current_ic--) // executes for each ltc6811 in daisy chain, this loops starts with
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	75bb      	strb	r3, [r7, #22]
 80017fc:	7dbb      	ldrb	r3, [r7, #22]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1cb      	bne.n	800179a <ltc_wrcomm+0x62>
	}

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake.This command can be removed.
 8001802:	f7ff fe07 	bl	8001414 <wakeup_idle>
	LTC_nCS_Low();
 8001806:	f001 fa83 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, CMD_LEN, 100);
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	b29a      	uxth	r2, r3
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <ltc_wrcomm+0xf4>)
 8001814:	f004 fafa 	bl	8005e0c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001818:	f001 fa6e 	bl	8002cf8 <LTC_nCS_High>
	free(cmd);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f008 fb81 	bl	8009f24 <free>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002c4 	.word	0x200002c4

08001830 <ltc_stcomm>:

/*
 Shifts data in COMM register out over ltc6811 SPI/I2C port
 */
void ltc_stcomm(uint8_t len)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]

	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 800183a:	2307      	movs	r3, #7
 800183c:	733b      	strb	r3, [r7, #12]
	cmd[1] = 0x23;
 800183e:	2323      	movs	r3, #35	; 0x23
 8001840:	737b      	strb	r3, [r7, #13]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4619      	mov	r1, r3
 8001848:	2002      	movs	r0, #2
 800184a:	f000 f9c9 	bl	8001be0 <ltc_pec15_calc>
 800184e:	4603      	mov	r3, r0
 8001850:	827b      	strh	r3, [r7, #18]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001852:	8a7b      	ldrh	r3, [r7, #18]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (uint8_t)(cmd_pec);
 800185c:	8a7b      	ldrh	r3, [r7, #18]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	73fb      	strb	r3, [r7, #15]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001862:	f7ff fdd7 	bl	8001414 <wakeup_idle>
	LTC_nCS_Low();
 8001866:	f001 fa53 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 800186a:	f107 010c 	add.w	r1, r7, #12
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	2204      	movs	r2, #4
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <ltc_stcomm+0x7c>)
 8001874:	f004 faca 	bl	8005e0c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e008      	b.n	8001890 <ltc_stcomm+0x60>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t *)0xFF, 1, 100);
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	2201      	movs	r2, #1
 8001882:	21ff      	movs	r1, #255	; 0xff
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <ltc_stcomm+0x7c>)
 8001886:	f004 fac1 	bl	8005e0c <HAL_SPI_Transmit>
	for (int i = 0; i < len * 3; i++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbef      	blt.n	800187e <ltc_stcomm+0x4e>
	}
	LTC_nCS_High();
 800189e:	f001 fa2b 	bl	8002cf8 <LTC_nCS_High>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002c4 	.word	0x200002c4

080018b0 <read_cell_temps>:

LTC_SPI_StatusTypeDef read_cell_temps(uint16_t *read_auxiliary)
{
 80018b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018b4:	b089      	sub	sp, #36	; 0x24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	466b      	mov	r3, sp
 80018bc:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = get_num_devices() * REG_LEN;
 80018c2:	f7ff fd7d 	bl	80013c0 <get_num_devices>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	2308      	movs	r3, #8
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80018d2:	7f3b      	ldrb	r3, [r7, #28]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	7f3b      	ldrb	r3, [r7, #28]
 80018da:	2200      	movs	r2, #0
 80018dc:	4698      	mov	r8, r3
 80018de:	4691      	mov	r9, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018f4:	7f3b      	ldrb	r3, [r7, #28]
 80018f6:	2200      	movs	r2, #0
 80018f8:	461c      	mov	r4, r3
 80018fa:	4615      	mov	r5, r2
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	00eb      	lsls	r3, r5, #3
 8001906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190a:	00e2      	lsls	r2, r4, #3
 800190c:	7f3b      	ldrb	r3, [r7, #28]
 800190e:	3307      	adds	r3, #7
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	ebad 0d03 	sub.w	sp, sp, r3
 8001918:	466b      	mov	r3, sp
 800191a:	3300      	adds	r3, #0
 800191c:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	77bb      	strb	r3, [r7, #30]
 8001922:	e07c      	b.n	8001a1e <read_cell_temps+0x16e>
		 i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++)
	{
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); // RDCV Register
 8001924:	7fbb      	ldrb	r3, [r7, #30]
 8001926:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <read_cell_temps+0x190>)
 8001928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i]));		// RDCV Register
 8001934:	7fbb      	ldrb	r3, [r7, #30]
 8001936:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <read_cell_temps+0x190>)
 8001938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	727b      	strb	r3, [r7, #9]
		cmd_pec = ltc_pec15_calc(2, cmd);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	2002      	movs	r0, #2
 8001948:	f000 f94a 	bl	8001be0 <ltc_pec15_calc>
 800194c:	4603      	mov	r3, r0
 800194e:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001950:	8a7b      	ldrh	r3, [r7, #18]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(cmd_pec);
 800195a:	8a7b      	ldrh	r3, [r7, #18]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	72fb      	strb	r3, [r7, #11]

		wakeup_idle(); // Wake LTC up
 8001960:	f7ff fd58 	bl	8001414 <wakeup_idle>

		LTC_nCS_Low(); // Pull CS low
 8001964:	f001 f9d4 	bl	8002d10 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001968:	f107 0108 	add.w	r1, r7, #8
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	2204      	movs	r2, #4
 8001970:	4834      	ldr	r0, [pc, #208]	; (8001a44 <read_cell_temps+0x194>)
 8001972:	f004 fa4b 	bl	8005e0c <HAL_SPI_Transmit>
 8001976:	4603      	mov	r3, r0
 8001978:	747b      	strb	r3, [r7, #17]
		if (hal_ret)
 800197a:	7c7b      	ldrb	r3, [r7, #17]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <read_cell_temps+0xe8>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); // TX error
 8001980:	7c7b      	ldrb	r3, [r7, #17]
 8001982:	2200      	movs	r2, #0
 8001984:	4413      	add	r3, r2
 8001986:	2201      	movs	r2, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	b25a      	sxtb	r2, r3
 800198e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001992:	4313      	orrs	r3, r2
 8001994:	b25b      	sxtb	r3, r3
 8001996:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t *)read_auxiliary_reg,
 8001998:	7f3b      	ldrb	r3, [r7, #28]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	6979      	ldr	r1, [r7, #20]
 80019a0:	4828      	ldr	r0, [pc, #160]	; (8001a44 <read_cell_temps+0x194>)
 80019a2:	f004 fb76 	bl	8006092 <HAL_SPI_Receive>
 80019a6:	4603      	mov	r3, r0
 80019a8:	747b      	strb	r3, [r7, #17]
								  ARR_SIZE_REG, 100);
		if (hal_ret)
 80019aa:	7c7b      	ldrb	r3, [r7, #17]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <read_cell_temps+0x118>
		{													 // Non-zero means error
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); // RX error
 80019b0:	7c7b      	ldrb	r3, [r7, #17]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	2201      	movs	r2, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	777b      	strb	r3, [r7, #29]
 80019cc:	e01b      	b.n	8001a06 <read_cell_temps+0x156>
		{
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80019ce:	7f7b      	ldrb	r3, [r7, #29]
 80019d0:	2208      	movs	r2, #8
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

			memcpy(
				&read_auxiliary[dev_idx * num_aux_series_groups + i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80019dc:	7f7b      	ldrb	r3, [r7, #29]
 80019de:	2206      	movs	r2, #6
 80019e0:	fb03 f202 	mul.w	r2, r3, r2
 80019e4:	7fbb      	ldrb	r3, [r7, #30]
 80019e6:	2103      	movs	r1, #3
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
				REG_LEN - 2);
 80019f4:	2208      	movs	r2, #8
 80019f6:	3a02      	subs	r2, #2
			memcpy(
 80019f8:	68f9      	ldr	r1, [r7, #12]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f008 fb8a 	bl	800a114 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++)
 8001a00:	7f7b      	ldrb	r3, [r7, #29]
 8001a02:	3301      	adds	r3, #1
 8001a04:	777b      	strb	r3, [r7, #29]
 8001a06:	f7ff fcdb 	bl	80013c0 <get_num_devices>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d3dc      	bcc.n	80019ce <read_cell_temps+0x11e>
		}

		LTC_nCS_High(); // Pull CS high
 8001a14:	f001 f970 	bl	8002cf8 <LTC_nCS_High>
		 i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++)
 8001a18:	7fbb      	ldrb	r3, [r7, #30]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	77bb      	strb	r3, [r7, #30]
 8001a1e:	2206      	movs	r2, #6
 8001a20:	2303      	movs	r3, #3
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	7fba      	ldrb	r2, [r7, #30]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	f4ff af7a 	bcc.w	8001924 <read_cell_temps+0x74>
	}

	return ret;
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	46b5      	mov	sp, r6
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3724      	adds	r7, #36	; 0x24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a3e:	bf00      	nop
 8001a40:	0800a5fc 	.word	0x0800a5fc
 8001a44:	200002c4 	.word	0x200002c4

08001a48 <ltc_adcv>:
 */
void ltc_adcv(uint8_t MD,  // ADC Mode
			  uint8_t DCP, // Discharge Permit
			  uint8_t CH   // Cell Channels to be measured
)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	460b      	mov	r3, r1
 8001a54:	71bb      	strb	r3, [r7, #6]
 8001a56:	4613      	mov	r3, r2
 8001a58:	717b      	strb	r3, [r7, #5]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	105b      	asrs	r3, r3, #1
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x02;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	3302      	adds	r3, #2
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	01db      	lsls	r3, r3, #7
 8001a72:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + (DCP << 4) + CH;
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	797b      	ldrb	r3, [r7, #5]
 8001a82:	4413      	add	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3360      	adds	r3, #96	; 0x60
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	4619      	mov	r1, r3
 8001a92:	2002      	movs	r0, #2
 8001a94:	f000 f8a4 	bl	8001be0 <ltc_pec15_calc>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001a9c:	89bb      	ldrh	r3, [r7, #12]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	72fb      	strb	r3, [r7, #11]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001aac:	f7ff fcb2 	bl	8001414 <wakeup_idle>
	LTC_nCS_Low();
 8001ab0:	f001 f92e 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001ab4:	f107 0108 	add.w	r1, r7, #8
 8001ab8:	2364      	movs	r3, #100	; 0x64
 8001aba:	2204      	movs	r2, #4
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <ltc_adcv+0x88>)
 8001abe:	f004 f9a5 	bl	8005e0c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001ac2:	f001 f919 	bl	8002cf8 <LTC_nCS_High>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002c4 	.word	0x200002c4

08001ad4 <ltc_adax>:

void ltc_adax(uint8_t MD, // ADC Mode
			  uint8_t CHG // GPIO Channels to be measured)
)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	105b      	asrs	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3304      	adds	r3, #4
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	01db      	lsls	r3, r3, #7
 8001afc:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	4413      	add	r3, r2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3360      	adds	r3, #96	; 0x60
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	727b      	strb	r3, [r7, #9]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	2002      	movs	r0, #2
 8001b14:	f000 f864 	bl	8001be0 <ltc_pec15_calc>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b1c:	89bb      	ldrh	r3, [r7, #12]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b26:	89bb      	ldrh	r3, [r7, #12]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001b2c:	f7ff fc72 	bl	8001414 <wakeup_idle>
	LTC_nCS_Low();
 8001b30:	f001 f8ee 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001b34:	f107 0108 	add.w	r1, r7, #8
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <ltc_adax+0x7c>)
 8001b3e:	f004 f965 	bl	8005e0c <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001b42:	f001 f8d9 	bl	8002cf8 <LTC_nCS_High>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002c4 	.word	0x200002c4

08001b54 <ltc_polladc>:

int32_t ltc_polladc()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001b66:	2307      	movs	r3, #7
 8001b68:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 8001b6a:	2314      	movs	r3, #20
 8001b6c:	717b      	strb	r3, [r7, #5]
	cmd_pec = ltc_pec15_calc(2, cmd);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	2002      	movs	r0, #2
 8001b74:	f000 f834 	bl	8001be0 <ltc_pec15_calc>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001b7c:	893b      	ldrh	r3, [r7, #8]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t)(cmd_pec);
 8001b86:	893b      	ldrh	r3, [r7, #8]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	71fb      	strb	r3, [r7, #7]

	wakeup_idle(); // This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001b8c:	f7ff fc42 	bl	8001414 <wakeup_idle>

	LTC_nCS_Low();
 8001b90:	f001 f8be 	bl	8002d10 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cmd, 4, 100);
 8001b94:	1d39      	adds	r1, r7, #4
 8001b96:	2364      	movs	r3, #100	; 0x64
 8001b98:	2204      	movs	r2, #4
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <ltc_polladc+0x84>)
 8001b9c:	f004 f936 	bl	8005e0c <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0))
 8001ba0:	e00c      	b.n	8001bbc <ltc_polladc+0x68>
	{
		current_time = HAL_GetTick();
 8001ba2:	f001 fa33 	bl	800300c <HAL_GetTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0)
 8001baa:	7abb      	ldrb	r3, [r7, #10]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <ltc_polladc+0x62>
		{
			finished = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	72fb      	strb	r3, [r7, #11]
 8001bb4:	e002      	b.n	8001bbc <ltc_polladc+0x68>
		}
		else
		{
			counter = counter + 10;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	330a      	adds	r3, #10
 8001bba:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <ltc_polladc+0x88>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d802      	bhi.n	8001bca <ltc_polladc+0x76>
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0eb      	beq.n	8001ba2 <ltc_polladc+0x4e>
		}
	}
	LTC_nCS_High();
 8001bca:	f001 f895 	bl	8002cf8 <LTC_nCS_High>
	return (counter);
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200002c4 	.word	0x200002c4
 8001bdc:	00030d3f 	.word	0x00030d3f

08001be0 <ltc_pec15_calc>:
 * error calculation and handling for poor command use. 
 * @param 	len		Number of bytes that will be used to calculate a PEC
 * @param	data	Array of data that will be used to calculate a PEC
*/
uint16_t ltc_pec15_calc(uint8_t len, uint8_t *data)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16; // Initialize the PEC to 0x10000
 8001bec:	2310      	movs	r3, #16
 8001bee:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	737b      	strb	r3, [r7, #13]
 8001bf4:	e018      	b.n	8001c28 <ltc_pec15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8001bf6:	89fb      	ldrh	r3, [r7, #14]
 8001bf8:	09db      	lsrs	r3, r3, #7
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	440b      	add	r3, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4053      	eors	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <ltc_pec15_calc+0x60>)
 8001c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4053      	eors	r3, r2
 8001c20:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	3301      	adds	r3, #1
 8001c26:	737b      	strb	r3, [r7, #13]
 8001c28:	7b7a      	ldrb	r2, [r7, #13]
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3e2      	bcc.n	8001bf6 <ltc_pec15_calc+0x16>
	}

	return (remainder * 2); // The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	b29b      	uxth	r3, r3
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	0800a600 	.word	0x0800a600

08001c44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c56:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <MX_ADC1_Init+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001c82:	f001 f9f1 	bl	8003068 <HAL_ADC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c8c:	f000 fdc4 	bl	8002818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c90:	230e      	movs	r3, #14
 8001c92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_ADC1_Init+0x74>)
 8001ca2:	f001 fab9 	bl	8003218 <HAL_ADC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001cac:	f000 fdb4 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000234 	.word	0x20000234
 8001cbc:	40012400 	.word	0x40012400

08001cc0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cd2:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <MX_ADC2_Init+0x78>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001cfe:	f001 f9b3 	bl	8003068 <HAL_ADC_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001d08:	f000 fd86 	bl	8002818 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_ADC2_Init+0x74>)
 8001d1e:	f001 fa7b 	bl	8003218 <HAL_ADC_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_ADC2_Init+0x6c>
  {
		Error_Handler();
 8001d28:	f000 fd76 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000264 	.word	0x20000264
 8001d38:	40012800 	.word	0x40012800

08001d3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_ADC_MspInit+0xbc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d122      	bne.n	8001da2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d8c:	2330      	movs	r3, #48	; 0x30
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d90:	2303      	movs	r3, #3
 8001d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_ADC_MspInit+0xc4>)
 8001d9c:	f001 feb6 	bl	8003b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001da0:	e026      	b.n	8001df0 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_ADC_MspInit+0xc8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d121      	bne.n	8001df0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_ADC_MspInit+0xc0>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ddc:	230f      	movs	r3, #15
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de0:	2303      	movs	r3, #3
 8001de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	4619      	mov	r1, r3
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_ADC_MspInit+0xc4>)
 8001dec:	f001 fe8e 	bl	8003b0c <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40012400 	.word	0x40012400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40012800 	.word	0x40012800

08001e08 <MX_CAN2_Init>:
/* USER CODE END 0 */

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <MX_CAN2_Init+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e14:	2209      	movs	r2, #9
 8001e16:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e2e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001e32:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_CAN2_Init+0x64>)
 8001e5a:	f001 fb16 	bl	800348a <HAL_CAN_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_CAN2_Init+0x60>
		Error_Handler();
 8001e64:	f000 fcd8 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000294 	.word	0x20000294
 8001e70:	40006800 	.word	0x40006800

08001e74 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN2) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_CAN_MspInit+0xa4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d13d      	bne.n	8001f10 <HAL_CAN_MspInit+0x9c>
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e9e:	61d3      	str	r3, [r2, #28]
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001eb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	61d3      	str	r3, [r2, #28]
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_CAN_MspInit+0xa8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
		/**CAN2 GPIO Configuration
		 PB12     ------> CAN2_RX
		 PB13     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_CAN_MspInit+0xac>)
 8001ef2:	f001 fe0b 	bl	8003b0c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_CAN_MspInit+0xac>)
 8001f0c:	f001 fdfe 	bl	8003b0c <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40006800 	.word	0x40006800
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <CAN_Start>:
	}
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef CAN_Start() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	return HAL_CAN_Start(&hcan2);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <CAN_Start+0x10>)
 8001f2a:	f001 fba9 	bl	8003680 <HAL_CAN_Start>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000294 	.word	0x20000294

08001f38 <CAN_Activate>:

HAL_StatusTypeDef CAN_Activate() {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	return HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <CAN_Activate+0x14>)
 8001f40:	f001 fcb1 	bl	80038a6 <HAL_CAN_ActivateNotification>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000294 	.word	0x20000294

08001f50 <CAN_Send>:

HAL_StatusTypeDef CAN_Send(struct CANMessage *ptr) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	return HAL_CAN_AddTxMessage(&hcan2, &ptr->TxHeader, (uint8_t*) ptr->data,
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f103 021c 	add.w	r2, r3, #28
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3318      	adds	r3, #24
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <CAN_Send+0x24>)
 8001f66:	f001 fbcf 	bl	8003708 <HAL_CAN_AddTxMessage>
 8001f6a:	4603      	mov	r3, r0
			&ptr->TxMailbox);
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000294 	.word	0x20000294

08001f78 <CAN_SettingsInit>:

void CAN_SettingsInit(struct CANMessage *ptr) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	CAN_Start();
 8001f80:	f7ff ffd0 	bl	8001f24 <CAN_Start>
	CAN_Activate();
 8001f84:	f7ff ffd8 	bl	8001f38 <CAN_Activate>
	ptr->TxHeader.IDE = CAN_ID_STD;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
	ptr->TxHeader.StdId = 0x00;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
	ptr->TxHeader.RTR = CAN_RTR_DATA;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
	ptr->TxHeader.DLC = 8;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	611a      	str	r2, [r3, #16]
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <setCANId>:

void setCANId(struct CANMessage *ptr, uint32_t id) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	ptr->TxHeader.StdId = id;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <CAN_Send_Voltage>:

void CAN_Send_Voltage(struct CANMessage *ptr, uint16_t *read_volt) {
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x630;
 8001fcc:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 8001fd0:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 8001fd2:	8afb      	ldrh	r3, [r7, #22]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffe6 	bl	8001fa8 <setCANId>
	for (int i = 0; i < NUM_CELLS; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e074      	b.n	80020cc <CAN_Send_Voltage+0x10a>
		if (i % 4 == 0) {
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d156      	bne.n	800209a <CAN_Send_Voltage+0xd8>
			uint8_t temp_volt = i;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	73fb      	strb	r3, [r7, #15]
			ptr->data[0] = read_volt[temp_volt];
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_volt[temp_volt] >> 8;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4413      	add	r3, r2
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	b2da      	uxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
			ptr->data[2] = read_volt[temp_volt];
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_volt[temp_volt] >> 8;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	b29b      	uxth	r3, r3
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
			ptr->data[4] = read_volt[temp_volt];
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_volt[temp_volt] >> 8;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	3301      	adds	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
			ptr->data[6] = read_volt[temp_volt];
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_volt[temp_volt] >> 8;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29b      	uxth	r3, r3
 8002092:	b2da      	uxtb	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	dd0c      	ble.n	80020ba <CAN_Send_Voltage+0xf8>
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <CAN_Send_Voltage+0xf8>
			CAN_ID = CAN_ID + 0x01;
 80020aa:	8afb      	ldrh	r3, [r7, #22]
 80020ac:	3301      	adds	r3, #1
 80020ae:	82fb      	strh	r3, [r7, #22]
			setCANId(ptr, CAN_ID);
 80020b0:	8afb      	ldrh	r3, [r7, #22]
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff77 	bl	8001fa8 <setCANId>
		}
		HAL_Delay(10);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f000 ffb0 	bl	8003020 <HAL_Delay>
		CAN_Send(ptr);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff45 	bl	8001f50 <CAN_Send>
	for (int i = 0; i < NUM_CELLS; i++) {
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3301      	adds	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0b      	cmp	r3, #11
 80020d0:	dd87      	ble.n	8001fe2 <CAN_Send_Voltage+0x20>
	}

}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <CAN_Send_Temperature>:

void CAN_Send_Temperature(struct CANMessage *ptr, uint16_t *read_temp) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x680;
 80020e6:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80020ea:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff ff59 	bl	8001fa8 <setCANId>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	737b      	strb	r3, [r7, #13]
 80020fa:	e076      	b.n	80021ea <CAN_Send_Temperature+0x10e>
		if (i % 4 == 0) {
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d156      	bne.n	80021b6 <CAN_Send_Temperature+0xda>
			uint8_t temp_volt = i;
 8002108:	7b7b      	ldrb	r3, [r7, #13]
 800210a:	733b      	strb	r3, [r7, #12]
			ptr->data[0] = read_temp[temp_volt];
 800210c:	7b3b      	ldrb	r3, [r7, #12]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4413      	add	r3, r2
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	771a      	strb	r2, [r3, #28]
			ptr->data[1] = read_temp[temp_volt] >> 8;
 800211c:	7b3b      	ldrb	r3, [r7, #12]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	b2da      	uxtb	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	775a      	strb	r2, [r3, #29]
			temp_volt += 1;
 8002130:	7b3b      	ldrb	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	733b      	strb	r3, [r7, #12]
			ptr->data[2] = read_temp[temp_volt];
 8002136:	7b3b      	ldrb	r3, [r7, #12]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	779a      	strb	r2, [r3, #30]
			ptr->data[3] = read_temp[temp_volt] >> 8;
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	b29b      	uxth	r3, r3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	77da      	strb	r2, [r3, #31]
			temp_volt += 1;
 800215a:	7b3b      	ldrb	r3, [r7, #12]
 800215c:	3301      	adds	r3, #1
 800215e:	733b      	strb	r3, [r7, #12]
			ptr->data[4] = read_temp[temp_volt];
 8002160:	7b3b      	ldrb	r3, [r7, #12]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f883 2020 	strb.w	r2, [r3, #32]
			ptr->data[5] = read_temp[temp_volt] >> 8;
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	b29b      	uxth	r3, r3
 8002180:	b2da      	uxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			temp_volt += 1;
 8002188:	7b3b      	ldrb	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	733b      	strb	r3, [r7, #12]
			ptr->data[6] = read_temp[temp_volt];
 800218e:	7b3b      	ldrb	r3, [r7, #12]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			ptr->data[7] = read_temp[temp_volt] >> 8;
 80021a0:	7b3b      	ldrb	r3, [r7, #12]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (i > 0 && i % 4 == 0) {
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <CAN_Send_Temperature+0xfc>
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <CAN_Send_Temperature+0xfc>
			CAN_ID = CAN_ID + 0x01;
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	3301      	adds	r3, #1
 80021cc:	81fb      	strh	r3, [r7, #14]
			setCANId(ptr, CAN_ID);
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fee8 	bl	8001fa8 <setCANId>
		}
		HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f000 ff21 	bl	8003020 <HAL_Delay>
		CAN_Send(ptr);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff feb6 	bl	8001f50 <CAN_Send>
	for (uint8_t i = 0; i < NUM_THERM_TOTAL; i++) {
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	3301      	adds	r3, #1
 80021e8:	737b      	strb	r3, [r7, #13]
 80021ea:	7b7b      	ldrb	r3, [r7, #13]
 80021ec:	2b0b      	cmp	r3, #11
 80021ee:	d985      	bls.n	80020fc <CAN_Send_Temperature+0x20>
	}

}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <CAN_Send_Cell_Summary>:

void CAN_Send_Cell_Summary(struct CANMessage *ptr,
		struct batteryModuleVoltage *batt) {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
	uint16_t CAN_ID = 0x622;
 8002204:	f240 6322 	movw	r3, #1570	; 0x622
 8002208:	81fb      	strh	r3, [r7, #14]
	setCANId(ptr, CAN_ID);
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff feca 	bl	8001fa8 <setCANId>

	ptr->data[0] = batt->cell_volt_highest;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	895b      	ldrh	r3, [r3, #10]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = (batt->cell_volt_highest) >> 8;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	895b      	ldrh	r3, [r3, #10]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	775a      	strb	r2, [r3, #29]
	ptr->data[2] = batt->cell_volt_lowest;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	891b      	ldrh	r3, [r3, #8]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	779a      	strb	r2, [r3, #30]
	ptr->data[3] = (batt->cell_volt_lowest) >> 8;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	891b      	ldrh	r3, [r3, #8]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2da      	uxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	77da      	strb	r2, [r3, #31]
	ptr->data[4] = batt->cell_temp_highest;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	89db      	ldrh	r3, [r3, #14]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f883 2020 	strb.w	r2, [r3, #32]
	ptr->data[5] = (batt->cell_temp_highest) >> 8;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	89db      	ldrh	r3, [r3, #14]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	b29b      	uxth	r3, r3
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	ptr->data[6] = batt->cell_temp_lowest;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	899b      	ldrh	r3, [r3, #12]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ptr->data[7] = (batt->cell_temp_lowest) >> 8;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	899b      	ldrh	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	b29b      	uxth	r3, r3
 8002274:	b2da      	uxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	HAL_Delay(10);
 800227c:	200a      	movs	r0, #10
 800227e:	f000 fecf 	bl	8003020 <HAL_Delay>
	CAN_Send(ptr);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fe64 	bl	8001f50 <CAN_Send>
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <CAN_Send_Safety_Checker>:

void CAN_Send_Safety_Checker(struct CANMessage *ptr, uint8_t* faults, uint8_t* warnings){
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	uint16_t CAN_ID = 0x600;
 800229c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022a0:	82fb      	strh	r3, [r7, #22]
	setCANId(ptr, CAN_ID);
 80022a2:	8afb      	ldrh	r3, [r7, #22]
 80022a4:	4619      	mov	r1, r3
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fe7e 	bl	8001fa8 <setCANId>
	ptr->data[0] = *faults;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781a      	ldrb	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	771a      	strb	r2, [r3, #28]
	ptr->data[1] = *warnings;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	775a      	strb	r2, [r3, #29]
	HAL_Delay(10);
 80022bc:	200a      	movs	r0, #10
 80022be:	f000 feaf 	bl	8003020 <HAL_Delay>
	CAN_Send(ptr);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff fe44 	bl	8001f50 <CAN_Send>
}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> CAN1_RX
     PB9   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	4b52      	ldr	r3, [pc, #328]	; (8002430 <MX_GPIO_Init+0x160>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a51      	ldr	r2, [pc, #324]	; (8002430 <MX_GPIO_Init+0x160>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <MX_GPIO_Init+0x160>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fc:	4b4c      	ldr	r3, [pc, #304]	; (8002430 <MX_GPIO_Init+0x160>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <MX_GPIO_Init+0x160>)
 8002302:	f043 0320 	orr.w	r3, r3, #32
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <MX_GPIO_Init+0x160>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b46      	ldr	r3, [pc, #280]	; (8002430 <MX_GPIO_Init+0x160>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <MX_GPIO_Init+0x160>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <MX_GPIO_Init+0x160>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <MX_GPIO_Init+0x160>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <MX_GPIO_Init+0x160>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <MX_GPIO_Init+0x160>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	2110      	movs	r1, #16
 8002348:	483a      	ldr	r0, [pc, #232]	; (8002434 <MX_GPIO_Init+0x164>)
 800234a:	f001 fd63 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2102      	movs	r1, #2
 8002352:	4839      	ldr	r0, [pc, #228]	; (8002438 <MX_GPIO_Init+0x168>)
 8002354:	f001 fd5e 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2140      	movs	r1, #64	; 0x40
 800235c:	4837      	ldr	r0, [pc, #220]	; (800243c <MX_GPIO_Init+0x16c>)
 800235e:	f001 fd59 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8002362:	2310      	movs	r3, #16
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	482e      	ldr	r0, [pc, #184]	; (8002434 <MX_GPIO_Init+0x164>)
 800237a:	f001 fbc7 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800237e:	2302      	movs	r3, #2
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2302      	movs	r3, #2
 800238c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4828      	ldr	r0, [pc, #160]	; (8002438 <MX_GPIO_Init+0x168>)
 8002396:	f001 fbb9 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 800239a:	2340      	movs	r3, #64	; 0x40
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4822      	ldr	r0, [pc, #136]	; (800243c <MX_GPIO_Init+0x16c>)
 80023b2:	f001 fbab 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	481c      	ldr	r0, [pc, #112]	; (800243c <MX_GPIO_Init+0x16c>)
 80023cc:	f001 fb9e 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_GPIO_Init+0x168>)
 80023e6:	f001 fb91 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	480e      	ldr	r0, [pc, #56]	; (8002438 <MX_GPIO_Init+0x168>)
 8002400:	f001 fb84 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_GPIO_Init+0x170>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <MX_GPIO_Init+0x170>)
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	6053      	str	r3, [r2, #4]

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40011000 	.word	0x40011000
 8002440:	40010000 	.word	0x40010000

08002444 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b0a2      	sub	sp, #136	; 0x88
 8002448:	af00      	add	r7, sp, #0
	TimerPacket timerpacket_ltc_volt;
	TimerPacket timerpacket_ltc_temp;
	TimerPacket timerpacket_can;
	TimerPacket timerpacket_safety;

	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]
 800245a:	615a      	str	r2, [r3, #20]
 800245c:	2018      	movs	r0, #24
 800245e:	f007 fd59 	bl	8009f14 <malloc>
 8002462:	4603      	mov	r3, r0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
	NUM_CELLS * sizeof(uint16_t)), .cell_temp = (uint16_t*) malloc(
 8002466:	2018      	movs	r0, #24
 8002468:	f007 fd54 	bl	8009f14 <malloc>
 800246c:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
	NUM_THERM_TOTAL * sizeof(uint16_t)), .read_auxreg = (uint16_t*) malloc(
 8002470:	200c      	movs	r0, #12
 8002472:	f007 fd4f 	bl	8009f14 <malloc>
 8002476:	4603      	mov	r3, r0
	struct batteryModuleVoltage modVoltage = { .cell_volt = (uint16_t*) malloc(
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
	NUM_AUXES * sizeof(uint16_t)) };

	struct CANMessage msg;
	uint8_t safetyFaults = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	71fb      	strb	r3, [r7, #7]
	uint8_t safetyWarnings = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	71bb      	strb	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002482:	f000 fd6b 	bl	8002f5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002486:	f000 f8eb 	bl	8002660 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800248a:	f7ff ff21 	bl	80022d0 <MX_GPIO_Init>
	MX_ADC1_Init();
 800248e:	f7ff fbd9 	bl	8001c44 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002492:	f7ff fc15 	bl	8001cc0 <MX_ADC2_Init>
	MX_TIM7_Init();
 8002496:	f000 fce7 	bl	8002e68 <MX_TIM7_Init>
	MX_SPI1_Init();
 800249a:	f000 fbad 	bl	8002bf8 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800249e:	f007 f877 	bl	8009590 <MX_USB_DEVICE_Init>
	MX_CAN2_Init();
 80024a2:	f7ff fcb1 	bl	8001e08 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	CAN_SettingsInit(&msg); // Start CAN at 0x00
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fd64 	bl	8001f78 <CAN_SettingsInit>
	//Start timer
	GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port,
 80024b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	4968      	ldr	r1, [pc, #416]	; (8002658 <main+0x214>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 f93d 	bl	8002738 <GpioTimePacket_Init>
	MCU_HEARTBEAT_LED_Pin);
	TimerPacket_Init(&timerpacket_ltc_volt, LTC_VOlT_DELAY);
 80024be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80024c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f976 	bl	80027b8 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_ltc_temp, LTC_TEMP_DELAY);
 80024cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f970 	bl	80027b8 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_can, CAN_DELAY);
 80024d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024dc:	2164      	movs	r1, #100	; 0x64
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f96a 	bl	80027b8 <TimerPacket_Init>
	TimerPacket_Init(&timerpacket_safety, SAFETY_DELAY);
 80024e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024e8:	2132      	movs	r1, #50	; 0x32
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f964 	bl	80027b8 <TimerPacket_Init>
	//Pull SPI1 nCS HIGH (deselect)
	LTC_nCS_High();
 80024f0:	f000 fc02 	bl	8002cf8 <LTC_nCS_High>
	set_num_devices(NUM_DEVICES);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7fe ff51 	bl	800139c <set_num_devices>
	set_series_groups(NUM_CELL_SERIES_GROUP);
 80024fa:	200c      	movs	r0, #12
 80024fc:	f7fe ff6a 	bl	80013d4 <set_series_groups>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t tempindex = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t indexpause = 8;
 8002506:	2308      	movs	r3, #8
 8002508:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t loop_count = 3;
 800250c:	2303      	movs	r3, #3
 800250e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	// Config Balancing controls: 
	// 4'b1111 for no balance 
	// 4'b0000 for balance 

	ltc6811_wrpwm(NUM_DEVICES, 0x00); 
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff f893 	bl	8001640 <ltc6811_wrpwm>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 800251a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800251e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f925 	bl	8002772 <GpioFixedToggle>
		if (TimerPacket_FixedPulse(&timerpacket_ltc_volt)) {
 8002528:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f956 	bl	80027de <TimerPacket_FixedPulse>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <main+0x100>
			wakeup_sleep();
 8002538:	f7fe ff90 	bl	800145c <wakeup_sleep>
			readVolt(modVoltage.cell_volt);
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa04 	bl	800294c <readVolt>
			//print(NUM_CELLS, (uint16_t*) modVoltage.cell_volt);
		}

		if (TimerPacket_FixedPulse(&timerpacket_ltc_temp)) {
 8002544:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f948 	bl	80027de <TimerPacket_FixedPulse>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d034      	beq.n	80025be <main+0x17a>
			//start sending to mux to read temperatures
			wakeup_sleep();
 8002554:	f7fe ff82 	bl	800145c <wakeup_sleep>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002558:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800255c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002560:	e00e      	b.n	8002580 <main+0x13c>
				readTemp(i, modVoltage.cell_temp, modVoltage.read_auxreg);
 8002562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002566:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa04 	bl	8002978 <readTemp>
				HAL_Delay(100);
 8002570:	2064      	movs	r0, #100	; 0x64
 8002572:	f000 fd55 	bl	8003020 <HAL_Delay>
			for (uint8_t i = tempindex; i < indexpause; i++) {
 8002576:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800257a:	3301      	adds	r3, #1
 800257c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8002580:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 8002584:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002588:	429a      	cmp	r2, r3
 800258a:	d3ea      	bcc.n	8002562 <main+0x11e>
			}
			if (indexpause == 8) {
 800258c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002590:	2b08      	cmp	r3, #8
 8002592:	d106      	bne.n	80025a2 <main+0x15e>
				tempindex = 8;
 8002594:	2308      	movs	r3, #8
 8002596:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				indexpause = 12;
 800259a:	230c      	movs	r3, #12
 800259c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80025a0:	e009      	b.n	80025b6 <main+0x172>
			} else if (indexpause == 12) {
 80025a2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d105      	bne.n	80025b6 <main+0x172>
				indexpause = 8;
 80025aa:	2308      	movs	r3, #8
 80025ac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				tempindex = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			HAL_Delay(2300);
 80025b6:	f640 00fc 	movw	r0, #2300	; 0x8fc
 80025ba:	f000 fd31 	bl	8003020 <HAL_Delay>
			//print(NUM_THERM_TOTAL, (uint16_t*) modVoltage.cell_temp);
		}

		if (loop_count == 0) {
 80025be:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11c      	bne.n	8002600 <main+0x1bc>
			if (TimerPacket_FixedPulse(&timerpacket_safety)) {
 80025c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f907 	bl	80027de <TimerPacket_FixedPulse>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <main+0x1c6>
				cellSummary(&modVoltage);
 80025d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fa18 	bl	8002a10 <cellSummary>
				fault_and_warning(&modVoltage, &safetyFaults, &safetyWarnings);
 80025e0:	1dba      	adds	r2, r7, #6
 80025e2:	1df9      	adds	r1, r7, #7
 80025e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fa98 	bl	8002b1e <fault_and_warning>
				if (safetyFaults != 0) {
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <main+0x1c6>
					HAL_GPIO_WritePin(Fault_GPIO_Port, Fault_Pin, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2102      	movs	r1, #2
 80025f8:	4818      	ldr	r0, [pc, #96]	; (800265c <main+0x218>)
 80025fa:	f001 fc0b 	bl	8003e14 <HAL_GPIO_WritePin>
 80025fe:	e004      	b.n	800260a <main+0x1c6>
				}

			}
		} else {
			loop_count--;
 8002600:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002604:	3b01      	subs	r3, #1
 8002606:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		if (TimerPacket_FixedPulse(&timerpacket_can)) {
 800260a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f8e5 	bl	80027de <TimerPacket_FixedPulse>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	f43f af7f 	beq.w	800251a <main+0xd6>
			CAN_Send_Safety_Checker(&msg,&safetyFaults, &safetyWarnings);
 800261c:	1dba      	adds	r2, r7, #6
 800261e:	1df9      	adds	r1, r7, #7
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fe33 	bl	8002290 <CAN_Send_Safety_Checker>
			CAN_Send_Cell_Summary(&msg, &modVoltage);
 800262a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fde0 	bl	80021fa <CAN_Send_Cell_Summary>
			CAN_Send_Voltage(&msg, modVoltage.cell_volt);
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fcbd 	bl	8001fc2 <CAN_Send_Voltage>
			CAN_Send_Temperature(&msg, modVoltage.cell_temp);
 8002648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd43 	bl	80020dc <CAN_Send_Temperature>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8002656:	e760      	b.n	800251a <main+0xd6>
 8002658:	40011000 	.word	0x40011000
 800265c:	40010c00 	.word	0x40010c00

08002660 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b09c      	sub	sp, #112	; 0x70
 8002664:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800266a:	2238      	movs	r2, #56	; 0x38
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f007 fd0c 	bl	800a08c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	2220      	movs	r2, #32
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f007 fcfe 	bl	800a08c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002690:	2301      	movs	r3, #1
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002698:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800269a:	2304      	movs	r3, #4
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269e:	2301      	movs	r3, #1
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a8:	2302      	movs	r3, #2
 80026aa:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80026b8:	2302      	movs	r3, #2
 80026ba:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80026bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026c0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 fd04 	bl	80050d8 <HAL_RCC_OscConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <SystemClock_Config+0x7a>
		Error_Handler();
 80026d6:	f000 f89f 	bl	8002818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80026da:	230f      	movs	r3, #15
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026de:	2302      	movs	r3, #2
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 f804 	bl	8005704 <HAL_RCC_ClockConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <SystemClock_Config+0xa6>
		Error_Handler();
 8002702:	f000 f889 	bl	8002818 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 8002706:	2312      	movs	r3, #18
 8002708:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f003 f9c2 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <SystemClock_Config+0xc6>
		Error_Handler();
 8002722:	f000 f879 	bl	8002818 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002726:	4b03      	ldr	r3, [pc, #12]	; (8002734 <SystemClock_Config+0xd4>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	3770      	adds	r7, #112	; 0x70
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	42420070 	.word	0x42420070

08002738 <GpioTimePacket_Init>:

/* USER CODE BEGIN 4 */
//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2200      	movs	r2, #0
 800274a:	4619      	mov	r1, r3
 800274c:	68b8      	ldr	r0, [r7, #8]
 800274e:	f001 fb61 	bl	8003e14 <HAL_GPIO_WritePin>
	gtp->gpio_port = port;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin = pin;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev = 0; //Init to 0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
	gtp->ts_curr = 0; //Init to 0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	60da      	str	r2, [r3, #12]
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <GpioFixedToggle>:
//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 800277e:	f000 fc45 	bl	800300c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	429a      	cmp	r2, r3
 8002796:	d90b      	bls.n	80027b0 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	889b      	ldrh	r3, [r3, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f001 fb4e 	bl	8003e44 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]
	}
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TimerPacket_Init>:
//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay) {
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
	tp->ts_prev = 0;		//Init to 0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
	tp->ts_curr = 0; 		//Init to 0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
	tp->delay = delay;	//Init to user value
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <TimerPacket_FixedPulse>:
//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp) {
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 80027e6:	f000 fc11 	bl	800300c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	605a      	str	r2, [r3, #4]
	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1ad2      	subs	r2, r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d905      	bls.n	800280e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002820:	e7fe      	b.n	8002820 <Error_Handler+0x8>
	...

08002824 <getActualTemps>:
		0x08, 0x0F, 0xF9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xE9, 0x7F, 0xF9 },
		{ 0x69, 0x08, 0x0F, 0xD9, 0x7F, 0xF9 }, { 0x69, 0x08, 0x0F, 0xC9, 0x7F,
				0xF9 } };

void getActualTemps(uint8_t dev_idx, uint8_t tempindex, uint16_t *actual_temp,
		uint16_t data) {
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	603a      	str	r2, [r7, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
 8002832:	460b      	mov	r3, r1
 8002834:	71bb      	strb	r3, [r7, #6]
 8002836:	4613      	mov	r3, r2
 8002838:	80bb      	strh	r3, [r7, #4]
	static float scalar;
	static float steinhart;
	scalar = 30000.0f / (float) (data) - 1.0f;
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa65 	bl	8000d0c <__aeabi_ui2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4619      	mov	r1, r3
 8002846:	483a      	ldr	r0, [pc, #232]	; (8002930 <getActualTemps+0x10c>)
 8002848:	f7fe fb6c 	bl	8000f24 <__aeabi_fdiv>
 800284c:	4603      	mov	r3, r0
 800284e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f9a8 	bl	8000ba8 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <getActualTemps+0x110>)
 800285e:	601a      	str	r2, [r3, #0]
	scalar = (float) ntcSeriesResistance / scalar;
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <getActualTemps+0x110>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	4834      	ldr	r0, [pc, #208]	; (8002938 <getActualTemps+0x114>)
 8002868:	f7fe fb5c 	bl	8000f24 <__aeabi_fdiv>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <getActualTemps+0x110>)
 8002872:	601a      	str	r2, [r3, #0]
	steinhart = scalar / (float) ntcNominal;               // (R/Ro)
 8002874:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <getActualTemps+0x110>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	492f      	ldr	r1, [pc, #188]	; (8002938 <getActualTemps+0x114>)
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fb52 	bl	8000f24 <__aeabi_fdiv>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <getActualTemps+0x118>)
 8002886:	601a      	str	r2, [r3, #0]
	steinhart = log(steinhart);                           // ln(R/Ro)
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <getActualTemps+0x118>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe2f 	bl	80004f0 <__aeabi_f2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f007 fc91 	bl	800a1c0 <log>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f92b 	bl	8000b00 <__aeabi_d2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a23      	ldr	r2, [pc, #140]	; (800293c <getActualTemps+0x118>)
 80028ae:	6013      	str	r3, [r2, #0]
	steinhart /= (float) ntcBetaFactor;                    // 1/B * ln(R/Ro)
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <getActualTemps+0x118>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4922      	ldr	r1, [pc, #136]	; (8002940 <getActualTemps+0x11c>)
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fb34 	bl	8000f24 <__aeabi_fdiv>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <getActualTemps+0x118>)
 80028c2:	601a      	str	r2, [r3, #0]
	steinhart += 1.0f / ((float) ntcNominalTemp + 273.15f);      // + (1/To)
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <getActualTemps+0x118>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	491e      	ldr	r1, [pc, #120]	; (8002944 <getActualTemps+0x120>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe f96e 	bl	8000bac <__addsf3>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b19      	ldr	r3, [pc, #100]	; (800293c <getActualTemps+0x118>)
 80028d6:	601a      	str	r2, [r3, #0]
	steinhart = 1.0f / steinhart;                         // Invert
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <getActualTemps+0x118>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80028e2:	f7fe fb1f 	bl	8000f24 <__aeabi_fdiv>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <getActualTemps+0x118>)
 80028ec:	601a      	str	r2, [r3, #0]
	steinhart -= 273.15f;    // convert to degree
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <getActualTemps+0x118>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4915      	ldr	r1, [pc, #84]	; (8002948 <getActualTemps+0x124>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f957 	bl	8000ba8 <__aeabi_fsub>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <getActualTemps+0x118>)
 8002900:	601a      	str	r2, [r3, #0]

	actual_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = steinhart;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <getActualTemps+0x118>)
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	461a      	mov	r2, r3
 8002912:	79bb      	ldrb	r3, [r7, #6]
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	18d4      	adds	r4, r2, r3
 800291c:	4608      	mov	r0, r1
 800291e:	f7fe fb9d 	bl	800105c <__aeabi_f2uiz>
 8002922:	4603      	mov	r3, r0
 8002924:	b29b      	uxth	r3, r3
 8002926:	8023      	strh	r3, [r4, #0]

}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}
 8002930:	46ea6000 	.word	0x46ea6000
 8002934:	200002bc 	.word	0x200002bc
 8002938:	47435000 	.word	0x47435000
 800293c:	200002c0 	.word	0x200002c0
 8002940:	45534000 	.word	0x45534000
 8002944:	3b5bcf0f 	.word	0x3b5bcf0f
 8002948:	43889333 	.word	0x43889333

0800294c <readVolt>:

void readVolt(uint16_t *read_volt) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	wakeup_idle();
 8002954:	f7fe fd5e 	bl	8001414 <wakeup_idle>
	ltc_adcv(MD_7KHZ_3KHZ, DCP_DISABLED, CELL_CH_ALL);
 8002958:	2302      	movs	r3, #2
 800295a:	2100      	movs	r1, #0
 800295c:	2200      	movs	r2, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f872 	bl	8001a48 <ltc_adcv>
	ltc_polladc();
 8002964:	f7ff f8f6 	bl	8001b54 <ltc_polladc>
	read_cell_volt((uint16_t*) read_volt);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fe fd99 	bl	80014a0 <read_cell_volt>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <readTemp>:

void readTemp(uint8_t tempindex, uint16_t *read_temp, uint16_t *read_auxreg) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	73fb      	strb	r3, [r7, #15]
	wakeup_idle();
 8002986:	f7fe fd45 	bl	8001414 <wakeup_idle>
	ltc_wrcomm(NUM_DEVICES, BMS_IC[tempindex]);
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <readTemp+0x94>)
 8002996:	4413      	add	r3, r2
 8002998:	4619      	mov	r1, r3
 800299a:	2001      	movs	r0, #1
 800299c:	f7fe fecc 	bl	8001738 <ltc_wrcomm>
	wakeup_idle();
 80029a0:	f7fe fd38 	bl	8001414 <wakeup_idle>
	ltc_stcomm(2);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7fe ff43 	bl	8001830 <ltc_stcomm>
	//end sending to mux to read temperatures

	wakeup_idle();
 80029aa:	f7fe fd33 	bl	8001414 <wakeup_idle>
	ltc_adax(MD_7KHZ_3KHZ, 1); //doing GPIO all conversion
 80029ae:	2302      	movs	r3, #2
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f88e 	bl	8001ad4 <ltc_adax>
	ltc_polladc();
 80029b8:	f7ff f8cc 	bl	8001b54 <ltc_polladc>
	if (!read_cell_temps((uint16_t*) read_auxreg)) // Set to read back all aux registers
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe ff77 	bl	80018b0 <read_cell_temps>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11c      	bne.n	8002a02 <readTemp+0x8a>
			{
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++) {
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
 80029cc:	e012      	b.n	80029f4 <readTemp+0x7c>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint16_t data = read_auxreg[dev_idx * NUM_AUX_GROUP];
 80029ce:	7dfa      	ldrb	r2, [r7, #23]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	82bb      	strh	r3, [r7, #20]
			//read_temp[dev_idx * NUM_THERM_PER_MOD + tempindex] = data;
			getActualTemps(dev_idx, tempindex, (uint16_t*) read_temp, data); //+5 because vref is the last reg
 80029e2:	8abb      	ldrh	r3, [r7, #20]
 80029e4:	7bf9      	ldrb	r1, [r7, #15]
 80029e6:	7df8      	ldrb	r0, [r7, #23]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	f7ff ff1b 	bl	8002824 <getActualTemps>
		for (uint8_t dev_idx = 0; dev_idx < get_num_devices(); dev_idx++) {
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	3301      	adds	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]
 80029f4:	f7fe fce4 	bl	80013c0 <get_num_devices>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d3e5      	bcc.n	80029ce <readTemp+0x56>

		}
	}
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <cellSummary>:
#include "safety.h"

void cellSummary(struct batteryModuleVoltage *batt){
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	batt->cell_volt_highest = batt->cell_volt[0];
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	815a      	strh	r2, [r3, #10]
	batt->cell_volt_lowest = batt->cell_volt[0];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	811a      	strh	r2, [r3, #8]
	batt->cell_temp_highest = batt->cell_temp[0];
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	81da      	strh	r2, [r3, #14]
	batt->cell_temp_lowest = batt->cell_temp[0];
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	881a      	ldrh	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	819a      	strh	r2, [r3, #12]
	batt->pack_voltage = 0;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	821a      	strh	r2, [r3, #16]

	for(int i = 1; i < NUM_CELLS; i++){
 8002a46:	2301      	movs	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e032      	b.n	8002ab2 <cellSummary+0xa2>

		if(batt->cell_volt[i] > batt->cell_volt_highest){
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	895b      	ldrh	r3, [r3, #10]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d907      	bls.n	8002a70 <cellSummary+0x60>
			batt->cell_volt_highest = batt->cell_volt[i];
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	881a      	ldrh	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	815a      	strh	r2, [r3, #10]
		}

		if(batt->cell_volt[i] < batt->cell_volt_lowest){
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	881a      	ldrh	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	891b      	ldrh	r3, [r3, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d207      	bcs.n	8002a94 <cellSummary+0x84>
			batt->cell_temp_lowest = batt->cell_volt[i];
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	819a      	strh	r2, [r3, #12]
		}

		batt->pack_voltage += batt->cell_volt[i];
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8a1a      	ldrh	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	440b      	add	r3, r1
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	821a      	strh	r2, [r3, #16]
	for(int i = 1; i < NUM_CELLS; i++){
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b0b      	cmp	r3, #11
 8002ab6:	ddc9      	ble.n	8002a4c <cellSummary+0x3c>
	}

	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	e026      	b.n	8002b0c <cellSummary+0xfc>
		if(batt->cell_temp_highest < batt->cell_temp[i]){
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	89da      	ldrh	r2, [r3, #14]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d207      	bcs.n	8002ae2 <cellSummary+0xd2>
			batt->cell_temp_highest = batt->cell_temp[i];
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	81da      	strh	r2, [r3, #14]
		}

		if(batt->cell_temp_lowest > batt->cell_temp[i]){
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	899a      	ldrh	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	440b      	add	r3, r1
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d907      	bls.n	8002b06 <cellSummary+0xf6>
			batt->cell_temp_lowest = batt->cell_temp[i];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	819a      	strh	r2, [r3, #12]
	for(int i = 0; i < NUM_THERM_TOTAL; i++){
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b0b      	cmp	r3, #11
 8002b10:	ddd5      	ble.n	8002abe <cellSummary+0xae>
		}
	}

}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <fault_and_warning>:


void fault_and_warning(struct batteryModuleVoltage *batt, uint8_t *fault, uint8_t *warnings){
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
	if(batt->pack_voltage >= PACK_HIGH_VOLT_FAULT){
		*fault |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_FAULT){
		*fault |= 0b01000000;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_FAULT){
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	891b      	ldrh	r3, [r3, #8]
 8002b3c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d806      	bhi.n	8002b52 <fault_and_warning+0x34>
		*fault |= 0b00100000;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f043 0320 	orr.w	r3, r3, #32
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	701a      	strb	r2, [r3, #0]
	}

		if(batt->cell_volt_highest>= CELL_HIGH_VOLT_FAULT){
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	895b      	ldrh	r3, [r3, #10]
 8002b56:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d906      	bls.n	8002b6c <fault_and_warning+0x4e>
		*fault |= 0b00010000;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	f043 0310 	orr.w	r3, r3, #16
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_FAULT){
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	89db      	ldrh	r3, [r3, #14]
 8002b70:	2b3b      	cmp	r3, #59	; 0x3b
 8002b72:	d906      	bls.n	8002b82 <fault_and_warning+0x64>
		*fault |= 0b00001000;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	701a      	strb	r2, [r3, #0]
	if(batt->pack_voltage >=  PACK_HIGH_VOLT_WARNING){
		*warnings |= 0b10000000;
	}

	if(batt->pack_voltage <= PACK_LOW_VOLT_WARNING){
		*warnings |= 0b01000000;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_lowest <= CELL_LOW_VOLT_WARNING){
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	891b      	ldrh	r3, [r3, #8]
 8002b94:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002b98:	d806      	bhi.n	8002ba8 <fault_and_warning+0x8a>
		*warnings |= 0b00100000;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f043 0320 	orr.w	r3, r3, #32
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_volt_highest >= CELL_HIGH_VOLT_WARNING){
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	895b      	ldrh	r3, [r3, #10]
 8002bac:	f24a 6203 	movw	r2, #42499	; 0xa603
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d906      	bls.n	8002bc2 <fault_and_warning+0xa4>
		*warnings |= 0b00010000;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_highest >= CELL_HIGH_TEMP_WARNING){
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	89db      	ldrh	r3, [r3, #14]
 8002bc6:	2b36      	cmp	r3, #54	; 0x36
 8002bc8:	d906      	bls.n	8002bd8 <fault_and_warning+0xba>
		*warnings |= 0b00001000;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	701a      	strb	r2, [r3, #0]
	}

	if(batt->cell_temp_lowest <= CELL_LOW_TEMP_WARNING){
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	899b      	ldrh	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <fault_and_warning+0xd0>
		*warnings |= 0b00000100;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	701a      	strb	r2, [r3, #0]
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002bfe:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <MX_SPI1_Init+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c2c:	2228      	movs	r2, #40	; 0x28
 8002c2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c44:	220a      	movs	r2, #10
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <MX_SPI1_Init+0x64>)
 8002c4a:	f003 f85b 	bl	8005d04 <HAL_SPI_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_SPI1_Init+0x60>
  {
		Error_Handler();
 8002c54:	f7ff fde0 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	200002c4 	.word	0x200002c4
 8002c60:	40013000 	.word	0x40013000

08002c64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d12f      	bne.n	8002ce4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a19      	ldr	r2, [pc, #100]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002cb4:	23a0      	movs	r3, #160	; 0xa0
 8002cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <HAL_SPI_MspInit+0x90>)
 8002cc8:	f000 ff20 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <HAL_SPI_MspInit+0x90>)
 8002ce0:	f000 ff14 	bl	8003b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013000 	.word	0x40013000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010800 	.word	0x40010800

08002cf8 <LTC_nCS_High>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTC_nCS_High(void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2110      	movs	r1, #16
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <LTC_nCS_High+0x14>)
 8002d02:	f001 f887 	bl	8003e14 <HAL_GPIO_WritePin>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40010800 	.word	0x40010800

08002d10 <LTC_nCS_Low>:
/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002d14:	2200      	movs	r2, #0
 8002d16:	2110      	movs	r1, #16
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <LTC_nCS_Low+0x14>)
 8002d1a:	f001 f87b 	bl	8003e14 <HAL_GPIO_WritePin>
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40010800 	.word	0x40010800

08002d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6193      	str	r3, [r2, #24]
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_MspInit+0x5c>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_MspInit+0x60>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_MspInit+0x60>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000

08002d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d90:	e7fe      	b.n	8002d90 <NMI_Handler+0x4>

08002d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <HardFault_Handler+0x4>

08002d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler+0x4>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <BusFault_Handler+0x4>

08002da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <UsageFault_Handler+0x4>

08002daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd2:	f000 f909 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <OTG_FS_IRQHandler+0x10>)
 8002de2:	f001 f987 	bl	80040f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20001034 	.word	0x20001034

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f007 f94c 	bl	800a0bc <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20010000 	.word	0x20010000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	2000031c 	.word	0x2000031c
 8002e58:	200018a0 	.word	0x200018a0

08002e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e6e:	463b      	mov	r3, r7
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e78:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <MX_TIM7_Init+0x68>)
 8002e7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002e98:	f003 fcbc 	bl	8006814 <HAL_TIM_Base_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002ea2:	f7ff fcb9 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002eae:	463b      	mov	r3, r7
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4806      	ldr	r0, [pc, #24]	; (8002ecc <MX_TIM7_Init+0x64>)
 8002eb4:	f003 fd6a 	bl	800698c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002ebe:	f7ff fcab 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000320 	.word	0x20000320
 8002ed0:	40001400 	.word	0x40001400

08002ed4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_TIM_Base_MspInit+0x34>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10b      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_TIM_Base_MspInit+0x38>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <HAL_TIM_Base_MspInit+0x38>)
 8002eec:	f043 0320 	orr.w	r3, r3, #32
 8002ef0:	61d3      	str	r3, [r2, #28]
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_TIM_Base_MspInit+0x38>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40001400 	.word	0x40001400
 8002f0c:	40021000 	.word	0x40021000

08002f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f10:	f7ff ffa4 	bl	8002e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f16:	490c      	ldr	r1, [pc, #48]	; (8002f48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f18:	4a0c      	ldr	r2, [pc, #48]	; (8002f4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f2c:	4c09      	ldr	r4, [pc, #36]	; (8002f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f3a:	f007 f8c5 	bl	800a0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f3e:	f7ff fa81 	bl	8002444 <main>
  bx lr
 8002f42:	4770      	bx	lr
  ldr r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f48:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002f4c:	0800aa44 	.word	0x0800aa44
  ldr r2, =_sbss
 8002f50:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002f54:	200018a0 	.word	0x200018a0

08002f58 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f58:	e7fe      	b.n	8002f58 <ADC1_2_IRQHandler>
	...

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_Init+0x28>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <HAL_Init+0x28>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f6c:	2003      	movs	r0, #3
 8002f6e:	f000 fd8b 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f72:	200f      	movs	r0, #15
 8002f74:	f000 f808 	bl	8002f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f78:	f7ff fed6 	bl	8002d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_InitTick+0x54>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x58>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fda3 	bl	8003af2 <HAL_SYSTICK_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e00e      	b.n	8002fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d80a      	bhi.n	8002fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 fd6b 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <HAL_InitTick+0x5c>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000048 	.word	0x20000048
 8002fe0:	20000050 	.word	0x20000050
 8002fe4:	2000004c 	.word	0x2000004c

08002fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_IncTick+0x1c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_IncTick+0x20>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a03      	ldr	r2, [pc, #12]	; (8003008 <HAL_IncTick+0x20>)
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000050 	.word	0x20000050
 8003008:	20000368 	.word	0x20000368

0800300c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_GetTick+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000368 	.word	0x20000368

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff fff0 	bl	800300c <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffe0 	bl	800300c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000050 	.word	0x20000050

08003068 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0be      	b.n	8003208 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe fe48 	bl	8001d3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9ab 	bl	8003408 <ADC_ConversionStop_Disable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f040 8099 	bne.w	80031f6 <HAL_ADC_Init+0x18e>
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8095 	bne.w	80031f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	7b1b      	ldrb	r3, [r3, #12]
 80030ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d003      	beq.n	800310a <HAL_ADC_Init+0xa2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_ADC_Init+0xa8>
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	e000      	b.n	8003112 <HAL_ADC_Init+0xaa>
 8003110:	2300      	movs	r3, #0
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7d1b      	ldrb	r3, [r3, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d119      	bne.n	8003154 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	3b01      	subs	r3, #1
 800312e:	035a      	lsls	r2, r3, #13
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e00b      	b.n	8003154 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_ADC_Init+0x1a8>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	430b      	orrs	r3, r1
 800317a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d003      	beq.n	800318e <HAL_ADC_Init+0x126>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d104      	bne.n	8003198 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	3b01      	subs	r3, #1
 8003194:	051b      	lsls	r3, r3, #20
 8003196:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_ADC_Init+0x1ac>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10b      	bne.n	80031d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	f023 0303 	bic.w	r3, r3, #3
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031d2:	e018      	b.n	8003206 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f023 0312 	bic.w	r3, r3, #18
 80031dc:	f043 0210 	orr.w	r2, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031f4:	e007      	b.n	8003206 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	ffe1f7fd 	.word	0xffe1f7fd
 8003214:	ff1f0efe 	.word	0xff1f0efe

08003218 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x20>
 8003234:	2302      	movs	r3, #2
 8003236:	e0dc      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1da>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d81c      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b05      	subs	r3, #5
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b05      	subs	r3, #5
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	635a      	str	r2, [r3, #52]	; 0x34
 8003280:	e03c      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d81c      	bhi.n	80032c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	3b23      	subs	r3, #35	; 0x23
 800329c:	221f      	movs	r2, #31
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4019      	ands	r1, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	3b23      	subs	r3, #35	; 0x23
 80032b6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
 80032c2:	e01b      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b41      	subs	r3, #65	; 0x41
 80032d6:	221f      	movs	r2, #31
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	4019      	ands	r1, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	3b41      	subs	r3, #65	; 0x41
 80032f0:	fa00 f203 	lsl.w	r2, r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b09      	cmp	r3, #9
 8003302:	d91c      	bls.n	800333e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	4019      	ands	r1, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6898      	ldr	r0, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	3b1e      	subs	r3, #30
 8003330:	fa00 f203 	lsl.w	r2, r0, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e019      	b.n	8003372 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d003      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800337e:	2b11      	cmp	r3, #17
 8003380:	d132      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d125      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d126      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d11a      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_ADC_ConfigChannel+0x1e8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_ADC_ConfigChannel+0x1ec>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9a      	lsrs	r2, r3, #18
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c8:	e002      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x1b2>
 80033d6:	e007      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012400 	.word	0x40012400
 8003400:	20000048 	.word	0x20000048
 8003404:	431bde83 	.word	0x431bde83

08003408 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d12e      	bne.n	8003480 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003432:	f7ff fdeb 	bl	800300c <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003438:	e01b      	b.n	8003472 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800343a:	f7ff fde7 	bl	800300c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d914      	bls.n	8003472 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10d      	bne.n	8003472 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d0dc      	beq.n	800343a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0ed      	b.n	8003678 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7fe fce3 	bl	8001e74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034be:	f7ff fda5 	bl	800300c <HAL_GetTick>
 80034c2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034c4:	e012      	b.n	80034ec <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034c6:	f7ff fda1 	bl	800300c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b0a      	cmp	r3, #10
 80034d2:	d90b      	bls.n	80034ec <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0c5      	b.n	8003678 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0e5      	beq.n	80034c6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0202 	bic.w	r2, r2, #2
 8003508:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350a:	f7ff fd7f 	bl	800300c <HAL_GetTick>
 800350e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003510:	e012      	b.n	8003538 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003512:	f7ff fd7b 	bl	800300c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b0a      	cmp	r3, #10
 800351e:	d90b      	bls.n	8003538 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2205      	movs	r2, #5
 8003530:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e09f      	b.n	8003678 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e5      	bne.n	8003512 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7e1b      	ldrb	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7e5b      	ldrb	r3, [r3, #25]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7e9b      	ldrb	r3, [r3, #26]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0220 	orr.w	r2, r2, #32
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0220 	bic.w	r2, r2, #32
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7edb      	ldrb	r3, [r3, #27]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0210 	bic.w	r2, r2, #16
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0210 	orr.w	r2, r2, #16
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0208 	orr.w	r2, r2, #8
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0208 	bic.w	r2, r2, #8
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7f5b      	ldrb	r3, [r3, #29]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0204 	orr.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0204 	bic.w	r2, r2, #4
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	ea42 0103 	orr.w	r1, r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d12e      	bne.n	80036f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ac:	f7ff fcae 	bl	800300c <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036b2:	e012      	b.n	80036da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b4:	f7ff fcaa 	bl	800300c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b0a      	cmp	r3, #10
 80036c0:	d90b      	bls.n	80036da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2205      	movs	r2, #5
 80036d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e012      	b.n	8003700 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e5      	bne.n	80036b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e006      	b.n	8003700 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d003      	beq.n	8003734 <HAL_CAN_AddTxMessage+0x2c>
 800372c:	7ffb      	ldrb	r3, [r7, #31]
 800372e:	2b02      	cmp	r3, #2
 8003730:	f040 80ad 	bne.w	800388e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8095 	beq.w	800387e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	0e1b      	lsrs	r3, r3, #24
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800375e:	2201      	movs	r2, #1
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	409a      	lsls	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	6809      	ldr	r1, [r1, #0]
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3318      	adds	r3, #24
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	440b      	add	r3, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e00f      	b.n	80037ac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003796:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800379c:	68f9      	ldr	r1, [r7, #12]
 800379e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80037a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3318      	adds	r3, #24
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	440b      	add	r3, r1
 80037aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3318      	adds	r3, #24
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	440b      	add	r3, r1
 80037bc:	3304      	adds	r3, #4
 80037be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	7d1b      	ldrb	r3, [r3, #20]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d111      	bne.n	80037ec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3318      	adds	r3, #24
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	6811      	ldr	r1, [r2, #0]
 80037dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3318      	adds	r3, #24
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	3304      	adds	r3, #4
 80037ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3307      	adds	r3, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	061a      	lsls	r2, r3, #24
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3306      	adds	r3, #6
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3305      	adds	r3, #5
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4313      	orrs	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	3204      	adds	r2, #4
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4610      	mov	r0, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	ea43 0200 	orr.w	r2, r3, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	440b      	add	r3, r1
 800381e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003822:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3303      	adds	r3, #3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	061a      	lsls	r2, r3, #24
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3302      	adds	r3, #2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3301      	adds	r3, #1
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	4313      	orrs	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	4610      	mov	r0, r2
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	ea43 0200 	orr.w	r2, r3, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	440b      	add	r3, r1
 8003854:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003858:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3318      	adds	r3, #24
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4413      	add	r3, r2
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6811      	ldr	r1, [r2, #0]
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3318      	adds	r3, #24
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	440b      	add	r3, r1
 8003878:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e00e      	b.n	800389c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e006      	b.n	800389c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3724      	adds	r7, #36	; 0x24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d002      	beq.n	80038c4 <HAL_CAN_ActivateNotification+0x1e>
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d109      	bne.n	80038d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6959      	ldr	r1, [r3, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e006      	b.n	80038e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4906      	ldr	r1, [pc, #24]	; (8003988 <__NVIC_EnableIRQ+0x34>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	f7ff ff90 	bl	800398c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff2d 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff42 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff90 	bl	80039e0 <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5f 	bl	800398c <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff35 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffa2 	bl	8003a44 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b08b      	sub	sp, #44	; 0x2c
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1e:	e169      	b.n	8003df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b20:	2201      	movs	r2, #1
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	f040 8158 	bne.w	8003dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a9a      	ldr	r2, [pc, #616]	; (8003dac <HAL_GPIO_Init+0x2a0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d05e      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b48:	4a98      	ldr	r2, [pc, #608]	; (8003dac <HAL_GPIO_Init+0x2a0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d875      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b4e:	4a98      	ldr	r2, [pc, #608]	; (8003db0 <HAL_GPIO_Init+0x2a4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d058      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b54:	4a96      	ldr	r2, [pc, #600]	; (8003db0 <HAL_GPIO_Init+0x2a4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d86f      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b5a:	4a96      	ldr	r2, [pc, #600]	; (8003db4 <HAL_GPIO_Init+0x2a8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d052      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b60:	4a94      	ldr	r2, [pc, #592]	; (8003db4 <HAL_GPIO_Init+0x2a8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d869      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b66:	4a94      	ldr	r2, [pc, #592]	; (8003db8 <HAL_GPIO_Init+0x2ac>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04c      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b6c:	4a92      	ldr	r2, [pc, #584]	; (8003db8 <HAL_GPIO_Init+0x2ac>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d863      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b72:	4a92      	ldr	r2, [pc, #584]	; (8003dbc <HAL_GPIO_Init+0x2b0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d046      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
 8003b78:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_GPIO_Init+0x2b0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d85d      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d82a      	bhi.n	8003bd8 <HAL_GPIO_Init+0xcc>
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d859      	bhi.n	8003c3a <HAL_GPIO_Init+0x12e>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_GPIO_Init+0x80>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003c07 	.word	0x08003c07
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003bf3 	.word	0x08003bf3
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003c3b 	.word	0x08003c3b
 8003ba0:	08003c3b 	.word	0x08003c3b
 8003ba4:	08003c3b 	.word	0x08003c3b
 8003ba8:	08003c3b 	.word	0x08003c3b
 8003bac:	08003c3b 	.word	0x08003c3b
 8003bb0:	08003c3b 	.word	0x08003c3b
 8003bb4:	08003c3b 	.word	0x08003c3b
 8003bb8:	08003c3b 	.word	0x08003c3b
 8003bbc:	08003c3b 	.word	0x08003c3b
 8003bc0:	08003c3b 	.word	0x08003c3b
 8003bc4:	08003c3b 	.word	0x08003c3b
 8003bc8:	08003c3b 	.word	0x08003c3b
 8003bcc:	08003c3b 	.word	0x08003c3b
 8003bd0:	08003be9 	.word	0x08003be9
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	4a79      	ldr	r2, [pc, #484]	; (8003dc0 <HAL_GPIO_Init+0x2b4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bde:	e02c      	b.n	8003c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	623b      	str	r3, [r7, #32]
          break;
 8003be6:	e029      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	3304      	adds	r3, #4
 8003bee:	623b      	str	r3, [r7, #32]
          break;
 8003bf0:	e024      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	623b      	str	r3, [r7, #32]
          break;
 8003bfa:	e01f      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	330c      	adds	r3, #12
 8003c02:	623b      	str	r3, [r7, #32]
          break;
 8003c04:	e01a      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c0e:	2304      	movs	r3, #4
 8003c10:	623b      	str	r3, [r7, #32]
          break;
 8003c12:	e013      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	611a      	str	r2, [r3, #16]
          break;
 8003c26:	e009      	b.n	8003c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c28:	2308      	movs	r3, #8
 8003c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	615a      	str	r2, [r3, #20]
          break;
 8003c32:	e003      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c34:	2300      	movs	r3, #0
 8003c36:	623b      	str	r3, [r7, #32]
          break;
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x130>
          break;
 8003c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2bff      	cmp	r3, #255	; 0xff
 8003c40:	d801      	bhi.n	8003c46 <HAL_GPIO_Init+0x13a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	e001      	b.n	8003c4a <HAL_GPIO_Init+0x13e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2bff      	cmp	r3, #255	; 0xff
 8003c50:	d802      	bhi.n	8003c58 <HAL_GPIO_Init+0x14c>
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x152>
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	3b08      	subs	r3, #8
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	210f      	movs	r1, #15
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	6a39      	ldr	r1, [r7, #32]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80b1 	beq.w	8003dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c8c:	4b4d      	ldr	r3, [pc, #308]	; (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6193      	str	r3, [r2, #24]
 8003c98:	4b4a      	ldr	r3, [pc, #296]	; (8003dc4 <HAL_GPIO_Init+0x2b8>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ca4:	4a48      	ldr	r2, [pc, #288]	; (8003dc8 <HAL_GPIO_Init+0x2bc>)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <HAL_GPIO_Init+0x2c0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_GPIO_Init+0x1ec>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3f      	ldr	r2, [pc, #252]	; (8003dd0 <HAL_GPIO_Init+0x2c4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_GPIO_Init+0x1e8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3e      	ldr	r2, [pc, #248]	; (8003dd4 <HAL_GPIO_Init+0x2c8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <HAL_GPIO_Init+0x1e4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <HAL_GPIO_Init+0x2cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_GPIO_Init+0x1e0>
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x1ee>
 8003cec:	2304      	movs	r3, #4
 8003cee:	e004      	b.n	8003cfa <HAL_GPIO_Init+0x1ee>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e002      	b.n	8003cfa <HAL_GPIO_Init+0x1ee>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_GPIO_Init+0x1ee>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	f002 0203 	and.w	r2, r2, #3
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	4093      	lsls	r3, r2
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d0a:	492f      	ldr	r1, [pc, #188]	; (8003dc8 <HAL_GPIO_Init+0x2bc>)
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	492c      	ldr	r1, [pc, #176]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d32:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	4928      	ldr	r1, [pc, #160]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d006      	beq.n	8003d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4922      	ldr	r1, [pc, #136]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	491e      	ldr	r1, [pc, #120]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d006      	beq.n	8003d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4918      	ldr	r1, [pc, #96]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	4914      	ldr	r1, [pc, #80]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d021      	beq.n	8003de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	490e      	ldr	r1, [pc, #56]	; (8003ddc <HAL_GPIO_Init+0x2d0>)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
 8003da8:	e021      	b.n	8003dee <HAL_GPIO_Init+0x2e2>
 8003daa:	bf00      	nop
 8003dac:	10320000 	.word	0x10320000
 8003db0:	10310000 	.word	0x10310000
 8003db4:	10220000 	.word	0x10220000
 8003db8:	10210000 	.word	0x10210000
 8003dbc:	10120000 	.word	0x10120000
 8003dc0:	10110000 	.word	0x10110000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40010800 	.word	0x40010800
 8003dd0:	40010c00 	.word	0x40010c00
 8003dd4:	40011000 	.word	0x40011000
 8003dd8:	40011400 	.word	0x40011400
 8003ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_GPIO_Init+0x304>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	4909      	ldr	r1, [pc, #36]	; (8003e10 <HAL_GPIO_Init+0x304>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f47f ae8e 	bne.w	8003b20 <HAL_GPIO_Init+0x14>
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	372c      	adds	r7, #44	; 0x2c
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e30:	e003      	b.n	8003e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	041a      	lsls	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43d9      	mvns	r1, r3
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	400b      	ands	r3, r1
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	611a      	str	r2, [r3, #16]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e78:	b08f      	sub	sp, #60	; 0x3c
 8003e7a:	af0a      	add	r7, sp, #40	; 0x28
 8003e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e10f      	b.n	80040a8 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f005 fd40 	bl	8009928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f002 fe94 	bl	8006bf4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	687e      	ldr	r6, [r7, #4]
 8003ed4:	466d      	mov	r5, sp
 8003ed6:	f106 0410 	add.w	r4, r6, #16
 8003eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eea:	1d33      	adds	r3, r6, #4
 8003eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eee:	6838      	ldr	r0, [r7, #0]
 8003ef0:	f002 fdb2 	bl	8006a58 <USB_CoreInit>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0d0      	b.n	80040a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 fe81 	bl	8006c14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e04a      	b.n	8003fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	333d      	adds	r3, #61	; 0x3d
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	333c      	adds	r3, #60	; 0x3c
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	b298      	uxth	r0, r3
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3356      	adds	r3, #86	; 0x56
 8003f54:	4602      	mov	r2, r0
 8003f56:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f58:	7bfa      	ldrb	r2, [r7, #15]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	3340      	adds	r3, #64	; 0x40
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	3344      	adds	r3, #68	; 0x44
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3348      	adds	r3, #72	; 0x48
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	334c      	adds	r3, #76	; 0x4c
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	3301      	adds	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3af      	bcc.n	8003f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e044      	b.n	8004048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	3301      	adds	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3b5      	bcc.n	8003fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	687e      	ldr	r6, [r7, #4]
 800405a:	466d      	mov	r5, sp
 800405c:	f106 0410 	add.w	r4, r6, #16
 8004060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800406c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004070:	1d33      	adds	r3, r6, #4
 8004072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004074:	6838      	ldr	r0, [r7, #0]
 8004076:	f002 fe19 	bl	8006cac <USB_DevInit>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00d      	b.n	80040a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fda3 	bl	8007bec <USB_DevDisconnect>

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_Start+0x16>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e012      	b.n	80040ec <HAL_PCD_Start+0x3c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 fd7e 	bl	8006bd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f003 fd65 	bl	8007bac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b08d      	sub	sp, #52	; 0x34
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f003 fe1c 	bl	8007d48 <USB_GetMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 8443 	bne.w	800499e <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f003 fd85 	bl	8007c2c <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8439 	beq.w	800499c <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f003 fd72 	bl	8007c2c <USB_ReadInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f002 0202 	and.w	r2, r2, #2
 8004160:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f003 fd60 	bl	8007c2c <USB_ReadInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d161      	bne.n	800423a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699a      	ldr	r2, [r3, #24]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0210 	bic.w	r2, r2, #16
 8004184:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	3304      	adds	r3, #4
 80041a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	0c5b      	lsrs	r3, r3, #17
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d124      	bne.n	80041fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d035      	beq.n	800422a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	6a38      	ldr	r0, [r7, #32]
 80041d2:	f003 fb9d 	bl	8007910 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e2:	441a      	add	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f4:	441a      	add	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	615a      	str	r2, [r3, #20]
 80041fa:	e016      	b.n	800422a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	0c5b      	lsrs	r3, r3, #17
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2b06      	cmp	r3, #6
 8004206:	d110      	bne.n	800422a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800420e:	2208      	movs	r2, #8
 8004210:	4619      	mov	r1, r3
 8004212:	6a38      	ldr	r0, [r7, #32]
 8004214:	f003 fb7c 	bl	8007910 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004224:	441a      	add	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0210 	orr.w	r2, r2, #16
 8004238:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f003 fcf4 	bl	8007c2c <USB_ReadInterrupts>
 8004244:	4603      	mov	r3, r0
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800424e:	f040 80a7 	bne.w	80043a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f003 fcf8 	bl	8007c50 <USB_ReadDevAllOutEpInterrupt>
 8004260:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004262:	e099      	b.n	8004398 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 808e 	beq.w	800438c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f003 fd1a 	bl	8007cb4 <USB_ReadDevOutEPInterrupt>
 8004280:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	2301      	movs	r3, #1
 800429c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800429e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fe41 	bl	8004f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00c      	beq.n	80042ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	461a      	mov	r2, r3
 80042be:	2308      	movs	r3, #8
 80042c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fe7d 	bl	8004fc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	2310      	movs	r3, #16
 80042e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d030      	beq.n	8004352 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d109      	bne.n	8004310 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800430e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	3304      	adds	r3, #4
 8004324:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	78db      	ldrb	r3, [r3, #3]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4619      	mov	r1, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f005 fbe2 	bl	8009b04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	461a      	mov	r2, r3
 800434e:	2302      	movs	r3, #2
 8004350:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	2320      	movs	r3, #32
 800436c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004384:	461a      	mov	r2, r3
 8004386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800438a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	3301      	adds	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f af62 	bne.w	8004264 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 fc41 	bl	8007c2c <USB_ReadInterrupts>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043b4:	f040 80a4 	bne.w	8004500 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 fc60 	bl	8007c82 <USB_ReadDevAllInEpInterrupt>
 80043c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80043c8:	e096      	b.n	80044f8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 808b 	beq.w	80044ec <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 fc84 	bl	8007cee <USB_ReadDevInEPInterrupt>
 80043e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d020      	beq.n	8004434 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	2201      	movs	r2, #1
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	69f9      	ldr	r1, [r7, #28]
 800440e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004412:	4013      	ands	r3, r2
 8004414:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	461a      	mov	r2, r3
 8004424:	2301      	movs	r3, #1
 8004426:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f005 faed 	bl	8009a0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	461a      	mov	r2, r3
 800444c:	2308      	movs	r3, #8
 800444e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004466:	461a      	mov	r2, r3
 8004468:	2310      	movs	r3, #16
 800446a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004482:	461a      	mov	r2, r3
 8004484:	2340      	movs	r3, #64	; 0x40
 8004486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d023      	beq.n	80044da <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	6a38      	ldr	r0, [r7, #32]
 8004496:	f002 fd2b 	bl	8006ef0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	3338      	adds	r3, #56	; 0x38
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	78db      	ldrb	r3, [r3, #3]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d108      	bne.n	80044c8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2200      	movs	r2, #0
 80044ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f005 fb30 	bl	8009b28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	461a      	mov	r2, r3
 80044d6:	2302      	movs	r3, #2
 80044d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fc96 	bl	8004e18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	3301      	adds	r3, #1
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f47f af65 	bne.w	80043ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f003 fb91 	bl	8007c2c <USB_ReadInterrupts>
 800450a:	4603      	mov	r3, r0
 800450c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004514:	d114      	bne.n	8004540 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f005 fadc 	bl	8009ae8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800453e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f003 fb71 	bl	8007c2c <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004554:	d112      	bne.n	800457c <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f005 fa98 	bl	8009a9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800457a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f003 fb53 	bl	8007c2c <USB_ReadInterrupts>
 8004586:	4603      	mov	r3, r0
 8004588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	f040 80b5 	bne.w	80046fe <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2110      	movs	r1, #16
 80045ae:	4618      	mov	r0, r3
 80045b0:	f002 fc9e 	bl	8006ef0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b8:	e046      	b.n	8004648 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	461a      	mov	r2, r3
 80045c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004600:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004620:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004640:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	3301      	adds	r3, #1
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464e:	429a      	cmp	r2, r3
 8004650:	d3b3      	bcc.n	80045ba <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004660:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004664:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	2b00      	cmp	r3, #0
 800466c:	d016      	beq.n	800469c <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467e:	f043 030b 	orr.w	r3, r3, #11
 8004682:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004694:	f043 030b 	orr.w	r3, r3, #11
 8004698:	6453      	str	r3, [r2, #68]	; 0x44
 800469a:	e015      	b.n	80046c8 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c2:	f043 030b 	orr.w	r3, r3, #11
 80046c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f003 fb5d 	bl	8007da8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f003 fa92 	bl	8007c2c <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004712:	d124      	bne.n	800475e <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f003 fb22 	bl	8007d62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f002 fc60 	bl	8006fe8 <USB_GetDevSpeed>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681c      	ldr	r4, [r3, #0]
 8004734:	f001 f98c 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8004738:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	4620      	mov	r0, r4
 8004744:	f002 f9aa 	bl	8006a9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f005 f988 	bl	8009a5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800475c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f003 fa62 	bl	8007c2c <USB_ReadInterrupts>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b08      	cmp	r3, #8
 8004770:	d10a      	bne.n	8004788 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f005 f965 	bl	8009a42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f002 0208 	and.w	r2, r2, #8
 8004786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f003 fa4d 	bl	8007c2c <USB_ReadInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d122      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a8:	2301      	movs	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e014      	b.n	80047d8 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 faf2 	bl	8004db6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3e5      	bcc.n	80047ae <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 fa20 	bl	8007c2c <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f6:	d13b      	bne.n	8004870 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f8:	2301      	movs	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e02b      	b.n	8004856 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3340      	adds	r3, #64	; 0x40
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d115      	bne.n	8004850 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004824:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004826:	2b00      	cmp	r3, #0
 8004828:	da12      	bge.n	8004850 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	333f      	adds	r3, #63	; 0x3f
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004846:	b2db      	uxtb	r3, r3
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fab3 	bl	8004db6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	3301      	adds	r3, #1
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	429a      	cmp	r2, r3
 800485e:	d3ce      	bcc.n	80047fe <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800486e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f003 f9d9 	bl	8007c2c <USB_ReadInterrupts>
 800487a:	4603      	mov	r3, r0
 800487c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004884:	d155      	bne.n	8004932 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004886:	2301      	movs	r3, #1
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	e045      	b.n	8004918 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d12e      	bne.n	8004912 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da2b      	bge.n	8004912 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d121      	bne.n	8004912 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800490a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800490e:	6053      	str	r3, [r2, #4]
            break;
 8004910:	e007      	b.n	8004922 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	3301      	adds	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	429a      	cmp	r2, r3
 8004920:	d3b4      	bcc.n	800488c <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f003 f978 	bl	8007c2c <USB_ReadInterrupts>
 800493c:	4603      	mov	r3, r0
 800493e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004946:	d10a      	bne.n	800495e <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f005 f8ff 	bl	8009b4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800495c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f003 f962 	bl	8007c2c <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d115      	bne.n	800499e <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f005 f8ef 	bl	8009b68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e000      	b.n	800499e <HAL_PCD_IRQHandler+0x8aa>
      return;
 800499c:	bf00      	nop
    }
  }
}
 800499e:	3734      	adds	r7, #52	; 0x34
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}

080049a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_PCD_SetAddress+0x1a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e013      	b.n	80049e6 <HAL_PCD_SetAddress+0x42>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f003 f8c3 	bl	8007b62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	4608      	mov	r0, r1
 80049f8:	4611      	mov	r1, r2
 80049fa:	461a      	mov	r2, r3
 80049fc:	4603      	mov	r3, r0
 80049fe:	70fb      	strb	r3, [r7, #3]
 8004a00:	460b      	mov	r3, r1
 8004a02:	803b      	strh	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da0f      	bge.n	8004a34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	3338      	adds	r3, #56	; 0x38
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	705a      	strb	r2, [r3, #1]
 8004a32:	e00f      	b.n	8004a54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 020f 	and.w	r2, r3, #15
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a60:	883a      	ldrh	r2, [r7, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	78ba      	ldrb	r2, [r7, #2]
 8004a6a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a7e:	78bb      	ldrb	r3, [r7, #2]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d102      	bne.n	8004a8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_PCD_EP_Open+0xaa>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e00e      	b.n	8004ab6 <HAL_PCD_EP_Open+0xc8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68f9      	ldr	r1, [r7, #12]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 fabc 	bl	8007024 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da0f      	bge.n	8004af2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	3338      	adds	r3, #56	; 0x38
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	705a      	strb	r2, [r3, #1]
 8004af0:	e00f      	b.n	8004b12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	3304      	adds	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_PCD_EP_Close+0x6e>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e00e      	b.n	8004b4a <HAL_PCD_EP_Close+0x8c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 faf8 	bl	8007130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	f003 020f 	and.w	r2, r3, #15
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	3304      	adds	r3, #4
 8004b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f002 fb9e 	bl	80072e8 <USB_EPStartXfer>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004bd8:	681b      	ldr	r3, [r3, #0]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf4:	7afb      	ldrb	r3, [r7, #11]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	3338      	adds	r3, #56	; 0x38
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	3304      	adds	r3, #4
 8004c0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2201      	movs	r2, #1
 8004c22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f002 fb56 	bl	80072e8 <USB_EPStartXfer>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	f003 020f 	and.w	r2, r3, #15
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d901      	bls.n	8004c64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e04e      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	da0f      	bge.n	8004c8c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f003 020f 	and.w	r2, r3, #15
 8004c72:	4613      	mov	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	3338      	adds	r3, #56	; 0x38
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	3304      	adds	r3, #4
 8004c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	705a      	strb	r2, [r3, #1]
 8004c8a:	e00d      	b.n	8004ca8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_PCD_EP_SetStall+0x82>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e01c      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xbc>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fe71 	bl	80079be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f003 f858 	bl	8007da8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 020f 	and.w	r2, r3, #15
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d901      	bls.n	8004d28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e042      	b.n	8004dae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da0f      	bge.n	8004d50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3338      	adds	r3, #56	; 0x38
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	705a      	strb	r2, [r3, #1]
 8004d4e:	e00f      	b.n	8004d70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 020f 	and.w	r2, r3, #15
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	3304      	adds	r3, #4
 8004d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_EP_ClrStall+0x86>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e00e      	b.n	8004dae <HAL_PCD_EP_ClrStall+0xa4>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fe7a 	bl	8007a98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da0c      	bge.n	8004de4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	3338      	adds	r3, #56	; 0x38
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e00c      	b.n	8004dfe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 fca1 	bl	800774c <USB_EPStopXfer>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3338      	adds	r3, #56	; 0x38
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d901      	bls.n	8004e50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e067      	b.n	8004f20 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d902      	bls.n	8004e6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3303      	adds	r3, #3
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e74:	e026      	b.n	8004ec4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3303      	adds	r3, #3
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68d9      	ldr	r1, [r3, #12]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f002 fcf9 	bl	800789e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d809      	bhi.n	8004eee <PCD_WriteEmptyTxFifo+0xd6>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d203      	bcs.n	8004eee <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1c3      	bne.n	8004e76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d811      	bhi.n	8004f1e <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2201      	movs	r2, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	6939      	ldr	r1, [r7, #16]
 8004f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	333c      	adds	r3, #60	; 0x3c
 8004f40:	3304      	adds	r3, #4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <PCD_EP_OutXfrComplete_int+0x98>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d124      	bne.n	8004fa8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	461a      	mov	r2, r3
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	6093      	str	r3, [r2, #8]
 8004f7c:	e01a      	b.n	8004fb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	2320      	movs	r3, #32
 8004f98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f004 fd19 	bl	80099d8 <HAL_PCD_DataOutStageCallback>
 8004fa6:	e005      	b.n	8004fb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f004 fd12 	bl	80099d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	4f54310a 	.word	0x4f54310a

08004fc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	333c      	adds	r3, #60	; 0x3c
 8004fdc:	3304      	adds	r3, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	; (8005028 <PCD_EP_OutSetupPacket_int+0x64>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d90e      	bls.n	8005018 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	d009      	beq.n	8005018 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005016:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f004 fccb 	bl	80099b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	4f54300a 	.word	0x4f54300a

0800502c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
 8005038:	4613      	mov	r3, r2
 800503a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800504a:	883b      	ldrh	r3, [r7, #0]
 800504c:	0419      	lsls	r1, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	430a      	orrs	r2, r1
 8005056:	629a      	str	r2, [r3, #40]	; 0x28
 8005058:	e028      	b.n	80050ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e00d      	b.n	800508a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	3340      	adds	r3, #64	; 0x40
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0c1b      	lsrs	r3, r3, #16
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	3301      	adds	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	3b01      	subs	r3, #1
 8005090:	429a      	cmp	r2, r3
 8005092:	d3ec      	bcc.n	800506e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005094:	883b      	ldrh	r3, [r7, #0]
 8005096:	0418      	lsls	r0, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	3b01      	subs	r3, #1
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	4302      	orrs	r2, r0
 80050a4:	3340      	adds	r3, #64	; 0x40
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	887a      	ldrh	r2, [r7, #2]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e304      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8087 	beq.w	8005206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050f8:	4b92      	ldr	r3, [pc, #584]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00c      	beq.n	800511e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005104:	4b8f      	ldr	r3, [pc, #572]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d112      	bne.n	8005136 <HAL_RCC_OscConfig+0x5e>
 8005110:	4b8c      	ldr	r3, [pc, #560]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d10b      	bne.n	8005136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511e:	4b89      	ldr	r3, [pc, #548]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06c      	beq.n	8005204 <HAL_RCC_OscConfig+0x12c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d168      	bne.n	8005204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e2de      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x76>
 8005140:	4b80      	ldr	r3, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a7f      	ldr	r2, [pc, #508]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e02e      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x98>
 8005156:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7a      	ldr	r2, [pc, #488]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b78      	ldr	r3, [pc, #480]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e01d      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0xbc>
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a71      	ldr	r2, [pc, #452]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b6f      	ldr	r3, [pc, #444]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6e      	ldr	r2, [pc, #440]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0xd4>
 8005194:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800519a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	4b68      	ldr	r3, [pc, #416]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a67      	ldr	r2, [pc, #412]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fd ff2a 	bl	800300c <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fd ff26 	bl	800300c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e292      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ce:	4b5d      	ldr	r3, [pc, #372]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0xe4>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd ff16 	bl	800300c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e4:	f7fd ff12 	bl	800300c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e27e      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f6:	4b53      	ldr	r3, [pc, #332]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x10c>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d063      	beq.n	80052da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005212:	4b4c      	ldr	r3, [pc, #304]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800521e:	4b49      	ldr	r3, [pc, #292]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b08      	cmp	r3, #8
 8005228:	d11c      	bne.n	8005264 <HAL_RCC_OscConfig+0x18c>
 800522a:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005236:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_RCC_OscConfig+0x176>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e252      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524e:	4b3d      	ldr	r3, [pc, #244]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4939      	ldr	r1, [pc, #228]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005262:	e03a      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d020      	beq.n	80052ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCC_OscConfig+0x270>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fd fecb 	bl	800300c <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527a:	f7fd fec7 	bl	800300c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e233      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4927      	ldr	r1, [pc, #156]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	600b      	str	r3, [r1, #0]
 80052ac:	e015      	b.n	80052da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCC_OscConfig+0x270>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fd feaa 	bl	800300c <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052bc:	f7fd fea6 	bl	800300c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e212      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03a      	beq.n	800535c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d019      	beq.n	8005322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ee:	4b17      	ldr	r3, [pc, #92]	; (800534c <HAL_RCC_OscConfig+0x274>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f4:	f7fd fe8a 	bl	800300c <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fc:	f7fd fe86 	bl	800300c <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e1f2      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <HAL_RCC_OscConfig+0x26c>)
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800531a:	2001      	movs	r0, #1
 800531c:	f000 fba2 	bl	8005a64 <RCC_Delay>
 8005320:	e01c      	b.n	800535c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_RCC_OscConfig+0x274>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005328:	f7fd fe70 	bl	800300c <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532e:	e00f      	b.n	8005350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005330:	f7fd fe6c 	bl	800300c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d908      	bls.n	8005350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1d8      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000
 8005348:	42420000 	.word	0x42420000
 800534c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005350:	4b9b      	ldr	r3, [pc, #620]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e9      	bne.n	8005330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80a6 	beq.w	80054b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800536e:	4b94      	ldr	r3, [pc, #592]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537a:	4b91      	ldr	r3, [pc, #580]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	4a90      	ldr	r2, [pc, #576]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	61d3      	str	r3, [r2, #28]
 8005386:	4b8e      	ldr	r3, [pc, #568]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	4b8b      	ldr	r3, [pc, #556]	; (80055c4 <HAL_RCC_OscConfig+0x4ec>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d118      	bne.n	80053d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a2:	4b88      	ldr	r3, [pc, #544]	; (80055c4 <HAL_RCC_OscConfig+0x4ec>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a87      	ldr	r2, [pc, #540]	; (80055c4 <HAL_RCC_OscConfig+0x4ec>)
 80053a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ae:	f7fd fe2d 	bl	800300c <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b6:	f7fd fe29 	bl	800300c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b64      	cmp	r3, #100	; 0x64
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e195      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c8:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <HAL_RCC_OscConfig+0x4ec>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <HAL_RCC_OscConfig+0x312>
 80053dc:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	4a77      	ldr	r2, [pc, #476]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6213      	str	r3, [r2, #32]
 80053e8:	e02d      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10c      	bne.n	800540c <HAL_RCC_OscConfig+0x334>
 80053f2:	4b73      	ldr	r3, [pc, #460]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4a72      	ldr	r2, [pc, #456]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	6213      	str	r3, [r2, #32]
 80053fe:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4a6f      	ldr	r2, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	6213      	str	r3, [r2, #32]
 800540a:	e01c      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b05      	cmp	r3, #5
 8005412:	d10c      	bne.n	800542e <HAL_RCC_OscConfig+0x356>
 8005414:	4b6a      	ldr	r3, [pc, #424]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4a69      	ldr	r2, [pc, #420]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	f043 0304 	orr.w	r3, r3, #4
 800541e:	6213      	str	r3, [r2, #32]
 8005420:	4b67      	ldr	r3, [pc, #412]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	4a66      	ldr	r2, [pc, #408]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6213      	str	r3, [r2, #32]
 800542c:	e00b      	b.n	8005446 <HAL_RCC_OscConfig+0x36e>
 800542e:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a63      	ldr	r2, [pc, #396]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005434:	f023 0301 	bic.w	r3, r3, #1
 8005438:	6213      	str	r3, [r2, #32]
 800543a:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	4a60      	ldr	r2, [pc, #384]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	f023 0304 	bic.w	r3, r3, #4
 8005444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d015      	beq.n	800547a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800544e:	f7fd fddd 	bl	800300c <HAL_GetTick>
 8005452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	e00a      	b.n	800546c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f7fd fdd9 	bl	800300c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e143      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546c:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ee      	beq.n	8005456 <HAL_RCC_OscConfig+0x37e>
 8005478:	e014      	b.n	80054a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547a:	f7fd fdc7 	bl	800300c <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fd fdc3 	bl	800300c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e12d      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005498:	4b49      	ldr	r3, [pc, #292]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1ee      	bne.n	8005482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4b45      	ldr	r3, [pc, #276]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4a44      	ldr	r2, [pc, #272]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 808c 	beq.w	80055d8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80054c0:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054cc:	d10e      	bne.n	80054ec <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80054ce:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d108      	bne.n	80054ec <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80054da:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e103      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d14e      	bne.n	8005592 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005500:	4b2f      	ldr	r3, [pc, #188]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0ef      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005514:	4b2c      	ldr	r3, [pc, #176]	; (80055c8 <HAL_RCC_OscConfig+0x4f0>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551a:	f7fd fd77 	bl	800300c <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005522:	f7fd fd73 	bl	800300c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b64      	cmp	r3, #100	; 0x64
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0df      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005534:	4b22      	ldr	r3, [pc, #136]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554c:	491c      	ldr	r1, [pc, #112]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 800554e:	4313      	orrs	r3, r2
 8005550:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4918      	ldr	r1, [pc, #96]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005564:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x4f0>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fd fd4f 	bl	800300c <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005572:	f7fd fd4b 	bl	800300c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b64      	cmp	r3, #100	; 0x64
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0b7      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x49a>
 8005590:	e022      	b.n	80055d8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <HAL_RCC_OscConfig+0x4e8>)
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCC_OscConfig+0x4f0>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fd fd32 	bl	800300c <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80055aa:	e00f      	b.n	80055cc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055ac:	f7fd fd2e 	bl	800300c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d908      	bls.n	80055cc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e09a      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
 80055c8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80055cc:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e9      	bne.n	80055ac <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 8088 	beq.w	80056f2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055e2:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d068      	beq.n	80056c0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d14d      	bne.n	8005692 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f6:	4b42      	ldr	r3, [pc, #264]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fd fd06 	bl	800300c <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005604:	f7fd fd02 	bl	800300c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e06e      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005616:	4b39      	ldr	r3, [pc, #228]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562a:	d10f      	bne.n	800564c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800562c:	4b33      	ldr	r3, [pc, #204]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4931      	ldr	r1, [pc, #196]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 8005636:	4313      	orrs	r3, r2
 8005638:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800563a:	4b30      	ldr	r3, [pc, #192]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f023 020f 	bic.w	r2, r3, #15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	492d      	ldr	r1, [pc, #180]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 8005648:	4313      	orrs	r3, r2
 800564a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	430b      	orrs	r3, r1
 800565e:	4927      	ldr	r1, [pc, #156]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b26      	ldr	r3, [pc, #152]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7fd fccf 	bl	800300c <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005672:	f7fd fccb 	bl	800300c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e037      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x59a>
 8005690:	e02f      	b.n	80056f2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x628>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fd fcb8 	bl	800300c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fd fcb4 	bl	800300c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e020      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x5c8>
 80056be:	e018      	b.n	80056f2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e013      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_OscConfig+0x624>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	429a      	cmp	r2, r3
 80056de:	d106      	bne.n	80056ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d001      	beq.n	80056f2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	42420060 	.word	0x42420060

08005704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0d0      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b6a      	ldr	r3, [pc, #424]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d910      	bls.n	8005748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 0207 	bic.w	r2, r3, #7
 800572e:	4965      	ldr	r1, [pc, #404]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b63      	ldr	r3, [pc, #396]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0b8      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d020      	beq.n	8005796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005760:	4b59      	ldr	r3, [pc, #356]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a58      	ldr	r2, [pc, #352]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800576a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005778:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4a52      	ldr	r2, [pc, #328]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 800577e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005784:	4b50      	ldr	r3, [pc, #320]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	494d      	ldr	r1, [pc, #308]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d040      	beq.n	8005824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	4b47      	ldr	r3, [pc, #284]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d115      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e07f      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d107      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b41      	ldr	r3, [pc, #260]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e073      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e06b      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4936      	ldr	r1, [pc, #216]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f4:	f7fd fc0a 	bl	800300c <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fd fc06 	bl	800300c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e053      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d210      	bcs.n	8005854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 0207 	bic.w	r2, r3, #7
 800583a:	4922      	ldr	r1, [pc, #136]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e032      	b.n	80058ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4916      	ldr	r1, [pc, #88]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	490e      	ldr	r1, [pc, #56]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005892:	f000 f821 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8005896:	4602      	mov	r2, r0
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	490a      	ldr	r1, [pc, #40]	; (80058cc <HAL_RCC_ClockConfig+0x1c8>)
 80058a4:	5ccb      	ldrb	r3, [r1, r3]
 80058a6:	fa22 f303 	lsr.w	r3, r2, r3
 80058aa:	4a09      	ldr	r2, [pc, #36]	; (80058d0 <HAL_RCC_ClockConfig+0x1cc>)
 80058ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ae:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCC_ClockConfig+0x1d0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fd fb68 	bl	8002f88 <HAL_InitTick>

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40022000 	.word	0x40022000
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0800aa00 	.word	0x0800aa00
 80058d0:	20000048 	.word	0x20000048
 80058d4:	2000004c 	.word	0x2000004c

080058d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b08e      	sub	sp, #56	; 0x38
 80058de:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e4:	2300      	movs	r3, #0
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e8:	2300      	movs	r3, #0
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
 80058ec:	2300      	movs	r3, #0
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	623b      	str	r3, [r7, #32]
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058fc:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x160>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b04      	cmp	r3, #4
 800590a:	d002      	beq.n	8005912 <HAL_RCC_GetSysClockFreq+0x3a>
 800590c:	2b08      	cmp	r3, #8
 800590e:	d003      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x40>
 8005910:	e089      	b.n	8005a26 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005912:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x164>)
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005916:	e089      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	0c9b      	lsrs	r3, r3, #18
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x168>)
 8005922:	5c9b      	ldrb	r3, [r3, r2]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d072      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005930:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x160>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x16c>)
 800593a:	5c9b      	ldrb	r3, [r3, r2]
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800593e:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x160>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d053      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800594a:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x160>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	091b      	lsrs	r3, r3, #4
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	3301      	adds	r3, #1
 8005956:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005958:	4b37      	ldr	r3, [pc, #220]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x160>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3302      	adds	r3, #2
 8005964:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2200      	movs	r2, #0
 800596a:	469a      	mov	sl, r3
 800596c:	4693      	mov	fp, r2
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	2200      	movs	r2, #0
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	617a      	str	r2, [r7, #20]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	fb03 f20b 	mul.w	r2, r3, fp
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	fb0a f303 	mul.w	r3, sl, r3
 8005982:	4413      	add	r3, r2
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	fbaa 0102 	umull	r0, r1, sl, r2
 800598a:	440b      	add	r3, r1
 800598c:	4619      	mov	r1, r3
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x164>)
 8005990:	fb03 f201 	mul.w	r2, r3, r1
 8005994:	2300      	movs	r3, #0
 8005996:	fb00 f303 	mul.w	r3, r0, r3
 800599a:	4413      	add	r3, r2
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x164>)
 800599e:	fba0 4502 	umull	r4, r5, r0, r2
 80059a2:	442b      	add	r3, r5
 80059a4:	461d      	mov	r5, r3
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2200      	movs	r2, #0
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	60fa      	str	r2, [r7, #12]
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	2200      	movs	r2, #0
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059ba:	460b      	mov	r3, r1
 80059bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059c0:	4652      	mov	r2, sl
 80059c2:	fb02 f203 	mul.w	r2, r2, r3
 80059c6:	465b      	mov	r3, fp
 80059c8:	4684      	mov	ip, r0
 80059ca:	fb0c f303 	mul.w	r3, ip, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	4602      	mov	r2, r0
 80059d2:	4651      	mov	r1, sl
 80059d4:	fba2 8901 	umull	r8, r9, r2, r1
 80059d8:	444b      	add	r3, r9
 80059da:	4699      	mov	r9, r3
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fb fb5a 	bl	800109c <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
 80059f0:	e007      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x164>)
 80059f6:	fb03 f202 	mul.w	r2, r3, r2
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8005a02:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x168>)
 8005a04:	7b5b      	ldrb	r3, [r3, #13]
 8005a06:	461a      	mov	r2, r3
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
 8005a14:	e004      	b.n	8005a20 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x170>)
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a24:	e002      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x174>)
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3738      	adds	r7, #56	; 0x38
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	017d7840 	.word	0x017d7840
 8005a40:	0800aa10 	.word	0x0800aa10
 8005a44:	0800aa20 	.word	0x0800aa20
 8005a48:	003d0900 	.word	0x003d0900
 8005a4c:	007a1200 	.word	0x007a1200

08005a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	20000048 	.word	0x20000048

08005a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <RCC_Delay+0x34>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <RCC_Delay+0x38>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	0a5b      	lsrs	r3, r3, #9
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a80:	bf00      	nop
  }
  while (Delay --);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1e5a      	subs	r2, r3, #1
 8005a86:	60fa      	str	r2, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f9      	bne.n	8005a80 <RCC_Delay+0x1c>
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	20000048 	.word	0x20000048
 8005a9c:	10624dd3 	.word	0x10624dd3

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d07d      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac4:	4b8b      	ldr	r3, [pc, #556]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad0:	4b88      	ldr	r3, [pc, #544]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	4a87      	ldr	r2, [pc, #540]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	61d3      	str	r3, [r2, #28]
 8005adc:	4b85      	ldr	r3, [pc, #532]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aec:	4b82      	ldr	r3, [pc, #520]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d118      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af8:	4b7f      	ldr	r3, [pc, #508]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b04:	f7fd fa82 	bl	800300c <HAL_GetTick>
 8005b08:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0a:	e008      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0c:	f7fd fa7e 	bl	800300c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e0e5      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b1e:	4b76      	ldr	r3, [pc, #472]	; (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f0      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b2a:	4b72      	ldr	r3, [pc, #456]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02e      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d027      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b48:	4b6a      	ldr	r3, [pc, #424]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b52:	4b6a      	ldr	r3, [pc, #424]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b58:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b5e:	4a65      	ldr	r2, [pc, #404]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d014      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fd fa4d 	bl	800300c <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fd fa49 	bl	800300c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e0ae      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ee      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b98:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4953      	ldr	r1, [pc, #332]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005baa:	7efb      	ldrb	r3, [r7, #27]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb0:	4b50      	ldr	r3, [pc, #320]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc8:	4b4a      	ldr	r3, [pc, #296]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4947      	ldr	r1, [pc, #284]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005be6:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	4940      	ldr	r1, [pc, #256]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	4938      	ldr	r1, [pc, #224]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005c16:	4b37      	ldr	r3, [pc, #220]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d105      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d148      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005c38:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d138      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e042      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005c64:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	4920      	ldr	r1, [pc, #128]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005c76:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	491c      	ldr	r1, [pc, #112]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8e:	f7fd f9bd 	bl	800300c <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c96:	f7fd f9b9 	bl	800300c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b64      	cmp	r3, #100	; 0x64
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e020      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f0      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005cb4:	e009      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d001      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e00f      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4904      	ldr	r1, [pc, #16]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40007000 	.word	0x40007000
 8005cfc:	42420440 	.word	0x42420440
 8005d00:	42420070 	.word	0x42420070

08005d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e076      	b.n	8005e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d26:	d009      	beq.n	8005d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	61da      	str	r2, [r3, #28]
 8005d2e:	e005      	b.n	8005d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc ff84 	bl	8002c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	ea42 0103 	orr.w	r1, r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	0c1a      	lsrs	r2, r3, #16
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f002 0204 	and.w	r2, r2, #4
 8005de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69da      	ldr	r2, [r3, #28]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_SPI_Transmit+0x22>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e12d      	b.n	800608a <HAL_SPI_Transmit+0x27e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e36:	f7fd f8e9 	bl	800300c <HAL_GetTick>
 8005e3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d002      	beq.n	8005e52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e50:	e116      	b.n	8006080 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_Transmit+0x52>
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e62:	e10d      	b.n	8006080 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2203      	movs	r2, #3
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d10f      	bne.n	8005ecc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d007      	beq.n	8005eea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d14f      	bne.n	8005f94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Transmit+0xf6>
 8005efc:	8afb      	ldrh	r3, [r7, #22]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d142      	bne.n	8005f88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	1c9a      	adds	r2, r3, #2
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f26:	e02f      	b.n	8005f88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d112      	bne.n	8005f5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f5a:	e015      	b.n	8005f88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5c:	f7fd f856 	bl	800300c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d803      	bhi.n	8005f74 <HAL_SPI_Transmit+0x168>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Transmit+0x16e>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f86:	e07b      	b.n	8006080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ca      	bne.n	8005f28 <HAL_SPI_Transmit+0x11c>
 8005f92:	e050      	b.n	8006036 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_SPI_Transmit+0x196>
 8005f9c:	8afb      	ldrh	r3, [r7, #22]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d144      	bne.n	800602c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fc8:	e030      	b.n	800602c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d113      	bne.n	8006000 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ffe:	e015      	b.n	800602c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006000:	f7fd f804 	bl	800300c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d803      	bhi.n	8006018 <HAL_SPI_Transmit+0x20c>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d102      	bne.n	800601e <HAL_SPI_Transmit+0x212>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800602a:	e029      	b.n	8006080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1c9      	bne.n	8005fca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fbcc 	bl	80067d8 <SPI_EndRxTxTransaction>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e003      	b.n	8006080 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006088:	7ffb      	ldrb	r3, [r7, #31]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af02      	add	r7, sp, #8
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
 80060b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060b6:	e0fb      	b.n	80062b0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d112      	bne.n	80060e8 <HAL_SPI_Receive+0x56>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10e      	bne.n	80060e8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2204      	movs	r2, #4
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f8ef 	bl	80062c2 <HAL_SPI_TransmitReceive>
 80060e4:	4603      	mov	r3, r0
 80060e6:	e0e8      	b.n	80062ba <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_SPI_Receive+0x64>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0e1      	b.n	80062ba <HAL_SPI_Receive+0x228>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060fe:	f7fc ff85 	bl	800300c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Receive+0x7e>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006114:	e0cc      	b.n	80062b0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2204      	movs	r2, #4
 800611a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	88fa      	ldrh	r2, [r7, #6]
 800612e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d10f      	bne.n	800617e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800617c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d007      	beq.n	800619c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d16a      	bne.n	800627a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061a4:	e032      	b.n	800620c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d115      	bne.n	80061e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f103 020c 	add.w	r2, r3, #12
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061de:	e015      	b.n	800620c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e0:	f7fc ff14 	bl	800300c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d803      	bhi.n	80061f8 <HAL_SPI_Receive+0x166>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_Receive+0x16c>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800620a:	e051      	b.n	80062b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1c7      	bne.n	80061a6 <HAL_SPI_Receive+0x114>
 8006216:	e035      	b.n	8006284 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b01      	cmp	r3, #1
 8006224:	d113      	bne.n	800624e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	b292      	uxth	r2, r2
 8006232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800624c:	e015      	b.n	800627a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624e:	f7fc fedd 	bl	800300c <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d803      	bhi.n	8006266 <HAL_SPI_Receive+0x1d4>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d102      	bne.n	800626c <HAL_SPI_Receive+0x1da>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006278:	e01a      	b.n	80062b0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1c9      	bne.n	8006218 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa53 	bl	8006734 <SPI_EndRxTransaction>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
 80062a6:	e003      	b.n	80062b0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b08c      	sub	sp, #48	; 0x30
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062d0:	2301      	movs	r3, #1
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x26>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e198      	b.n	800661a <HAL_SPI_TransmitReceive+0x358>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062f0:	f7fc fe8c 	bl	800300c <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006306:	887b      	ldrh	r3, [r7, #2]
 8006308:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800630a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800630e:	2b01      	cmp	r3, #1
 8006310:	d00f      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x70>
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006318:	d107      	bne.n	800632a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <HAL_SPI_TransmitReceive+0x68>
 8006322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006326:	2b04      	cmp	r3, #4
 8006328:	d003      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006330:	e16d      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x82>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x82>
 800633e:	887b      	ldrh	r3, [r7, #2]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800634a:	e160      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b04      	cmp	r3, #4
 8006356:	d003      	beq.n	8006360 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2205      	movs	r2, #5
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	887a      	ldrh	r2, [r7, #2]
 8006376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	887a      	ldrh	r2, [r7, #2]
 8006382:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	887a      	ldrh	r2, [r7, #2]
 8006388:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d007      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063bc:	d17c      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_TransmitReceive+0x10a>
 80063c6:	8b7b      	ldrh	r3, [r7, #26]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d16a      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f0:	e057      	b.n	80064a2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x176>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x176>
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d113      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	1c9a      	adds	r2, r3, #2
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d119      	bne.n	800647a <HAL_SPI_TransmitReceive+0x1b8>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d014      	beq.n	800647a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	b292      	uxth	r2, r2
 800645c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006476:	2301      	movs	r3, #1
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800647a:	f7fc fdc7 	bl	800300c <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006486:	429a      	cmp	r2, r3
 8006488:	d80b      	bhi.n	80064a2 <HAL_SPI_TransmitReceive+0x1e0>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d007      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80064a0:	e0b5      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1a2      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x130>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d19d      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x130>
 80064b6:	e080      	b.n	80065ba <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x204>
 80064c0:	8b7b      	ldrh	r3, [r7, #26]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d16f      	bne.n	80065a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ec:	e05b      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d11c      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x274>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x274>
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d114      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d119      	bne.n	8006578 <HAL_SPI_TransmitReceive+0x2b6>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d014      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006574:	2301      	movs	r3, #1
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006578:	f7fc fd48 	bl	800300c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006584:	429a      	cmp	r2, r3
 8006586:	d803      	bhi.n	8006590 <HAL_SPI_TransmitReceive+0x2ce>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d102      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x2d4>
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	2b00      	cmp	r3, #0
 8006594:	d107      	bne.n	80065a6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80065a4:	e033      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d19e      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x22c>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d199      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f90a 	bl	80067d8 <SPI_EndRxTxTransaction>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065d6:	e01a      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006604:	e003      	b.n	800660e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800661a:	4618      	mov	r0, r3
 800661c:	3730      	adds	r7, #48	; 0x30
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006634:	f7fc fcea 	bl	800300c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	4413      	add	r3, r2
 8006642:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006644:	f7fc fce2 	bl	800300c <HAL_GetTick>
 8006648:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800664a:	4b39      	ldr	r3, [pc, #228]	; (8006730 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	015b      	lsls	r3, r3, #5
 8006650:	0d1b      	lsrs	r3, r3, #20
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	fb02 f303 	mul.w	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800665a:	e054      	b.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d050      	beq.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006664:	f7fc fcd2 	bl	800300c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	429a      	cmp	r2, r3
 8006672:	d902      	bls.n	800667a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d13d      	bne.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006688:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006692:	d111      	bne.n	80066b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669c:	d004      	beq.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a6:	d107      	bne.n	80066b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c0:	d10f      	bne.n	80066e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e017      	b.n	8006726 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3b01      	subs	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	429a      	cmp	r2, r3
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	429a      	cmp	r2, r3
 8006722:	d19b      	bne.n	800665c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000048 	.word	0x20000048

08006734 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006748:	d111      	bne.n	800676e <SPI_EndRxTransaction+0x3a>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006752:	d004      	beq.n	800675e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675c:	d107      	bne.n	800676e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d117      	bne.n	80067a8 <SPI_EndRxTransaction+0x74>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006780:	d112      	bne.n	80067a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	2101      	movs	r1, #1
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ff49 	bl	8006624 <SPI_WaitFlagStateUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01a      	beq.n	80067ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e013      	b.n	80067d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff ff36 	bl	8006624 <SPI_WaitFlagStateUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e000      	b.n	80067d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af02      	add	r7, sp, #8
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ff18 	bl	8006624 <SPI_WaitFlagStateUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e000      	b.n	800680c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e041      	b.n	80068aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc fb4a 	bl	8002ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 f82e 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a2d      	ldr	r2, [pc, #180]	; (800697c <TIM_Base_SetConfig+0xc8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a2a      	ldr	r2, [pc, #168]	; (8006980 <TIM_Base_SetConfig+0xcc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a29      	ldr	r2, [pc, #164]	; (8006984 <TIM_Base_SetConfig+0xd0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a28      	ldr	r2, [pc, #160]	; (8006988 <TIM_Base_SetConfig+0xd4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1e      	ldr	r2, [pc, #120]	; (800697c <TIM_Base_SetConfig+0xc8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00f      	beq.n	8006926 <TIM_Base_SetConfig+0x72>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690c:	d00b      	beq.n	8006926 <TIM_Base_SetConfig+0x72>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <TIM_Base_SetConfig+0xcc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <TIM_Base_SetConfig+0x72>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <TIM_Base_SetConfig+0xd0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_Base_SetConfig+0x72>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a19      	ldr	r2, [pc, #100]	; (8006988 <TIM_Base_SetConfig+0xd4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a07      	ldr	r2, [pc, #28]	; (800697c <TIM_Base_SetConfig+0xc8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d103      	bne.n	800696c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	615a      	str	r2, [r3, #20]
}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800
 8006988:	40000c00 	.word	0x40000c00

0800698c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e04b      	b.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f0:	d00e      	beq.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a12      	ldr	r2, [pc, #72]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00

08006a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a58:	b084      	sub	sp, #16
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	f107 001c 	add.w	r0, r7, #28
 8006a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f9de 	bl	8007e38 <USB_CoreReset>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a98:	b004      	add	sp, #16
 8006a9a:	4770      	bx	lr

08006a9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d165      	bne.n	8006b7c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a3e      	ldr	r2, [pc, #248]	; (8006bac <USB_SetTurnaroundTime+0x110>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d906      	bls.n	8006ac6 <USB_SetTurnaroundTime+0x2a>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a3d      	ldr	r2, [pc, #244]	; (8006bb0 <USB_SetTurnaroundTime+0x114>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d202      	bcs.n	8006ac6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ac0:	230f      	movs	r3, #15
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e05c      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <USB_SetTurnaroundTime+0x114>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d306      	bcc.n	8006adc <USB_SetTurnaroundTime+0x40>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a38      	ldr	r2, [pc, #224]	; (8006bb4 <USB_SetTurnaroundTime+0x118>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d202      	bcs.n	8006adc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ad6:	230e      	movs	r3, #14
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	e051      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a35      	ldr	r2, [pc, #212]	; (8006bb4 <USB_SetTurnaroundTime+0x118>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d306      	bcc.n	8006af2 <USB_SetTurnaroundTime+0x56>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4a34      	ldr	r2, [pc, #208]	; (8006bb8 <USB_SetTurnaroundTime+0x11c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d202      	bcs.n	8006af2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006aec:	230d      	movs	r3, #13
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e046      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4a30      	ldr	r2, [pc, #192]	; (8006bb8 <USB_SetTurnaroundTime+0x11c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d306      	bcc.n	8006b08 <USB_SetTurnaroundTime+0x6c>
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a2f      	ldr	r2, [pc, #188]	; (8006bbc <USB_SetTurnaroundTime+0x120>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d802      	bhi.n	8006b08 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b02:	230c      	movs	r3, #12
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e03b      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4a2c      	ldr	r2, [pc, #176]	; (8006bbc <USB_SetTurnaroundTime+0x120>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d906      	bls.n	8006b1e <USB_SetTurnaroundTime+0x82>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4a2b      	ldr	r2, [pc, #172]	; (8006bc0 <USB_SetTurnaroundTime+0x124>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d802      	bhi.n	8006b1e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b18:	230b      	movs	r3, #11
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e030      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <USB_SetTurnaroundTime+0x124>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d906      	bls.n	8006b34 <USB_SetTurnaroundTime+0x98>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <USB_SetTurnaroundTime+0x128>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d802      	bhi.n	8006b34 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b2e:	230a      	movs	r3, #10
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e025      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <USB_SetTurnaroundTime+0x128>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d906      	bls.n	8006b4a <USB_SetTurnaroundTime+0xae>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <USB_SetTurnaroundTime+0x12c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d202      	bcs.n	8006b4a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b44:	2309      	movs	r3, #9
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	e01a      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <USB_SetTurnaroundTime+0x12c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d306      	bcc.n	8006b60 <USB_SetTurnaroundTime+0xc4>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <USB_SetTurnaroundTime+0x130>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d802      	bhi.n	8006b60 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e00f      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <USB_SetTurnaroundTime+0x130>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d906      	bls.n	8006b76 <USB_SetTurnaroundTime+0xda>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <USB_SetTurnaroundTime+0x134>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d202      	bcs.n	8006b76 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b70:	2307      	movs	r3, #7
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e004      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b76:	2306      	movs	r3, #6
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e001      	b.n	8006b80 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b7c:	2309      	movs	r3, #9
 8006b7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	00d8acbf 	.word	0x00d8acbf
 8006bb0:	00e4e1c0 	.word	0x00e4e1c0
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	01067380 	.word	0x01067380
 8006bbc:	011a499f 	.word	0x011a499f
 8006bc0:	01312cff 	.word	0x01312cff
 8006bc4:	014ca43f 	.word	0x014ca43f
 8006bc8:	016e3600 	.word	0x016e3600
 8006bcc:	01a6ab1f 	.word	0x01a6ab1f
 8006bd0:	01e84800 	.word	0x01e84800

08006bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 0201 	bic.w	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d115      	bne.n	8006c62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c42:	2001      	movs	r0, #1
 8006c44:	f7fc f9ec 	bl	8003020 <HAL_Delay>
      ms++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f87a 	bl	8007d48 <USB_GetMode>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d01e      	beq.n	8006c98 <USB_SetCurrentMode+0x84>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b31      	cmp	r3, #49	; 0x31
 8006c5e:	d9f0      	bls.n	8006c42 <USB_SetCurrentMode+0x2e>
 8006c60:	e01a      	b.n	8006c98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d115      	bne.n	8006c94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c74:	2001      	movs	r0, #1
 8006c76:	f7fc f9d3 	bl	8003020 <HAL_Delay>
      ms++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f861 	bl	8007d48 <USB_GetMode>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <USB_SetCurrentMode+0x84>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b31      	cmp	r3, #49	; 0x31
 8006c90:	d9f0      	bls.n	8006c74 <USB_SetCurrentMode+0x60>
 8006c92:	e001      	b.n	8006c98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e005      	b.n	8006ca4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b32      	cmp	r3, #50	; 0x32
 8006c9c:	d101      	bne.n	8006ca2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cac:	b084      	sub	sp, #16
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b086      	sub	sp, #24
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	e009      	b.n	8006ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3340      	adds	r3, #64	; 0x40
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b0e      	cmp	r3, #14
 8006ce4:	d9f2      	bls.n	8006ccc <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cfe:	2103      	movs	r1, #3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f959 	bl	8006fb8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d06:	2110      	movs	r1, #16
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f8f1 	bl	8006ef0 <USB_FlushTxFifo>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f91d 	bl	8006f58 <USB_FlushRxFifo>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2300      	movs	r3, #0
 8006d32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d46:	461a      	mov	r2, r3
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	e043      	b.n	8006dda <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d68:	d118      	bne.n	8006d9c <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	e013      	b.n	8006dae <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	461a      	mov	r2, r3
 8006d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e008      	b.n	8006dae <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	461a      	mov	r2, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d3b7      	bcc.n	8006d52 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e043      	b.n	8006e70 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dfe:	d118      	bne.n	8006e32 <USB_DevInit+0x186>
    {
      if (i == 0U)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	e013      	b.n	8006e44 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e008      	b.n	8006e44 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2300      	movs	r3, #0
 8006e42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e50:	461a      	mov	r2, r3
 8006e52:	2300      	movs	r3, #0
 8006e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	461a      	mov	r2, r3
 8006e64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d3b7      	bcc.n	8006de8 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f043 0210 	orr.w	r2, r3, #16
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <USB_DevInit+0x240>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f043 0208 	orr.w	r2, r3, #8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d107      	bne.n	8006eda <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed2:	f043 0304 	orr.w	r3, r3, #4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ee6:	b004      	add	sp, #16
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	803c3800 	.word	0x803c3800

08006ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <USB_FlushTxFifo+0x64>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e01b      	b.n	8006f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	daf2      	bge.n	8006efe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	019b      	lsls	r3, r3, #6
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <USB_FlushTxFifo+0x64>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e006      	b.n	8006f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d0f0      	beq.n	8006f28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	00030d40 	.word	0x00030d40

08006f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <USB_FlushRxFifo+0x5c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e018      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	daf2      	bge.n	8006f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2210      	movs	r2, #16
 8006f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <USB_FlushRxFifo+0x5c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d901      	bls.n	8006f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e006      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d0f0      	beq.n	8006f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	00030d40 	.word	0x00030d40

08006fb8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0306 	and.w	r3, r3, #6
 8007000:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d002      	beq.n	800700e <USB_GetDevSpeed+0x26>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b06      	cmp	r3, #6
 800700c:	d102      	bne.n	8007014 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800700e:	2302      	movs	r3, #2
 8007010:	75fb      	strb	r3, [r7, #23]
 8007012:	e001      	b.n	8007018 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007014:	230f      	movs	r3, #15
 8007016:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
}
 800701a:	4618      	mov	r0, r3
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d13a      	bne.n	80070b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	2101      	movs	r1, #1
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	b29b      	uxth	r3, r3
 8007058:	68f9      	ldr	r1, [r7, #12]
 800705a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800705e:	4313      	orrs	r3, r2
 8007060:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d155      	bne.n	8007124 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	791b      	ldrb	r3, [r3, #4]
 8007092:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007094:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800709c:	4313      	orrs	r3, r2
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	e036      	b.n	8007124 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	2101      	movs	r1, #1
 80070c8:	fa01 f303 	lsl.w	r3, r1, r3
 80070cc:	041b      	lsls	r3, r3, #16
 80070ce:	68f9      	ldr	r1, [r7, #12]
 80070d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d11a      	bne.n	8007124 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	791b      	ldrb	r3, [r3, #4]
 8007108:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800710a:	430b      	orrs	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d161      	bne.n	8007210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007162:	d11f      	bne.n	80071a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	2101      	movs	r1, #1
 80071b6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	43db      	mvns	r3, r3
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c4:	4013      	ands	r3, r2
 80071c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	b29b      	uxth	r3, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4013      	ands	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	0159      	lsls	r1, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	440b      	add	r3, r1
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	4619      	mov	r1, r3
 8007208:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <USB_DeactivateEndpoint+0x1b0>)
 800720a:	4013      	ands	r3, r2
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	e060      	b.n	80072d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007226:	d11f      	bne.n	8007268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	43db      	mvns	r3, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007288:	4013      	ands	r3, r2
 800728a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	43db      	mvns	r3, r3
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4013      	ands	r3, r2
 80072ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0159      	lsls	r1, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	440b      	add	r3, r1
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	4619      	mov	r1, r3
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <USB_DeactivateEndpoint+0x1b4>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	ec337800 	.word	0xec337800
 80072e4:	eff37800 	.word	0xeff37800

080072e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	f040 8128 	bne.w	8007556 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d132      	bne.n	8007374 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800732c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	0cdb      	lsrs	r3, r3, #19
 800736e:	04db      	lsls	r3, r3, #19
 8007370:	6113      	str	r3, [r2, #16]
 8007372:	e092      	b.n	800749a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738e:	0cdb      	lsrs	r3, r3, #19
 8007390:	04db      	lsls	r3, r3, #19
 8007392:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11a      	bne.n	80073f4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d903      	bls.n	80073d2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f0:	6113      	str	r3, [r2, #16]
 80073f2:	e01b      	b.n	800742c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	440b      	add	r3, r1
 800740c:	1e59      	subs	r1, r3, #1
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	fbb1 f3f3 	udiv	r3, r1, r3
 8007416:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007418:	4b8d      	ldr	r3, [pc, #564]	; (8007650 <USB_EPStartXfer+0x368>)
 800741a:	400b      	ands	r3, r1
 800741c:	6939      	ldr	r1, [r7, #16]
 800741e:	0148      	lsls	r0, r1, #5
 8007420:	6979      	ldr	r1, [r7, #20]
 8007422:	4401      	add	r1, r0
 8007424:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007428:	4313      	orrs	r3, r2
 800742a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	691a      	ldr	r2, [r3, #16]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007442:	6939      	ldr	r1, [r7, #16]
 8007444:	0148      	lsls	r0, r1, #5
 8007446:	6979      	ldr	r1, [r7, #20]
 8007448:	4401      	add	r1, r0
 800744a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800744e:	4313      	orrs	r3, r2
 8007450:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11f      	bne.n	800749a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007478:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007498:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d015      	beq.n	80074ee <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8139 	beq.w	800773e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	2101      	movs	r1, #1
 80074de:	fa01 f303 	lsl.w	r3, r1, r3
 80074e2:	6979      	ldr	r1, [r7, #20]
 80074e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e8:	4313      	orrs	r3, r2
 80074ea:	634b      	str	r3, [r1, #52]	; 0x34
 80074ec:	e127      	b.n	800773e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d110      	bne.n	8007520 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e00f      	b.n	8007540 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	0151      	lsls	r1, r2, #5
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	440a      	add	r2, r1
 8007536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800753e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68d9      	ldr	r1, [r3, #12]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781a      	ldrb	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	b29b      	uxth	r3, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9a5 	bl	800789e <USB_WritePacket>
 8007554:	e0f3      	b.n	800773e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007570:	0cdb      	lsrs	r3, r3, #19
 8007572:	04db      	lsls	r3, r3, #19
 8007574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007598:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d12f      	bne.n	8007600 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ce:	6939      	ldr	r1, [r7, #16]
 80075d0:	0148      	lsls	r0, r1, #5
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	4401      	add	r1, r0
 80075d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075fc:	6113      	str	r3, [r2, #16]
 80075fe:	e061      	b.n	80076c4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d125      	bne.n	8007654 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800761e:	6939      	ldr	r1, [r7, #16]
 8007620:	0148      	lsls	r0, r1, #5
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	4401      	add	r1, r0
 8007626:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800762a:	4313      	orrs	r3, r2
 800762c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800764c:	6113      	str	r3, [r2, #16]
 800764e:	e039      	b.n	80076c4 <USB_EPStartXfer+0x3dc>
 8007650:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4413      	add	r3, r2
 800765e:	1e5a      	subs	r2, r3, #1
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	fbb2 f3f3 	udiv	r3, r2, r3
 8007668:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	89fa      	ldrh	r2, [r7, #14]
 8007670:	fb03 f202 	mul.w	r2, r3, r2
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	89fb      	ldrh	r3, [r7, #14]
 8007688:	04d9      	lsls	r1, r3, #19
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <USB_EPStartXfer+0x460>)
 800768c:	400b      	ands	r3, r1
 800768e:	6939      	ldr	r1, [r7, #16]
 8007690:	0148      	lsls	r0, r1, #5
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	4401      	add	r1, r0
 8007696:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800769a:	4313      	orrs	r3, r2
 800769c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b4:	6939      	ldr	r1, [r7, #16]
 80076b6:	0148      	lsls	r0, r1, #5
 80076b8:	6979      	ldr	r1, [r7, #20]
 80076ba:	4401      	add	r1, r0
 80076bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c0:	4313      	orrs	r3, r2
 80076c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	791b      	ldrb	r3, [r3, #4]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d128      	bne.n	800771e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d110      	bne.n	80076fe <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e00f      	b.n	800771e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800771c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800773c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	1ff80000 	.word	0x1ff80000

0800774c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d14a      	bne.n	8007800 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800777e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007782:	f040 8086 	bne.w	8007892 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	7812      	ldrb	r2, [r2, #0]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80077da:	4293      	cmp	r3, r2
 80077dc:	d902      	bls.n	80077e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
          break;
 80077e2:	e056      	b.n	8007892 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077fc:	d0e7      	beq.n	80077ce <USB_EPStopXfer+0x82>
 80077fe:	e048      	b.n	8007892 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007818:	d13b      	bne.n	8007892 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	7812      	ldrb	r2, [r2, #0]
 800782e:	0151      	lsls	r1, r2, #5
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	440a      	add	r2, r1
 8007834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800783c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f242 7210 	movw	r2, #10000	; 0x2710
 800786e:	4293      	cmp	r3, r2
 8007870:	d902      	bls.n	8007878 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	75fb      	strb	r3, [r7, #23]
          break;
 8007876:	e00c      	b.n	8007892 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800788c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007890:	d0e7      	beq.n	8007862 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007892:	7dfb      	ldrb	r3, [r7, #23]
}
 8007894:	4618      	mov	r0, r3
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800789e:	b480      	push	{r7}
 80078a0:	b089      	sub	sp, #36	; 0x24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	4611      	mov	r1, r2
 80078aa:	461a      	mov	r2, r3
 80078ac:	460b      	mov	r3, r1
 80078ae:	71fb      	strb	r3, [r7, #7]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80078bc:	88bb      	ldrh	r3, [r7, #4]
 80078be:	3303      	adds	r3, #3
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]
 80078c8:	e018      	b.n	80078fc <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	031a      	lsls	r2, r3, #12
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d6:	461a      	mov	r2, r3
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6013      	str	r3, [r2, #0]
    pSrc++;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	3301      	adds	r3, #1
 80078ee:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	3301      	adds	r3, #1
 80078f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	3301      	adds	r3, #1
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	429a      	cmp	r2, r3
 8007902:	d3e2      	bcc.n	80078ca <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3724      	adds	r7, #36	; 0x24
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007910:	b480      	push	{r7}
 8007912:	b08b      	sub	sp, #44	; 0x2c
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	089b      	lsrs	r3, r3, #2
 800792a:	b29b      	uxth	r3, r3
 800792c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007936:	2300      	movs	r3, #0
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	e014      	b.n	8007966 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	601a      	str	r2, [r3, #0]
    pDest++;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	3301      	adds	r3, #1
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	3301      	adds	r3, #1
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	3301      	adds	r3, #1
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	3301      	adds	r3, #1
 800795e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	3301      	adds	r3, #1
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	6a3a      	ldr	r2, [r7, #32]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	429a      	cmp	r2, r3
 800796c:	d3e6      	bcc.n	800793c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800796e:	8bfb      	ldrh	r3, [r7, #30]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d01e      	beq.n	80079b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797e:	461a      	mov	r2, r3
 8007980:	f107 0310 	add.w	r3, r7, #16
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	b2da      	uxtb	r2, r3
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	701a      	strb	r2, [r3, #0]
      i++;
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	3301      	adds	r3, #1
 800799e:	623b      	str	r3, [r7, #32]
      pDest++;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	3301      	adds	r3, #1
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079a6:	8bfb      	ldrh	r3, [r7, #30]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079ac:	8bfb      	ldrh	r3, [r7, #30]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1ea      	bne.n	8007988 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	372c      	adds	r7, #44	; 0x2c
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d12c      	bne.n	8007a34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db12      	blt.n	8007a12 <USB_EPSetStall+0x54>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00f      	beq.n	8007a12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e02b      	b.n	8007a8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db12      	blt.n	8007a6c <USB_EPSetStall+0xae>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00f      	beq.n	8007a6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	0151      	lsls	r1, r2, #5
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	440a      	add	r2, r1
 8007a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d128      	bne.n	8007b06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ad2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	791b      	ldrb	r3, [r3, #4]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d003      	beq.n	8007ae4 <USB_EPClearStall+0x4c>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	791b      	ldrb	r3, [r3, #4]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d138      	bne.n	8007b56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	e027      	b.n	8007b56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	791b      	ldrb	r3, [r3, #4]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d003      	beq.n	8007b36 <USB_EPClearStall+0x9e>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d10f      	bne.n	8007b56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr

08007b62 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b84:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bc6:	f023 0303 	bic.w	r3, r3, #3
 8007bca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bda:	f023 0302 	bic.w	r3, r3, #2
 8007bde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c1a:	f043 0302 	orr.w	r3, r3, #2
 8007c1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4013      	ands	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c44:	68fb      	ldr	r3, [r7, #12]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4013      	ands	r3, r2
 8007c72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	0c1b      	lsrs	r3, r3, #16
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr

08007c82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	b29b      	uxth	r3, r3
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b087      	sub	sp, #28
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	f003 030f 	and.w	r3, r3, #15
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1e:	01db      	lsls	r3, r3, #7
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0301 	and.w	r3, r3, #1
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d80:	f023 0307 	bic.w	r3, r3, #7
 8007d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
	...

08007da8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	333c      	adds	r3, #60	; 0x3c
 8007dba:	3304      	adds	r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <USB_EP0_OutStart+0x8c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d90a      	bls.n	8007dde <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd8:	d101      	bne.n	8007dde <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e024      	b.n	8007e28 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f043 0318 	orr.w	r3, r3, #24
 8007e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e24:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	4f54300a 	.word	0x4f54300a

08007e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <USB_CoreReset+0x60>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e01b      	b.n	8007e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	daf2      	bge.n	8007e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f043 0201 	orr.w	r2, r3, #1
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a08      	ldr	r2, [pc, #32]	; (8007e98 <USB_CoreReset+0x60>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d901      	bls.n	8007e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e006      	b.n	8007e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d0f0      	beq.n	8007e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr
 8007e98:	00030d40 	.word	0x00030d40

08007e9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7c1b      	ldrb	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d115      	bne.n	8007ee0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2181      	movs	r1, #129	; 0x81
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fec0 	bl	8009c42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ecc:	2202      	movs	r2, #2
 8007ece:	2101      	movs	r1, #1
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 feb6 	bl	8009c42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007ede:	e012      	b.n	8007f06 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	2181      	movs	r1, #129	; 0x81
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 feab 	bl	8009c42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ef2:	2340      	movs	r3, #64	; 0x40
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fea2 	bl	8009c42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f06:	2308      	movs	r3, #8
 8007f08:	2203      	movs	r2, #3
 8007f0a:	2182      	movs	r1, #130	; 0x82
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fe98 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f1c:	f001 ffb8 	bl	8009e90 <USBD_static_malloc>
 8007f20:	4602      	mov	r2, r0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d102      	bne.n	8007f38 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
 8007f36:	e026      	b.n	8007f86 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	7c1b      	ldrb	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 ff57 	bl	8009e22 <USBD_LL_PrepareReceive>
 8007f74:	e007      	b.n	8007f86 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 ff4e 	bl	8009e22 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fa0:	2181      	movs	r1, #129	; 0x81
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fe73 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fe6c 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007fbe:	2182      	movs	r1, #130	; 0x82
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fe64 	bl	8009c8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 ff5e 	bl	8009ea8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800800e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008024:	2b00      	cmp	r3, #0
 8008026:	d039      	beq.n	800809c <USBD_CDC_Setup+0x9e>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d17f      	bne.n	800812c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	88db      	ldrh	r3, [r3, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d029      	beq.n	8008088 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b25b      	sxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	da11      	bge.n	8008062 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800804a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	88d2      	ldrh	r2, [r2, #6]
 8008050:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008052:	6939      	ldr	r1, [r7, #16]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	461a      	mov	r2, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fa13 	bl	8009486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008060:	e06b      	b.n	800813a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	785a      	ldrb	r2, [r3, #1]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	88db      	ldrh	r3, [r3, #6]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008078:	6939      	ldr	r1, [r7, #16]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	88db      	ldrh	r3, [r3, #6]
 800807e:	461a      	mov	r2, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fa2e 	bl	80094e2 <USBD_CtlPrepareRx>
      break;
 8008086:	e058      	b.n	800813a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	7850      	ldrb	r0, [r2, #1]
 8008094:	2200      	movs	r2, #0
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	4798      	blx	r3
      break;
 800809a:	e04e      	b.n	800813a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b0b      	cmp	r3, #11
 80080a2:	d02e      	beq.n	8008102 <USBD_CDC_Setup+0x104>
 80080a4:	2b0b      	cmp	r3, #11
 80080a6:	dc38      	bgt.n	800811a <USBD_CDC_Setup+0x11c>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <USBD_CDC_Setup+0xb4>
 80080ac:	2b0a      	cmp	r3, #10
 80080ae:	d014      	beq.n	80080da <USBD_CDC_Setup+0xdc>
 80080b0:	e033      	b.n	800811a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d107      	bne.n	80080cc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	2202      	movs	r2, #2
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f9de 	bl	8009486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080ca:	e02e      	b.n	800812a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 f96f 	bl	80093b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80080d4:	2302      	movs	r3, #2
 80080d6:	75fb      	strb	r3, [r7, #23]
          break;
 80080d8:	e027      	b.n	800812a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d107      	bne.n	80080f4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80080e4:	f107 030f 	add.w	r3, r7, #15
 80080e8:	2201      	movs	r2, #1
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 f9ca 	bl	8009486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080f2:	e01a      	b.n	800812a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 f95b 	bl	80093b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80080fc:	2302      	movs	r3, #2
 80080fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008100:	e013      	b.n	800812a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008108:	2b03      	cmp	r3, #3
 800810a:	d00d      	beq.n	8008128 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 f94f 	bl	80093b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008114:	2302      	movs	r3, #2
 8008116:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008118:	e006      	b.n	8008128 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 f948 	bl	80093b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008122:	2302      	movs	r3, #2
 8008124:	75fb      	strb	r3, [r7, #23]
          break;
 8008126:	e000      	b.n	800812a <USBD_CDC_Setup+0x12c>
          break;
 8008128:	bf00      	nop
      }
      break;
 800812a:	e006      	b.n	800813a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f93f 	bl	80093b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008134:	2302      	movs	r3, #2
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	bf00      	nop
  }

  return ret;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008156:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d03a      	beq.n	80081e0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	331c      	adds	r3, #28
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d029      	beq.n	80081d4 <USBD_CDC_DataIn+0x90>
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	331c      	adds	r3, #28
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	78f9      	ldrb	r1, [r7, #3]
 8008194:	68b8      	ldr	r0, [r7, #8]
 8008196:	460b      	mov	r3, r1
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	440b      	add	r3, r1
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4403      	add	r3, r0
 80081a0:	3344      	adds	r3, #68	; 0x44
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d110      	bne.n	80081d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	331c      	adds	r3, #28
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081c6:	78f9      	ldrb	r1, [r7, #3]
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fe05 	bl	8009ddc <USBD_LL_Transmit>
 80081d2:	e003      	b.n	80081dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	e000      	b.n	80081e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80081e0:	2302      	movs	r3, #2
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fe30 	bl	8009e68 <USBD_LL_GetRxDataSize>
 8008208:	4602      	mov	r2, r0
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800822e:	4611      	mov	r1, r2
 8008230:	4798      	blx	r3

    return USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	e000      	b.n	8008238 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008236:	2302      	movs	r3, #2
  }
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008256:	2b00      	cmp	r3, #0
 8008258:	d015      	beq.n	8008286 <USBD_CDC_EP0_RxReady+0x46>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008260:	2bff      	cmp	r3, #255	; 0xff
 8008262:	d010      	beq.n	8008286 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008272:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800827a:	b292      	uxth	r2, r2
 800827c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2243      	movs	r2, #67	; 0x43
 800829c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	200000dc 	.word	0x200000dc

080082b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2243      	movs	r2, #67	; 0x43
 80082bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80082be:	4b03      	ldr	r3, [pc, #12]	; (80082cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	20000098 	.word	0x20000098

080082d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2243      	movs	r2, #67	; 0x43
 80082dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000120 	.word	0x20000120

080082f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	220a      	movs	r2, #10
 80082fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80082fe:	4b03      	ldr	r3, [pc, #12]	; (800830c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000054 	.word	0x20000054

08008310 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008350:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800837e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr

08008394 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7c1b      	ldrb	r3, [r3, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fd2d 	bl	8009e22 <USBD_LL_PrepareReceive>
 80083c8:	e007      	b.n	80083da <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083d0:	2340      	movs	r3, #64	; 0x40
 80083d2:	2101      	movs	r1, #1
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 fd24 	bl	8009e22 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083de:	2302      	movs	r3, #2
  }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083fc:	2302      	movs	r3, #2
 80083fe:	e01a      	b.n	8008436 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	79fa      	ldrb	r2, [r7, #7]
 800842c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f001 fba8 	bl	8009b84 <USBD_LL_Init>

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800843e:	b480      	push	{r7}
 8008440:	b085      	sub	sp, #20
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d006      	beq.n	8008460 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e001      	b.n	8008464 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008460:	2302      	movs	r3, #2
 8008462:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr

08008470 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 fbc7 	bl	8009c0c <USBD_LL_Start>

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00c      	beq.n	80084d0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	4611      	mov	r1, r2
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	4611      	mov	r1, r2
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 ff11 	bl	800933a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2b02      	cmp	r3, #2
 800853a:	d016      	beq.n	800856a <USBD_LL_SetupStage+0x6a>
 800853c:	2b02      	cmp	r3, #2
 800853e:	d81c      	bhi.n	800857a <USBD_LL_SetupStage+0x7a>
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <USBD_LL_SetupStage+0x4a>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d008      	beq.n	800855a <USBD_LL_SetupStage+0x5a>
 8008548:	e017      	b.n	800857a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa04 	bl	8008960 <USBD_StdDevReq>
      break;
 8008558:	e01a      	b.n	8008590 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa66 	bl	8008a34 <USBD_StdItfReq>
      break;
 8008568:	e012      	b.n	8008590 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 faa6 	bl	8008ac4 <USBD_StdEPReq>
      break;
 8008578:	e00a      	b.n	8008590 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008580:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008584:	b2db      	uxtb	r3, r3
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 fb9f 	bl	8009ccc <USBD_LL_StallEP>
      break;
 800858e:	bf00      	nop
  }

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	460b      	mov	r3, r1
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d14b      	bne.n	8008646 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d134      	bne.n	800862a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d919      	bls.n	8008600 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	1ad2      	subs	r2, r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d203      	bcs.n	80085ee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	e002      	b.n	80085f4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 ff90 	bl	800951e <USBD_CtlContinueRx>
 80085fe:	e038      	b.n	8008672 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008612:	2b03      	cmp	r3, #3
 8008614:	d105      	bne.n	8008622 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 ff8d 	bl	8009542 <USBD_CtlSendStatus>
 8008628:	e023      	b.n	8008672 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008630:	2b05      	cmp	r3, #5
 8008632:	d11e      	bne.n	8008672 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800863c:	2100      	movs	r1, #0
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 fb44 	bl	8009ccc <USBD_LL_StallEP>
 8008644:	e015      	b.n	8008672 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00d      	beq.n	800866e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008658:	2b03      	cmp	r3, #3
 800865a:	d108      	bne.n	800866e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	7afa      	ldrb	r2, [r7, #11]
 8008666:	4611      	mov	r1, r2
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	4798      	blx	r3
 800866c:	e001      	b.n	8008672 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800866e:	2302      	movs	r3, #2
 8008670:	e000      	b.n	8008674 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	460b      	mov	r3, r1
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d17f      	bne.n	8008790 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3314      	adds	r3, #20
 8008694:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800869c:	2b02      	cmp	r3, #2
 800869e:	d15c      	bne.n	800875a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d915      	bls.n	80086d8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	1ad2      	subs	r2, r2, r3
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fefa 	bl	80094be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ca:	2300      	movs	r3, #0
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f001 fba6 	bl	8009e22 <USBD_LL_PrepareReceive>
 80086d6:	e04e      	b.n	8008776 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	6912      	ldr	r2, [r2, #16]
 80086e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80086e4:	fb01 f202 	mul.w	r2, r1, r2
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d11c      	bne.n	8008728 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d316      	bcc.n	8008728 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008704:	429a      	cmp	r2, r3
 8008706:	d20f      	bcs.n	8008728 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fed6 	bl	80094be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800871a:	2300      	movs	r3, #0
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f001 fb7e 	bl	8009e22 <USBD_LL_PrepareReceive>
 8008726:	e026      	b.n	8008776 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800873a:	2b03      	cmp	r3, #3
 800873c:	d105      	bne.n	800874a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f001 fabd 	bl	8009ccc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 ff08 	bl	8009568 <USBD_CtlReceiveStatus>
 8008758:	e00d      	b.n	8008776 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008760:	2b04      	cmp	r3, #4
 8008762:	d004      	beq.n	800876e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 faab 	bl	8009ccc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800877c:	2b01      	cmp	r3, #1
 800877e:	d11d      	bne.n	80087bc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fe81 	bl	8008488 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800878e:	e015      	b.n	80087bc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00d      	beq.n	80087b8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d108      	bne.n	80087b8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	7afa      	ldrb	r2, [r7, #11]
 80087b0:	4611      	mov	r1, r2
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	4798      	blx	r3
 80087b6:	e001      	b.n	80087bc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087b8:	2302      	movs	r3, #2
 80087ba:	e000      	b.n	80087be <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ce:	2340      	movs	r3, #64	; 0x40
 80087d0:	2200      	movs	r2, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fa34 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2240      	movs	r2, #64	; 0x40
 80087e6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fa26 	bl	8009c42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2240      	movs	r2, #64	; 0x40
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6852      	ldr	r2, [r2, #4]
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	4611      	mov	r1, r2
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
  }

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr

08008866 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr

0800888e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	2b04      	cmp	r3, #4
 800889e:	d105      	bne.n	80088ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d10b      	bne.n	80088e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr

0800891c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr

08008930 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	4611      	mov	r1, r2
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d005      	beq.n	8008986 <USBD_StdDevReq+0x26>
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d84f      	bhi.n	8008a1e <USBD_StdDevReq+0xbe>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <USBD_StdDevReq+0x36>
 8008982:	2b20      	cmp	r3, #32
 8008984:	d14b      	bne.n	8008a1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	4798      	blx	r3
      break;
 8008994:	e048      	b.n	8008a28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b09      	cmp	r3, #9
 800899c:	d839      	bhi.n	8008a12 <USBD_StdDevReq+0xb2>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <USBD_StdDevReq+0x44>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089f5 	.word	0x080089f5
 80089a8:	08008a09 	.word	0x08008a09
 80089ac:	08008a13 	.word	0x08008a13
 80089b0:	080089ff 	.word	0x080089ff
 80089b4:	08008a13 	.word	0x08008a13
 80089b8:	080089d7 	.word	0x080089d7
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	08008a13 	.word	0x08008a13
 80089c4:	080089eb 	.word	0x080089eb
 80089c8:	080089e1 	.word	0x080089e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089cc:	6839      	ldr	r1, [r7, #0]
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9dc 	bl	8008d8c <USBD_GetDescriptor>
          break;
 80089d4:	e022      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fb3f 	bl	800905c <USBD_SetAddress>
          break;
 80089de:	e01d      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fb7e 	bl	80090e4 <USBD_SetConfig>
          break;
 80089e8:	e018      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fc07 	bl	8009200 <USBD_GetConfig>
          break;
 80089f2:	e013      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fc37 	bl	800926a <USBD_GetStatus>
          break;
 80089fc:	e00e      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc65 	bl	80092d0 <USBD_SetFeature>
          break;
 8008a06:	e009      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc74 	bl	80092f8 <USBD_ClrFeature>
          break;
 8008a10:	e004      	b.n	8008a1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fccc 	bl	80093b2 <USBD_CtlError>
          break;
 8008a1a:	bf00      	nop
      }
      break;
 8008a1c:	e004      	b.n	8008a28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fcc6 	bl	80093b2 <USBD_CtlError>
      break;
 8008a26:	bf00      	nop
  }

  return ret;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d005      	beq.n	8008a5a <USBD_StdItfReq+0x26>
 8008a4e:	2b40      	cmp	r3, #64	; 0x40
 8008a50:	d82e      	bhi.n	8008ab0 <USBD_StdItfReq+0x7c>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <USBD_StdItfReq+0x26>
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d12a      	bne.n	8008ab0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	3b01      	subs	r3, #1
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d81d      	bhi.n	8008aa2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d813      	bhi.n	8008a98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	88db      	ldrh	r3, [r3, #6]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d110      	bne.n	8008aac <USBD_StdItfReq+0x78>
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10d      	bne.n	8008aac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fd56 	bl	8009542 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a96:	e009      	b.n	8008aac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fc89 	bl	80093b2 <USBD_CtlError>
          break;
 8008aa0:	e004      	b.n	8008aac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc84 	bl	80093b2 <USBD_CtlError>
          break;
 8008aaa:	e000      	b.n	8008aae <USBD_StdItfReq+0x7a>
          break;
 8008aac:	bf00      	nop
      }
      break;
 8008aae:	e004      	b.n	8008aba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fc7d 	bl	80093b2 <USBD_CtlError>
      break;
 8008ab8:	bf00      	nop
  }

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ae0:	2b40      	cmp	r3, #64	; 0x40
 8008ae2:	d007      	beq.n	8008af4 <USBD_StdEPReq+0x30>
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	f200 8146 	bhi.w	8008d76 <USBD_StdEPReq+0x2b2>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <USBD_StdEPReq+0x40>
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	f040 8141 	bne.w	8008d76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
      break;
 8008b02:	e13d      	b.n	8008d80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d10a      	bne.n	8008b26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	e12d      	b.n	8008d82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d007      	beq.n	8008b3e <USBD_StdEPReq+0x7a>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	f300 811b 	bgt.w	8008d6a <USBD_StdEPReq+0x2a6>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d072      	beq.n	8008c1e <USBD_StdEPReq+0x15a>
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d03a      	beq.n	8008bb2 <USBD_StdEPReq+0xee>
 8008b3c:	e115      	b.n	8008d6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d002      	beq.n	8008b4e <USBD_StdEPReq+0x8a>
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d015      	beq.n	8008b78 <USBD_StdEPReq+0xb4>
 8008b4c:	e02b      	b.n	8008ba6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b4e:	7bbb      	ldrb	r3, [r7, #14]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00c      	beq.n	8008b6e <USBD_StdEPReq+0xaa>
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	2b80      	cmp	r3, #128	; 0x80
 8008b58:	d009      	beq.n	8008b6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 f8b4 	bl	8009ccc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 f8b0 	bl	8009ccc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b6c:	e020      	b.n	8008bb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc1e 	bl	80093b2 <USBD_CtlError>
              break;
 8008b76:	e01b      	b.n	8008bb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	885b      	ldrh	r3, [r3, #2]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10e      	bne.n	8008b9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00b      	beq.n	8008b9e <USBD_StdEPReq+0xda>
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b80      	cmp	r3, #128	; 0x80
 8008b8a:	d008      	beq.n	8008b9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 f897 	bl	8009ccc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fccf 	bl	8009542 <USBD_CtlSendStatus>

              break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fc02 	bl	80093b2 <USBD_CtlError>
              break;
 8008bae:	bf00      	nop
          }
          break;
 8008bb0:	e0e0      	b.n	8008d74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d002      	beq.n	8008bc2 <USBD_StdEPReq+0xfe>
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d015      	beq.n	8008bec <USBD_StdEPReq+0x128>
 8008bc0:	e026      	b.n	8008c10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00c      	beq.n	8008be2 <USBD_StdEPReq+0x11e>
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b80      	cmp	r3, #128	; 0x80
 8008bcc:	d009      	beq.n	8008be2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f87a 	bl	8009ccc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bd8:	2180      	movs	r1, #128	; 0x80
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 f876 	bl	8009ccc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008be0:	e01c      	b.n	8008c1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fbe4 	bl	80093b2 <USBD_CtlError>
              break;
 8008bea:	e017      	b.n	8008c1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	885b      	ldrh	r3, [r3, #2]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d112      	bne.n	8008c1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 f881 	bl	8009d0a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fc9a 	bl	8009542 <USBD_CtlSendStatus>
              }
              break;
 8008c0e:	e004      	b.n	8008c1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fbcd 	bl	80093b2 <USBD_CtlError>
              break;
 8008c18:	e000      	b.n	8008c1c <USBD_StdEPReq+0x158>
              break;
 8008c1a:	bf00      	nop
          }
          break;
 8008c1c:	e0aa      	b.n	8008d74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d002      	beq.n	8008c2e <USBD_StdEPReq+0x16a>
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d032      	beq.n	8008c92 <USBD_StdEPReq+0x1ce>
 8008c2c:	e097      	b.n	8008d5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <USBD_StdEPReq+0x180>
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b80      	cmp	r3, #128	; 0x80
 8008c38:	d004      	beq.n	8008c44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fbb8 	bl	80093b2 <USBD_CtlError>
                break;
 8008c42:	e091      	b.n	8008d68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da0b      	bge.n	8008c64 <USBD_StdEPReq+0x1a0>
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	4413      	add	r3, r2
 8008c60:	3304      	adds	r3, #4
 8008c62:	e00b      	b.n	8008c7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2202      	movs	r2, #2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fbfb 	bl	8009486 <USBD_CtlSendData>
              break;
 8008c90:	e06a      	b.n	8008d68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	da11      	bge.n	8008cbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	f003 020f 	and.w	r2, r3, #15
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	440b      	add	r3, r1
 8008cac:	3318      	adds	r3, #24
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d117      	bne.n	8008ce4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb7b 	bl	80093b2 <USBD_CtlError>
                  break;
 8008cbc:	e054      	b.n	8008d68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fb68 	bl	80093b2 <USBD_CtlError>
                  break;
 8008ce2:	e041      	b.n	8008d68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	da0b      	bge.n	8008d04 <USBD_StdEPReq+0x240>
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	3310      	adds	r3, #16
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3304      	adds	r3, #4
 8008d02:	e00b      	b.n	8008d1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	4413      	add	r3, r2
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <USBD_StdEPReq+0x266>
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
 8008d26:	2b80      	cmp	r3, #128	; 0x80
 8008d28:	d103      	bne.n	8008d32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	e00e      	b.n	8008d50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 f806 	bl	8009d48 <USBD_LL_IsStallEP>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e002      	b.n	8008d50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2202      	movs	r2, #2
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fb95 	bl	8009486 <USBD_CtlSendData>
              break;
 8008d5c:	e004      	b.n	8008d68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fb26 	bl	80093b2 <USBD_CtlError>
              break;
 8008d66:	bf00      	nop
          }
          break;
 8008d68:	e004      	b.n	8008d74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fb20 	bl	80093b2 <USBD_CtlError>
          break;
 8008d72:	bf00      	nop
      }
      break;
 8008d74:	e004      	b.n	8008d80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fb1a 	bl	80093b2 <USBD_CtlError>
      break;
 8008d7e:	bf00      	nop
  }

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	885b      	ldrh	r3, [r3, #2]
 8008da6:	0a1b      	lsrs	r3, r3, #8
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	f200 8128 	bhi.w	8009002 <USBD_GetDescriptor+0x276>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <USBD_GetDescriptor+0x2c>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dd5 	.word	0x08008dd5
 8008dbc:	08008ded 	.word	0x08008ded
 8008dc0:	08008e2d 	.word	0x08008e2d
 8008dc4:	08009003 	.word	0x08009003
 8008dc8:	08009003 	.word	0x08009003
 8008dcc:	08008fa3 	.word	0x08008fa3
 8008dd0:	08008fcf 	.word	0x08008fcf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	7c12      	ldrb	r2, [r2, #16]
 8008de0:	f107 0108 	add.w	r1, r7, #8
 8008de4:	4610      	mov	r0, r2
 8008de6:	4798      	blx	r3
 8008de8:	60f8      	str	r0, [r7, #12]
      break;
 8008dea:	e112      	b.n	8009012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7c1b      	ldrb	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10d      	bne.n	8008e10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	f107 0208 	add.w	r2, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e0e:	e100      	b.n	8009012 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	f107 0208 	add.w	r2, r7, #8
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	2202      	movs	r2, #2
 8008e28:	701a      	strb	r2, [r3, #0]
      break;
 8008e2a:	e0f2      	b.n	8009012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	f200 80ac 	bhi.w	8008f90 <USBD_GetDescriptor+0x204>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <USBD_GetDescriptor+0xb4>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008ec1 	.word	0x08008ec1
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008f29 	.word	0x08008f29
 8008e54:	08008f5d 	.word	0x08008f5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7c12      	ldrb	r2, [r2, #16]
 8008e70:	f107 0108 	add.w	r1, r7, #8
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7a:	e091      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa97 	bl	80093b2 <USBD_CtlError>
            err++;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	3301      	adds	r3, #1
 8008e88:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8a:	e089      	b.n	8008fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	7c12      	ldrb	r2, [r2, #16]
 8008ea4:	f107 0108 	add.w	r1, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eae:	e077      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa7d 	bl	80093b2 <USBD_CtlError>
            err++;
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ebe:	e06f      	b.n	8008fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	7c12      	ldrb	r2, [r2, #16]
 8008ed8:	f107 0108 	add.w	r1, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee2:	e05d      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa63 	bl	80093b2 <USBD_CtlError>
            err++;
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef2:	e055      	b.n	8008fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00b      	beq.n	8008f18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7c12      	ldrb	r2, [r2, #16]
 8008f0c:	f107 0108 	add.w	r1, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f16:	e043      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa49 	bl	80093b2 <USBD_CtlError>
            err++;
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	3301      	adds	r3, #1
 8008f24:	72fb      	strb	r3, [r7, #11]
          break;
 8008f26:	e03b      	b.n	8008fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4a:	e029      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa2f 	bl	80093b2 <USBD_CtlError>
            err++;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	3301      	adds	r3, #1
 8008f58:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5a:	e021      	b.n	8008fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7e:	e00f      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa15 	bl	80093b2 <USBD_CtlError>
            err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8e:	e007      	b.n	8008fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa0d 	bl	80093b2 <USBD_CtlError>
          err++;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f9e:	e038      	b.n	8009012 <USBD_GetDescriptor+0x286>
 8008fa0:	e037      	b.n	8009012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	7c1b      	ldrb	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb2:	f107 0208 	add.w	r2, r7, #8
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4798      	blx	r3
 8008fba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fbc:	e029      	b.n	8009012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9f6 	bl	80093b2 <USBD_CtlError>
        err++;
 8008fc6:	7afb      	ldrb	r3, [r7, #11]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	72fb      	strb	r3, [r7, #11]
      break;
 8008fcc:	e021      	b.n	8009012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7c1b      	ldrb	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10d      	bne.n	8008ff2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	f107 0208 	add.w	r2, r7, #8
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	4798      	blx	r3
 8008fe6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	2207      	movs	r2, #7
 8008fee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff0:	e00f      	b.n	8009012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f9dc 	bl	80093b2 <USBD_CtlError>
        err++;
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8009000:	e007      	b.n	8009012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f9d4 	bl	80093b2 <USBD_CtlError>
      err++;
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	3301      	adds	r3, #1
 800900e:	72fb      	strb	r3, [r7, #11]
      break;
 8009010:	bf00      	nop
  }

  if (err != 0U)
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11c      	bne.n	8009052 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d011      	beq.n	8009042 <USBD_GetDescriptor+0x2b6>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	88da      	ldrh	r2, [r3, #6]
 800902a:	893b      	ldrh	r3, [r7, #8]
 800902c:	4293      	cmp	r3, r2
 800902e:	bf28      	it	cs
 8009030:	4613      	movcs	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009036:	893b      	ldrh	r3, [r7, #8]
 8009038:	461a      	mov	r2, r3
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fa22 	bl	8009486 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	88db      	ldrh	r3, [r3, #6]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa79 	bl	8009542 <USBD_CtlSendStatus>
 8009050:	e000      	b.n	8009054 <USBD_GetDescriptor+0x2c8>
    return;
 8009052:	bf00      	nop
    }
  }
}
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop

0800905c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	889b      	ldrh	r3, [r3, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d130      	bne.n	80090d0 <USBD_SetAddress+0x74>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d12c      	bne.n	80090d0 <USBD_SetAddress+0x74>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	2b7f      	cmp	r3, #127	; 0x7f
 800907c:	d828      	bhi.n	80090d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	885b      	ldrh	r3, [r3, #2]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009088:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009090:	2b03      	cmp	r3, #3
 8009092:	d104      	bne.n	800909e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f98b 	bl	80093b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909c:	e01d      	b.n	80090da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7bfa      	ldrb	r2, [r7, #15]
 80090a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fe77 	bl	8009d9e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fa46 	bl	8009542 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d004      	beq.n	80090c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c4:	e009      	b.n	80090da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ce:	e004      	b.n	80090da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f96d 	bl	80093b2 <USBD_CtlError>
  }
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	4b41      	ldr	r3, [pc, #260]	; (80091fc <USBD_SetConfig+0x118>)
 80090f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090f8:	4b40      	ldr	r3, [pc, #256]	; (80091fc <USBD_SetConfig+0x118>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d904      	bls.n	800910a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f955 	bl	80093b2 <USBD_CtlError>
 8009108:	e075      	b.n	80091f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009110:	2b02      	cmp	r3, #2
 8009112:	d002      	beq.n	800911a <USBD_SetConfig+0x36>
 8009114:	2b03      	cmp	r3, #3
 8009116:	d023      	beq.n	8009160 <USBD_SetConfig+0x7c>
 8009118:	e062      	b.n	80091e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800911a:	4b38      	ldr	r3, [pc, #224]	; (80091fc <USBD_SetConfig+0x118>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01a      	beq.n	8009158 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009122:	4b36      	ldr	r3, [pc, #216]	; (80091fc <USBD_SetConfig+0x118>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2203      	movs	r2, #3
 8009130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009134:	4b31      	ldr	r3, [pc, #196]	; (80091fc <USBD_SetConfig+0x118>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff f9ae 	bl	800849c <USBD_SetClassConfig>
 8009140:	4603      	mov	r3, r0
 8009142:	2b02      	cmp	r3, #2
 8009144:	d104      	bne.n	8009150 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f932 	bl	80093b2 <USBD_CtlError>
            return;
 800914e:	e052      	b.n	80091f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9f6 	bl	8009542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009156:	e04e      	b.n	80091f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9f2 	bl	8009542 <USBD_CtlSendStatus>
        break;
 800915e:	e04a      	b.n	80091f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009160:	4b26      	ldr	r3, [pc, #152]	; (80091fc <USBD_SetConfig+0x118>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d112      	bne.n	800918e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009170:	4b22      	ldr	r3, [pc, #136]	; (80091fc <USBD_SetConfig+0x118>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800917a:	4b20      	ldr	r3, [pc, #128]	; (80091fc <USBD_SetConfig+0x118>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff f9aa 	bl	80084da <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f9db 	bl	8009542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800918c:	e033      	b.n	80091f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <USBD_SetConfig+0x118>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d01d      	beq.n	80091d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff f998 	bl	80084da <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <USBD_SetConfig+0x118>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091b4:	4b11      	ldr	r3, [pc, #68]	; (80091fc <USBD_SetConfig+0x118>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff f96e 	bl	800849c <USBD_SetClassConfig>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d104      	bne.n	80091d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f8f2 	bl	80093b2 <USBD_CtlError>
            return;
 80091ce:	e012      	b.n	80091f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f9b6 	bl	8009542 <USBD_CtlSendStatus>
        break;
 80091d6:	e00e      	b.n	80091f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f9b2 	bl	8009542 <USBD_CtlSendStatus>
        break;
 80091de:	e00a      	b.n	80091f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8e5 	bl	80093b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <USBD_SetConfig+0x118>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7ff f973 	bl	80084da <USBD_ClrClassConfig>
        break;
 80091f4:	bf00      	nop
    }
  }
}
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	2000036c 	.word	0x2000036c

08009200 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	88db      	ldrh	r3, [r3, #6]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d004      	beq.n	800921c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f8cc 	bl	80093b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800921a:	e022      	b.n	8009262 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009222:	2b02      	cmp	r3, #2
 8009224:	dc02      	bgt.n	800922c <USBD_GetConfig+0x2c>
 8009226:	2b00      	cmp	r3, #0
 8009228:	dc03      	bgt.n	8009232 <USBD_GetConfig+0x32>
 800922a:	e015      	b.n	8009258 <USBD_GetConfig+0x58>
 800922c:	2b03      	cmp	r3, #3
 800922e:	d00b      	beq.n	8009248 <USBD_GetConfig+0x48>
 8009230:	e012      	b.n	8009258 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3308      	adds	r3, #8
 800923c:	2201      	movs	r2, #1
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f920 	bl	8009486 <USBD_CtlSendData>
        break;
 8009246:	e00c      	b.n	8009262 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3304      	adds	r3, #4
 800924c:	2201      	movs	r2, #1
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f918 	bl	8009486 <USBD_CtlSendData>
        break;
 8009256:	e004      	b.n	8009262 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f8a9 	bl	80093b2 <USBD_CtlError>
        break;
 8009260:	bf00      	nop
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927a:	3b01      	subs	r3, #1
 800927c:	2b02      	cmp	r3, #2
 800927e:	d81e      	bhi.n	80092be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	88db      	ldrh	r3, [r3, #6]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d004      	beq.n	8009292 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f891 	bl	80093b2 <USBD_CtlError>
        break;
 8009290:	e01a      	b.n	80092c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f043 0202 	orr.w	r2, r3, #2
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	330c      	adds	r3, #12
 80092b2:	2202      	movs	r2, #2
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f8e5 	bl	8009486 <USBD_CtlSendData>
      break;
 80092bc:	e004      	b.n	80092c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f876 	bl	80093b2 <USBD_CtlError>
      break;
 80092c6:	bf00      	nop
  }
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	885b      	ldrh	r3, [r3, #2]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d106      	bne.n	80092f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f929 	bl	8009542 <USBD_CtlSendStatus>
  }
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	3b01      	subs	r3, #1
 800930a:	2b02      	cmp	r3, #2
 800930c:	d80b      	bhi.n	8009326 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	885b      	ldrh	r3, [r3, #2]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d10c      	bne.n	8009330 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f90f 	bl	8009542 <USBD_CtlSendStatus>
      }
      break;
 8009324:	e004      	b.n	8009330 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f842 	bl	80093b2 <USBD_CtlError>
      break;
 800932e:	e000      	b.n	8009332 <USBD_ClrFeature+0x3a>
      break;
 8009330:	bf00      	nop
  }
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785a      	ldrb	r2, [r3, #1]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	3302      	adds	r3, #2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	b29a      	uxth	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	3303      	adds	r3, #3
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	b29b      	uxth	r3, r3
 8009368:	4413      	add	r3, r2
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3304      	adds	r3, #4
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	b29a      	uxth	r2, r3
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	3305      	adds	r3, #5
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	b29b      	uxth	r3, r3
 8009384:	4413      	add	r3, r2
 8009386:	b29a      	uxth	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	3306      	adds	r3, #6
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	b29a      	uxth	r2, r3
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	3307      	adds	r3, #7
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	b29b      	uxth	r3, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	80da      	strh	r2, [r3, #6]

}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bc80      	pop	{r7}
 80093b0:	4770      	bx	lr

080093b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b082      	sub	sp, #8
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80093bc:	2180      	movs	r1, #128	; 0x80
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fc84 	bl	8009ccc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093c4:	2100      	movs	r1, #0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc80 	bl	8009ccc <USBD_LL_StallEP>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d032      	beq.n	8009450 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f834 	bl	8009458 <USBD_GetLen>
 80093f0:	4603      	mov	r3, r0
 80093f2:	3301      	adds	r3, #1
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	75fa      	strb	r2, [r7, #23]
 8009404:	461a      	mov	r2, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	75fa      	strb	r2, [r7, #23]
 8009416:	461a      	mov	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4413      	add	r3, r2
 800941c:	2203      	movs	r2, #3
 800941e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009420:	e012      	b.n	8009448 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	60fa      	str	r2, [r7, #12]
 8009428:	7dfa      	ldrb	r2, [r7, #23]
 800942a:	1c51      	adds	r1, r2, #1
 800942c:	75f9      	strb	r1, [r7, #23]
 800942e:	4611      	mov	r1, r2
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	440a      	add	r2, r1
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	75fa      	strb	r2, [r7, #23]
 800943e:	461a      	mov	r2, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	4413      	add	r3, r2
 8009444:	2200      	movs	r2, #0
 8009446:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e8      	bne.n	8009422 <USBD_GetString+0x4e>
    }
  }
}
 8009450:	bf00      	nop
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009464:	e005      	b.n	8009472 <USBD_GetLen+0x1a>
  {
    len++;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	3301      	adds	r3, #1
 800946a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3301      	adds	r3, #1
 8009470:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f5      	bne.n	8009466 <USBD_GetLen+0xe>
  }

  return len;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	bc80      	pop	{r7}
 8009484:	4770      	bx	lr

08009486 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	4613      	mov	r3, r2
 8009492:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2202      	movs	r2, #2
 8009498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800949c:	88fa      	ldrh	r2, [r7, #6]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80094a2:	88fa      	ldrh	r2, [r7, #6]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fc94 	bl	8009ddc <USBD_LL_Transmit>

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4613      	mov	r3, r2
 80094ca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fc82 	bl	8009ddc <USBD_LL_Transmit>

  return USBD_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2203      	movs	r2, #3
 80094f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009500:	88fa      	ldrh	r2, [r7, #6]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2100      	movs	r1, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc87 	bl	8009e22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	4613      	mov	r3, r2
 800952a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	2100      	movs	r1, #0
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fc75 	bl	8009e22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2204      	movs	r2, #4
 800954e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009552:	2300      	movs	r3, #0
 8009554:	2200      	movs	r2, #0
 8009556:	2100      	movs	r1, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fc3f 	bl	8009ddc <USBD_LL_Transmit>

  return USBD_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2205      	movs	r2, #5
 8009574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009578:	2300      	movs	r3, #0
 800957a:	2200      	movs	r2, #0
 800957c:	2100      	movs	r1, #0
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fc4f 	bl	8009e22 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009594:	2200      	movs	r2, #0
 8009596:	4912      	ldr	r1, [pc, #72]	; (80095e0 <MX_USB_DEVICE_Init+0x50>)
 8009598:	4812      	ldr	r0, [pc, #72]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 800959a:	f7fe ff25 	bl	80083e8 <USBD_Init>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80095a4:	f7f9 f938 	bl	8002818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095a8:	490f      	ldr	r1, [pc, #60]	; (80095e8 <MX_USB_DEVICE_Init+0x58>)
 80095aa:	480e      	ldr	r0, [pc, #56]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095ac:	f7fe ff47 	bl	800843e <USBD_RegisterClass>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80095b6:	f7f9 f92f 	bl	8002818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095ba:	490c      	ldr	r1, [pc, #48]	; (80095ec <MX_USB_DEVICE_Init+0x5c>)
 80095bc:	4809      	ldr	r0, [pc, #36]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095be:	f7fe fea7 	bl	8008310 <USBD_CDC_RegisterInterface>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80095c8:	f7f9 f926 	bl	8002818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095cc:	4805      	ldr	r0, [pc, #20]	; (80095e4 <MX_USB_DEVICE_Init+0x54>)
 80095ce:	f7fe ff4f 	bl	8008470 <USBD_Start>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80095d8:	f7f9 f91e 	bl	8002818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095dc:	bf00      	nop
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000174 	.word	0x20000174
 80095e4:	20000370 	.word	0x20000370
 80095e8:	20000060 	.word	0x20000060
 80095ec:	20000164 	.word	0x20000164

080095f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095f4:	2200      	movs	r2, #0
 80095f6:	4905      	ldr	r1, [pc, #20]	; (800960c <CDC_Init_FS+0x1c>)
 80095f8:	4805      	ldr	r0, [pc, #20]	; (8009610 <CDC_Init_FS+0x20>)
 80095fa:	f7fe fe9f 	bl	800833c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095fe:	4905      	ldr	r1, [pc, #20]	; (8009614 <CDC_Init_FS+0x24>)
 8009600:	4803      	ldr	r0, [pc, #12]	; (8009610 <CDC_Init_FS+0x20>)
 8009602:	f7fe feb4 	bl	800836e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009606:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009608:	4618      	mov	r0, r3
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20000a34 	.word	0x20000a34
 8009610:	20000370 	.word	0x20000370
 8009614:	20000634 	.word	0x20000634

08009618 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800961c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800961e:	4618      	mov	r0, r3
 8009620:	46bd      	mov	sp, r7
 8009622:	bc80      	pop	{r7}
 8009624:	4770      	bx	lr
	...

08009628 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
 8009634:	4613      	mov	r3, r2
 8009636:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b23      	cmp	r3, #35	; 0x23
 800963c:	d84a      	bhi.n	80096d4 <CDC_Control_FS+0xac>
 800963e:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <CDC_Control_FS+0x1c>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	080096d5 	.word	0x080096d5
 8009648:	080096d5 	.word	0x080096d5
 800964c:	080096d5 	.word	0x080096d5
 8009650:	080096d5 	.word	0x080096d5
 8009654:	080096d5 	.word	0x080096d5
 8009658:	080096d5 	.word	0x080096d5
 800965c:	080096d5 	.word	0x080096d5
 8009660:	080096d5 	.word	0x080096d5
 8009664:	080096d5 	.word	0x080096d5
 8009668:	080096d5 	.word	0x080096d5
 800966c:	080096d5 	.word	0x080096d5
 8009670:	080096d5 	.word	0x080096d5
 8009674:	080096d5 	.word	0x080096d5
 8009678:	080096d5 	.word	0x080096d5
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096d5 	.word	0x080096d5
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096d5 	.word	0x080096d5
 800968c:	080096d5 	.word	0x080096d5
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096d5 	.word	0x080096d5
 8009698:	080096d5 	.word	0x080096d5
 800969c:	080096d5 	.word	0x080096d5
 80096a0:	080096d5 	.word	0x080096d5
 80096a4:	080096d5 	.word	0x080096d5
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096d5 	.word	0x080096d5
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	080096d5 	.word	0x080096d5
 80096bc:	080096d5 	.word	0x080096d5
 80096c0:	080096d5 	.word	0x080096d5
 80096c4:	080096d5 	.word	0x080096d5
 80096c8:	080096d5 	.word	0x080096d5
 80096cc:	080096d5 	.word	0x080096d5
 80096d0:	080096d5 	.word	0x080096d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80096d4:	bf00      	nop
  }

  return (USBD_OK);
 80096d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop

080096e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4805      	ldr	r0, [pc, #20]	; (8009708 <CDC_Receive_FS+0x24>)
 80096f2:	f7fe fe3c 	bl	800836e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096f6:	4804      	ldr	r0, [pc, #16]	; (8009708 <CDC_Receive_FS+0x24>)
 80096f8:	f7fe fe4c 	bl	8008394 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000370 	.word	0x20000370

0800970c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2212      	movs	r2, #18
 800971c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000190 	.word	0x20000190

08009730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2204      	movs	r2, #4
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	200001a4 	.word	0x200001a4

08009754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d105      	bne.n	8009772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	4907      	ldr	r1, [pc, #28]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
 800976a:	4808      	ldr	r0, [pc, #32]	; (800978c <USBD_FS_ProductStrDescriptor+0x38>)
 800976c:	f7ff fe32 	bl	80093d4 <USBD_GetString>
 8009770:	e004      	b.n	800977c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4904      	ldr	r1, [pc, #16]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
 8009776:	4805      	ldr	r0, [pc, #20]	; (800978c <USBD_FS_ProductStrDescriptor+0x38>)
 8009778:	f7ff fe2c 	bl	80093d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800977c:	4b02      	ldr	r3, [pc, #8]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000e34 	.word	0x20000e34
 800978c:	0800a5ac 	.word	0x0800a5ac

08009790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	4904      	ldr	r1, [pc, #16]	; (80097b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097a0:	4804      	ldr	r0, [pc, #16]	; (80097b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097a2:	f7ff fe17 	bl	80093d4 <USBD_GetString>
  return USBD_StrDesc;
 80097a6:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000e34 	.word	0x20000e34
 80097b4:	0800a5c4 	.word	0x0800a5c4

080097b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	221a      	movs	r2, #26
 80097c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ca:	f000 f843 	bl	8009854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ce:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200001a8 	.word	0x200001a8

080097dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4907      	ldr	r1, [pc, #28]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097f2:	4808      	ldr	r0, [pc, #32]	; (8009814 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097f4:	f7ff fdee 	bl	80093d4 <USBD_GetString>
 80097f8:	e004      	b.n	8009804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4904      	ldr	r1, [pc, #16]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097fe:	4805      	ldr	r0, [pc, #20]	; (8009814 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009800:	f7ff fde8 	bl	80093d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009804:	4b02      	ldr	r3, [pc, #8]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000e34 	.word	0x20000e34
 8009814:	0800a5d8 	.word	0x0800a5d8

08009818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009830:	f7ff fdd0 	bl	80093d4 <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800983c:	f7ff fdca 	bl	80093d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000e34 	.word	0x20000e34
 8009850:	0800a5e4 	.word	0x0800a5e4

08009854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800985a:	4b0f      	ldr	r3, [pc, #60]	; (8009898 <Get_SerialNum+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <Get_SerialNum+0x48>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009866:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <Get_SerialNum+0x4c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4413      	add	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800987a:	2208      	movs	r2, #8
 800987c:	4909      	ldr	r1, [pc, #36]	; (80098a4 <Get_SerialNum+0x50>)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f814 	bl	80098ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009884:	2204      	movs	r2, #4
 8009886:	4908      	ldr	r1, [pc, #32]	; (80098a8 <Get_SerialNum+0x54>)
 8009888:	68b8      	ldr	r0, [r7, #8]
 800988a:	f000 f80f 	bl	80098ac <IntToUnicode>
  }
}
 800988e:	bf00      	nop
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	1ffff7e8 	.word	0x1ffff7e8
 800989c:	1ffff7ec 	.word	0x1ffff7ec
 80098a0:	1ffff7f0 	.word	0x1ffff7f0
 80098a4:	200001aa 	.word	0x200001aa
 80098a8:	200001ba 	.word	0x200001ba

080098ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098be:	2300      	movs	r3, #0
 80098c0:	75fb      	strb	r3, [r7, #23]
 80098c2:	e027      	b.n	8009914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	0f1b      	lsrs	r3, r3, #28
 80098c8:	2b09      	cmp	r3, #9
 80098ca:	d80b      	bhi.n	80098e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	0f1b      	lsrs	r3, r3, #28
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4619      	mov	r1, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	440b      	add	r3, r1
 80098dc:	3230      	adds	r2, #48	; 0x30
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	e00a      	b.n	80098fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	0f1b      	lsrs	r3, r3, #28
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	4619      	mov	r1, r3
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	440b      	add	r3, r1
 80098f4:	3237      	adds	r2, #55	; 0x37
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009900:	7dfb      	ldrb	r3, [r7, #23]
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	3301      	adds	r3, #1
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4413      	add	r3, r2
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	3301      	adds	r3, #1
 8009912:	75fb      	strb	r3, [r7, #23]
 8009914:	7dfa      	ldrb	r2, [r7, #23]
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	429a      	cmp	r2, r3
 800991a:	d3d3      	bcc.n	80098c4 <IntToUnicode+0x18>
  }
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009930:	f107 0310 	add.w	r3, r7, #16
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	609a      	str	r2, [r3, #8]
 800993c:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009946:	d12c      	bne.n	80099a2 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009948:	4b18      	ldr	r3, [pc, #96]	; (80099ac <HAL_PCD_MspInit+0x84>)
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	4a17      	ldr	r2, [pc, #92]	; (80099ac <HAL_PCD_MspInit+0x84>)
 800994e:	f043 0304 	orr.w	r3, r3, #4
 8009952:	6193      	str	r3, [r2, #24]
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <HAL_PCD_MspInit+0x84>)
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996a:	2300      	movs	r3, #0
 800996c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800996e:	f107 0310 	add.w	r3, r7, #16
 8009972:	4619      	mov	r1, r3
 8009974:	480e      	ldr	r0, [pc, #56]	; (80099b0 <HAL_PCD_MspInit+0x88>)
 8009976:	f7fa f8c9 	bl	8003b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <HAL_PCD_MspInit+0x84>)
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	4a0b      	ldr	r2, [pc, #44]	; (80099ac <HAL_PCD_MspInit+0x84>)
 8009980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009984:	6153      	str	r3, [r2, #20]
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <HAL_PCD_MspInit+0x84>)
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009992:	2200      	movs	r2, #0
 8009994:	2100      	movs	r1, #0
 8009996:	2043      	movs	r0, #67	; 0x43
 8009998:	f7fa f881 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800999c:	2043      	movs	r0, #67	; 0x43
 800999e:	f7fa f89a 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099a2:	bf00      	nop
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40021000 	.word	0x40021000
 80099b0:	40010800 	.word	0x40010800

080099b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099c8:	4619      	mov	r1, r3
 80099ca:	4610      	mov	r0, r2
 80099cc:	f7fe fd98 	bl	8008500 <USBD_LL_SetupStage>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f7fe fdca 	bl	800859a <USBD_LL_DataOutStage>
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009a20:	78fa      	ldrb	r2, [r7, #3]
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4613      	mov	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	3348      	adds	r3, #72	; 0x48
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	78fb      	ldrb	r3, [r7, #3]
 8009a34:	4619      	mov	r1, r3
 8009a36:	f7fe fe21 	bl	800867c <USBD_LL_DataInStage>
}
 8009a3a:	bf00      	nop
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe ff31 	bl	80088b8 <USBD_LL_SOF>
}
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a66:	2301      	movs	r3, #1
 8009a68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d001      	beq.n	8009a76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a72:	f7f8 fed1 	bl	8002818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009a7c:	7bfa      	ldrb	r2, [r7, #15]
 8009a7e:	4611      	mov	r1, r2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fe fee1 	bl	8008848 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fe9a 	bl	80087c6 <USBD_LL_Reset>
}
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fedb 	bl	8008866 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6812      	ldr	r2, [r2, #0]
 8009abe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ad0:	4b04      	ldr	r3, [pc, #16]	; (8009ae4 <HAL_PCD_SuspendCallback+0x48>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	4a03      	ldr	r2, [pc, #12]	; (8009ae4 <HAL_PCD_SuspendCallback+0x48>)
 8009ad6:	f043 0306 	orr.w	r3, r3, #6
 8009ada:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009adc:	bf00      	nop
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	e000ed00 	.word	0xe000ed00

08009ae8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fec9 	bl	800888e <USBD_LL_Resume>
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	4611      	mov	r1, r2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fef2 	bl	8008904 <USBD_LL_IsoOUTIncomplete>
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b3a:	78fa      	ldrb	r2, [r7, #3]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fed4 	bl	80088ec <USBD_LL_IsoINIncomplete>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fede 	bl	800891c <USBD_LL_DevConnected>
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe feda 	bl	8008930 <USBD_LL_DevDisconnected>
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d133      	bne.n	8009bfc <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b94:	4a1c      	ldr	r2, [pc, #112]	; (8009c08 <USBD_LL_Init+0x84>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a1a      	ldr	r2, [pc, #104]	; (8009c08 <USBD_LL_Init+0x84>)
 8009ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ba4:	4b18      	ldr	r3, [pc, #96]	; (8009c08 <USBD_LL_Init+0x84>)
 8009ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009baa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009bac:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bae:	2204      	movs	r2, #4
 8009bb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009bb2:	4b15      	ldr	r3, [pc, #84]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bba:	2202      	movs	r2, #2
 8009bbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009bbe:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009bc4:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009bd0:	480d      	ldr	r0, [pc, #52]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bd2:	f7fa f950 	bl	8003e76 <HAL_PCD_Init>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009bdc:	f7f8 fe1c 	bl	8002818 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009be0:	2180      	movs	r1, #128	; 0x80
 8009be2:	4809      	ldr	r0, [pc, #36]	; (8009c08 <USBD_LL_Init+0x84>)
 8009be4:	f7fb fa68 	bl	80050b8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009be8:	2240      	movs	r2, #64	; 0x40
 8009bea:	2100      	movs	r1, #0
 8009bec:	4806      	ldr	r0, [pc, #24]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bee:	f7fb fa1d 	bl	800502c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009bf2:	2280      	movs	r2, #128	; 0x80
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	4804      	ldr	r0, [pc, #16]	; (8009c08 <USBD_LL_Init+0x84>)
 8009bf8:	f7fb fa18 	bl	800502c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20001034 	.word	0x20001034

08009c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fa44 	bl	80040b0 <HAL_PCD_Start>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f944 	bl	8009ebc <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	4608      	mov	r0, r1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4603      	mov	r3, r0
 8009c52:	70fb      	strb	r3, [r7, #3]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70bb      	strb	r3, [r7, #2]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c6a:	78bb      	ldrb	r3, [r7, #2]
 8009c6c:	883a      	ldrh	r2, [r7, #0]
 8009c6e:	78f9      	ldrb	r1, [r7, #3]
 8009c70:	f7fa febd 	bl	80049ee <HAL_PCD_EP_Open>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f91e 	bl	8009ebc <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	4611      	mov	r1, r2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fa ff06 	bl	8004abe <HAL_PCD_EP_Close>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f8ff 	bl	8009ebc <USBD_Get_USB_Status>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	4611      	mov	r1, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fa ffab 	bl	8004c46 <HAL_PCD_EP_SetStall>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f8e0 	bl	8009ebc <USBD_Get_USB_Status>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	4611      	mov	r1, r2
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fa ffee 	bl	8004d0a <HAL_PCD_EP_ClrStall>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 f8c1 	bl	8009ebc <USBD_Get_USB_Status>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da0b      	bge.n	8009d7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	333e      	adds	r3, #62	; 0x3e
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	e00b      	b.n	8009d94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	4613      	mov	r3, r2
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bc80      	pop	{r7}
 8009d9c:	4770      	bx	lr

08009d9e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fa fdf1 	bl	80049a4 <HAL_PCD_SetAddress>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f877 	bl	8009ebc <USBD_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	461a      	mov	r2, r3
 8009de8:	460b      	mov	r3, r1
 8009dea:	72fb      	strb	r3, [r7, #11]
 8009dec:	4613      	mov	r3, r2
 8009dee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	7af9      	ldrb	r1, [r7, #11]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	f7fa feee 	bl	8004be4 <HAL_PCD_EP_Transmit>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f854 	bl	8009ebc <USBD_Get_USB_Status>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e18:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	460b      	mov	r3, r1
 8009e30:	72fb      	strb	r3, [r7, #11]
 8009e32:	4613      	mov	r3, r2
 8009e34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e44:	893b      	ldrh	r3, [r7, #8]
 8009e46:	7af9      	ldrb	r1, [r7, #11]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	f7fa fe82 	bl	8004b52 <HAL_PCD_EP_Receive>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f831 	bl	8009ebc <USBD_Get_USB_Status>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fa fe99 	bl	8004bb6 <HAL_PCD_EP_GetRxCount>
 8009e84:	4603      	mov	r3, r0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <USBD_static_malloc+0x14>)
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr
 8009ea4:	20001538 	.word	0x20001538

08009ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr
	...

08009ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d817      	bhi.n	8009f00 <USBD_Get_USB_Status+0x44>
 8009ed0:	a201      	add	r2, pc, #4	; (adr r2, 8009ed8 <USBD_Get_USB_Status+0x1c>)
 8009ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed6:	bf00      	nop
 8009ed8:	08009ee9 	.word	0x08009ee9
 8009edc:	08009eef 	.word	0x08009eef
 8009ee0:	08009ef5 	.word	0x08009ef5
 8009ee4:	08009efb 	.word	0x08009efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]
    break;
 8009eec:	e00b      	b.n	8009f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef2:	e008      	b.n	8009f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ef8:	e005      	b.n	8009f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009efa:	2302      	movs	r3, #2
 8009efc:	73fb      	strb	r3, [r7, #15]
    break;
 8009efe:	e002      	b.n	8009f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f00:	2302      	movs	r3, #2
 8009f02:	73fb      	strb	r3, [r7, #15]
    break;
 8009f04:	bf00      	nop
  }
  return usb_status;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bc80      	pop	{r7}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop

08009f14 <malloc>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	; (8009f20 <malloc+0xc>)
 8009f16:	4601      	mov	r1, r0
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	f000 b82b 	b.w	8009f74 <_malloc_r>
 8009f1e:	bf00      	nop
 8009f20:	20000210 	.word	0x20000210

08009f24 <free>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <free+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f000 b901 	b.w	800a130 <_free_r>
 8009f2e:	bf00      	nop
 8009f30:	20000210 	.word	0x20000210

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0e      	ldr	r6, [pc, #56]	; (8009f70 <sbrk_aligned+0x3c>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f000 f8ac 	bl	800a09c <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 f8a7 	bl	800a09c <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <sbrk_aligned+0x34>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d007      	beq.n	8009f6c <sbrk_aligned+0x38>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f89c 	bl	800a09c <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d101      	bne.n	8009f6c <sbrk_aligned+0x38>
 8009f68:	f04f 34ff 	mov.w	r4, #4294967295
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	2000175c 	.word	0x2000175c

08009f74 <_malloc_r>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	1ccd      	adds	r5, r1, #3
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db01      	blt.n	8009f90 <_malloc_r+0x1c>
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d905      	bls.n	8009f9c <_malloc_r+0x28>
 8009f90:	230c      	movs	r3, #12
 8009f92:	2600      	movs	r6, #0
 8009f94:	603b      	str	r3, [r7, #0]
 8009f96:	4630      	mov	r0, r6
 8009f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a070 <_malloc_r+0xfc>
 8009fa0:	f000 f868 	bl	800a074 <__malloc_lock>
 8009fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa8:	461c      	mov	r4, r3
 8009faa:	bb5c      	cbnz	r4, 800a004 <_malloc_r+0x90>
 8009fac:	4629      	mov	r1, r5
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ffc0 	bl	8009f34 <sbrk_aligned>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	d155      	bne.n	800a066 <_malloc_r+0xf2>
 8009fba:	f8d8 4000 	ldr.w	r4, [r8]
 8009fbe:	4626      	mov	r6, r4
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	d145      	bne.n	800a050 <_malloc_r+0xdc>
 8009fc4:	2c00      	cmp	r4, #0
 8009fc6:	d048      	beq.n	800a05a <_malloc_r+0xe6>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4638      	mov	r0, r7
 8009fce:	eb04 0903 	add.w	r9, r4, r3
 8009fd2:	f000 f863 	bl	800a09c <_sbrk_r>
 8009fd6:	4581      	cmp	r9, r0
 8009fd8:	d13f      	bne.n	800a05a <_malloc_r+0xe6>
 8009fda:	6821      	ldr	r1, [r4, #0]
 8009fdc:	4638      	mov	r0, r7
 8009fde:	1a6d      	subs	r5, r5, r1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f7ff ffa7 	bl	8009f34 <sbrk_aligned>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d037      	beq.n	800a05a <_malloc_r+0xe6>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	442b      	add	r3, r5
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d038      	beq.n	800a06a <_malloc_r+0xf6>
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	42a2      	cmp	r2, r4
 8009ffc:	d12b      	bne.n	800a056 <_malloc_r+0xe2>
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	e00f      	b.n	800a024 <_malloc_r+0xb0>
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	1b52      	subs	r2, r2, r5
 800a008:	d41f      	bmi.n	800a04a <_malloc_r+0xd6>
 800a00a:	2a0b      	cmp	r2, #11
 800a00c:	d917      	bls.n	800a03e <_malloc_r+0xca>
 800a00e:	1961      	adds	r1, r4, r5
 800a010:	42a3      	cmp	r3, r4
 800a012:	6025      	str	r5, [r4, #0]
 800a014:	bf18      	it	ne
 800a016:	6059      	strne	r1, [r3, #4]
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	bf08      	it	eq
 800a01c:	f8c8 1000 	streq.w	r1, [r8]
 800a020:	5162      	str	r2, [r4, r5]
 800a022:	604b      	str	r3, [r1, #4]
 800a024:	4638      	mov	r0, r7
 800a026:	f104 060b 	add.w	r6, r4, #11
 800a02a:	f000 f829 	bl	800a080 <__malloc_unlock>
 800a02e:	f026 0607 	bic.w	r6, r6, #7
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	1af2      	subs	r2, r6, r3
 800a036:	d0ae      	beq.n	8009f96 <_malloc_r+0x22>
 800a038:	1b9b      	subs	r3, r3, r6
 800a03a:	50a3      	str	r3, [r4, r2]
 800a03c:	e7ab      	b.n	8009f96 <_malloc_r+0x22>
 800a03e:	42a3      	cmp	r3, r4
 800a040:	6862      	ldr	r2, [r4, #4]
 800a042:	d1dd      	bne.n	800a000 <_malloc_r+0x8c>
 800a044:	f8c8 2000 	str.w	r2, [r8]
 800a048:	e7ec      	b.n	800a024 <_malloc_r+0xb0>
 800a04a:	4623      	mov	r3, r4
 800a04c:	6864      	ldr	r4, [r4, #4]
 800a04e:	e7ac      	b.n	8009faa <_malloc_r+0x36>
 800a050:	4634      	mov	r4, r6
 800a052:	6876      	ldr	r6, [r6, #4]
 800a054:	e7b4      	b.n	8009fc0 <_malloc_r+0x4c>
 800a056:	4613      	mov	r3, r2
 800a058:	e7cc      	b.n	8009ff4 <_malloc_r+0x80>
 800a05a:	230c      	movs	r3, #12
 800a05c:	4638      	mov	r0, r7
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	f000 f80e 	bl	800a080 <__malloc_unlock>
 800a064:	e797      	b.n	8009f96 <_malloc_r+0x22>
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	e7dc      	b.n	800a024 <_malloc_r+0xb0>
 800a06a:	605b      	str	r3, [r3, #4]
 800a06c:	deff      	udf	#255	; 0xff
 800a06e:	bf00      	nop
 800a070:	20001758 	.word	0x20001758

0800a074 <__malloc_lock>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__malloc_lock+0x8>)
 800a076:	f000 b84b 	b.w	800a110 <__retarget_lock_acquire_recursive>
 800a07a:	bf00      	nop
 800a07c:	2000189c 	.word	0x2000189c

0800a080 <__malloc_unlock>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__malloc_unlock+0x8>)
 800a082:	f000 b846 	b.w	800a112 <__retarget_lock_release_recursive>
 800a086:	bf00      	nop
 800a088:	2000189c 	.word	0x2000189c

0800a08c <memset>:
 800a08c:	4603      	mov	r3, r0
 800a08e:	4402      	add	r2, r0
 800a090:	4293      	cmp	r3, r2
 800a092:	d100      	bne.n	800a096 <memset+0xa>
 800a094:	4770      	bx	lr
 800a096:	f803 1b01 	strb.w	r1, [r3], #1
 800a09a:	e7f9      	b.n	800a090 <memset+0x4>

0800a09c <_sbrk_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	2300      	movs	r3, #0
 800a0a0:	4d05      	ldr	r5, [pc, #20]	; (800a0b8 <_sbrk_r+0x1c>)
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	602b      	str	r3, [r5, #0]
 800a0a8:	f7f8 fea2 	bl	8002df0 <_sbrk>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_sbrk_r+0x1a>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_sbrk_r+0x1a>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	20001898 	.word	0x20001898

0800a0bc <__errno>:
 800a0bc:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <__errno+0x8>)
 800a0be:	6818      	ldr	r0, [r3, #0]
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000210 	.word	0x20000210

0800a0c8 <__libc_init_array>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	4d0c      	ldr	r5, [pc, #48]	; (800a100 <__libc_init_array+0x38>)
 800a0ce:	4c0d      	ldr	r4, [pc, #52]	; (800a104 <__libc_init_array+0x3c>)
 800a0d0:	1b64      	subs	r4, r4, r5
 800a0d2:	10a4      	asrs	r4, r4, #2
 800a0d4:	42a6      	cmp	r6, r4
 800a0d6:	d109      	bne.n	800a0ec <__libc_init_array+0x24>
 800a0d8:	f000 fa5c 	bl	800a594 <_init>
 800a0dc:	2600      	movs	r6, #0
 800a0de:	4d0a      	ldr	r5, [pc, #40]	; (800a108 <__libc_init_array+0x40>)
 800a0e0:	4c0a      	ldr	r4, [pc, #40]	; (800a10c <__libc_init_array+0x44>)
 800a0e2:	1b64      	subs	r4, r4, r5
 800a0e4:	10a4      	asrs	r4, r4, #2
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	d105      	bne.n	800a0f6 <__libc_init_array+0x2e>
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f0:	4798      	blx	r3
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7ee      	b.n	800a0d4 <__libc_init_array+0xc>
 800a0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fa:	4798      	blx	r3
 800a0fc:	3601      	adds	r6, #1
 800a0fe:	e7f2      	b.n	800a0e6 <__libc_init_array+0x1e>
 800a100:	0800aa3c 	.word	0x0800aa3c
 800a104:	0800aa3c 	.word	0x0800aa3c
 800a108:	0800aa3c 	.word	0x0800aa3c
 800a10c:	0800aa40 	.word	0x0800aa40

0800a110 <__retarget_lock_acquire_recursive>:
 800a110:	4770      	bx	lr

0800a112 <__retarget_lock_release_recursive>:
 800a112:	4770      	bx	lr

0800a114 <memcpy>:
 800a114:	440a      	add	r2, r1
 800a116:	4291      	cmp	r1, r2
 800a118:	f100 33ff 	add.w	r3, r0, #4294967295
 800a11c:	d100      	bne.n	800a120 <memcpy+0xc>
 800a11e:	4770      	bx	lr
 800a120:	b510      	push	{r4, lr}
 800a122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a126:	4291      	cmp	r1, r2
 800a128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a12c:	d1f9      	bne.n	800a122 <memcpy+0xe>
 800a12e:	bd10      	pop	{r4, pc}

0800a130 <_free_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4605      	mov	r5, r0
 800a134:	2900      	cmp	r1, #0
 800a136:	d040      	beq.n	800a1ba <_free_r+0x8a>
 800a138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a13c:	1f0c      	subs	r4, r1, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfb8      	it	lt
 800a142:	18e4      	addlt	r4, r4, r3
 800a144:	f7ff ff96 	bl	800a074 <__malloc_lock>
 800a148:	4a1c      	ldr	r2, [pc, #112]	; (800a1bc <_free_r+0x8c>)
 800a14a:	6813      	ldr	r3, [r2, #0]
 800a14c:	b933      	cbnz	r3, 800a15c <_free_r+0x2c>
 800a14e:	6063      	str	r3, [r4, #4]
 800a150:	6014      	str	r4, [r2, #0]
 800a152:	4628      	mov	r0, r5
 800a154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a158:	f7ff bf92 	b.w	800a080 <__malloc_unlock>
 800a15c:	42a3      	cmp	r3, r4
 800a15e:	d908      	bls.n	800a172 <_free_r+0x42>
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	1821      	adds	r1, r4, r0
 800a164:	428b      	cmp	r3, r1
 800a166:	bf01      	itttt	eq
 800a168:	6819      	ldreq	r1, [r3, #0]
 800a16a:	685b      	ldreq	r3, [r3, #4]
 800a16c:	1809      	addeq	r1, r1, r0
 800a16e:	6021      	streq	r1, [r4, #0]
 800a170:	e7ed      	b.n	800a14e <_free_r+0x1e>
 800a172:	461a      	mov	r2, r3
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	b10b      	cbz	r3, 800a17c <_free_r+0x4c>
 800a178:	42a3      	cmp	r3, r4
 800a17a:	d9fa      	bls.n	800a172 <_free_r+0x42>
 800a17c:	6811      	ldr	r1, [r2, #0]
 800a17e:	1850      	adds	r0, r2, r1
 800a180:	42a0      	cmp	r0, r4
 800a182:	d10b      	bne.n	800a19c <_free_r+0x6c>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	4401      	add	r1, r0
 800a188:	1850      	adds	r0, r2, r1
 800a18a:	4283      	cmp	r3, r0
 800a18c:	6011      	str	r1, [r2, #0]
 800a18e:	d1e0      	bne.n	800a152 <_free_r+0x22>
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	4408      	add	r0, r1
 800a196:	6010      	str	r0, [r2, #0]
 800a198:	6053      	str	r3, [r2, #4]
 800a19a:	e7da      	b.n	800a152 <_free_r+0x22>
 800a19c:	d902      	bls.n	800a1a4 <_free_r+0x74>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	e7d6      	b.n	800a152 <_free_r+0x22>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	1821      	adds	r1, r4, r0
 800a1a8:	428b      	cmp	r3, r1
 800a1aa:	bf01      	itttt	eq
 800a1ac:	6819      	ldreq	r1, [r3, #0]
 800a1ae:	685b      	ldreq	r3, [r3, #4]
 800a1b0:	1809      	addeq	r1, r1, r0
 800a1b2:	6021      	streq	r1, [r4, #0]
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	6054      	str	r4, [r2, #4]
 800a1b8:	e7cb      	b.n	800a152 <_free_r+0x22>
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	20001758 	.word	0x20001758

0800a1c0 <log>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	f000 f833 	bl	800a230 <__ieee754_log>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	462b      	mov	r3, r5
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f6 fc7d 	bl	8000ad4 <__aeabi_dcmpun>
 800a1da:	b998      	cbnz	r0, 800a204 <log+0x44>
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 fc6c 	bl	8000ac0 <__aeabi_dcmpgt>
 800a1e8:	b960      	cbnz	r0, 800a204 <log+0x44>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 fc3d 	bl	8000a70 <__aeabi_dcmpeq>
 800a1f6:	b140      	cbz	r0, 800a20a <log+0x4a>
 800a1f8:	f7ff ff60 	bl	800a0bc <__errno>
 800a1fc:	2322      	movs	r3, #34	; 0x22
 800a1fe:	2600      	movs	r6, #0
 800a200:	4f06      	ldr	r7, [pc, #24]	; (800a21c <log+0x5c>)
 800a202:	6003      	str	r3, [r0, #0]
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a20a:	f7ff ff57 	bl	800a0bc <__errno>
 800a20e:	2321      	movs	r3, #33	; 0x21
 800a210:	6003      	str	r3, [r0, #0]
 800a212:	4803      	ldr	r0, [pc, #12]	; (800a220 <log+0x60>)
 800a214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a218:	f000 b804 	b.w	800a224 <nan>
 800a21c:	fff00000 	.word	0xfff00000
 800a220:	0800aa30 	.word	0x0800aa30

0800a224 <nan>:
 800a224:	2000      	movs	r0, #0
 800a226:	4901      	ldr	r1, [pc, #4]	; (800a22c <nan+0x8>)
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	7ff80000 	.word	0x7ff80000

0800a230 <__ieee754_log>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	460d      	mov	r5, r1
 800a23e:	b087      	sub	sp, #28
 800a240:	da24      	bge.n	800a28c <__ieee754_log+0x5c>
 800a242:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a246:	4304      	orrs	r4, r0
 800a248:	d108      	bne.n	800a25c <__ieee754_log+0x2c>
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	2000      	movs	r0, #0
 800a250:	49cb      	ldr	r1, [pc, #812]	; (800a580 <__ieee754_log+0x350>)
 800a252:	f7f6 facf 	bl	80007f4 <__aeabi_ddiv>
 800a256:	b007      	add	sp, #28
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	2900      	cmp	r1, #0
 800a25e:	da04      	bge.n	800a26a <__ieee754_log+0x3a>
 800a260:	f7f5 ffe6 	bl	8000230 <__aeabi_dsub>
 800a264:	2200      	movs	r2, #0
 800a266:	2300      	movs	r3, #0
 800a268:	e7f3      	b.n	800a252 <__ieee754_log+0x22>
 800a26a:	2200      	movs	r2, #0
 800a26c:	4bc5      	ldr	r3, [pc, #788]	; (800a584 <__ieee754_log+0x354>)
 800a26e:	f7f6 f997 	bl	80005a0 <__aeabi_dmul>
 800a272:	460b      	mov	r3, r1
 800a274:	460d      	mov	r5, r1
 800a276:	4602      	mov	r2, r0
 800a278:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a27c:	48c2      	ldr	r0, [pc, #776]	; (800a588 <__ieee754_log+0x358>)
 800a27e:	4285      	cmp	r5, r0
 800a280:	dd06      	ble.n	800a290 <__ieee754_log+0x60>
 800a282:	4610      	mov	r0, r2
 800a284:	4619      	mov	r1, r3
 800a286:	f7f5 ffd5 	bl	8000234 <__adddf3>
 800a28a:	e7e4      	b.n	800a256 <__ieee754_log+0x26>
 800a28c:	2100      	movs	r1, #0
 800a28e:	e7f5      	b.n	800a27c <__ieee754_log+0x4c>
 800a290:	152c      	asrs	r4, r5, #20
 800a292:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a296:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a29a:	440c      	add	r4, r1
 800a29c:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a2a0:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a2a4:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800a2a8:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800a2ac:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a2b0:	ea41 0305 	orr.w	r3, r1, r5
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4bb4      	ldr	r3, [pc, #720]	; (800a58c <__ieee754_log+0x35c>)
 800a2bc:	f7f5 ffb8 	bl	8000230 <__aeabi_dsub>
 800a2c0:	1cab      	adds	r3, r5, #2
 800a2c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	468b      	mov	fp, r1
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800a2d4:	dc53      	bgt.n	800a37e <__ieee754_log+0x14e>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f7f6 fbca 	bl	8000a70 <__aeabi_dcmpeq>
 800a2dc:	b1d0      	cbz	r0, 800a314 <__ieee754_log+0xe4>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	f000 8122 	beq.w	800a528 <__ieee754_log+0x2f8>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7f6 f8f1 	bl	80004cc <__aeabi_i2d>
 800a2ea:	a391      	add	r3, pc, #580	; (adr r3, 800a530 <__ieee754_log+0x300>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	f7f6 f954 	bl	80005a0 <__aeabi_dmul>
 800a2f8:	a38f      	add	r3, pc, #572	; (adr r3, 800a538 <__ieee754_log+0x308>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f6 f94b 	bl	80005a0 <__aeabi_dmul>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	e7b8      	b.n	800a286 <__ieee754_log+0x56>
 800a314:	a38a      	add	r3, pc, #552	; (adr r3, 800a540 <__ieee754_log+0x310>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	4650      	mov	r0, sl
 800a31c:	4659      	mov	r1, fp
 800a31e:	f7f6 f93f 	bl	80005a0 <__aeabi_dmul>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	2000      	movs	r0, #0
 800a328:	4999      	ldr	r1, [pc, #612]	; (800a590 <__ieee754_log+0x360>)
 800a32a:	f7f5 ff81 	bl	8000230 <__aeabi_dsub>
 800a32e:	4652      	mov	r2, sl
 800a330:	4606      	mov	r6, r0
 800a332:	460f      	mov	r7, r1
 800a334:	465b      	mov	r3, fp
 800a336:	4650      	mov	r0, sl
 800a338:	4659      	mov	r1, fp
 800a33a:	f7f6 f931 	bl	80005a0 <__aeabi_dmul>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4630      	mov	r0, r6
 800a344:	4639      	mov	r1, r7
 800a346:	f7f6 f92b 	bl	80005a0 <__aeabi_dmul>
 800a34a:	4606      	mov	r6, r0
 800a34c:	460f      	mov	r7, r1
 800a34e:	b914      	cbnz	r4, 800a356 <__ieee754_log+0x126>
 800a350:	4632      	mov	r2, r6
 800a352:	463b      	mov	r3, r7
 800a354:	e0a2      	b.n	800a49c <__ieee754_log+0x26c>
 800a356:	4620      	mov	r0, r4
 800a358:	f7f6 f8b8 	bl	80004cc <__aeabi_i2d>
 800a35c:	a374      	add	r3, pc, #464	; (adr r3, 800a530 <__ieee754_log+0x300>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	4680      	mov	r8, r0
 800a364:	4689      	mov	r9, r1
 800a366:	f7f6 f91b 	bl	80005a0 <__aeabi_dmul>
 800a36a:	a373      	add	r3, pc, #460	; (adr r3, 800a538 <__ieee754_log+0x308>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	4604      	mov	r4, r0
 800a372:	460d      	mov	r5, r1
 800a374:	4640      	mov	r0, r8
 800a376:	4649      	mov	r1, r9
 800a378:	f7f6 f912 	bl	80005a0 <__aeabi_dmul>
 800a37c:	e0a7      	b.n	800a4ce <__ieee754_log+0x29e>
 800a37e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a382:	f7f5 ff57 	bl	8000234 <__adddf3>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4650      	mov	r0, sl
 800a38c:	4659      	mov	r1, fp
 800a38e:	f7f6 fa31 	bl	80007f4 <__aeabi_ddiv>
 800a392:	e9cd 0100 	strd	r0, r1, [sp]
 800a396:	4620      	mov	r0, r4
 800a398:	f7f6 f898 	bl	80004cc <__aeabi_i2d>
 800a39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	f7f6 f8fa 	bl	80005a0 <__aeabi_dmul>
 800a3ac:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a3b0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	9305      	str	r3, [sp, #20]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	f7f6 f8ef 	bl	80005a0 <__aeabi_dmul>
 800a3c2:	a361      	add	r3, pc, #388	; (adr r3, 800a548 <__ieee754_log+0x318>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	4680      	mov	r8, r0
 800a3ca:	4689      	mov	r9, r1
 800a3cc:	f7f6 f8e8 	bl	80005a0 <__aeabi_dmul>
 800a3d0:	a35f      	add	r3, pc, #380	; (adr r3, 800a550 <__ieee754_log+0x320>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff2d 	bl	8000234 <__adddf3>
 800a3da:	4642      	mov	r2, r8
 800a3dc:	464b      	mov	r3, r9
 800a3de:	f7f6 f8df 	bl	80005a0 <__aeabi_dmul>
 800a3e2:	a35d      	add	r3, pc, #372	; (adr r3, 800a558 <__ieee754_log+0x328>)
 800a3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e8:	f7f5 ff24 	bl	8000234 <__adddf3>
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	f7f6 f8d6 	bl	80005a0 <__aeabi_dmul>
 800a3f4:	a35a      	add	r3, pc, #360	; (adr r3, 800a560 <__ieee754_log+0x330>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f5 ff1b 	bl	8000234 <__adddf3>
 800a3fe:	4632      	mov	r2, r6
 800a400:	463b      	mov	r3, r7
 800a402:	f7f6 f8cd 	bl	80005a0 <__aeabi_dmul>
 800a406:	a358      	add	r3, pc, #352	; (adr r3, 800a568 <__ieee754_log+0x338>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	4640      	mov	r0, r8
 800a412:	4649      	mov	r1, r9
 800a414:	f7f6 f8c4 	bl	80005a0 <__aeabi_dmul>
 800a418:	a355      	add	r3, pc, #340	; (adr r3, 800a570 <__ieee754_log+0x340>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f5 ff09 	bl	8000234 <__adddf3>
 800a422:	4642      	mov	r2, r8
 800a424:	464b      	mov	r3, r9
 800a426:	f7f6 f8bb 	bl	80005a0 <__aeabi_dmul>
 800a42a:	a353      	add	r3, pc, #332	; (adr r3, 800a578 <__ieee754_log+0x348>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f5 ff00 	bl	8000234 <__adddf3>
 800a434:	4642      	mov	r2, r8
 800a436:	464b      	mov	r3, r9
 800a438:	f7f6 f8b2 	bl	80005a0 <__aeabi_dmul>
 800a43c:	460b      	mov	r3, r1
 800a43e:	4602      	mov	r2, r0
 800a440:	4639      	mov	r1, r7
 800a442:	4630      	mov	r0, r6
 800a444:	f7f5 fef6 	bl	8000234 <__adddf3>
 800a448:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a44c:	9b05      	ldr	r3, [sp, #20]
 800a44e:	3551      	adds	r5, #81	; 0x51
 800a450:	431d      	orrs	r5, r3
 800a452:	2d00      	cmp	r5, #0
 800a454:	4680      	mov	r8, r0
 800a456:	4689      	mov	r9, r1
 800a458:	dd48      	ble.n	800a4ec <__ieee754_log+0x2bc>
 800a45a:	2200      	movs	r2, #0
 800a45c:	4b4c      	ldr	r3, [pc, #304]	; (800a590 <__ieee754_log+0x360>)
 800a45e:	4650      	mov	r0, sl
 800a460:	4659      	mov	r1, fp
 800a462:	f7f6 f89d 	bl	80005a0 <__aeabi_dmul>
 800a466:	4652      	mov	r2, sl
 800a468:	465b      	mov	r3, fp
 800a46a:	f7f6 f899 	bl	80005a0 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4606      	mov	r6, r0
 800a474:	460f      	mov	r7, r1
 800a476:	4640      	mov	r0, r8
 800a478:	4649      	mov	r1, r9
 800a47a:	f7f5 fedb 	bl	8000234 <__adddf3>
 800a47e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a482:	f7f6 f88d 	bl	80005a0 <__aeabi_dmul>
 800a486:	4680      	mov	r8, r0
 800a488:	4689      	mov	r9, r1
 800a48a:	b964      	cbnz	r4, 800a4a6 <__ieee754_log+0x276>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f5 fecc 	bl	8000230 <__aeabi_dsub>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4650      	mov	r0, sl
 800a49e:	4659      	mov	r1, fp
 800a4a0:	f7f5 fec6 	bl	8000230 <__aeabi_dsub>
 800a4a4:	e6d7      	b.n	800a256 <__ieee754_log+0x26>
 800a4a6:	a322      	add	r3, pc, #136	; (adr r3, 800a530 <__ieee754_log+0x300>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b0:	f7f6 f876 	bl	80005a0 <__aeabi_dmul>
 800a4b4:	a320      	add	r3, pc, #128	; (adr r3, 800a538 <__ieee754_log+0x308>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	460d      	mov	r5, r1
 800a4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c2:	f7f6 f86d 	bl	80005a0 <__aeabi_dmul>
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	f7f5 feb3 	bl	8000234 <__adddf3>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f5 feab 	bl	8000230 <__aeabi_dsub>
 800a4da:	4652      	mov	r2, sl
 800a4dc:	465b      	mov	r3, fp
 800a4de:	f7f5 fea7 	bl	8000230 <__aeabi_dsub>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	e7d9      	b.n	800a4a0 <__ieee754_log+0x270>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	f7f5 fe9c 	bl	8000230 <__aeabi_dsub>
 800a4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fc:	f7f6 f850 	bl	80005a0 <__aeabi_dmul>
 800a500:	4606      	mov	r6, r0
 800a502:	460f      	mov	r7, r1
 800a504:	2c00      	cmp	r4, #0
 800a506:	f43f af23 	beq.w	800a350 <__ieee754_log+0x120>
 800a50a:	a309      	add	r3, pc, #36	; (adr r3, 800a530 <__ieee754_log+0x300>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a514:	f7f6 f844 	bl	80005a0 <__aeabi_dmul>
 800a518:	a307      	add	r3, pc, #28	; (adr r3, 800a538 <__ieee754_log+0x308>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	4604      	mov	r4, r0
 800a520:	460d      	mov	r5, r1
 800a522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a526:	e727      	b.n	800a378 <__ieee754_log+0x148>
 800a528:	2000      	movs	r0, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	e693      	b.n	800a256 <__ieee754_log+0x26>
 800a52e:	bf00      	nop
 800a530:	fee00000 	.word	0xfee00000
 800a534:	3fe62e42 	.word	0x3fe62e42
 800a538:	35793c76 	.word	0x35793c76
 800a53c:	3dea39ef 	.word	0x3dea39ef
 800a540:	55555555 	.word	0x55555555
 800a544:	3fd55555 	.word	0x3fd55555
 800a548:	df3e5244 	.word	0xdf3e5244
 800a54c:	3fc2f112 	.word	0x3fc2f112
 800a550:	96cb03de 	.word	0x96cb03de
 800a554:	3fc74664 	.word	0x3fc74664
 800a558:	94229359 	.word	0x94229359
 800a55c:	3fd24924 	.word	0x3fd24924
 800a560:	55555593 	.word	0x55555593
 800a564:	3fe55555 	.word	0x3fe55555
 800a568:	d078c69f 	.word	0xd078c69f
 800a56c:	3fc39a09 	.word	0x3fc39a09
 800a570:	1d8e78af 	.word	0x1d8e78af
 800a574:	3fcc71c5 	.word	0x3fcc71c5
 800a578:	9997fa04 	.word	0x9997fa04
 800a57c:	3fd99999 	.word	0x3fd99999
 800a580:	c3500000 	.word	0xc3500000
 800a584:	43500000 	.word	0x43500000
 800a588:	7fefffff 	.word	0x7fefffff
 800a58c:	3ff00000 	.word	0x3ff00000
 800a590:	3fe00000 	.word	0x3fe00000

0800a594 <_init>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_fini>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr
