
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a244  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8fc  0800a8fc  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8fc  0800a8fc  0001a8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a904  0800a904  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a908  0800a908  0001a908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800a90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200001cc  0800aad8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  0800aad8  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019df0  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000491d  00000000  00000000  0003a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ae  00000000  00000000  000401b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c07  00000000  00000000  0004145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed3c  00000000  00000000  00065065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c116a  00000000  00000000  00083da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dc8  00000000  00000000  00144f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0014bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001cc 	.word	0x200001cc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a414 	.word	0x0800a414

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d0 	.word	0x200001d0
 8000224:	0800a414 	.word	0x0800a414

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_frsub>:
 8000bb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	e002      	b.n	8000bbc <__addsf3>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fsub>:
 8000bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bbc <__addsf3>:
 8000bbc:	0042      	lsls	r2, r0, #1
 8000bbe:	bf1f      	itttt	ne
 8000bc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc4:	ea92 0f03 	teqne	r2, r3
 8000bc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bcc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd0:	d06a      	beq.n	8000ca8 <__addsf3+0xec>
 8000bd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bda:	bfc1      	itttt	gt
 8000bdc:	18d2      	addgt	r2, r2, r3
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	4048      	eorgt	r0, r1
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	bfb8      	it	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	2b19      	cmp	r3, #25
 8000bea:	bf88      	it	hi
 8000bec:	4770      	bxhi	lr
 8000bee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4240      	negne	r0, r0
 8000bfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c0a:	bf18      	it	ne
 8000c0c:	4249      	negne	r1, r1
 8000c0e:	ea92 0f03 	teq	r2, r3
 8000c12:	d03f      	beq.n	8000c94 <__addsf3+0xd8>
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	fa41 fc03 	asr.w	ip, r1, r3
 8000c1c:	eb10 000c 	adds.w	r0, r0, ip
 8000c20:	f1c3 0320 	rsb	r3, r3, #32
 8000c24:	fa01 f103 	lsl.w	r1, r1, r3
 8000c28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	d502      	bpl.n	8000c34 <__addsf3+0x78>
 8000c2e:	4249      	negs	r1, r1
 8000c30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c38:	d313      	bcc.n	8000c62 <__addsf3+0xa6>
 8000c3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3e:	d306      	bcc.n	8000c4e <__addsf3+0x92>
 8000c40:	0840      	lsrs	r0, r0, #1
 8000c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c46:	f102 0201 	add.w	r2, r2, #1
 8000c4a:	2afe      	cmp	r2, #254	; 0xfe
 8000c4c:	d251      	bcs.n	8000cf2 <__addsf3+0x136>
 8000c4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	ea40 0003 	orr.w	r0, r0, r3
 8000c60:	4770      	bx	lr
 8000c62:	0049      	lsls	r1, r1, #1
 8000c64:	eb40 0000 	adc.w	r0, r0, r0
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c70:	d2ed      	bcs.n	8000c4e <__addsf3+0x92>
 8000c72:	fab0 fc80 	clz	ip, r0
 8000c76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c82:	bfaa      	itet	ge
 8000c84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c88:	4252      	neglt	r2, r2
 8000c8a:	4318      	orrge	r0, r3
 8000c8c:	bfbc      	itt	lt
 8000c8e:	40d0      	lsrlt	r0, r2
 8000c90:	4318      	orrlt	r0, r3
 8000c92:	4770      	bx	lr
 8000c94:	f092 0f00 	teq	r2, #0
 8000c98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c9c:	bf06      	itte	eq
 8000c9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ca2:	3201      	addeq	r2, #1
 8000ca4:	3b01      	subne	r3, #1
 8000ca6:	e7b5      	b.n	8000c14 <__addsf3+0x58>
 8000ca8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb0:	bf18      	it	ne
 8000cb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb6:	d021      	beq.n	8000cfc <__addsf3+0x140>
 8000cb8:	ea92 0f03 	teq	r2, r3
 8000cbc:	d004      	beq.n	8000cc8 <__addsf3+0x10c>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea90 0f01 	teq	r0, r1
 8000ccc:	bf1c      	itt	ne
 8000cce:	2000      	movne	r0, #0
 8000cd0:	4770      	bxne	lr
 8000cd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cd6:	d104      	bne.n	8000ce2 <__addsf3+0x126>
 8000cd8:	0040      	lsls	r0, r0, #1
 8000cda:	bf28      	it	cs
 8000cdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ce6:	bf3c      	itt	cc
 8000ce8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cec:	4770      	bxcc	lr
 8000cee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d00:	bf16      	itet	ne
 8000d02:	4608      	movne	r0, r1
 8000d04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d08:	4601      	movne	r1, r0
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	bf06      	itte	eq
 8000d0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d12:	ea90 0f01 	teqeq	r0, r1
 8000d16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_ui2f>:
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e004      	b.n	8000d2c <__aeabi_i2f+0x8>
 8000d22:	bf00      	nop

08000d24 <__aeabi_i2f>:
 8000d24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d28:	bf48      	it	mi
 8000d2a:	4240      	negmi	r0, r0
 8000d2c:	ea5f 0c00 	movs.w	ip, r0
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d38:	4601      	mov	r1, r0
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	e01c      	b.n	8000d7a <__aeabi_l2f+0x2a>

08000d40 <__aeabi_ul2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <__aeabi_l2f+0x14>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_l2f>:
 8000d50:	ea50 0201 	orrs.w	r2, r0, r1
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d5c:	d502      	bpl.n	8000d64 <__aeabi_l2f+0x14>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	ea5f 0c01 	movs.w	ip, r1
 8000d68:	bf02      	ittt	eq
 8000d6a:	4684      	moveq	ip, r0
 8000d6c:	4601      	moveq	r1, r0
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d74:	bf08      	it	eq
 8000d76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d7e:	fabc f28c 	clz	r2, ip
 8000d82:	3a08      	subs	r2, #8
 8000d84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d88:	db10      	blt.n	8000dac <__aeabi_l2f+0x5c>
 8000d8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8e:	4463      	add	r3, ip
 8000d90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	f020 0001 	biceq.w	r0, r0, #1
 8000daa:	4770      	bx	lr
 8000dac:	f102 0220 	add.w	r2, r2, #32
 8000db0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_fmul>:
 8000dcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd4:	bf1e      	ittt	ne
 8000dd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dda:	ea92 0f0c 	teqne	r2, ip
 8000dde:	ea93 0f0c 	teqne	r3, ip
 8000de2:	d06f      	beq.n	8000ec4 <__aeabi_fmul+0xf8>
 8000de4:	441a      	add	r2, r3
 8000de6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dea:	0240      	lsls	r0, r0, #9
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df2:	d01e      	beq.n	8000e32 <__aeabi_fmul+0x66>
 8000df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000df8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e00:	fba0 3101 	umull	r3, r1, r0, r1
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e0c:	bf3e      	ittt	cc
 8000e0e:	0049      	lslcc	r1, r1, #1
 8000e10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e14:	005b      	lslcc	r3, r3, #1
 8000e16:	ea40 0001 	orr.w	r0, r0, r1
 8000e1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e1e:	2afd      	cmp	r2, #253	; 0xfd
 8000e20:	d81d      	bhi.n	8000e5e <__aeabi_fmul+0x92>
 8000e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2a:	bf08      	it	eq
 8000e2c:	f020 0001 	biceq.w	r0, r0, #1
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3a:	bf08      	it	eq
 8000e3c:	0249      	lsleq	r1, r1, #9
 8000e3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e46:	3a7f      	subs	r2, #127	; 0x7f
 8000e48:	bfc2      	ittt	gt
 8000e4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e52:	4770      	bxgt	lr
 8000e54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	3a01      	subs	r2, #1
 8000e5e:	dc5d      	bgt.n	8000f1c <__aeabi_fmul+0x150>
 8000e60:	f112 0f19 	cmn.w	r2, #25
 8000e64:	bfdc      	itt	le
 8000e66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e6a:	4770      	bxle	lr
 8000e6c:	f1c2 0200 	rsb	r2, r2, #0
 8000e70:	0041      	lsls	r1, r0, #1
 8000e72:	fa21 f102 	lsr.w	r1, r1, r2
 8000e76:	f1c2 0220 	rsb	r2, r2, #32
 8000e7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e82:	f140 0000 	adc.w	r0, r0, #0
 8000e86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8a:	bf08      	it	eq
 8000e8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e90:	4770      	bx	lr
 8000e92:	f092 0f00 	teq	r2, #0
 8000e96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0040      	lsleq	r0, r0, #1
 8000e9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ea2:	3a01      	subeq	r2, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xce>
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	f093 0f00 	teq	r3, #0
 8000eae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	bf02      	ittt	eq
 8000eb4:	0049      	lsleq	r1, r1, #1
 8000eb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eba:	3b01      	subeq	r3, #1
 8000ebc:	d0f9      	beq.n	8000eb2 <__aeabi_fmul+0xe6>
 8000ebe:	ea41 010c 	orr.w	r1, r1, ip
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fmul+0x18>
 8000ec4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	bf18      	it	ne
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d00a      	beq.n	8000eea <__aeabi_fmul+0x11e>
 8000ed4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed8:	bf18      	it	ne
 8000eda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ede:	d1d8      	bne.n	8000e92 <__aeabi_fmul+0xc6>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f090 0f00 	teq	r0, #0
 8000eee:	bf17      	itett	ne
 8000ef0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ef4:	4608      	moveq	r0, r1
 8000ef6:	f091 0f00 	teqne	r1, #0
 8000efa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000efe:	d014      	beq.n	8000f2a <__aeabi_fmul+0x15e>
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	d101      	bne.n	8000f0a <__aeabi_fmul+0x13e>
 8000f06:	0242      	lsls	r2, r0, #9
 8000f08:	d10f      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f0a:	ea93 0f0c 	teq	r3, ip
 8000f0e:	d103      	bne.n	8000f18 <__aeabi_fmul+0x14c>
 8000f10:	024b      	lsls	r3, r1, #9
 8000f12:	bf18      	it	ne
 8000f14:	4608      	movne	r0, r1
 8000f16:	d108      	bne.n	8000f2a <__aeabi_fmul+0x15e>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f28:	4770      	bx	lr
 8000f2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f32:	4770      	bx	lr

08000f34 <__aeabi_fdiv>:
 8000f34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f42:	ea92 0f0c 	teqne	r2, ip
 8000f46:	ea93 0f0c 	teqne	r3, ip
 8000f4a:	d069      	beq.n	8001020 <__aeabi_fdiv+0xec>
 8000f4c:	eba2 0203 	sub.w	r2, r2, r3
 8000f50:	ea80 0c01 	eor.w	ip, r0, r1
 8000f54:	0249      	lsls	r1, r1, #9
 8000f56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5a:	d037      	beq.n	8000fcc <__aeabi_fdiv+0x98>
 8000f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf38      	it	cc
 8000f70:	005b      	lslcc	r3, r3, #1
 8000f72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	bf24      	itt	cs
 8000f7e:	1a5b      	subcs	r3, r3, r1
 8000f80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f88:	bf24      	itt	cs
 8000f8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f96:	bf24      	itt	cs
 8000f98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000faa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	bf18      	it	ne
 8000fb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb6:	d1e0      	bne.n	8000f7a <__aeabi_fdiv+0x46>
 8000fb8:	2afd      	cmp	r2, #253	; 0xfd
 8000fba:	f63f af50 	bhi.w	8000e5e <__aeabi_fmul+0x92>
 8000fbe:	428b      	cmp	r3, r1
 8000fc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc4:	bf08      	it	eq
 8000fc6:	f020 0001 	biceq.w	r0, r0, #1
 8000fca:	4770      	bx	lr
 8000fcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd4:	327f      	adds	r2, #127	; 0x7f
 8000fd6:	bfc2      	ittt	gt
 8000fd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fdc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe0:	4770      	bxgt	lr
 8000fe2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	3a01      	subs	r2, #1
 8000fec:	e737      	b.n	8000e5e <__aeabi_fmul+0x92>
 8000fee:	f092 0f00 	teq	r2, #0
 8000ff2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0040      	lsleq	r0, r0, #1
 8000ffa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ffe:	3a01      	subeq	r2, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xc2>
 8001002:	ea40 000c 	orr.w	r0, r0, ip
 8001006:	f093 0f00 	teq	r3, #0
 800100a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800100e:	bf02      	ittt	eq
 8001010:	0049      	lsleq	r1, r1, #1
 8001012:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001016:	3b01      	subeq	r3, #1
 8001018:	d0f9      	beq.n	800100e <__aeabi_fdiv+0xda>
 800101a:	ea41 010c 	orr.w	r1, r1, ip
 800101e:	e795      	b.n	8000f4c <__aeabi_fdiv+0x18>
 8001020:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001024:	ea92 0f0c 	teq	r2, ip
 8001028:	d108      	bne.n	800103c <__aeabi_fdiv+0x108>
 800102a:	0242      	lsls	r2, r0, #9
 800102c:	f47f af7d 	bne.w	8000f2a <__aeabi_fmul+0x15e>
 8001030:	ea93 0f0c 	teq	r3, ip
 8001034:	f47f af70 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001038:	4608      	mov	r0, r1
 800103a:	e776      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	d104      	bne.n	800104c <__aeabi_fdiv+0x118>
 8001042:	024b      	lsls	r3, r1, #9
 8001044:	f43f af4c 	beq.w	8000ee0 <__aeabi_fmul+0x114>
 8001048:	4608      	mov	r0, r1
 800104a:	e76e      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800104c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001050:	bf18      	it	ne
 8001052:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001056:	d1ca      	bne.n	8000fee <__aeabi_fdiv+0xba>
 8001058:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800105c:	f47f af5c 	bne.w	8000f18 <__aeabi_fmul+0x14c>
 8001060:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001064:	f47f af3c 	bne.w	8000ee0 <__aeabi_fmul+0x114>
 8001068:	e75f      	b.n	8000f2a <__aeabi_fmul+0x15e>
 800106a:	bf00      	nop

0800106c <__aeabi_uldivmod>:
 800106c:	b953      	cbnz	r3, 8001084 <__aeabi_uldivmod+0x18>
 800106e:	b94a      	cbnz	r2, 8001084 <__aeabi_uldivmod+0x18>
 8001070:	2900      	cmp	r1, #0
 8001072:	bf08      	it	eq
 8001074:	2800      	cmpeq	r0, #0
 8001076:	bf1c      	itt	ne
 8001078:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800107c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001080:	f000 b972 	b.w	8001368 <__aeabi_idiv0>
 8001084:	f1ad 0c08 	sub.w	ip, sp, #8
 8001088:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800108c:	f000 f806 	bl	800109c <__udivmoddi4>
 8001090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001098:	b004      	add	sp, #16
 800109a:	4770      	bx	lr

0800109c <__udivmoddi4>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	9e08      	ldr	r6, [sp, #32]
 80010a2:	460d      	mov	r5, r1
 80010a4:	4604      	mov	r4, r0
 80010a6:	468e      	mov	lr, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d14c      	bne.n	8001146 <__udivmoddi4+0xaa>
 80010ac:	428a      	cmp	r2, r1
 80010ae:	4694      	mov	ip, r2
 80010b0:	d967      	bls.n	8001182 <__udivmoddi4+0xe6>
 80010b2:	fab2 f382 	clz	r3, r2
 80010b6:	b153      	cbz	r3, 80010ce <__udivmoddi4+0x32>
 80010b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010bc:	f1c3 0220 	rsb	r2, r3, #32
 80010c0:	fa01 fe03 	lsl.w	lr, r1, r3
 80010c4:	fa20 f202 	lsr.w	r2, r0, r2
 80010c8:	ea42 0e0e 	orr.w	lr, r2, lr
 80010cc:	409c      	lsls	r4, r3
 80010ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d2:	fbbe f1f7 	udiv	r1, lr, r7
 80010d6:	fa1f f58c 	uxth.w	r5, ip
 80010da:	fb07 ee11 	mls	lr, r7, r1, lr
 80010de:	fb01 f005 	mul.w	r0, r1, r5
 80010e2:	0c22      	lsrs	r2, r4, #16
 80010e4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80010e8:	4290      	cmp	r0, r2
 80010ea:	d90a      	bls.n	8001102 <__udivmoddi4+0x66>
 80010ec:	eb1c 0202 	adds.w	r2, ip, r2
 80010f0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80010f4:	f080 8119 	bcs.w	800132a <__udivmoddi4+0x28e>
 80010f8:	4290      	cmp	r0, r2
 80010fa:	f240 8116 	bls.w	800132a <__udivmoddi4+0x28e>
 80010fe:	3902      	subs	r1, #2
 8001100:	4462      	add	r2, ip
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	fbb2 f0f7 	udiv	r0, r2, r7
 8001108:	fb07 2210 	mls	r2, r7, r0, r2
 800110c:	fb00 f505 	mul.w	r5, r0, r5
 8001110:	b2a4      	uxth	r4, r4
 8001112:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001116:	42a5      	cmp	r5, r4
 8001118:	d90a      	bls.n	8001130 <__udivmoddi4+0x94>
 800111a:	eb1c 0404 	adds.w	r4, ip, r4
 800111e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001122:	f080 8104 	bcs.w	800132e <__udivmoddi4+0x292>
 8001126:	42a5      	cmp	r5, r4
 8001128:	f240 8101 	bls.w	800132e <__udivmoddi4+0x292>
 800112c:	4464      	add	r4, ip
 800112e:	3802      	subs	r0, #2
 8001130:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001134:	2100      	movs	r1, #0
 8001136:	1b64      	subs	r4, r4, r5
 8001138:	b11e      	cbz	r6, 8001142 <__udivmoddi4+0xa6>
 800113a:	40dc      	lsrs	r4, r3
 800113c:	2300      	movs	r3, #0
 800113e:	e9c6 4300 	strd	r4, r3, [r6]
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001146:	428b      	cmp	r3, r1
 8001148:	d908      	bls.n	800115c <__udivmoddi4+0xc0>
 800114a:	2e00      	cmp	r6, #0
 800114c:	f000 80ea 	beq.w	8001324 <__udivmoddi4+0x288>
 8001150:	2100      	movs	r1, #0
 8001152:	e9c6 0500 	strd	r0, r5, [r6]
 8001156:	4608      	mov	r0, r1
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	fab3 f183 	clz	r1, r3
 8001160:	2900      	cmp	r1, #0
 8001162:	d148      	bne.n	80011f6 <__udivmoddi4+0x15a>
 8001164:	42ab      	cmp	r3, r5
 8001166:	d302      	bcc.n	800116e <__udivmoddi4+0xd2>
 8001168:	4282      	cmp	r2, r0
 800116a:	f200 80f8 	bhi.w	800135e <__udivmoddi4+0x2c2>
 800116e:	1a84      	subs	r4, r0, r2
 8001170:	eb65 0203 	sbc.w	r2, r5, r3
 8001174:	2001      	movs	r0, #1
 8001176:	4696      	mov	lr, r2
 8001178:	2e00      	cmp	r6, #0
 800117a:	d0e2      	beq.n	8001142 <__udivmoddi4+0xa6>
 800117c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001180:	e7df      	b.n	8001142 <__udivmoddi4+0xa6>
 8001182:	b902      	cbnz	r2, 8001186 <__udivmoddi4+0xea>
 8001184:	deff      	udf	#255	; 0xff
 8001186:	fab2 f382 	clz	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 808e 	bne.w	80012ac <__udivmoddi4+0x210>
 8001190:	1a88      	subs	r0, r1, r2
 8001192:	2101      	movs	r1, #1
 8001194:	0c17      	lsrs	r7, r2, #16
 8001196:	fa1f fe82 	uxth.w	lr, r2
 800119a:	fbb0 f5f7 	udiv	r5, r0, r7
 800119e:	fb07 0015 	mls	r0, r7, r5, r0
 80011a2:	0c22      	lsrs	r2, r4, #16
 80011a4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011a8:	fb0e f005 	mul.w	r0, lr, r5
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x126>
 80011b0:	eb1c 0202 	adds.w	r2, ip, r2
 80011b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80011b8:	d202      	bcs.n	80011c0 <__udivmoddi4+0x124>
 80011ba:	4290      	cmp	r0, r2
 80011bc:	f200 80cc 	bhi.w	8001358 <__udivmoddi4+0x2bc>
 80011c0:	4645      	mov	r5, r8
 80011c2:	1a12      	subs	r2, r2, r0
 80011c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011c8:	fb07 2210 	mls	r2, r7, r0, r2
 80011cc:	fb0e fe00 	mul.w	lr, lr, r0
 80011d0:	b2a4      	uxth	r4, r4
 80011d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011d6:	45a6      	cmp	lr, r4
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0x150>
 80011da:	eb1c 0404 	adds.w	r4, ip, r4
 80011de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x14e>
 80011e4:	45a6      	cmp	lr, r4
 80011e6:	f200 80b4 	bhi.w	8001352 <__udivmoddi4+0x2b6>
 80011ea:	4610      	mov	r0, r2
 80011ec:	eba4 040e 	sub.w	r4, r4, lr
 80011f0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f4:	e7a0      	b.n	8001138 <__udivmoddi4+0x9c>
 80011f6:	f1c1 0720 	rsb	r7, r1, #32
 80011fa:	408b      	lsls	r3, r1
 80011fc:	fa22 fc07 	lsr.w	ip, r2, r7
 8001200:	ea4c 0c03 	orr.w	ip, ip, r3
 8001204:	fa25 fa07 	lsr.w	sl, r5, r7
 8001208:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800120c:	fbba f8f9 	udiv	r8, sl, r9
 8001210:	408d      	lsls	r5, r1
 8001212:	fa20 f307 	lsr.w	r3, r0, r7
 8001216:	fb09 aa18 	mls	sl, r9, r8, sl
 800121a:	fa1f fe8c 	uxth.w	lr, ip
 800121e:	432b      	orrs	r3, r5
 8001220:	fa00 f501 	lsl.w	r5, r0, r1
 8001224:	fb08 f00e 	mul.w	r0, r8, lr
 8001228:	0c1c      	lsrs	r4, r3, #16
 800122a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800122e:	42a0      	cmp	r0, r4
 8001230:	fa02 f201 	lsl.w	r2, r2, r1
 8001234:	d90b      	bls.n	800124e <__udivmoddi4+0x1b2>
 8001236:	eb1c 0404 	adds.w	r4, ip, r4
 800123a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800123e:	f080 8086 	bcs.w	800134e <__udivmoddi4+0x2b2>
 8001242:	42a0      	cmp	r0, r4
 8001244:	f240 8083 	bls.w	800134e <__udivmoddi4+0x2b2>
 8001248:	f1a8 0802 	sub.w	r8, r8, #2
 800124c:	4464      	add	r4, ip
 800124e:	1a24      	subs	r4, r4, r0
 8001250:	b298      	uxth	r0, r3
 8001252:	fbb4 f3f9 	udiv	r3, r4, r9
 8001256:	fb09 4413 	mls	r4, r9, r3, r4
 800125a:	fb03 fe0e 	mul.w	lr, r3, lr
 800125e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001262:	45a6      	cmp	lr, r4
 8001264:	d908      	bls.n	8001278 <__udivmoddi4+0x1dc>
 8001266:	eb1c 0404 	adds.w	r4, ip, r4
 800126a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800126e:	d26a      	bcs.n	8001346 <__udivmoddi4+0x2aa>
 8001270:	45a6      	cmp	lr, r4
 8001272:	d968      	bls.n	8001346 <__udivmoddi4+0x2aa>
 8001274:	3b02      	subs	r3, #2
 8001276:	4464      	add	r4, ip
 8001278:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800127c:	fba0 9302 	umull	r9, r3, r0, r2
 8001280:	eba4 040e 	sub.w	r4, r4, lr
 8001284:	429c      	cmp	r4, r3
 8001286:	46c8      	mov	r8, r9
 8001288:	469e      	mov	lr, r3
 800128a:	d354      	bcc.n	8001336 <__udivmoddi4+0x29a>
 800128c:	d051      	beq.n	8001332 <__udivmoddi4+0x296>
 800128e:	2e00      	cmp	r6, #0
 8001290:	d067      	beq.n	8001362 <__udivmoddi4+0x2c6>
 8001292:	ebb5 0308 	subs.w	r3, r5, r8
 8001296:	eb64 040e 	sbc.w	r4, r4, lr
 800129a:	40cb      	lsrs	r3, r1
 800129c:	fa04 f707 	lsl.w	r7, r4, r7
 80012a0:	431f      	orrs	r7, r3
 80012a2:	40cc      	lsrs	r4, r1
 80012a4:	e9c6 7400 	strd	r7, r4, [r6]
 80012a8:	2100      	movs	r1, #0
 80012aa:	e74a      	b.n	8001142 <__udivmoddi4+0xa6>
 80012ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b0:	f1c3 0020 	rsb	r0, r3, #32
 80012b4:	40c1      	lsrs	r1, r0
 80012b6:	409d      	lsls	r5, r3
 80012b8:	fa24 f000 	lsr.w	r0, r4, r0
 80012bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c0:	4328      	orrs	r0, r5
 80012c2:	fbb1 f5f7 	udiv	r5, r1, r7
 80012c6:	fb07 1115 	mls	r1, r7, r5, r1
 80012ca:	fa1f fe8c 	uxth.w	lr, ip
 80012ce:	0c02      	lsrs	r2, r0, #16
 80012d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d4:	fb05 f10e 	mul.w	r1, r5, lr
 80012d8:	4291      	cmp	r1, r2
 80012da:	fa04 f403 	lsl.w	r4, r4, r3
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x256>
 80012e0:	eb1c 0202 	adds.w	r2, ip, r2
 80012e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80012e8:	d22f      	bcs.n	800134a <__udivmoddi4+0x2ae>
 80012ea:	4291      	cmp	r1, r2
 80012ec:	d92d      	bls.n	800134a <__udivmoddi4+0x2ae>
 80012ee:	3d02      	subs	r5, #2
 80012f0:	4462      	add	r2, ip
 80012f2:	1a52      	subs	r2, r2, r1
 80012f4:	fbb2 f1f7 	udiv	r1, r2, r7
 80012f8:	fb07 2211 	mls	r2, r7, r1, r2
 80012fc:	b280      	uxth	r0, r0
 80012fe:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001302:	fb01 f20e 	mul.w	r2, r1, lr
 8001306:	4282      	cmp	r2, r0
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x280>
 800130a:	eb1c 0000 	adds.w	r0, ip, r0
 800130e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001312:	d216      	bcs.n	8001342 <__udivmoddi4+0x2a6>
 8001314:	4282      	cmp	r2, r0
 8001316:	d914      	bls.n	8001342 <__udivmoddi4+0x2a6>
 8001318:	3902      	subs	r1, #2
 800131a:	4460      	add	r0, ip
 800131c:	1a80      	subs	r0, r0, r2
 800131e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001322:	e73a      	b.n	800119a <__udivmoddi4+0xfe>
 8001324:	4631      	mov	r1, r6
 8001326:	4630      	mov	r0, r6
 8001328:	e70b      	b.n	8001142 <__udivmoddi4+0xa6>
 800132a:	4671      	mov	r1, lr
 800132c:	e6e9      	b.n	8001102 <__udivmoddi4+0x66>
 800132e:	4610      	mov	r0, r2
 8001330:	e6fe      	b.n	8001130 <__udivmoddi4+0x94>
 8001332:	454d      	cmp	r5, r9
 8001334:	d2ab      	bcs.n	800128e <__udivmoddi4+0x1f2>
 8001336:	ebb9 0802 	subs.w	r8, r9, r2
 800133a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800133e:	3801      	subs	r0, #1
 8001340:	e7a5      	b.n	800128e <__udivmoddi4+0x1f2>
 8001342:	4641      	mov	r1, r8
 8001344:	e7ea      	b.n	800131c <__udivmoddi4+0x280>
 8001346:	4603      	mov	r3, r0
 8001348:	e796      	b.n	8001278 <__udivmoddi4+0x1dc>
 800134a:	4645      	mov	r5, r8
 800134c:	e7d1      	b.n	80012f2 <__udivmoddi4+0x256>
 800134e:	46d0      	mov	r8, sl
 8001350:	e77d      	b.n	800124e <__udivmoddi4+0x1b2>
 8001352:	4464      	add	r4, ip
 8001354:	3802      	subs	r0, #2
 8001356:	e749      	b.n	80011ec <__udivmoddi4+0x150>
 8001358:	3d02      	subs	r5, #2
 800135a:	4462      	add	r2, ip
 800135c:	e731      	b.n	80011c2 <__udivmoddi4+0x126>
 800135e:	4608      	mov	r0, r1
 8001360:	e70a      	b.n	8001178 <__udivmoddi4+0xdc>
 8001362:	4631      	mov	r1, r6
 8001364:	e6ed      	b.n	8001142 <__udivmoddi4+0xa6>
 8001366:	bf00      	nop

08001368 <__aeabi_idiv0>:
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 8001378:	2310      	movs	r3, #16
 800137a:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 800137c:	2300      	movs	r3, #0
 800137e:	737b      	strb	r3, [r7, #13]
 8001380:	e018      	b.n	80013b4 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	09db      	lsrs	r3, r3, #7
 8001386:	b29a      	uxth	r2, r3
 8001388:	7b7b      	ldrb	r3, [r7, #13]
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	440b      	add	r3, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4053      	eors	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b29a      	uxth	r2, r3
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	490a      	ldr	r1, [pc, #40]	; (80013cc <LTC_PEC15_Calc+0x60>)
 80013a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4053      	eors	r3, r2
 80013ac:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	3301      	adds	r3, #1
 80013b2:	737b      	strb	r3, [r7, #13]
 80013b4:	7b7a      	ldrb	r2, [r7, #13]
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3e2      	bcc.n	8001382 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	b29b      	uxth	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	0800a490 	.word	0x0800a490

080013d0 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	if (num)
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <LTC_Set_Num_Devices+0x20>)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	7013      	strb	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	200001e8 	.word	0x200001e8

080013f4 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	return num_devices;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <LTC_Get_Num_Devices+0x10>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200001e8 	.word	0x200001e8

08001408 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <LTC_Set_Num_Series_Groups+0x1c>
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d802      	bhi.n	8001424 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <LTC_Set_Num_Series_Groups+0x28>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	7013      	strb	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200001e9 	.word	0x200001e9

08001434 <LTC_Wakeup_Idle>:
uint8_t LTC_Get_Num_Series_Groups(void) {
	return num_series_groups;
}

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	71bb      	strb	r3, [r7, #6]

	LTC_nCS_Low(); //Pull CS low
 8001442:	f000 ff2b 	bl	800229c <LTC_nCS_Low>

	for (int i = 0; i < num_devices; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e019      	b.n	8001480 <LTC_Wakeup_Idle+0x4c>
		hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 800144c:	1db9      	adds	r1, r7, #6
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	2201      	movs	r2, #1
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <LTC_Wakeup_Idle+0x68>)
 8001454:	f003 ff6a 	bl	800532c <HAL_SPI_Transmit>
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
		if (hal_ret) { //Non-zero means error
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <LTC_Wakeup_Idle+0x46>
			//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2200      	movs	r2, #0
 8001466:	4413      	add	r3, r2
 8001468:	2201      	movs	r2, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	b25a      	sxtb	r2, r3
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	4313      	orrs	r3, r2
 8001476:	b25b      	sxtb	r3, r3
 8001478:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < num_devices; i++) {
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <LTC_Wakeup_Idle+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4293      	cmp	r3, r2
 800148a:	dbdf      	blt.n	800144c <LTC_Wakeup_Idle+0x18>
		}
	}

	LTC_nCS_High(); //Pull CS high
 800148c:	f000 fefa 	bl	8002284 <LTC_nCS_High>

	return ret;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002a0 	.word	0x200002a0
 80014a0:	200001e8 	.word	0x200001e8

080014a4 <getActualTemps>:
	}

	return ret;
}

void getActualTemps(float *actual_temp, uint16_t *read_temp) {
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	//put first 5 into actual temps
	for (int i = 0; i < 5; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e035      	b.n	8001520 <getActualTemps+0x7c>
		float x = (float)log(read_temp[i]);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fffc 	bl	80004bc <__aeabi_ui2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f008 fdb8 	bl	800a040 <log>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb1a 	bl	8000b10 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	60fb      	str	r3, [r7, #12]
		float bottom = x - LN_RT1 - C;
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <getActualTemps+0x10c>)
 80014e2:	4619      	mov	r1, r3
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fb67 	bl	8000bb8 <__aeabi_fsub>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <getActualTemps+0x110>)
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7ff fb60 	bl	8000bb8 <__aeabi_fsub>
 80014f8:	4603      	mov	r3, r0
 80014fa:	60bb      	str	r3, [r7, #8]
		actual_temp[i] = -BETA/bottom;
 80014fc:	f241 0336 	movw	r3, #4150	; 0x1036
 8001500:	425b      	negs	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fc0e 	bl	8000d24 <__aeabi_i2f>
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	18d4      	adds	r4, r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	f7ff fd0f 	bl	8000f34 <__aeabi_fdiv>
 8001516:	4603      	mov	r3, r0
 8001518:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 5; i++) {
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b04      	cmp	r3, #4
 8001524:	ddc6      	ble.n	80014b4 <getActualTemps+0x10>
	}
	//put 2nd set of 5 into actual temps
	for (int i = 6; i < 11; i++) {
 8001526:	2306      	movs	r3, #6
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	e038      	b.n	800159e <getActualTemps+0xfa>
		float x = (float)log(read_temp[i]);
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffc0 	bl	80004bc <__aeabi_ui2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f008 fd7c 	bl	800a040 <log>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fade 	bl	8000b10 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	617b      	str	r3, [r7, #20]
		float bottom = x - LN_RT1 - C;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <getActualTemps+0x10c>)
 800155a:	4619      	mov	r1, r3
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f7ff fb2b 	bl	8000bb8 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <getActualTemps+0x110>)
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff fb24 	bl	8000bb8 <__aeabi_fsub>
 8001570:	4603      	mov	r3, r0
 8001572:	613b      	str	r3, [r7, #16]
		actual_temp[i-1] = -BETA/bottom;
 8001574:	f241 0336 	movw	r3, #4150	; 0x1036
 8001578:	425b      	negs	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fbd2 	bl	8000d24 <__aeabi_i2f>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001586:	3b01      	subs	r3, #1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	18d4      	adds	r4, r2, r3
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	f7ff fcd0 	bl	8000f34 <__aeabi_fdiv>
 8001594:	4603      	mov	r3, r0
 8001596:	6023      	str	r3, [r4, #0]
	for (int i = 6; i < 11; i++) {
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3301      	adds	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b0a      	cmp	r3, #10
 80015a2:	ddc3      	ble.n	800152c <getActualTemps+0x88>
	}

}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	413834f1 	.word	0x413834f1
 80015b4:	43260000 	.word	0x43260000

080015b8 <LTC_ReadRawCellTemps>:

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 80015b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015bc:	b089      	sub	sp, #36	; 0x24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	466b      	mov	r3, sp
 80015c4:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 80015ca:	f7ff ff13 	bl	80013f4 <LTC_Get_Num_Devices>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	2308      	movs	r3, #8
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 80015da:	7f3b      	ldrb	r3, [r7, #28]
 80015dc:	3b01      	subs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	7f3b      	ldrb	r3, [r7, #28]
 80015e2:	2200      	movs	r2, #0
 80015e4:	4698      	mov	r8, r3
 80015e6:	4691      	mov	r9, r2
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015fc:	7f3b      	ldrb	r3, [r7, #28]
 80015fe:	2200      	movs	r2, #0
 8001600:	461c      	mov	r4, r3
 8001602:	4615      	mov	r5, r2
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	00eb      	lsls	r3, r5, #3
 800160e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001612:	00e2      	lsls	r2, r4, #3
 8001614:	7f3b      	ldrb	r3, [r7, #28]
 8001616:	3307      	adds	r3, #7
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	ebad 0d03 	sub.w	sp, sp, r3
 8001620:	466b      	mov	r3, sp
 8001622:	3300      	adds	r3, #0
 8001624:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	77bb      	strb	r3, [r7, #30]
 800162a:	e081      	b.n	8001730 <LTC_ReadRawCellTemps+0x178>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 800162c:	7fbb      	ldrb	r3, [r7, #30]
 800162e:	4a48      	ldr	r2, [pc, #288]	; (8001750 <LTC_ReadRawCellTemps+0x198>)
 8001630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	4a44      	ldr	r2, [pc, #272]	; (8001750 <LTC_ReadRawCellTemps+0x198>)
 8001640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff fe8c 	bl	800136c <LTC_PEC15_Calc>
 8001654:	4603      	mov	r3, r0
 8001656:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001658:	8a7b      	ldrh	r3, [r7, #18]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 8001662:	8a7b      	ldrh	r3, [r7, #18]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	72fb      	strb	r3, [r7, #11]

		ret |= LTC_Wakeup_Idle(); //Wake LTC up
 8001668:	f7ff fee4 	bl	8001434 <LTC_Wakeup_Idle>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	4313      	orrs	r3, r2
 8001674:	77fb      	strb	r3, [r7, #31]

		LTC_nCS_Low(); //Pull CS low
 8001676:	f000 fe11 	bl	800229c <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 800167a:	f107 0108 	add.w	r1, r7, #8
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	2204      	movs	r2, #4
 8001682:	4834      	ldr	r0, [pc, #208]	; (8001754 <LTC_ReadRawCellTemps+0x19c>)
 8001684:	f003 fe52 	bl	800532c <HAL_SPI_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 800168c:	7c7b      	ldrb	r3, [r7, #17]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <LTC_ReadRawCellTemps+0xf2>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 8001692:	7c7b      	ldrb	r3, [r7, #17]
 8001694:	2200      	movs	r2, #0
 8001696:	4413      	add	r3, r2
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 80016aa:	7f3b      	ldrb	r3, [r7, #28]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	6979      	ldr	r1, [r7, #20]
 80016b2:	4828      	ldr	r0, [pc, #160]	; (8001754 <LTC_ReadRawCellTemps+0x19c>)
 80016b4:	f003 ff7d 	bl	80055b2 <HAL_SPI_Receive>
 80016b8:	4603      	mov	r3, r0
 80016ba:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 80016bc:	7c7b      	ldrb	r3, [r7, #17]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <LTC_ReadRawCellTemps+0x122>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 80016c2:	7c7b      	ldrb	r3, [r7, #17]
 80016c4:	2204      	movs	r2, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	2201      	movs	r2, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	777b      	strb	r3, [r7, #29]
 80016de:	e01b      	b.n	8001718 <LTC_ReadRawCellTemps+0x160>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 80016e0:	7f7b      	ldrb	r3, [r7, #29]
 80016e2:	2208      	movs	r2, #8
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]


			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 80016ee:	7f7b      	ldrb	r3, [r7, #29]
 80016f0:	2206      	movs	r2, #6
 80016f2:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 80016f6:	7fbb      	ldrb	r3, [r7, #30]
 80016f8:	2103      	movs	r1, #3
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
					REG_LEN - 2);
 8001706:	2208      	movs	r2, #8
 8001708:	3a02      	subs	r2, #2
			memcpy(
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f008 f839 	bl	8009784 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8001712:	7f7b      	ldrb	r3, [r7, #29]
 8001714:	3301      	adds	r3, #1
 8001716:	777b      	strb	r3, [r7, #29]
 8001718:	f7ff fe6c 	bl	80013f4 <LTC_Get_Num_Devices>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	7f7b      	ldrb	r3, [r7, #29]
 8001722:	4293      	cmp	r3, r2
 8001724:	d3dc      	bcc.n	80016e0 <LTC_ReadRawCellTemps+0x128>
		}

		LTC_nCS_High(); //Pull CS high
 8001726:	f000 fdad 	bl	8002284 <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 800172a:	7fbb      	ldrb	r3, [r7, #30]
 800172c:	3301      	adds	r3, #1
 800172e:	77bb      	strb	r3, [r7, #30]
 8001730:	2206      	movs	r2, #6
 8001732:	2303      	movs	r3, #3
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	7fba      	ldrb	r2, [r7, #30]
 800173c:	429a      	cmp	r2, r3
 800173e:	f4ff af75 	bcc.w	800162c <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	46b5      	mov	sp, r6
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001750:	0800a48c 	.word	0x0800a48c
 8001754:	200002a0 	.word	0x200002a0

08001758 <LTC_ADAX>:
	LTC_nCS_High();
}

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	105b      	asrs	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3304      	adds	r3, #4
 8001778:	b2db      	uxtb	r3, r3
 800177a:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	01db      	lsls	r3, r3, #7
 8001780:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	4413      	add	r3, r2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	3360      	adds	r3, #96	; 0x60
 800178c:	b2db      	uxtb	r3, r3
 800178e:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4619      	mov	r1, r3
 8001796:	2002      	movs	r0, #2
 8001798:	f7ff fde8 	bl	800136c <LTC_PEC15_Calc>
 800179c:	4603      	mov	r3, r0
 800179e:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80017a0:	89bb      	ldrh	r3, [r7, #12]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 80017b0:	f7ff fe40 	bl	8001434 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 80017b4:	f000 fd72 	bl	800229c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80017b8:	f107 0108 	add.w	r1, r7, #8
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	2204      	movs	r2, #4
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <LTC_ADAX+0x7c>)
 80017c2:	f003 fdb3 	bl	800532c <HAL_SPI_Transmit>
	LTC_nCS_High();
 80017c6:	f000 fd5d 	bl	8002284 <LTC_nCS_High>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002a0 	.word	0x200002a0

080017d8 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 80017ea:	2307      	movs	r3, #7
 80017ec:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 80017ee:	2314      	movs	r3, #20
 80017f0:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	2002      	movs	r0, #2
 80017f8:	f7ff fdb8 	bl	800136c <LTC_PEC15_Calc>
 80017fc:	4603      	mov	r3, r0
 80017fe:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8001800:	893b      	ldrh	r3, [r7, #8]
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	b29b      	uxth	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 800180a:	893b      	ldrh	r3, [r7, #8]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 8001810:	f7ff fe10 	bl	8001434 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 8001814:	f000 fd42 	bl	800229c <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001818:	1d39      	adds	r1, r7, #4
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	2204      	movs	r2, #4
 800181e:	480f      	ldr	r0, [pc, #60]	; (800185c <LTC_PollAdc+0x84>)
 8001820:	f003 fd84 	bl	800532c <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001824:	e00c      	b.n	8001840 <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 8001826:	f000 ff91 	bl	800274c <HAL_GetTick>
 800182a:	4603      	mov	r3, r0
 800182c:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800182e:	7abb      	ldrb	r3, [r7, #10]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <LTC_PollAdc+0x62>
			finished = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	72fb      	strb	r3, [r7, #11]
 8001838:	e002      	b.n	8001840 <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	330a      	adds	r3, #10
 800183e:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <LTC_PollAdc+0x88>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d802      	bhi.n	800184e <LTC_PollAdc+0x76>
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0eb      	beq.n	8001826 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 800184e:	f000 fd19 	bl	8002284 <LTC_nCS_High>
	return (counter);
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200002a0 	.word	0x200002a0
 8001860:	00030d3f 	.word	0x00030d3f

08001864 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_ADC1_Init+0x74>)
 8001876:	4a19      	ldr	r2, [pc, #100]	; (80018dc <MX_ADC1_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_ADC1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_ADC1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_ADC1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_ADC1_Init+0x74>)
 800188e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001892:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_ADC1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_ADC1_Init+0x74>)
 800189c:	2201      	movs	r2, #1
 800189e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_ADC1_Init+0x74>)
 80018a2:	f000 ff81 	bl	80027a8 <HAL_ADC_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018ac:	f000 fc64 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018b0:	230e      	movs	r3, #14
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_ADC1_Init+0x74>)
 80018c2:	f001 f849 	bl	8002958 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018cc:	f000 fc54 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200001ec 	.word	0x200001ec
 80018dc:	40012400 	.word	0x40012400

080018e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_ADC2_Init+0x74>)
 80018f2:	4a19      	ldr	r2, [pc, #100]	; (8001958 <MX_ADC2_Init+0x78>)
 80018f4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_ADC2_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_ADC2_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_ADC2_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_ADC2_Init+0x74>)
 800190a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800190e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_ADC2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_ADC2_Init+0x74>)
 8001918:	2201      	movs	r2, #1
 800191a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_ADC2_Init+0x74>)
 800191e:	f000 ff43 	bl	80027a8 <HAL_ADC_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 fc26 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800192c:	230a      	movs	r3, #10
 800192e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001930:	2301      	movs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_ADC2_Init+0x74>)
 800193e:	f001 f80b 	bl	8002958 <HAL_ADC_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001948:	f000 fc16 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000021c 	.word	0x2000021c
 8001958:	40012800 	.word	0x40012800

0800195c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_ADC_MspInit+0xbc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d122      	bne.n	80019c2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019ac:	2330      	movs	r3, #48	; 0x30
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0318 	add.w	r3, r7, #24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4819      	ldr	r0, [pc, #100]	; (8001a20 <HAL_ADC_MspInit+0xc4>)
 80019bc:	f001 fb0e 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80019c0:	e026      	b.n	8001a10 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_ADC_MspInit+0xc8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d121      	bne.n	8001a10 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_ADC_MspInit+0xc0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019fc:	230f      	movs	r3, #15
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a00:	2303      	movs	r3, #3
 8001a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_ADC_MspInit+0xc4>)
 8001a0c:	f001 fae6 	bl	8002fdc <HAL_GPIO_Init>
}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40012400 	.word	0x40012400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40011000 	.word	0x40011000
 8001a24:	40012800 	.word	0x40012800

08001a28 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_CAN1_Init+0x64>)
 8001a30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a34:	2210      	movs	r2, #16
 8001a36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_CAN1_Init+0x60>)
 8001a76:	f001 f8a8 	bl	8002bca <HAL_CAN_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 fb7a 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000024c 	.word	0x2000024c
 8001a8c:	40006400 	.word	0x40006400

08001a90 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <MX_CAN2_Init+0x64>)
 8001a98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001aac:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_CAN2_Init+0x60>)
 8001ade:	f001 f874 	bl	8002bca <HAL_CAN_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001ae8:	f000 fb46 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000274 	.word	0x20000274
 8001af4:	40006800 	.word	0x40006800

08001af8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <HAL_CAN_MspInit+0x15c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d14d      	bne.n	8001bb4 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a4e      	ldr	r2, [pc, #312]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001b20:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10b      	bne.n	8001b42 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6193      	str	r3, [r2, #24]
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	483c      	ldr	r0, [pc, #240]	; (8001c60 <HAL_CAN_MspInit+0x168>)
 8001b70:	f001 fa34 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	4835      	ldr	r0, [pc, #212]	; (8001c60 <HAL_CAN_MspInit+0x168>)
 8001b8a:	f001 fa27 	bl	8002fdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001b8e:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_CAN_MspInit+0x16c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bac:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_CAN_MspInit+0x16c>)
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001bb2:	e04b      	b.n	8001c4c <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_CAN_MspInit+0x170>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d146      	bne.n	8001c4c <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001bbe:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001bde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_CAN_MspInit+0x160>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10b      	bne.n	8001c00 <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	61d3      	str	r3, [r2, #28]
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_CAN_MspInit+0x164>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <HAL_CAN_MspInit+0x168>)
 8001c2e:	f001 f9d5 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <HAL_CAN_MspInit+0x168>)
 8001c48:	f001 f9c8 	bl	8002fdc <HAL_GPIO_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40006400 	.word	0x40006400
 8001c58:	2000029c 	.word	0x2000029c
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40006800 	.word	0x40006800

08001c6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001c86:	f043 0310 	orr.w	r3, r3, #16
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_GPIO_Init+0xe4>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_GPIO_Init+0xe8>)
 8001ce6:	f001 fafd 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	481a      	ldr	r0, [pc, #104]	; (8001d58 <MX_GPIO_Init+0xec>)
 8001cf0:	f001 faf8 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4812      	ldr	r0, [pc, #72]	; (8001d54 <MX_GPIO_Init+0xe8>)
 8001d0c:	f001 f966 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4619      	mov	r1, r3
 8001d26:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_GPIO_Init+0xec>)
 8001d28:	f001 f958 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8001d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_GPIO_Init+0xec>)
 8001d42:	f001 f94b 	bl	8002fdc <HAL_GPIO_Init>

}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40011000 	.word	0x40011000

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d66:	f000 fc99 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6a:	f000 f929 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6e:	f7ff ff7d 	bl	8001c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d72:	f7ff fd77 	bl	8001864 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d76:	f7ff fdb3 	bl	80018e0 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001d7a:	f7ff fe55 	bl	8001a28 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001d7e:	f7ff fe87 	bl	8001a90 <MX_CAN2_Init>
  MX_TIM7_Init();
 8001d82:	f000 fb37 	bl	80023f4 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001d86:	f000 f9fd 	bl	8002184 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001d8a:	f000 fb87 	bl	800249c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001d8e:	f000 fbaf 	bl	80024f0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001d92:	f006 ffa7 	bl	8008ce4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin);
 8001d96:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001d9a:	f103 0310 	add.w	r3, r3, #16
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	4983      	ldr	r1, [pc, #524]	; (8001fb0 <main+0x254>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f978 	bl	8002098 <GpioTimePacket_Init>
  TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8001da8:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001dac:	f103 0304 	add.w	r3, r3, #4
 8001db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f9af 	bl	8002118 <TimerPacket_Init>

  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8001dba:	f000 fa63 	bl	8002284 <LTC_nCS_High>
  LTC_Set_Num_Devices(NUM_DEVICES);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f7ff fb06 	bl	80013d0 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f7ff fb1f 	bl	8001408 <LTC_Set_Num_Series_Groups>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001dca:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001dce:	f103 0310 	add.w	r3, r3, #16
 8001dd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f97b 	bl	80020d2 <GpioFixedToggle>

		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8001ddc:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001de0:	f103 0304 	add.w	r3, r3, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f9aa 	bl	800213e <TimerPacket_FixedPulse>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ec      	beq.n	8001dca <main+0x6e>
			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8001df0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001df4:	2200      	movs	r2, #0
 8001df6:	f843 2ce8 	str.w	r2, [r3, #-232]
 8001dfa:	3be4      	subs	r3, #228	; 0xe4
 8001dfc:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f007 fc89 	bl	800971a <memset>
			char char_to_str[2];
			int packvoltage = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001e0e:	6013      	str	r3, [r2, #0]
//			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
//			strncat(out_buf, packV, 30);
//			strncat(out_buf, char_to_str, 2);
//
//
			char_to_str[0] = '\n';
 8001e10:	230a      	movs	r3, #10
 8001e12:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e16:	f102 0214 	add.w	r2, r2, #20
 8001e1a:	7013      	strb	r3, [r2, #0]
			char_to_str[1] = '\0';
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e22:	f102 0215 	add.w	r2, r2, #21
 8001e26:	7013      	strb	r3, [r2, #0]
//			strncat(out_buf, char_to_str, 2);
//
//			USB_Transmit(out_buf, strlen(out_buf));

			char buf2[20];
			char out_buf2[2048] = "";
 8001e28:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e2c:	f103 0308 	add.w	r3, r3, #8
 8001e30:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f007 fc6a 	bl	800971a <memset>

			LTC_Wakeup_Idle();
 8001e46:	f7ff faf5 	bl	8001434 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, AUX_CH_ALL);
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fc81 	bl	8001758 <LTC_ADAX>
			LTC_PollAdc();
 8001e56:	f7ff fcbf 	bl	80017d8 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t *) read_temp); // Set to read back all aux registers
 8001e5a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001e5e:	f103 031c 	add.w	r3, r3, #28
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fba8 	bl	80015b8 <LTC_ReadRawCellTemps>
			for (uint8_t i = 0; i < 12; i++) {
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001e6e:	f102 0207 	add.w	r2, r2, #7
 8001e72:	7013      	strb	r3, [r2, #0]
 8001e74:	e07c      	b.n	8001f70 <main+0x214>
				if((i+1)%6 != 0){
 8001e76:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e7a:	f103 0307 	add.w	r3, r3, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <main+0x258>)
 8001e84:	fb83 3201 	smull	r3, r2, r3, r1
 8001e88:	17cb      	asrs	r3, r1, #31
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	1aca      	subs	r2, r1, r3
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d02a      	beq.n	8001ef0 <main+0x194>
					sprintf(buf2, "C%u:%u C", i+1, read_temp[i]);
 8001e9a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e9e:	f103 0307 	add.w	r3, r3, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001eaa:	f103 0307 	add.w	r3, r3, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001eb6:	f103 0308 	add.w	r3, r3, #8
 8001eba:	443b      	add	r3, r7
 8001ebc:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8001ec0:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001ec4:	493c      	ldr	r1, [pc, #240]	; (8001fb8 <main+0x25c>)
 8001ec6:	f007 fbf5 	bl	80096b4 <siprintf>
					strncat(out_buf2, buf2, 20);
 8001eca:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001ece:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001ed2:	2214      	movs	r2, #20
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 fc0d 	bl	80096f4 <strncat>
					strncat(out_buf2, char_to_str, 2);
 8001eda:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001ede:	f101 0114 	add.w	r1, r1, #20
 8001ee2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 fc03 	bl	80096f4 <strncat>
 8001eee:	e034      	b.n	8001f5a <main+0x1fe>
				}
				else{
					getActualTemps(actual_temp, read_temp);
 8001ef0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ef4:	f102 021c 	add.w	r2, r2, #28
 8001ef8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001efc:	f103 030c 	add.w	r3, r3, #12
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff face 	bl	80014a4 <getActualTemps>
					//sprintf(buf2, "Vref:%u", read_temp[i]);
					sprintf(buf2, "temp: %0.2f", actual_temp[i]);
 8001f08:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f0c:	f103 0307 	add.w	r3, r3, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001f18:	f103 0308 	add.w	r3, r3, #8
 8001f1c:	443b      	add	r3, r7
 8001f1e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe faec 	bl	8000500 <__aeabi_f2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
 8001f30:	4922      	ldr	r1, [pc, #136]	; (8001fbc <main+0x260>)
 8001f32:	f007 fbbf 	bl	80096b4 <siprintf>
					strncat(out_buf2, buf2, 20);
 8001f36:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f3a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f3e:	2214      	movs	r2, #20
 8001f40:	4618      	mov	r0, r3
 8001f42:	f007 fbd7 	bl	80096f4 <strncat>
					strncat(out_buf2, char_to_str, 2);
 8001f46:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f4a:	f101 0114 	add.w	r1, r1, #20
 8001f4e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f52:	2202      	movs	r2, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f007 fbcd 	bl	80096f4 <strncat>
			for (uint8_t i = 0; i < 12; i++) {
 8001f5a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f5e:	f103 0307 	add.w	r3, r3, #7
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001f6a:	f102 0207 	add.w	r2, r2, #7
 8001f6e:	7013      	strb	r3, [r2, #0]
 8001f70:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f74:	f103 0307 	add.w	r3, r3, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b0b      	cmp	r3, #11
 8001f7c:	f67f af7b 	bls.w	8001e76 <main+0x11a>
				}
			}
			strncat(out_buf2, char_to_str, 2);
 8001f80:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f84:	f101 0114 	add.w	r1, r1, #20
 8001f88:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f007 fbb0 	bl	80096f4 <strncat>
			USB_Transmit(out_buf2, strlen(out_buf2));
 8001f94:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe f945 	bl	8000228 <strlen>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 fe8c 	bl	8008cc6 <USB_Transmit>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001fae:	e70c      	b.n	8001dca <main+0x6e>
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	2aaaaaab 	.word	0x2aaaaaab
 8001fb8:	0800a42c 	.word	0x0800a42c
 8001fbc:	0800a438 	.word	0x0800a438

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09c      	sub	sp, #112	; 0x70
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fca:	2238      	movs	r2, #56	; 0x38
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f007 fba3 	bl	800971a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f007 fb95 	bl	800971a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ffe:	2301      	movs	r3, #1
 8002000:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002012:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002016:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800201c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002020:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002022:	2340      	movs	r3, #64	; 0x40
 8002024:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fabc 	bl	80045a8 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002036:	f000 f89f 	bl	8002178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203a:	230f      	movs	r3, #15
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800203e:	2302      	movs	r3, #2
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	2102      	movs	r1, #2
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fdbc 	bl	8004bd4 <HAL_RCC_ClockConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002062:	f000 f889 	bl	8002178 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002066:	2312      	movs	r3, #18
 8002068:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800206a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f002 ffa2 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002082:	f000 f879 	bl	8002178 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002086:	4b03      	ldr	r3, [pc, #12]	; (8002094 <SystemClock_Config+0xd4>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	3770      	adds	r7, #112	; 0x70
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	42420070 	.word	0x42420070

08002098 <GpioTimePacket_Init>:
/* USER CODE BEGIN 4 */

//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	2200      	movs	r2, #0
 80020aa:	4619      	mov	r1, r3
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f001 f919 	bl	80032e4 <HAL_GPIO_WritePin>
	gtp->gpio_port	= port;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin	= pin;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev 	= 0; //Init to 0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
	gtp->ts_curr 	= 0; //Init to 0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <GpioFixedToggle>:

//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80020de:	f000 fb35 	bl	800274c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]

	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d90b      	bls.n	8002110 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f001 f906 	bl	8003314 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
	}
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <TimerPacket_Init>:

//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
	tp->ts_prev 	= 0;		//Init to 0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
	tp->ts_curr 	= 0; 		//Init to 0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
	tp->delay		= delay;	//Init to user value
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <TimerPacket_FixedPulse>:

//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 8002146:	f000 fb01 	bl	800274c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]

	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d905      	bls.n	800216e <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002180:	e7fe      	b.n	8002180 <Error_Handler+0x8>
	...

08002184 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_SPI1_Init+0x64>)
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <MX_SPI1_Init+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_SPI1_Init+0x64>)
 8002190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_SPI1_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_SPI1_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021b8:	2228      	movs	r2, #40	; 0x28
 80021ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021d0:	220a      	movs	r2, #10
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_SPI1_Init+0x64>)
 80021d6:	f003 f825 	bl	8005224 <HAL_SPI_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021e0:	f7ff ffca 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200002a0 	.word	0x200002a0
 80021ec:	40013000 	.word	0x40013000

080021f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <HAL_SPI_MspInit+0x88>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d12f      	bne.n	8002270 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_SPI_MspInit+0x8c>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_SPI_MspInit+0x8c>)
 8002216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_SPI_MspInit+0x8c>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_SPI_MspInit+0x8c>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_SPI_MspInit+0x8c>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_SPI_MspInit+0x8c>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002240:	23a0      	movs	r3, #160	; 0xa0
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	480b      	ldr	r0, [pc, #44]	; (8002280 <HAL_SPI_MspInit+0x90>)
 8002254:	f000 fec2 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_SPI_MspInit+0x90>)
 800226c:	f000 feb6 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013000 	.word	0x40013000
 800227c:	40021000 	.word	0x40021000
 8002280:	40010800 	.word	0x40010800

08002284 <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002288:	2201      	movs	r2, #1
 800228a:	2110      	movs	r1, #16
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <LTC_nCS_High+0x14>)
 800228e:	f001 f829 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010800 	.word	0x40010800

0800229c <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 80022a0:	2200      	movs	r2, #0
 80022a2:	2110      	movs	r1, #16
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <LTC_nCS_Low+0x14>)
 80022a6:	f001 f81d 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40010800 	.word	0x40010800

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_MspInit+0x5c>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_MspInit+0x5c>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_MspInit+0x5c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x5c>)
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_MspInit+0x5c>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	61d3      	str	r3, [r2, #28]
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_MspInit+0x5c>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_MspInit+0x60>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_MspInit+0x60>)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800235e:	f000 f9e3 	bl	8002728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <OTG_FS_IRQHandler+0x10>)
 800236e:	f001 f929 	bl	80035c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200010a0 	.word	0x200010a0

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f007 f9be 	bl	800972c <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20010000 	.word	0x20010000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	200002f8 	.word	0x200002f8
 80023e4:	20001910 	.word	0x20001910

080023e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	463b      	mov	r3, r7
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <MX_TIM7_Init+0x64>)
 8002404:	4a15      	ldr	r2, [pc, #84]	; (800245c <MX_TIM7_Init+0x68>)
 8002406:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_TIM7_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <MX_TIM7_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <MX_TIM7_Init+0x64>)
 8002416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_TIM7_Init+0x64>)
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <MX_TIM7_Init+0x64>)
 8002424:	f003 fc86 	bl	8005d34 <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800242e:	f7ff fea3 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM7_Init+0x64>)
 8002440:	f003 fd34 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800244a:	f7ff fe95 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002fc 	.word	0x200002fc
 800245c:	40001400 	.word	0x40001400

08002460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_TIM_Base_MspInit+0x34>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10b      	bne.n	800248a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_TIM_Base_MspInit+0x38>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_TIM_Base_MspInit+0x38>)
 8002478:	f043 0320 	orr.w	r3, r3, #32
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_TIM_Base_MspInit+0x38>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40001400 	.word	0x40001400
 8002498:	40021000 	.word	0x40021000

0800249c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <MX_USART2_UART_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024d4:	f003 fd50 	bl	8005f78 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024de:	f7ff fe4b 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000344 	.word	0x20000344
 80024ec:	40004400 	.word	0x40004400

080024f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_USART3_UART_Init+0x4c>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <MX_USART3_UART_Init+0x50>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <MX_USART3_UART_Init+0x4c>)
 80024fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002500:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_USART3_UART_Init+0x4c>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART3_UART_Init+0x4c>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_USART3_UART_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART3_UART_Init+0x4c>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_USART3_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART3_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_USART3_UART_Init+0x4c>)
 8002528:	f003 fd26 	bl	8005f78 <HAL_UART_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002532:	f7ff fe21 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000038c 	.word	0x2000038c
 8002540:	40004800 	.word	0x40004800

08002544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a37      	ldr	r2, [pc, #220]	; (800263c <HAL_UART_MspInit+0xf8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d130      	bne.n	80025c6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002564:	4b36      	ldr	r3, [pc, #216]	; (8002640 <HAL_UART_MspInit+0xfc>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4a35      	ldr	r2, [pc, #212]	; (8002640 <HAL_UART_MspInit+0xfc>)
 800256a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256e:	61d3      	str	r3, [r2, #28]
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_UART_MspInit+0xfc>)
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_UART_MspInit+0xfc>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <HAL_UART_MspInit+0xfc>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6193      	str	r3, [r2, #24]
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_UART_MspInit+0xfc>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002594:	2304      	movs	r3, #4
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 0318 	add.w	r3, r7, #24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4827      	ldr	r0, [pc, #156]	; (8002644 <HAL_UART_MspInit+0x100>)
 80025a8:	f000 fd18 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ac:	2308      	movs	r3, #8
 80025ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4619      	mov	r1, r3
 80025be:	4821      	ldr	r0, [pc, #132]	; (8002644 <HAL_UART_MspInit+0x100>)
 80025c0:	f000 fd0c 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025c4:	e036      	b.n	8002634 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_UART_MspInit+0x104>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d131      	bne.n	8002634 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025da:	61d3      	str	r3, [r2, #28]
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_UART_MspInit+0xfc>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0318 	add.w	r3, r7, #24
 8002612:	4619      	mov	r1, r3
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <HAL_UART_MspInit+0x108>)
 8002616:	f000 fce1 	bl	8002fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800261a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	4619      	mov	r1, r3
 800262e:	4807      	ldr	r0, [pc, #28]	; (800264c <HAL_UART_MspInit+0x108>)
 8002630:	f000 fcd4 	bl	8002fdc <HAL_GPIO_Init>
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40004400 	.word	0x40004400
 8002640:	40021000 	.word	0x40021000
 8002644:	40010800 	.word	0x40010800
 8002648:	40004800 	.word	0x40004800
 800264c:	40010c00 	.word	0x40010c00

08002650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002650:	f7ff feca 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002654:	480b      	ldr	r0, [pc, #44]	; (8002684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002656:	490c      	ldr	r1, [pc, #48]	; (8002688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <LoopFillZerobss+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800266c:	4c09      	ldr	r4, [pc, #36]	; (8002694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800267a:	f007 f85d 	bl	8009738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800267e:	f7ff fb6d 	bl	8001d5c <main>
  bx lr
 8002682:	4770      	bx	lr
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800268c:	0800a90c 	.word	0x0800a90c
  ldr r2, =_sbss
 8002690:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002694:	2000190c 	.word	0x2000190c

08002698 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC1_2_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_Init+0x28>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_Init+0x28>)
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 fc53 	bl	8002f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	200f      	movs	r0, #15
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fdfc 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc6b 	bl	8002fc2 <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002704:	f000 fc33 	bl	8002f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000000 	.word	0x20000000
 8002720:	20000008 	.word	0x20000008
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_IncTick+0x1c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_IncTick+0x20>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a03      	ldr	r2, [pc, #12]	; (8002748 <HAL_IncTick+0x20>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000008 	.word	0x20000008
 8002748:	200003d4 	.word	0x200003d4

0800274c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b02      	ldr	r3, [pc, #8]	; (800275c <HAL_GetTick+0x10>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	200003d4 	.word	0x200003d4

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff fff0 	bl	800274c <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffe0 	bl	800274c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008

080027a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0be      	b.n	8002948 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff f8b8 	bl	800195c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f9ab 	bl	8002b48 <ADC_ConversionStop_Disable>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 8099 	bne.w	8002936 <HAL_ADC_Init+0x18e>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8095 	bne.w	8002936 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	f043 0202 	orr.w	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002828:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7b1b      	ldrb	r3, [r3, #12]
 800282e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002830:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002840:	d003      	beq.n	800284a <HAL_ADC_Init+0xa2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_ADC_Init+0xa8>
 800284a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284e:	e000      	b.n	8002852 <HAL_ADC_Init+0xaa>
 8002850:	2300      	movs	r3, #0
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7d1b      	ldrb	r3, [r3, #20]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d119      	bne.n	8002894 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7b1b      	ldrb	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	3b01      	subs	r3, #1
 800286e:	035a      	lsls	r2, r3, #13
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e00b      	b.n	8002894 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_ADC_Init+0x1a8>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c4:	d003      	beq.n	80028ce <HAL_ADC_Init+0x126>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d104      	bne.n	80028d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051b      	lsls	r3, r3, #20
 80028d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_ADC_Init+0x1ac>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d10b      	bne.n	8002914 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002912:	e018      	b.n	8002946 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f023 0312 	bic.w	r3, r3, #18
 800291c:	f043 0210 	orr.w	r2, r3, #16
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002934:	e007      	b.n	8002946 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	ffe1f7fd 	.word	0xffe1f7fd
 8002954:	ff1f0efe 	.word	0xff1f0efe

08002958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x20>
 8002974:	2302      	movs	r3, #2
 8002976:	e0dc      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x1da>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d81c      	bhi.n	80029c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	3b05      	subs	r3, #5
 800299a:	221f      	movs	r2, #31
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4019      	ands	r1, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b05      	subs	r3, #5
 80029b4:	fa00 f203 	lsl.w	r2, r0, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	635a      	str	r2, [r3, #52]	; 0x34
 80029c0:	e03c      	b.n	8002a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d81c      	bhi.n	8002a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b23      	subs	r3, #35	; 0x23
 80029dc:	221f      	movs	r2, #31
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4019      	ands	r1, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	3b23      	subs	r3, #35	; 0x23
 80029f6:	fa00 f203 	lsl.w	r2, r0, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	e01b      	b.n	8002a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b41      	subs	r3, #65	; 0x41
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b41      	subs	r3, #65	; 0x41
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d91c      	bls.n	8002a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	3b1e      	subs	r3, #30
 8002a56:	2207      	movs	r2, #7
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	4019      	ands	r1, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6898      	ldr	r0, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b1e      	subs	r3, #30
 8002a70:	fa00 f203 	lsl.w	r2, r0, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	e019      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6919      	ldr	r1, [r3, #16]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	2207      	movs	r2, #7
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	4019      	ands	r1, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6898      	ldr	r0, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d003      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002abe:	2b11      	cmp	r3, #17
 8002ac0:	d132      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d125      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d126      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d11a      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	0c9a      	lsrs	r2, r3, #18
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f9      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x1b2>
 8002b16:	e007      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40012400 	.word	0x40012400
 8002b40:	20000000 	.word	0x20000000
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d12e      	bne.n	8002bc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b72:	f7ff fdeb 	bl	800274c <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b78:	e01b      	b.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b7a:	f7ff fde7 	bl	800274c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d914      	bls.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10d      	bne.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d0dc      	beq.n	8002b7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0ed      	b.n	8002db8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe ff85 	bl	8001af8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfe:	f7ff fda5 	bl	800274c <HAL_GetTick>
 8002c02:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c04:	e012      	b.n	8002c2c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c06:	f7ff fda1 	bl	800274c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b0a      	cmp	r3, #10
 8002c12:	d90b      	bls.n	8002c2c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2205      	movs	r2, #5
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0c5      	b.n	8002db8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0e5      	beq.n	8002c06 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0202 	bic.w	r2, r2, #2
 8002c48:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4a:	f7ff fd7f 	bl	800274c <HAL_GetTick>
 8002c4e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c50:	e012      	b.n	8002c78 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c52:	f7ff fd7b 	bl	800274c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b0a      	cmp	r3, #10
 8002c5e:	d90b      	bls.n	8002c78 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2205      	movs	r2, #5
 8002c70:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e09f      	b.n	8002db8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e5      	bne.n	8002c52 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7e1b      	ldrb	r3, [r3, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7e5b      	ldrb	r3, [r3, #25]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e007      	b.n	8002cda <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7e9b      	ldrb	r3, [r3, #26]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d108      	bne.n	8002cf4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e007      	b.n	8002d04 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0220 	bic.w	r2, r2, #32
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7edb      	ldrb	r3, [r3, #27]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0210 	bic.w	r2, r2, #16
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e007      	b.n	8002d2e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0210 	orr.w	r2, r2, #16
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7f1b      	ldrb	r3, [r3, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d108      	bne.n	8002d48 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0208 	orr.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	e007      	b.n	8002d58 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0208 	bic.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7f5b      	ldrb	r3, [r3, #29]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d108      	bne.n	8002d72 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0204 	orr.w	r2, r2, #4
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e007      	b.n	8002d82 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0204 	bic.w	r2, r2, #4
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	ea42 0103 	orr.w	r1, r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <__NVIC_EnableIRQ+0x34>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f24:	d301      	bcc.n	8002f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00f      	b.n	8002f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <SysTick_Config+0x40>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f32:	210f      	movs	r1, #15
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f38:	f7ff ff90 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <SysTick_Config+0x40>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <SysTick_Config+0x40>)
 8002f44:	2207      	movs	r2, #7
 8002f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000e010 	.word	0xe000e010

08002f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff2d 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	4603      	mov	r3, r0
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
 8002f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f80:	f7ff ff42 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	f7ff ff90 	bl	8002eb0 <NVIC_EncodePriority>
 8002f90:	4602      	mov	r2, r0
 8002f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff5f 	bl	8002e5c <__NVIC_SetPriority>
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff35 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ffa2 	bl	8002f14 <SysTick_Config>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	e169      	b.n	80032c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 8158 	bne.w	80032be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a9a      	ldr	r2, [pc, #616]	; (800327c <HAL_GPIO_Init+0x2a0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d05e      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003018:	4a98      	ldr	r2, [pc, #608]	; (800327c <HAL_GPIO_Init+0x2a0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d875      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800301e:	4a98      	ldr	r2, [pc, #608]	; (8003280 <HAL_GPIO_Init+0x2a4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d058      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003024:	4a96      	ldr	r2, [pc, #600]	; (8003280 <HAL_GPIO_Init+0x2a4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d86f      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800302a:	4a96      	ldr	r2, [pc, #600]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d052      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003030:	4a94      	ldr	r2, [pc, #592]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d869      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003036:	4a94      	ldr	r2, [pc, #592]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04c      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 800303c:	4a92      	ldr	r2, [pc, #584]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d863      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003042:	4a92      	ldr	r2, [pc, #584]	; (800328c <HAL_GPIO_Init+0x2b0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d046      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003048:	4a90      	ldr	r2, [pc, #576]	; (800328c <HAL_GPIO_Init+0x2b0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d85d      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800304e:	2b12      	cmp	r3, #18
 8003050:	d82a      	bhi.n	80030a8 <HAL_GPIO_Init+0xcc>
 8003052:	2b12      	cmp	r3, #18
 8003054:	d859      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_GPIO_Init+0x80>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	080030d7 	.word	0x080030d7
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030c3 	.word	0x080030c3
 8003068:	08003105 	.word	0x08003105
 800306c:	0800310b 	.word	0x0800310b
 8003070:	0800310b 	.word	0x0800310b
 8003074:	0800310b 	.word	0x0800310b
 8003078:	0800310b 	.word	0x0800310b
 800307c:	0800310b 	.word	0x0800310b
 8003080:	0800310b 	.word	0x0800310b
 8003084:	0800310b 	.word	0x0800310b
 8003088:	0800310b 	.word	0x0800310b
 800308c:	0800310b 	.word	0x0800310b
 8003090:	0800310b 	.word	0x0800310b
 8003094:	0800310b 	.word	0x0800310b
 8003098:	0800310b 	.word	0x0800310b
 800309c:	0800310b 	.word	0x0800310b
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	4a79      	ldr	r2, [pc, #484]	; (8003290 <HAL_GPIO_Init+0x2b4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ae:	e02c      	b.n	800310a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e029      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e024      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	3308      	adds	r3, #8
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e01f      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e01a      	b.n	800310c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030de:	2304      	movs	r3, #4
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e013      	b.n	800310c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	611a      	str	r2, [r3, #16]
          break;
 80030f6:	e009      	b.n	800310c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	615a      	str	r2, [r3, #20]
          break;
 8003102:	e003      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x130>
          break;
 800310a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	d801      	bhi.n	8003116 <HAL_GPIO_Init+0x13a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e001      	b.n	800311a <HAL_GPIO_Init+0x13e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d802      	bhi.n	8003128 <HAL_GPIO_Init+0x14c>
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	3b08      	subs	r3, #8
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	210f      	movs	r1, #15
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80b1 	beq.w	80032be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003174:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_GPIO_Init+0x2bc>)
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <HAL_GPIO_Init+0x2c0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d013      	beq.n	80031c8 <HAL_GPIO_Init+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3f      	ldr	r2, [pc, #252]	; (80032a0 <HAL_GPIO_Init+0x2c4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00d      	beq.n	80031c4 <HAL_GPIO_Init+0x1e8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3e      	ldr	r2, [pc, #248]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <HAL_GPIO_Init+0x1e4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <HAL_GPIO_Init+0x2cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_GPIO_Init+0x1e0>
 80031b8:	2303      	movs	r3, #3
 80031ba:	e006      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031bc:	2304      	movs	r3, #4
 80031be:	e004      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e002      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_GPIO_Init+0x1ee>
 80031c8:	2300      	movs	r3, #0
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4093      	lsls	r3, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031da:	492f      	ldr	r1, [pc, #188]	; (8003298 <HAL_GPIO_Init+0x2bc>)
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	492c      	ldr	r1, [pc, #176]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003202:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	43db      	mvns	r3, r3
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800320c:	4013      	ands	r3, r2
 800320e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	4922      	ldr	r1, [pc, #136]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	60cb      	str	r3, [r1, #12]
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	43db      	mvns	r3, r3
 8003232:	491e      	ldr	r1, [pc, #120]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003234:	4013      	ands	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	4918      	ldr	r1, [pc, #96]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	43db      	mvns	r3, r3
 800325a:	4914      	ldr	r1, [pc, #80]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800325c:	4013      	ands	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d021      	beq.n	80032b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
 8003278:	e021      	b.n	80032be <HAL_GPIO_Init+0x2e2>
 800327a:	bf00      	nop
 800327c:	10320000 	.word	0x10320000
 8003280:	10310000 	.word	0x10310000
 8003284:	10220000 	.word	0x10220000
 8003288:	10210000 	.word	0x10210000
 800328c:	10120000 	.word	0x10120000
 8003290:	10110000 	.word	0x10110000
 8003294:	40021000 	.word	0x40021000
 8003298:	40010000 	.word	0x40010000
 800329c:	40010800 	.word	0x40010800
 80032a0:	40010c00 	.word	0x40010c00
 80032a4:	40011000 	.word	0x40011000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4909      	ldr	r1, [pc, #36]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3301      	adds	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f ae8e 	bne.w	8002ff0 <HAL_GPIO_Init+0x14>
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	372c      	adds	r7, #44	; 0x2c
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43d9      	mvns	r1, r3
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	400b      	ands	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003348:	b08f      	sub	sp, #60	; 0x3c
 800334a:	af0a      	add	r7, sp, #40	; 0x28
 800334c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e10f      	b.n	8003578 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 fea8 	bl	80090c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f002 ff9a 	bl	80062d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	687e      	ldr	r6, [r7, #4]
 80033a4:	466d      	mov	r5, sp
 80033a6:	f106 0410 	add.w	r4, r6, #16
 80033aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ba:	1d33      	adds	r3, r6, #4
 80033bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	f002 feb8 	bl	8006134 <USB_CoreInit>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0d0      	b.n	8003578 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 ff87 	bl	80062f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	e04a      	b.n	800347e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	333d      	adds	r3, #61	; 0x3d
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	333c      	adds	r3, #60	; 0x3c
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	b298      	uxth	r0, r3
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3356      	adds	r3, #86	; 0x56
 8003424:	4602      	mov	r2, r0
 8003426:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3340      	adds	r3, #64	; 0x40
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3344      	adds	r3, #68	; 0x44
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3348      	adds	r3, #72	; 0x48
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	334c      	adds	r3, #76	; 0x4c
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	3301      	adds	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3af      	bcc.n	80033e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e044      	b.n	8003518 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	3301      	adds	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d3b5      	bcc.n	800348e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	687e      	ldr	r6, [r7, #4]
 800352a:	466d      	mov	r5, sp
 800352c:	f106 0410 	add.w	r4, r6, #16
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800353c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003540:	1d33      	adds	r3, r6, #4
 8003542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003544:	6838      	ldr	r0, [r7, #0]
 8003546:	f002 ff1f 	bl	8006388 <USB_DevInit>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e00d      	b.n	8003578 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fea9 	bl	80072c8 <USB_DevDisconnect>

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003580 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_PCD_Start+0x16>
 8003592:	2302      	movs	r3, #2
 8003594:	e012      	b.n	80035bc <HAL_PCD_Start+0x3c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f002 fe84 	bl	80062b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fe6b 	bl	8007288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b08d      	sub	sp, #52	; 0x34
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 ff22 	bl	8007424 <USB_GetMode>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 8443 	bne.w	8003e6e <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fe8b 	bl	8007308 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8439 	beq.w	8003e6c <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fe78 	bl	8007308 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f002 0202 	and.w	r2, r2, #2
 8003630:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f003 fe66 	bl	8007308 <USB_ReadInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	d161      	bne.n	800370a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0210 	bic.w	r2, r2, #16
 8003654:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	0c5b      	lsrs	r3, r3, #17
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	2b02      	cmp	r3, #2
 8003680:	d124      	bne.n	80036cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d035      	beq.n	80036fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6a38      	ldr	r0, [r7, #32]
 80036a2:	f003 fca3 	bl	8006fec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b2:	441a      	add	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c4:	441a      	add	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	615a      	str	r2, [r3, #20]
 80036ca:	e016      	b.n	80036fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	0c5b      	lsrs	r3, r3, #17
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d110      	bne.n	80036fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036de:	2208      	movs	r2, #8
 80036e0:	4619      	mov	r1, r3
 80036e2:	6a38      	ldr	r0, [r7, #32]
 80036e4:	f003 fc82 	bl	8006fec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f4:	441a      	add	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0210 	orr.w	r2, r2, #16
 8003708:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fdfa 	bl	8007308 <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800371e:	f040 80a7 	bne.w	8003870 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f003 fdfe 	bl	800732c <USB_ReadDevAllOutEpInterrupt>
 8003730:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003732:	e099      	b.n	8003868 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 808e 	beq.w	800385c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fe20 	bl	8007390 <USB_ReadDevOutEPInterrupt>
 8003750:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	461a      	mov	r2, r3
 800376a:	2301      	movs	r3, #1
 800376c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fe41 	bl	80043f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	2308      	movs	r3, #8
 8003790:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fe7d 	bl	8004494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	2310      	movs	r3, #16
 80037b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d030      	beq.n	8003822 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c8:	2b80      	cmp	r3, #128	; 0x80
 80037ca:	d109      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	3304      	adds	r3, #4
 80037f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f005 fd4a 	bl	80092a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	2302      	movs	r3, #2
 8003820:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	2320      	movs	r3, #32
 800383c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800385a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	f47f af62 	bne.w	8003734 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f003 fd47 	bl	8007308 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003884:	f040 80a4 	bne.w	80039d0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f003 fd66 	bl	800735e <USB_ReadDevAllInEpInterrupt>
 8003892:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003898:	e096      	b.n	80039c8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808b 	beq.w	80039bc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 fd8a 	bl	80073ca <USB_ReadDevInEPInterrupt>
 80038b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	2201      	movs	r2, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e2:	4013      	ands	r3, r2
 80038e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f005 fc55 	bl	80091ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391a:	461a      	mov	r2, r3
 800391c:	2308      	movs	r3, #8
 800391e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	461a      	mov	r2, r3
 8003938:	2310      	movs	r3, #16
 800393a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	461a      	mov	r2, r3
 8003954:	2340      	movs	r3, #64	; 0x40
 8003956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d023      	beq.n	80039aa <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003964:	6a38      	ldr	r0, [r7, #32]
 8003966:	f002 fe31 	bl	80065cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3338      	adds	r3, #56	; 0x38
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	78db      	ldrb	r3, [r3, #3]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d108      	bne.n	8003998 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f005 fc98 	bl	80092c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	461a      	mov	r2, r3
 80039a6:	2302      	movs	r3, #2
 80039a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fc96 	bl	80042e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3301      	adds	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f47f af65 	bne.w	800389a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fc97 	bl	8007308 <USB_ReadInterrupts>
 80039da:	4603      	mov	r3, r0
 80039dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e4:	d114      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f005 fc44 	bl	8009288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 fc77 	bl	8007308 <USB_ReadInterrupts>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d112      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f005 fc00 	bl	800923c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a4a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 fc59 	bl	8007308 <USB_ReadInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	f040 80b5 	bne.w	8003bce <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fda4 	bl	80065cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	e046      	b.n	8003b18 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003abc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ad0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae2:	0151      	lsls	r1, r2, #5
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	440a      	add	r2, r1
 8003ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003af0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	3301      	adds	r3, #1
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d3b3      	bcc.n	8003a8a <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4e:	f043 030b 	orr.w	r3, r3, #11
 8003b52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b64:	f043 030b 	orr.w	r3, r3, #11
 8003b68:	6453      	str	r3, [r2, #68]	; 0x44
 8003b6a:	e015      	b.n	8003b98 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b7e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b92:	f043 030b 	orr.w	r3, r3, #11
 8003b96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ba6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003baa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f003 fc63 	bl	8007484 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 fb98 	bl	8007308 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	d124      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fc28 	bl	800743e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f002 fd66 	bl	80066c4 <USB_GetDevSpeed>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681c      	ldr	r4, [r3, #0]
 8003c04:	f001 f98c 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8003c08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	4620      	mov	r0, r4
 8003c14:	f002 fab0 	bl	8006178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f005 faf0 	bl	80091fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 fb68 	bl	8007308 <USB_ReadInterrupts>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d10a      	bne.n	8003c58 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f005 facd 	bl	80091e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f002 0208 	and.w	r2, r2, #8
 8003c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 fb53 	bl	8007308 <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	d122      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7c:	e014      	b.n	8003ca8 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d105      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 faf2 	bl	8004286 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3e5      	bcc.n	8003c7e <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fb26 	bl	8007308 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d13b      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	e02b      	b.n	8003d26 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3340      	adds	r3, #64	; 0x40
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d115      	bne.n	8003d20 <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da12      	bge.n	8003d20 <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333f      	adds	r3, #63	; 0x3f
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fab3 	bl	8004286 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	3301      	adds	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d3ce      	bcc.n	8003cce <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 fadf 	bl	8007308 <USB_ReadInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d54:	d155      	bne.n	8003e02 <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d56:	2301      	movs	r3, #1
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e045      	b.n	8003de8 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d12e      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	da2b      	bge.n	8003de2 <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d121      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dde:	6053      	str	r3, [r2, #4]
            break;
 8003de0:	e007      	b.n	8003df2 <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	3301      	adds	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d3b4      	bcc.n	8003d5c <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fa7e 	bl	8007308 <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d10a      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f005 fa67 	bl	80092ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 fa68 	bl	8007308 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d115      	bne.n	8003e6e <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f005 fa57 	bl	8009308 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	e000      	b.n	8003e6e <HAL_PCD_IRQHandler+0x8aa>
      return;
 8003e6c:	bf00      	nop
    }
  }
}
 8003e6e:	3734      	adds	r7, #52	; 0x34
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd90      	pop	{r4, r7, pc}

08003e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_PCD_SetAddress+0x1a>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e013      	b.n	8003eb6 <HAL_PCD_SetAddress+0x42>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 f9c9 	bl	800723e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	4611      	mov	r1, r2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4603      	mov	r3, r0
 8003ece:	70fb      	strb	r3, [r7, #3]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	803b      	strh	r3, [r7, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0f      	bge.n	8003f04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3338      	adds	r3, #56	; 0x38
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	705a      	strb	r2, [r3, #1]
 8003f02:	e00f      	b.n	8003f24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 020f 	and.w	r2, r3, #15
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f30:	883a      	ldrh	r2, [r7, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	78ba      	ldrb	r2, [r7, #2]
 8003f3a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f4e:	78bb      	ldrb	r3, [r7, #2]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d102      	bne.n	8003f5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_PCD_EP_Open+0xaa>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e00e      	b.n	8003f86 <HAL_PCD_EP_Open+0xc8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f002 fbc2 	bl	8006700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f84:	7afb      	ldrb	r3, [r7, #11]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da0f      	bge.n	8003fc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3338      	adds	r3, #56	; 0x38
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	705a      	strb	r2, [r3, #1]
 8003fc0:	e00f      	b.n	8003fe2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_PCD_EP_Close+0x6e>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e00e      	b.n	800401a <HAL_PCD_EP_Close+0x8c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	4618      	mov	r0, r3
 800400c:	f002 fbfe 	bl	800680c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	460b      	mov	r3, r1
 8004030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004032:	7afb      	ldrb	r3, [r7, #11]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2200      	movs	r2, #0
 8004062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	b2da      	uxtb	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	4618      	mov	r0, r3
 8004078:	f002 fca4 	bl	80069c4 <USB_EPStartXfer>

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80040a8:	681b      	ldr	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	460b      	mov	r3, r1
 80040c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	7afb      	ldrb	r3, [r7, #11]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3338      	adds	r3, #56	; 0x38
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2200      	movs	r2, #0
 80040ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2201      	movs	r2, #1
 80040f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	4618      	mov	r0, r3
 8004108:	f002 fc5c 	bl	80069c4 <USB_EPStartXfer>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d901      	bls.n	8004134 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e04e      	b.n	80041d2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0f      	bge.n	800415c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3338      	adds	r3, #56	; 0x38
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	705a      	strb	r2, [r3, #1]
 800415a:	e00d      	b.n	8004178 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	b2da      	uxtb	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_PCD_EP_SetStall+0x82>
 8004194:	2302      	movs	r3, #2
 8004196:	e01c      	b.n	80041d2 <HAL_PCD_EP_SetStall+0xbc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 ff77 	bl	800709a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f003 f95e 	bl	8007484 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	460b      	mov	r3, r1
 80041e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d901      	bls.n	80041f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e042      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0f      	bge.n	8004220 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	3338      	adds	r3, #56	; 0x38
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	705a      	strb	r2, [r3, #1]
 800421e:	e00f      	b.n	8004240 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	f003 020f 	and.w	r2, r3, #15
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_PCD_EP_ClrStall+0x86>
 800425c:	2302      	movs	r3, #2
 800425e:	e00e      	b.n	800427e <HAL_PCD_EP_ClrStall+0xa4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f002 ff80 	bl	8007174 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0c      	bge.n	80042b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3338      	adds	r3, #56	; 0x38
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e00c      	b.n	80042ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f002 fda7 	bl	8006e28 <USB_EPStopXfer>
 80042da:	4603      	mov	r3, r0
 80042dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042de:	7afb      	ldrb	r3, [r7, #11]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	429a      	cmp	r2, r3
 800431a:	d901      	bls.n	8004320 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e067      	b.n	80043f0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	429a      	cmp	r2, r3
 8004334:	d902      	bls.n	800433c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3303      	adds	r3, #3
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004344:	e026      	b.n	8004394 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	429a      	cmp	r2, r3
 800435a:	d902      	bls.n	8004362 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3303      	adds	r3, #3
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68d9      	ldr	r1, [r3, #12]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	b29b      	uxth	r3, r3
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f002 fdff 	bl	8006f7a <USB_WritePacket>

    ep->xfer_buff  += len;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	441a      	add	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d809      	bhi.n	80043be <PCD_WriteEmptyTxFifo+0xd6>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d203      	bcs.n	80043be <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1c3      	bne.n	8004346 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d811      	bhi.n	80043ee <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	2201      	movs	r2, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	6939      	ldr	r1, [r7, #16]
 80043e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ea:	4013      	ands	r3, r2
 80043ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	333c      	adds	r3, #60	; 0x3c
 8004410:	3304      	adds	r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <PCD_EP_OutXfrComplete_int+0x98>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d124      	bne.n	8004478 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444a:	6093      	str	r3, [r2, #8]
 800444c:	e01a      	b.n	8004484 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	461a      	mov	r2, r3
 8004466:	2320      	movs	r3, #32
 8004468:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 fe81 	bl	8009178 <HAL_PCD_DataOutStageCallback>
 8004476:	e005      	b.n	8004484 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f004 fe7a 	bl	8009178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	4f54310a 	.word	0x4f54310a

08004494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	333c      	adds	r3, #60	; 0x3c
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <PCD_EP_OutSetupPacket_int+0x64>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d90e      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f004 fe33 	bl	8009154 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	4f54300a 	.word	0x4f54300a

080044fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	4613      	mov	r3, r2
 800450a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800451a:	883b      	ldrh	r3, [r7, #0]
 800451c:	0419      	lsls	r1, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	430a      	orrs	r2, r1
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
 8004528:	e028      	b.n	800457c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e00d      	b.n	800455a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3340      	adds	r3, #64	; 0x40
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	3301      	adds	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	3b01      	subs	r3, #1
 8004560:	429a      	cmp	r2, r3
 8004562:	d3ec      	bcc.n	800453e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004564:	883b      	ldrh	r3, [r7, #0]
 8004566:	0418      	lsls	r0, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	4302      	orrs	r2, r0
 8004574:	3340      	adds	r3, #64	; 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	887a      	ldrh	r2, [r7, #2]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e304      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8087 	beq.w	80046d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c8:	4b92      	ldr	r3, [pc, #584]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d00c      	beq.n	80045ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d4:	4b8f      	ldr	r3, [pc, #572]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d112      	bne.n	8004606 <HAL_RCC_OscConfig+0x5e>
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d10b      	bne.n	8004606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ee:	4b89      	ldr	r3, [pc, #548]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d06c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x12c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d168      	bne.n	80046d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e2de      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x76>
 8004610:	4b80      	ldr	r3, [pc, #512]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7f      	ldr	r2, [pc, #508]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e02e      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x98>
 8004626:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7a      	ldr	r2, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	4b78      	ldr	r3, [pc, #480]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a77      	ldr	r2, [pc, #476]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e01d      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0xbc>
 800464a:	4b72      	ldr	r3, [pc, #456]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a71      	ldr	r2, [pc, #452]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0xd4>
 8004664:	4b6b      	ldr	r3, [pc, #428]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6a      	ldr	r2, [pc, #424]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800466a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b68      	ldr	r3, [pc, #416]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a67      	ldr	r2, [pc, #412]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fe f862 	bl	800274c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fe f85e 	bl	800274c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e292      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	4b5d      	ldr	r3, [pc, #372]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0xe4>
 80046aa:	e014      	b.n	80046d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fe f84e 	bl	800274c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b4:	f7fe f84a 	bl	800274c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	; 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e27e      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	4b53      	ldr	r3, [pc, #332]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x10c>
 80046d2:	e000      	b.n	80046d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d063      	beq.n	80047aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e2:	4b4c      	ldr	r3, [pc, #304]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x18c>
 80046fa:	4b46      	ldr	r3, [pc, #280]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	4b43      	ldr	r3, [pc, #268]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_RCC_OscConfig+0x176>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e252      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4939      	ldr	r1, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800472e:	4313      	orrs	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	e03a      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCC_OscConfig+0x270>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fe f803 	bl	800274c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474a:	f7fd ffff 	bl	800274c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e233      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004768:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4927      	ldr	r1, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e015      	b.n	80047aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x270>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd ffe2 	bl	800274c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478c:	f7fd ffde 	bl	800274c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e212      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03a      	beq.n	800482c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d019      	beq.n	80047f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RCC_OscConfig+0x274>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fd ffc2 	bl	800274c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fd ffbe 	bl	800274c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1f2      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ea:	2001      	movs	r0, #1
 80047ec:	f000 fbca 	bl	8004f84 <RCC_Delay>
 80047f0:	e01c      	b.n	800482c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_OscConfig+0x274>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fd ffa8 	bl	800274c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fe:	e00f      	b.n	8004820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004800:	f7fd ffa4 	bl	800274c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d908      	bls.n	8004820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1d8      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	42420000 	.word	0x42420000
 800481c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004820:	4b9b      	ldr	r3, [pc, #620]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e9      	bne.n	8004800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80a6 	beq.w	8004986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800483e:	4b94      	ldr	r3, [pc, #592]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	4b91      	ldr	r3, [pc, #580]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4a90      	ldr	r2, [pc, #576]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	61d3      	str	r3, [r2, #28]
 8004856:	4b8e      	ldr	r3, [pc, #568]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b8b      	ldr	r3, [pc, #556]	; (8004a94 <HAL_RCC_OscConfig+0x4ec>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d118      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004872:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x4ec>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a87      	ldr	r2, [pc, #540]	; (8004a94 <HAL_RCC_OscConfig+0x4ec>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487e:	f7fd ff65 	bl	800274c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004886:	f7fd ff61 	bl	800274c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e195      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_RCC_OscConfig+0x4ec>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d106      	bne.n	80048ba <HAL_RCC_OscConfig+0x312>
 80048ac:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6213      	str	r3, [r2, #32]
 80048b8:	e02d      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x334>
 80048c2:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4a72      	ldr	r2, [pc, #456]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6213      	str	r3, [r2, #32]
 80048ce:	4b70      	ldr	r3, [pc, #448]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a6f      	ldr	r2, [pc, #444]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	e01c      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_OscConfig+0x356>
 80048e4:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	4a69      	ldr	r2, [pc, #420]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	6213      	str	r3, [r2, #32]
 80048f0:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4a66      	ldr	r2, [pc, #408]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	6213      	str	r3, [r2, #32]
 80048fc:	e00b      	b.n	8004916 <HAL_RCC_OscConfig+0x36e>
 80048fe:	4b64      	ldr	r3, [pc, #400]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4a63      	ldr	r2, [pc, #396]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6213      	str	r3, [r2, #32]
 800490a:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	4a60      	ldr	r2, [pc, #384]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d015      	beq.n	800494a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fd ff15 	bl	800274c <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd ff11 	bl	800274c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e143      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493c:	4b54      	ldr	r3, [pc, #336]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ee      	beq.n	8004926 <HAL_RCC_OscConfig+0x37e>
 8004948:	e014      	b.n	8004974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494a:	f7fd feff 	bl	800274c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004950:	e00a      	b.n	8004968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd fefb 	bl	800274c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e12d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004968:	4b49      	ldr	r3, [pc, #292]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ee      	bne.n	8004952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497a:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4a44      	ldr	r2, [pc, #272]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004984:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 808c 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004990:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d10e      	bne.n	80049bc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800499e:	4b3c      	ldr	r3, [pc, #240]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e103      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d14e      	bne.n	8004a62 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80049d0:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0ef      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80049e4:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_RCC_OscConfig+0x4f0>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fd feaf 	bl	800274c <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049f2:	f7fd feab 	bl	800274c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	; 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0df      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004a04:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004a10:	4b1f      	ldr	r3, [pc, #124]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	491c      	ldr	r1, [pc, #112]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	4918      	ldr	r1, [pc, #96]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004a34:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_RCC_OscConfig+0x4f0>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3a:	f7fd fe87 	bl	800274c <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a42:	f7fd fe83 	bl	800274c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0b7      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCC_OscConfig+0x49a>
 8004a60:	e022      	b.n	8004aa8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_RCC_OscConfig+0x4e8>)
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_RCC_OscConfig+0x4f0>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd fe6a 	bl	800274c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004a7a:	e00f      	b.n	8004a9c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a7c:	f7fd fe66 	bl	800274c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d908      	bls.n	8004a9c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e09a      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40007000 	.word	0x40007000
 8004a98:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e9      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8088 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab2:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d068      	beq.n	8004b90 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d14d      	bne.n	8004b62 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <HAL_RCC_OscConfig+0x628>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd fe3e 	bl	800274c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fd fe3a 	bl	800274c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e06e      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afa:	d10f      	bne.n	8004b1c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	4931      	ldr	r1, [pc, #196]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f023 020f 	bic.w	r2, r3, #15
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	492d      	ldr	r1, [pc, #180]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	4927      	ldr	r1, [pc, #156]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b34:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_RCC_OscConfig+0x628>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fe07 	bl	800274c <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd fe03 	bl	800274c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e037      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x59a>
 8004b60:	e02f      	b.n	8004bc2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b1b      	ldr	r3, [pc, #108]	; (8004bd0 <HAL_RCC_OscConfig+0x628>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd fdf0 	bl	800274c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd fdec 	bl	800274c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e020      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x5c8>
 8004b8e:	e018      	b.n	8004bc2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e013      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_OscConfig+0x624>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	42420060 	.word	0x42420060

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d0      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d910      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4965      	ldr	r1, [pc, #404]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a58      	ldr	r2, [pc, #352]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d040      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e073      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4936      	ldr	r1, [pc, #216]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fd42 	bl	800274c <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fd fd3e 	bl	800274c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e053      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d210      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4922      	ldr	r1, [pc, #136]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	; (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_ClockConfig+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fca0 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	0800a890 	.word	0x0800a890
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000004 	.word	0x20000004

08004da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b08e      	sub	sp, #56	; 0x38
 8004dae:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db4:	2300      	movs	r3, #0
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db8:	2300      	movs	r3, #0
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	623b      	str	r3, [r7, #32]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dcc:	4b4e      	ldr	r3, [pc, #312]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d002      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d003      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004de0:	e089      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004de2:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x164>)
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004de6:	e089      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	0c9b      	lsrs	r3, r3, #18
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x168>)
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d072      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004e00:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004e0e:	4b3e      	ldr	r3, [pc, #248]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d053      	beq.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	3301      	adds	r3, #1
 8004e26:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	3302      	adds	r3, #2
 8004e34:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	469a      	mov	sl, r3
 8004e3c:	4693      	mov	fp, r2
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2200      	movs	r2, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	617a      	str	r2, [r7, #20]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	fb03 f20b 	mul.w	r2, r3, fp
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fb0a f303 	mul.w	r3, sl, r3
 8004e52:	4413      	add	r3, r2
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	fbaa 0102 	umull	r0, r1, sl, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4b2b      	ldr	r3, [pc, #172]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e60:	fb03 f201 	mul.w	r2, r3, r1
 8004e64:	2300      	movs	r3, #0
 8004e66:	fb00 f303 	mul.w	r3, r0, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4a27      	ldr	r2, [pc, #156]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e6e:	fba0 4502 	umull	r4, r5, r0, r2
 8004e72:	442b      	add	r3, r5
 8004e74:	461d      	mov	r5, r3
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	60fa      	str	r2, [r7, #12]
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2200      	movs	r2, #0
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e90:	4652      	mov	r2, sl
 8004e92:	fb02 f203 	mul.w	r2, r2, r3
 8004e96:	465b      	mov	r3, fp
 8004e98:	4684      	mov	ip, r0
 8004e9a:	fb0c f303 	mul.w	r3, ip, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4651      	mov	r1, sl
 8004ea4:	fba2 8901 	umull	r8, r9, r2, r1
 8004ea8:	444b      	add	r3, r9
 8004eaa:	4699      	mov	r9, r3
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7fc f8da 	bl	800106c <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec0:	e007      	b.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x164>)
 8004ec6:	fb03 f202 	mul.w	r2, r3, r2
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ed4:	7b5b      	ldrb	r3, [r3, #13]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x170>)
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x174>)
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004efa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3738      	adds	r7, #56	; 0x38
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	017d7840 	.word	0x017d7840
 8004f10:	0800a8a8 	.word	0x0800a8a8
 8004f14:	0800a8b8 	.word	0x0800a8b8
 8004f18:	003d0900 	.word	0x003d0900
 8004f1c:	007a1200 	.word	0x007a1200

08004f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f24:	4b02      	ldr	r3, [pc, #8]	; (8004f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f26:	681b      	ldr	r3, [r3, #0]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	20000000 	.word	0x20000000

08004f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f38:	f7ff fff2 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	0a1b      	lsrs	r3, r3, #8
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	4903      	ldr	r1, [pc, #12]	; (8004f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f4a:	5ccb      	ldrb	r3, [r1, r3]
 8004f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	0800a8a0 	.word	0x0800a8a0

08004f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f60:	f7ff ffde 	bl	8004f20 <HAL_RCC_GetHCLKFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	0adb      	lsrs	r3, r3, #11
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4903      	ldr	r1, [pc, #12]	; (8004f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	0800a8a0 	.word	0x0800a8a0

08004f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <RCC_Delay+0x34>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <RCC_Delay+0x38>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0a5b      	lsrs	r3, r3, #9
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fa0:	bf00      	nop
  }
  while (Delay --);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1e5a      	subs	r2, r3, #1
 8004fa6:	60fa      	str	r2, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f9      	bne.n	8004fa0 <RCC_Delay+0x1c>
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	20000000 	.word	0x20000000
 8004fbc:	10624dd3 	.word	0x10624dd3

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d07d      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe4:	4b8b      	ldr	r3, [pc, #556]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10d      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b88      	ldr	r3, [pc, #544]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	4a87      	ldr	r2, [pc, #540]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	61d3      	str	r3, [r2, #28]
 8004ffc:	4b85      	ldr	r3, [pc, #532]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005008:	2301      	movs	r3, #1
 800500a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500c:	4b82      	ldr	r3, [pc, #520]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d118      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005018:	4b7f      	ldr	r3, [pc, #508]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7e      	ldr	r2, [pc, #504]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005024:	f7fd fb92 	bl	800274c <HAL_GetTick>
 8005028:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502a:	e008      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fd fb8e 	bl	800274c <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e0e5      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503e:	4b76      	ldr	r3, [pc, #472]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504a:	4b72      	ldr	r3, [pc, #456]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02e      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d027      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005068:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800507e:	4a65      	ldr	r2, [pc, #404]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd fb5d 	bl	800274c <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fd fb59 	bl	800274c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0ae      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ee      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b8:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4953      	ldr	r1, [pc, #332]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050ca:	7efb      	ldrb	r3, [r7, #27]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	4a4f      	ldr	r2, [pc, #316]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e8:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4947      	ldr	r1, [pc, #284]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4940      	ldr	r1, [pc, #256]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005114:	4313      	orrs	r3, r2
 8005116:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	4938      	ldr	r1, [pc, #224]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005132:	4313      	orrs	r3, r2
 8005134:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d105      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d148      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d138      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005164:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e042      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	4920      	ldr	r1, [pc, #128]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005192:	4313      	orrs	r3, r2
 8005194:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005196:	4b1f      	ldr	r3, [pc, #124]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	491c      	ldr	r1, [pc, #112]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ae:	f7fd facd 	bl	800274c <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051b6:	f7fd fac9 	bl	800274c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b64      	cmp	r3, #100	; 0x64
 80051c2:	d901      	bls.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e020      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80051d4:	e009      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e00f      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d008      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4904      	ldr	r1, [pc, #16]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	40007000 	.word	0x40007000
 800521c:	42420440 	.word	0x42420440
 8005220:	42420070 	.word	0x42420070

08005224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e076      	b.n	8005324 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005246:	d009      	beq.n	800525c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	61da      	str	r2, [r3, #28]
 800524e:	e005      	b.n	800525c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc ffba 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	ea42 0103 	orr.w	r1, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	0c1a      	lsrs	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f002 0204 	and.w	r2, r2, #4
 8005302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_SPI_Transmit+0x22>
 800534a:	2302      	movs	r3, #2
 800534c:	e12d      	b.n	80055aa <HAL_SPI_Transmit+0x27e>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005356:	f7fd f9f9 	bl	800274c <HAL_GetTick>
 800535a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d002      	beq.n	8005372 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800536c:	2302      	movs	r3, #2
 800536e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005370:	e116      	b.n	80055a0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x52>
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005382:	e10d      	b.n	80055a0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2203      	movs	r2, #3
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ca:	d10f      	bne.n	80053ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d007      	beq.n	800540a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005412:	d14f      	bne.n	80054b4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit+0xf6>
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d142      	bne.n	80054a8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005446:	e02f      	b.n	80054a8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d112      	bne.n	800547c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36
 800547a:	e015      	b.n	80054a8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547c:	f7fd f966 	bl	800274c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d803      	bhi.n	8005494 <HAL_SPI_Transmit+0x168>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005492:	d102      	bne.n	800549a <HAL_SPI_Transmit+0x16e>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80054a6:	e07b      	b.n	80055a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ca      	bne.n	8005448 <HAL_SPI_Transmit+0x11c>
 80054b2:	e050      	b.n	8005556 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Transmit+0x196>
 80054bc:	8afb      	ldrh	r3, [r7, #22]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d144      	bne.n	800554c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054e8:	e030      	b.n	800554c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d113      	bne.n	8005520 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	86da      	strh	r2, [r3, #54]	; 0x36
 800551e:	e015      	b.n	800554c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005520:	f7fd f914 	bl	800274c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d803      	bhi.n	8005538 <HAL_SPI_Transmit+0x20c>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005536:	d102      	bne.n	800553e <HAL_SPI_Transmit+0x212>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800554a:	e029      	b.n	80055a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1c9      	bne.n	80054ea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fbcc 	bl	8005cf8 <SPI_EndRxTxTransaction>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e003      	b.n	80055a0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b088      	sub	sp, #32
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
 80055d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055d6:	e0fb      	b.n	80057d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e0:	d112      	bne.n	8005608 <HAL_SPI_Receive+0x56>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2204      	movs	r2, #4
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f8ef 	bl	80057e2 <HAL_SPI_TransmitReceive>
 8005604:	4603      	mov	r3, r0
 8005606:	e0e8      	b.n	80057da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_SPI_Receive+0x64>
 8005612:	2302      	movs	r3, #2
 8005614:	e0e1      	b.n	80057da <HAL_SPI_Receive+0x228>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561e:	f7fd f895 	bl	800274c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Receive+0x7e>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005634:	e0cc      	b.n	80057d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2204      	movs	r2, #4
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d10f      	bne.n	800569e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800569c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d16a      	bne.n	800579a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056c4:	e032      	b.n	800572c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d115      	bne.n	8005700 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f103 020c 	add.w	r2, r3, #12
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fe:	e015      	b.n	800572c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005700:	f7fd f824 	bl	800274c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d803      	bhi.n	8005718 <HAL_SPI_Receive+0x166>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005716:	d102      	bne.n	800571e <HAL_SPI_Receive+0x16c>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800572a:	e051      	b.n	80057d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1c7      	bne.n	80056c6 <HAL_SPI_Receive+0x114>
 8005736:	e035      	b.n	80057a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d113      	bne.n	800576e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	b292      	uxth	r2, r2
 8005752:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	1c9a      	adds	r2, r3, #2
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800576c:	e015      	b.n	800579a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576e:	f7fc ffed 	bl	800274c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d803      	bhi.n	8005786 <HAL_SPI_Receive+0x1d4>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005784:	d102      	bne.n	800578c <HAL_SPI_Receive+0x1da>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005798:	e01a      	b.n	80057d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1c9      	bne.n	8005738 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fa53 	bl	8005c54 <SPI_EndRxTransaction>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
 80057c6:	e003      	b.n	80057d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b08c      	sub	sp, #48	; 0x30
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x26>
 8005804:	2302      	movs	r3, #2
 8005806:	e198      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x358>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005810:	f7fc ff9c 	bl	800274c <HAL_GetTick>
 8005814:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800581c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800582a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800582e:	2b01      	cmp	r3, #1
 8005830:	d00f      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x70>
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005838:	d107      	bne.n	800584a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <HAL_SPI_TransmitReceive+0x68>
 8005842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005846:	2b04      	cmp	r3, #4
 8005848:	d003      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005850:	e16d      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x82>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x82>
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d103      	bne.n	800586c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800586a:	e160      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b04      	cmp	r3, #4
 8005876:	d003      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2205      	movs	r2, #5
 800587c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	887a      	ldrh	r2, [r7, #2]
 8005896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	887a      	ldrh	r2, [r7, #2]
 80058a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058dc:	d17c      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x10a>
 80058e6:	8b7b      	ldrh	r3, [r7, #26]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d16a      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005910:	e057      	b.n	80059c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d11b      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x176>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x176>
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d113      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d119      	bne.n	800599a <HAL_SPI_TransmitReceive+0x1b8>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	b292      	uxth	r2, r2
 800597c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800599a:	f7fc fed7 	bl	800274c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d80b      	bhi.n	80059c2 <HAL_SPI_TransmitReceive+0x1e0>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b0:	d007      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80059c0:	e0b5      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1a2      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x130>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d19d      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x130>
 80059d6:	e080      	b.n	8005ada <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x204>
 80059e0:	8b7b      	ldrh	r3, [r7, #26]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d16f      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a0c:	e05b      	b.n	8005ac6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d11c      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x274>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x274>
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d114      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	7812      	ldrb	r2, [r2, #0]
 8005a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d119      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x2b6>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d014      	beq.n	8005a98 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a94:	2301      	movs	r3, #1
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a98:	f7fc fe58 	bl	800274c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d803      	bhi.n	8005ab0 <HAL_SPI_TransmitReceive+0x2ce>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aae:	d102      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x2d4>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005ac4:	e033      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d19e      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x22c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d199      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f90a 	bl	8005cf8 <SPI_EndRxTxTransaction>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005af6:	e01a      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b24:	e003      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3730      	adds	r7, #48	; 0x30
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b54:	f7fc fdfa 	bl	800274c <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b64:	f7fc fdf2 	bl	800274c <HAL_GetTick>
 8005b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b6a:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	015b      	lsls	r3, r3, #5
 8005b70:	0d1b      	lsrs	r3, r3, #20
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7a:	e054      	b.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b82:	d050      	beq.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b84:	f7fc fde2 	bl	800274c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d902      	bls.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d13d      	bne.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb2:	d111      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbc:	d004      	beq.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc6:	d107      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be0:	d10f      	bne.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e017      	b.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d19b      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000000 	.word	0x20000000

08005c54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c68:	d111      	bne.n	8005c8e <SPI_EndRxTransaction+0x3a>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c72:	d004      	beq.n	8005c7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7c:	d107      	bne.n	8005c8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c96:	d117      	bne.n	8005cc8 <SPI_EndRxTransaction+0x74>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d112      	bne.n	8005cc8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2101      	movs	r1, #1
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff ff49 	bl	8005b44 <SPI_WaitFlagStateUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01a      	beq.n	8005cee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e013      	b.n	8005cf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff ff36 	bl	8005b44 <SPI_WaitFlagStateUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e000      	b.n	8005cf0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2180      	movs	r1, #128	; 0x80
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff ff18 	bl	8005b44 <SPI_WaitFlagStateUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1e:	f043 0220 	orr.w	r2, r3, #32
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e000      	b.n	8005d2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e041      	b.n	8005dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc fb80 	bl	8002460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 f82e 	bl	8005dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <TIM_Base_SetConfig+0xc8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <TIM_Base_SetConfig+0xcc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <TIM_Base_SetConfig+0xd0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <TIM_Base_SetConfig+0xd4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <TIM_Base_SetConfig+0xc8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00f      	beq.n	8005e46 <TIM_Base_SetConfig+0x72>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d00b      	beq.n	8005e46 <TIM_Base_SetConfig+0x72>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <TIM_Base_SetConfig+0xcc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_Base_SetConfig+0x72>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <TIM_Base_SetConfig+0xd0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_Base_SetConfig+0x72>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <TIM_Base_SetConfig+0xd4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d108      	bne.n	8005e58 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <TIM_Base_SetConfig+0xc8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d103      	bne.n	8005e8c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	615a      	str	r2, [r3, #20]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00

08005eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e04b      	b.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a19      	ldr	r2, [pc, #100]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10c      	bne.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00

08005f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e042      	b.n	8006010 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fc fad0 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f82b 	bl	8006018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006052:	f023 030c 	bic.w	r3, r3, #12
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	430b      	orrs	r3, r1
 800605e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <UART_SetConfig+0x114>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d103      	bne.n	8006088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006080:	f7fe ff6c 	bl	8004f5c <HAL_RCC_GetPCLK2Freq>
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	e002      	b.n	800608e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe ff54 	bl	8004f34 <HAL_RCC_GetPCLK1Freq>
 800608c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009a      	lsls	r2, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	4a22      	ldr	r2, [pc, #136]	; (8006130 <UART_SetConfig+0x118>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	0119      	lsls	r1, r3, #4
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009a      	lsls	r2, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <UART_SetConfig+0x118>)
 80060c6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	2064      	movs	r0, #100	; 0x64
 80060ce:	fb00 f303 	mul.w	r3, r0, r3
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	3332      	adds	r3, #50	; 0x32
 80060d8:	4a15      	ldr	r2, [pc, #84]	; (8006130 <UART_SetConfig+0x118>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e4:	4419      	add	r1, r3
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009a      	lsls	r2, r3, #2
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060fc:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <UART_SetConfig+0x118>)
 80060fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	2064      	movs	r0, #100	; 0x64
 8006106:	fb00 f303 	mul.w	r3, r0, r3
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	3332      	adds	r3, #50	; 0x32
 8006110:	4a07      	ldr	r2, [pc, #28]	; (8006130 <UART_SetConfig+0x118>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	440a      	add	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40013800 	.word	0x40013800
 8006130:	51eb851f 	.word	0x51eb851f

08006134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006134:	b084      	sub	sp, #16
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	f107 001c 	add.w	r0, r7, #28
 8006142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f9de 	bl	8007514 <USB_CoreReset>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006174:	b004      	add	sp, #16
 8006176:	4770      	bx	lr

08006178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d165      	bne.n	8006258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4a3e      	ldr	r2, [pc, #248]	; (8006288 <USB_SetTurnaroundTime+0x110>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d906      	bls.n	80061a2 <USB_SetTurnaroundTime+0x2a>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4a3d      	ldr	r2, [pc, #244]	; (800628c <USB_SetTurnaroundTime+0x114>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d202      	bcs.n	80061a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800619c:	230f      	movs	r3, #15
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e05c      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a39      	ldr	r2, [pc, #228]	; (800628c <USB_SetTurnaroundTime+0x114>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d306      	bcc.n	80061b8 <USB_SetTurnaroundTime+0x40>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4a38      	ldr	r2, [pc, #224]	; (8006290 <USB_SetTurnaroundTime+0x118>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d202      	bcs.n	80061b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061b2:	230e      	movs	r3, #14
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	e051      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a35      	ldr	r2, [pc, #212]	; (8006290 <USB_SetTurnaroundTime+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d306      	bcc.n	80061ce <USB_SetTurnaroundTime+0x56>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4a34      	ldr	r2, [pc, #208]	; (8006294 <USB_SetTurnaroundTime+0x11c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d202      	bcs.n	80061ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061c8:	230d      	movs	r3, #13
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e046      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a30      	ldr	r2, [pc, #192]	; (8006294 <USB_SetTurnaroundTime+0x11c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d306      	bcc.n	80061e4 <USB_SetTurnaroundTime+0x6c>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <USB_SetTurnaroundTime+0x120>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d802      	bhi.n	80061e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061de:	230c      	movs	r3, #12
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e03b      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	; (8006298 <USB_SetTurnaroundTime+0x120>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d906      	bls.n	80061fa <USB_SetTurnaroundTime+0x82>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4a2b      	ldr	r2, [pc, #172]	; (800629c <USB_SetTurnaroundTime+0x124>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d802      	bhi.n	80061fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061f4:	230b      	movs	r3, #11
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e030      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <USB_SetTurnaroundTime+0x124>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d906      	bls.n	8006210 <USB_SetTurnaroundTime+0x98>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <USB_SetTurnaroundTime+0x128>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d802      	bhi.n	8006210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800620a:	230a      	movs	r3, #10
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e025      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a23      	ldr	r2, [pc, #140]	; (80062a0 <USB_SetTurnaroundTime+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d906      	bls.n	8006226 <USB_SetTurnaroundTime+0xae>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <USB_SetTurnaroundTime+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d202      	bcs.n	8006226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006220:	2309      	movs	r3, #9
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e01a      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <USB_SetTurnaroundTime+0x12c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d306      	bcc.n	800623c <USB_SetTurnaroundTime+0xc4>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <USB_SetTurnaroundTime+0x130>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d802      	bhi.n	800623c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006236:	2308      	movs	r3, #8
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e00f      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <USB_SetTurnaroundTime+0x130>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d906      	bls.n	8006252 <USB_SetTurnaroundTime+0xda>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a19      	ldr	r2, [pc, #100]	; (80062ac <USB_SetTurnaroundTime+0x134>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d202      	bcs.n	8006252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800624c:	2307      	movs	r3, #7
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e004      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006252:	2306      	movs	r3, #6
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e001      	b.n	800625c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006258:	2309      	movs	r3, #9
 800625a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	00d8acbf 	.word	0x00d8acbf
 800628c:	00e4e1c0 	.word	0x00e4e1c0
 8006290:	00f42400 	.word	0x00f42400
 8006294:	01067380 	.word	0x01067380
 8006298:	011a499f 	.word	0x011a499f
 800629c:	01312cff 	.word	0x01312cff
 80062a0:	014ca43f 	.word	0x014ca43f
 80062a4:	016e3600 	.word	0x016e3600
 80062a8:	01a6ab1f 	.word	0x01a6ab1f
 80062ac:	01e84800 	.word	0x01e84800

080062b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f043 0201 	orr.w	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 0201 	bic.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d115      	bne.n	800633e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800631e:	2001      	movs	r0, #1
 8006320:	f7fc fa1e 	bl	8002760 <HAL_Delay>
      ms++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 f87a 	bl	8007424 <USB_GetMode>
 8006330:	4603      	mov	r3, r0
 8006332:	2b01      	cmp	r3, #1
 8006334:	d01e      	beq.n	8006374 <USB_SetCurrentMode+0x84>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b31      	cmp	r3, #49	; 0x31
 800633a:	d9f0      	bls.n	800631e <USB_SetCurrentMode+0x2e>
 800633c:	e01a      	b.n	8006374 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d115      	bne.n	8006370 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006350:	2001      	movs	r0, #1
 8006352:	f7fc fa05 	bl	8002760 <HAL_Delay>
      ms++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f861 	bl	8007424 <USB_GetMode>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <USB_SetCurrentMode+0x84>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b31      	cmp	r3, #49	; 0x31
 800636c:	d9f0      	bls.n	8006350 <USB_SetCurrentMode+0x60>
 800636e:	e001      	b.n	8006374 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e005      	b.n	8006380 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b32      	cmp	r3, #50	; 0x32
 8006378:	d101      	bne.n	800637e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	e009      	b.n	80063bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3340      	adds	r3, #64	; 0x40
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b0e      	cmp	r3, #14
 80063c0:	d9f2      	bls.n	80063a8 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063da:	2103      	movs	r1, #3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f959 	bl	8006694 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063e2:	2110      	movs	r1, #16
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f8f1 	bl	80065cc <USB_FlushTxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f91d 	bl	8006634 <USB_FlushRxFifo>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	461a      	mov	r2, r3
 8006418:	2300      	movs	r3, #0
 800641a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	e043      	b.n	80064b6 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006444:	d118      	bne.n	8006478 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	461a      	mov	r2, r3
 800645a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e013      	b.n	800648a <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	461a      	mov	r2, r3
 8006470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e008      	b.n	800648a <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	461a      	mov	r2, r3
 80064aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	3301      	adds	r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d3b7      	bcc.n	800642e <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064be:	2300      	movs	r3, #0
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e043      	b.n	800654c <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064da:	d118      	bne.n	800650e <USB_DevInit+0x186>
    {
      if (i == 0U)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e013      	b.n	8006520 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e008      	b.n	8006520 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	461a      	mov	r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	461a      	mov	r2, r3
 8006540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d3b7      	bcc.n	80064c4 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006566:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f043 0210 	orr.w	r2, r3, #16
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <USB_DevInit+0x240>)
 8006588:	4313      	orrs	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800658e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f043 0208 	orr.w	r2, r3, #8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d107      	bne.n	80065b6 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065c2:	b004      	add	sp, #16
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	803c3800 	.word	0x803c3800

080065cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <USB_FlushTxFifo+0x64>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e01b      	b.n	8006624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	daf2      	bge.n	80065da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	019b      	lsls	r3, r3, #6
 80065fc:	f043 0220 	orr.w	r2, r3, #32
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <USB_FlushTxFifo+0x64>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e006      	b.n	8006624 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b20      	cmp	r3, #32
 8006620:	d0f0      	beq.n	8006604 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	00030d40 	.word	0x00030d40

08006634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a11      	ldr	r2, [pc, #68]	; (8006690 <USB_FlushRxFifo+0x5c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d901      	bls.n	8006652 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e018      	b.n	8006684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	daf2      	bge.n	8006640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2210      	movs	r2, #16
 8006662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <USB_FlushRxFifo+0x5c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e006      	b.n	8006684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b10      	cmp	r3, #16
 8006680:	d0f0      	beq.n	8006664 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	00030d40 	.word	0x00030d40

08006694 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0306 	and.w	r3, r3, #6
 80066dc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d002      	beq.n	80066ea <USB_GetDevSpeed+0x26>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b06      	cmp	r3, #6
 80066e8:	d102      	bne.n	80066f0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066ea:	2302      	movs	r3, #2
 80066ec:	75fb      	strb	r3, [r7, #23]
 80066ee:	e001      	b.n	80066f4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80066f0:	230f      	movs	r3, #15
 80066f2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d13a      	bne.n	8006792 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673a:	4313      	orrs	r3, r2
 800673c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d155      	bne.n	8006800 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	791b      	ldrb	r3, [r3, #4]
 800676e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006770:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	059b      	lsls	r3, r3, #22
 8006776:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006778:	4313      	orrs	r3, r2
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e036      	b.n	8006800 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	2101      	movs	r1, #1
 80067a4:	fa01 f303 	lsl.w	r3, r1, r3
 80067a8:	041b      	lsls	r3, r3, #16
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11a      	bne.n	8006800 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	791b      	ldrb	r3, [r3, #4]
 80067e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067e6:	430b      	orrs	r3, r1
 80067e8:	4313      	orrs	r3, r2
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d161      	bne.n	80068ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683e:	d11f      	bne.n	8006880 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800685e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800687e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	b29b      	uxth	r3, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a0:	4013      	ands	r3, r2
 80068a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c4:	4013      	ands	r3, r2
 80068c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	0159      	lsls	r1, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	440b      	add	r3, r1
 80068de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e2:	4619      	mov	r1, r3
 80068e4:	4b35      	ldr	r3, [pc, #212]	; (80069bc <USB_DeactivateEndpoint+0x1b0>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	600b      	str	r3, [r1, #0]
 80068ea:	e060      	b.n	80069ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006902:	d11f      	bne.n	8006944 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006922:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	43db      	mvns	r3, r3
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006964:	4013      	ands	r3, r2
 8006966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	43db      	mvns	r3, r3
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006988:	4013      	ands	r3, r2
 800698a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	0159      	lsls	r1, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	4619      	mov	r1, r3
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <USB_DeactivateEndpoint+0x1b4>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	ec337800 	.word	0xec337800
 80069c0:	eff37800 	.word	0xeff37800

080069c4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	f040 8128 	bne.w	8006c32 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d132      	bne.n	8006a50 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a48:	0cdb      	lsrs	r3, r3, #19
 8006a4a:	04db      	lsls	r3, r3, #19
 8006a4c:	6113      	str	r3, [r2, #16]
 8006a4e:	e092      	b.n	8006b76 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6a:	0cdb      	lsrs	r3, r3, #19
 8006a6c:	04db      	lsls	r3, r3, #19
 8006a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11a      	bne.n	8006ad0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d903      	bls.n	8006aae <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006acc:	6113      	str	r3, [r2, #16]
 8006ace:	e01b      	b.n	8006b08 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6919      	ldr	r1, [r3, #16]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	440b      	add	r3, r1
 8006ae8:	1e59      	subs	r1, r3, #1
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006af2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006af4:	4b8d      	ldr	r3, [pc, #564]	; (8006d2c <USB_EPStartXfer+0x368>)
 8006af6:	400b      	ands	r3, r1
 8006af8:	6939      	ldr	r1, [r7, #16]
 8006afa:	0148      	lsls	r0, r1, #5
 8006afc:	6979      	ldr	r1, [r7, #20]
 8006afe:	4401      	add	r1, r0
 8006b00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b04:	4313      	orrs	r3, r2
 8006b06:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	691a      	ldr	r2, [r3, #16]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b1e:	6939      	ldr	r1, [r7, #16]
 8006b20:	0148      	lsls	r0, r1, #5
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	4401      	add	r1, r0
 8006b26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	791b      	ldrb	r3, [r3, #4]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d11f      	bne.n	8006b76 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b74:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b94:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	791b      	ldrb	r3, [r3, #4]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d015      	beq.n	8006bca <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8139 	beq.w	8006e1a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f303 	lsl.w	r3, r1, r3
 8006bbe:	6979      	ldr	r1, [r7, #20]
 8006bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	634b      	str	r3, [r1, #52]	; 0x34
 8006bc8:	e127      	b.n	8006e1a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d110      	bne.n	8006bfc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e00f      	b.n	8006c1c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68d9      	ldr	r1, [r3, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9a5 	bl	8006f7a <USB_WritePacket>
 8006c30:	e0f3      	b.n	8006e1a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4c:	0cdb      	lsrs	r3, r3, #19
 8006c4e:	04db      	lsls	r3, r3, #19
 8006c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c74:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d12f      	bne.n	8006cdc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006caa:	6939      	ldr	r1, [r7, #16]
 8006cac:	0148      	lsls	r0, r1, #5
 8006cae:	6979      	ldr	r1, [r7, #20]
 8006cb0:	4401      	add	r1, r0
 8006cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cd8:	6113      	str	r3, [r2, #16]
 8006cda:	e061      	b.n	8006da0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d125      	bne.n	8006d30 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfa:	6939      	ldr	r1, [r7, #16]
 8006cfc:	0148      	lsls	r0, r1, #5
 8006cfe:	6979      	ldr	r1, [r7, #20]
 8006d00:	4401      	add	r1, r0
 8006d02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d06:	4313      	orrs	r3, r2
 8006d08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d28:	6113      	str	r3, [r2, #16]
 8006d2a:	e039      	b.n	8006da0 <USB_EPStartXfer+0x3dc>
 8006d2c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691a      	ldr	r2, [r3, #16]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	1e5a      	subs	r2, r3, #1
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d44:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	89fa      	ldrh	r2, [r7, #14]
 8006d4c:	fb03 f202 	mul.w	r2, r3, r2
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	04d9      	lsls	r1, r3, #19
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <USB_EPStartXfer+0x460>)
 8006d68:	400b      	ands	r3, r1
 8006d6a:	6939      	ldr	r1, [r7, #16]
 8006d6c:	0148      	lsls	r0, r1, #5
 8006d6e:	6979      	ldr	r1, [r7, #20]
 8006d70:	4401      	add	r1, r0
 8006d72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d76:	4313      	orrs	r3, r2
 8006d78:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d90:	6939      	ldr	r1, [r7, #16]
 8006d92:	0148      	lsls	r0, r1, #5
 8006d94:	6979      	ldr	r1, [r7, #20]
 8006d96:	4401      	add	r1, r0
 8006d98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d128      	bne.n	8006dfa <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d110      	bne.n	8006dda <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e00f      	b.n	8006dfa <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	1ff80000 	.word	0x1ff80000

08006e28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	785b      	ldrb	r3, [r3, #1]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d14a      	bne.n	8006edc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e5e:	f040 8086 	bne.w	8006f6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d902      	bls.n	8006ec0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e056      	b.n	8006f6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed8:	d0e7      	beq.n	8006eaa <USB_EPStopXfer+0x82>
 8006eda:	e048      	b.n	8006f6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef4:	d13b      	bne.n	8006f6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d902      	bls.n	8006f54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
          break;
 8006f52:	e00c      	b.n	8006f6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f6c:	d0e7      	beq.n	8006f3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b089      	sub	sp, #36	; 0x24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	4611      	mov	r1, r2
 8006f86:	461a      	mov	r2, r3
 8006f88:	460b      	mov	r3, r1
 8006f8a:	71fb      	strb	r3, [r7, #7]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006f98:	88bb      	ldrh	r3, [r7, #4]
 8006f9a:	3303      	adds	r3, #3
 8006f9c:	089b      	lsrs	r3, r3, #2
 8006f9e:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e018      	b.n	8006fd8 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	031a      	lsls	r2, r3, #12
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d3e2      	bcc.n	8006fa6 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3724      	adds	r7, #36	; 0x24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b08b      	sub	sp, #44	; 0x2c
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	b29b      	uxth	r3, r3
 8007008:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	623b      	str	r3, [r7, #32]
 8007016:	e014      	b.n	8007042 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	601a      	str	r2, [r3, #0]
    pDest++;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	3301      	adds	r3, #1
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	3301      	adds	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	3301      	adds	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	3301      	adds	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	3301      	adds	r3, #1
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	429a      	cmp	r2, r3
 8007048:	d3e6      	bcc.n	8007018 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800704a:	8bfb      	ldrh	r3, [r7, #30]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705a:	461a      	mov	r2, r3
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	6812      	ldr	r2, [r2, #0]
 8007062:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	701a      	strb	r2, [r3, #0]
      i++;
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	3301      	adds	r3, #1
 800707a:	623b      	str	r3, [r7, #32]
      pDest++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	3b01      	subs	r3, #1
 8007086:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007088:	8bfb      	ldrh	r3, [r7, #30]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ea      	bne.n	8007064 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007090:	4618      	mov	r0, r3
 8007092:	372c      	adds	r7, #44	; 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d12c      	bne.n	8007110 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	db12      	blt.n	80070ee <USB_EPSetStall+0x54>
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00f      	beq.n	80070ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	0151      	lsls	r1, r2, #5
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	440a      	add	r2, r1
 8007104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e02b      	b.n	8007168 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db12      	blt.n	8007148 <USB_EPSetStall+0xae>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00f      	beq.n	8007148 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007142:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007146:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d128      	bne.n	80071e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	791b      	ldrb	r3, [r3, #4]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d003      	beq.n	80071c0 <USB_EPClearStall+0x4c>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	791b      	ldrb	r3, [r3, #4]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d138      	bne.n	8007232 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e027      	b.n	8007232 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007200:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	791b      	ldrb	r3, [r3, #4]
 8007206:	2b03      	cmp	r3, #3
 8007208:	d003      	beq.n	8007212 <USB_EPClearStall+0x9e>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d10f      	bne.n	8007232 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007230:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007260:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007278:	4313      	orrs	r3, r2
 800727a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr

08007288 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b6:	f023 0302 	bic.w	r3, r3, #2
 80072ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f6:	f043 0302 	orr.w	r3, r3, #2
 80072fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4013      	ands	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr

0800732c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4013      	ands	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	0c1b      	lsrs	r3, r3, #16
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr

0800735e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	4013      	ands	r3, r2
 8007380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	b29b      	uxth	r3, r3
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b087      	sub	sp, #28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4013      	ands	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007418:	68bb      	ldr	r3, [r7, #8]
}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0301 	and.w	r3, r3, #1
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800745c:	f023 0307 	bic.w	r3, r3, #7
 8007460:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007474:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
	...

08007484 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	333c      	adds	r3, #60	; 0x3c
 8007496:	3304      	adds	r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4a1c      	ldr	r2, [pc, #112]	; (8007510 <USB_EP0_OutStart+0x8c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d90a      	bls.n	80074ba <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b4:	d101      	bne.n	80074ba <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e024      	b.n	8007504 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c0:	461a      	mov	r2, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e8:	f043 0318 	orr.w	r3, r3, #24
 80074ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007500:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	bc80      	pop	{r7}
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	4f54300a 	.word	0x4f54300a

08007514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a12      	ldr	r2, [pc, #72]	; (8007574 <USB_CoreReset+0x60>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d901      	bls.n	8007532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e01b      	b.n	800756a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	daf2      	bge.n	8007520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f043 0201 	orr.w	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4a08      	ldr	r2, [pc, #32]	; (8007574 <USB_CoreReset+0x60>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e006      	b.n	800756a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b01      	cmp	r3, #1
 8007566:	d0f0      	beq.n	800754a <USB_CoreReset+0x36>

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	00030d40 	.word	0x00030d40

08007578 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7c1b      	ldrb	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d115      	bne.n	80075bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007594:	2202      	movs	r2, #2
 8007596:	2181      	movs	r1, #129	; 0x81
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 ff22 	bl	80093e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075a8:	2202      	movs	r2, #2
 80075aa:	2101      	movs	r1, #1
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 ff18 	bl	80093e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80075ba:	e012      	b.n	80075e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80075bc:	2340      	movs	r3, #64	; 0x40
 80075be:	2202      	movs	r2, #2
 80075c0:	2181      	movs	r1, #129	; 0x81
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 ff0d 	bl	80093e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075ce:	2340      	movs	r3, #64	; 0x40
 80075d0:	2202      	movs	r2, #2
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 ff04 	bl	80093e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075e2:	2308      	movs	r3, #8
 80075e4:	2203      	movs	r2, #3
 80075e6:	2182      	movs	r1, #130	; 0x82
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fefa 	bl	80093e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80075f8:	f002 f81a 	bl	8009630 <USBD_static_malloc>
 80075fc:	4602      	mov	r2, r0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800760e:	2301      	movs	r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
 8007612:	e026      	b.n	8007662 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2200      	movs	r2, #0
 8007632:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	7c1b      	ldrb	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007648:	2101      	movs	r1, #1
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 ffb9 	bl	80095c2 <USBD_LL_PrepareReceive>
 8007650:	e007      	b.n	8007662 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	2101      	movs	r1, #1
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 ffb0 	bl	80095c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800767c:	2181      	movs	r1, #129	; 0x81
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 fed5 	bl	800942e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800768a:	2101      	movs	r1, #1
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 fece 	bl	800942e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800769a:	2182      	movs	r1, #130	; 0x82
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fec6 	bl	800942e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00e      	beq.n	80076d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 ffc0 	bl	8009648 <USBD_static_free>
    pdev->pClassData = NULL;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007700:	2b00      	cmp	r3, #0
 8007702:	d039      	beq.n	8007778 <USBD_CDC_Setup+0x9e>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d17f      	bne.n	8007808 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	88db      	ldrh	r3, [r3, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d029      	beq.n	8007764 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b25b      	sxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	da11      	bge.n	800773e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007726:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	88d2      	ldrh	r2, [r2, #6]
 800772c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800772e:	6939      	ldr	r1, [r7, #16]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88db      	ldrh	r3, [r3, #6]
 8007734:	461a      	mov	r2, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fa41 	bl	8008bbe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800773c:	e06b      	b.n	8007816 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785a      	ldrb	r2, [r3, #1]
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	88db      	ldrh	r3, [r3, #6]
 800774c:	b2da      	uxtb	r2, r3
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007754:	6939      	ldr	r1, [r7, #16]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	461a      	mov	r2, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 fa5c 	bl	8008c1a <USBD_CtlPrepareRx>
      break;
 8007762:	e058      	b.n	8007816 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	7850      	ldrb	r0, [r2, #1]
 8007770:	2200      	movs	r2, #0
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	4798      	blx	r3
      break;
 8007776:	e04e      	b.n	8007816 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b0b      	cmp	r3, #11
 800777e:	d02e      	beq.n	80077de <USBD_CDC_Setup+0x104>
 8007780:	2b0b      	cmp	r3, #11
 8007782:	dc38      	bgt.n	80077f6 <USBD_CDC_Setup+0x11c>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <USBD_CDC_Setup+0xb4>
 8007788:	2b0a      	cmp	r3, #10
 800778a:	d014      	beq.n	80077b6 <USBD_CDC_Setup+0xdc>
 800778c:	e033      	b.n	80077f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007794:	2b03      	cmp	r3, #3
 8007796:	d107      	bne.n	80077a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007798:	f107 030c 	add.w	r3, r7, #12
 800779c:	2202      	movs	r2, #2
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 fa0c 	bl	8008bbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077a6:	e02e      	b.n	8007806 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f99d 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	75fb      	strb	r3, [r7, #23]
          break;
 80077b4:	e027      	b.n	8007806 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d107      	bne.n	80077d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80077c0:	f107 030f 	add.w	r3, r7, #15
 80077c4:	2201      	movs	r2, #1
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 f9f8 	bl	8008bbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077ce:	e01a      	b.n	8007806 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f989 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 80077d8:	2302      	movs	r3, #2
 80077da:	75fb      	strb	r3, [r7, #23]
          break;
 80077dc:	e013      	b.n	8007806 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d00d      	beq.n	8007804 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 f97d 	bl	8008aea <USBD_CtlError>
            ret = USBD_FAIL;
 80077f0:	2302      	movs	r3, #2
 80077f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077f4:	e006      	b.n	8007804 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 f976 	bl	8008aea <USBD_CtlError>
          ret = USBD_FAIL;
 80077fe:	2302      	movs	r3, #2
 8007800:	75fb      	strb	r3, [r7, #23]
          break;
 8007802:	e000      	b.n	8007806 <USBD_CDC_Setup+0x12c>
          break;
 8007804:	bf00      	nop
      }
      break;
 8007806:	e006      	b.n	8007816 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 f96d 	bl	8008aea <USBD_CtlError>
      ret = USBD_FAIL;
 8007810:	2302      	movs	r3, #2
 8007812:	75fb      	strb	r3, [r7, #23]
      break;
 8007814:	bf00      	nop
  }

  return ret;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007832:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800783a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d03a      	beq.n	80078bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	331c      	adds	r3, #28
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d029      	beq.n	80078b0 <USBD_CDC_DataIn+0x90>
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	331c      	adds	r3, #28
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	78f9      	ldrb	r1, [r7, #3]
 8007870:	68b8      	ldr	r0, [r7, #8]
 8007872:	460b      	mov	r3, r1
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	440b      	add	r3, r1
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4403      	add	r3, r0
 800787c:	3344      	adds	r3, #68	; 0x44
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	fbb2 f1f3 	udiv	r1, r2, r3
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d110      	bne.n	80078b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	331c      	adds	r3, #28
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078a2:	78f9      	ldrb	r1, [r7, #3]
 80078a4:	2300      	movs	r3, #0
 80078a6:	2200      	movs	r2, #0
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fe67 	bl	800957c <USBD_LL_Transmit>
 80078ae:	e003      	b.n	80078b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e000      	b.n	80078be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80078bc:	2302      	movs	r3, #2
  }
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 fe92 	bl	8009608 <USBD_LL_GetRxDataSize>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800790a:	4611      	mov	r1, r2
 800790c:	4798      	blx	r3

    return USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007932:	2b00      	cmp	r3, #0
 8007934:	d015      	beq.n	8007962 <USBD_CDC_EP0_RxReady+0x46>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800793c:	2bff      	cmp	r3, #255	; 0xff
 800793e:	d010      	beq.n	8007962 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800794e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007956:	b292      	uxth	r2, r2
 8007958:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2243      	movs	r2, #67	; 0x43
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000094 	.word	0x20000094

0800798c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2243      	movs	r2, #67	; 0x43
 8007998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800799a:	4b03      	ldr	r3, [pc, #12]	; (80079a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000050 	.word	0x20000050

080079ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2243      	movs	r2, #67	; 0x43
 80079b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	200000d8 	.word	0x200000d8

080079cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	220a      	movs	r2, #10
 80079d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000000c 	.word	0x2000000c

080079ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80079f6:	2302      	movs	r3, #2
 80079f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01c      	beq.n	8007ac4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d115      	bne.n	8007ac0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2181      	movs	r1, #129	; 0x81
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fd60 	bl	800957c <USBD_LL_Transmit>

      return USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e002      	b.n	8007ac6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007ac4:	2302      	movs	r3, #2
  }
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7c1b      	ldrb	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007afa:	2101      	movs	r1, #1
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fd60 	bl	80095c2 <USBD_LL_PrepareReceive>
 8007b02:	e007      	b.n	8007b14 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b0a:	2340      	movs	r3, #64	; 0x40
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fd57 	bl	80095c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	e000      	b.n	8007b1a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007b18:	2302      	movs	r3, #2
  }
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b36:	2302      	movs	r3, #2
 8007b38:	e01a      	b.n	8007b70 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	79fa      	ldrb	r2, [r7, #7]
 8007b66:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f001 fbdb 	bl	8009324 <USBD_LL_Init>

  return USBD_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d006      	beq.n	8007b9a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e001      	b.n	8007b9e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fbfa 	bl	80093ac <USBD_LL_Start>

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007be2:	2302      	movs	r3, #2
 8007be4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 ff10 	bl	8008a72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c60:	461a      	mov	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d016      	beq.n	8007ca4 <USBD_LL_SetupStage+0x6a>
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d81c      	bhi.n	8007cb4 <USBD_LL_SetupStage+0x7a>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <USBD_LL_SetupStage+0x4a>
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d008      	beq.n	8007c94 <USBD_LL_SetupStage+0x5a>
 8007c82:	e017      	b.n	8007cb4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa03 	bl	8008098 <USBD_StdDevReq>
      break;
 8007c92:	e01a      	b.n	8007cca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fa65 	bl	800816c <USBD_StdItfReq>
      break;
 8007ca2:	e012      	b.n	8007cca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 faa5 	bl	80081fc <USBD_StdEPReq>
      break;
 8007cb2:	e00a      	b.n	8007cca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fbd2 	bl	800946c <USBD_LL_StallEP>
      break;
 8007cc8:	bf00      	nop
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d14b      	bne.n	8007d80 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007cee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d134      	bne.n	8007d64 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d919      	bls.n	8007d3a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d203      	bcs.n	8007d28 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	e002      	b.n	8007d2e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 ff8f 	bl	8008c56 <USBD_CtlContinueRx>
 8007d38:	e038      	b.n	8007dac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d105      	bne.n	8007d5c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 ff8c 	bl	8008c7a <USBD_CtlSendStatus>
 8007d62:	e023      	b.n	8007dac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d11e      	bne.n	8007dac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d76:	2100      	movs	r1, #0
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 fb77 	bl	800946c <USBD_LL_StallEP>
 8007d7e:	e015      	b.n	8007dac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00d      	beq.n	8007da8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d108      	bne.n	8007da8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	7afa      	ldrb	r2, [r7, #11]
 8007da0:	4611      	mov	r1, r2
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	4798      	blx	r3
 8007da6:	e001      	b.n	8007dac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007da8:	2302      	movs	r3, #2
 8007daa:	e000      	b.n	8007dae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d17f      	bne.n	8007eca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d15c      	bne.n	8007e94 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d915      	bls.n	8007e12 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fef9 	bl	8008bf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e04:	2300      	movs	r3, #0
 8007e06:	2200      	movs	r2, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f001 fbd9 	bl	80095c2 <USBD_LL_PrepareReceive>
 8007e10:	e04e      	b.n	8007eb0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	6912      	ldr	r2, [r2, #16]
 8007e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e1e:	fb01 f202 	mul.w	r2, r1, r2
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11c      	bne.n	8007e62 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d316      	bcc.n	8007e62 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d20f      	bcs.n	8007e62 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fed5 	bl	8008bf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e54:	2300      	movs	r3, #0
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 fbb1 	bl	80095c2 <USBD_LL_PrepareReceive>
 8007e60:	e026      	b.n	8007eb0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d105      	bne.n	8007e84 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e84:	2180      	movs	r1, #128	; 0x80
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f001 faf0 	bl	800946c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 ff07 	bl	8008ca0 <USBD_CtlReceiveStatus>
 8007e92:	e00d      	b.n	8007eb0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d004      	beq.n	8007ea8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f001 fade 	bl	800946c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d11d      	bne.n	8007ef6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fe81 	bl	8007bc2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ec8:	e015      	b.n	8007ef6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d108      	bne.n	8007ef2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	4611      	mov	r1, r2
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	4798      	blx	r3
 8007ef0:	e001      	b.n	8007ef6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e000      	b.n	8007ef8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fa67 	bl	80093e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2240      	movs	r2, #64	; 0x40
 8007f20:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	2200      	movs	r2, #0
 8007f28:	2180      	movs	r1, #128	; 0x80
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fa59 	bl	80093e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2240      	movs	r2, #64	; 0x40
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6852      	ldr	r2, [r2, #4]
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	4611      	mov	r1, r2
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
  }

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d105      	bne.n	8007fe6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	2b03      	cmp	r3, #3
 8008002:	d10b      	bne.n	800801c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr

0800803e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr

08008056 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6852      	ldr	r2, [r2, #4]
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	4611      	mov	r1, r2
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d005      	beq.n	80080be <USBD_StdDevReq+0x26>
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	d84f      	bhi.n	8008156 <USBD_StdDevReq+0xbe>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <USBD_StdDevReq+0x36>
 80080ba:	2b20      	cmp	r3, #32
 80080bc:	d14b      	bne.n	8008156 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	4798      	blx	r3
      break;
 80080cc:	e048      	b.n	8008160 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	d839      	bhi.n	800814a <USBD_StdDevReq+0xb2>
 80080d6:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <USBD_StdDevReq+0x44>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	08008141 	.word	0x08008141
 80080e4:	0800814b 	.word	0x0800814b
 80080e8:	08008137 	.word	0x08008137
 80080ec:	0800814b 	.word	0x0800814b
 80080f0:	0800810f 	.word	0x0800810f
 80080f4:	08008105 	.word	0x08008105
 80080f8:	0800814b 	.word	0x0800814b
 80080fc:	08008123 	.word	0x08008123
 8008100:	08008119 	.word	0x08008119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9dc 	bl	80084c4 <USBD_GetDescriptor>
          break;
 800810c:	e022      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fb3f 	bl	8008794 <USBD_SetAddress>
          break;
 8008116:	e01d      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fb7e 	bl	800881c <USBD_SetConfig>
          break;
 8008120:	e018      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc07 	bl	8008938 <USBD_GetConfig>
          break;
 800812a:	e013      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fc37 	bl	80089a2 <USBD_GetStatus>
          break;
 8008134:	e00e      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc65 	bl	8008a08 <USBD_SetFeature>
          break;
 800813e:	e009      	b.n	8008154 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fc74 	bl	8008a30 <USBD_ClrFeature>
          break;
 8008148:	e004      	b.n	8008154 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fccc 	bl	8008aea <USBD_CtlError>
          break;
 8008152:	bf00      	nop
      }
      break;
 8008154:	e004      	b.n	8008160 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fcc6 	bl	8008aea <USBD_CtlError>
      break;
 800815e:	bf00      	nop
  }

  return ret;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop

0800816c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d005      	beq.n	8008192 <USBD_StdItfReq+0x26>
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d82e      	bhi.n	80081e8 <USBD_StdItfReq+0x7c>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <USBD_StdItfReq+0x26>
 800818e:	2b20      	cmp	r3, #32
 8008190:	d12a      	bne.n	80081e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008198:	3b01      	subs	r3, #1
 800819a:	2b02      	cmp	r3, #2
 800819c:	d81d      	bhi.n	80081da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d813      	bhi.n	80081d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d110      	bne.n	80081e4 <USBD_StdItfReq+0x78>
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10d      	bne.n	80081e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fd56 	bl	8008c7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ce:	e009      	b.n	80081e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fc89 	bl	8008aea <USBD_CtlError>
          break;
 80081d8:	e004      	b.n	80081e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc84 	bl	8008aea <USBD_CtlError>
          break;
 80081e2:	e000      	b.n	80081e6 <USBD_StdItfReq+0x7a>
          break;
 80081e4:	bf00      	nop
      }
      break;
 80081e6:	e004      	b.n	80081f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fc7d 	bl	8008aea <USBD_CtlError>
      break;
 80081f0:	bf00      	nop
  }

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d007      	beq.n	800822c <USBD_StdEPReq+0x30>
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	f200 8146 	bhi.w	80084ae <USBD_StdEPReq+0x2b2>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <USBD_StdEPReq+0x40>
 8008226:	2b20      	cmp	r3, #32
 8008228:	f040 8141 	bne.w	80084ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      break;
 800823a:	e13d      	b.n	80084b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008244:	2b20      	cmp	r3, #32
 8008246:	d10a      	bne.n	800825e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]

        return ret;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	e12d      	b.n	80084ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d007      	beq.n	8008276 <USBD_StdEPReq+0x7a>
 8008266:	2b03      	cmp	r3, #3
 8008268:	f300 811b 	bgt.w	80084a2 <USBD_StdEPReq+0x2a6>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d072      	beq.n	8008356 <USBD_StdEPReq+0x15a>
 8008270:	2b01      	cmp	r3, #1
 8008272:	d03a      	beq.n	80082ea <USBD_StdEPReq+0xee>
 8008274:	e115      	b.n	80084a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827c:	2b02      	cmp	r3, #2
 800827e:	d002      	beq.n	8008286 <USBD_StdEPReq+0x8a>
 8008280:	2b03      	cmp	r3, #3
 8008282:	d015      	beq.n	80082b0 <USBD_StdEPReq+0xb4>
 8008284:	e02b      	b.n	80082de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00c      	beq.n	80082a6 <USBD_StdEPReq+0xaa>
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d009      	beq.n	80082a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 f8e8 	bl	800946c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800829c:	2180      	movs	r1, #128	; 0x80
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 f8e4 	bl	800946c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082a4:	e020      	b.n	80082e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc1e 	bl	8008aea <USBD_CtlError>
              break;
 80082ae:	e01b      	b.n	80082e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	885b      	ldrh	r3, [r3, #2]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10e      	bne.n	80082d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <USBD_StdEPReq+0xda>
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b80      	cmp	r3, #128	; 0x80
 80082c2:	d008      	beq.n	80082d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d104      	bne.n	80082d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f8cb 	bl	800946c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fccf 	bl	8008c7a <USBD_CtlSendStatus>

              break;
 80082dc:	e004      	b.n	80082e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fc02 	bl	8008aea <USBD_CtlError>
              break;
 80082e6:	bf00      	nop
          }
          break;
 80082e8:	e0e0      	b.n	80084ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d002      	beq.n	80082fa <USBD_StdEPReq+0xfe>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d015      	beq.n	8008324 <USBD_StdEPReq+0x128>
 80082f8:	e026      	b.n	8008348 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <USBD_StdEPReq+0x11e>
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b80      	cmp	r3, #128	; 0x80
 8008304:	d009      	beq.n	800831a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 f8ae 	bl	800946c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f8aa 	bl	800946c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008318:	e01c      	b.n	8008354 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fbe4 	bl	8008aea <USBD_CtlError>
              break;
 8008322:	e017      	b.n	8008354 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d112      	bne.n	8008352 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 f8b5 	bl	80094aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fc9a 	bl	8008c7a <USBD_CtlSendStatus>
              }
              break;
 8008346:	e004      	b.n	8008352 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fbcd 	bl	8008aea <USBD_CtlError>
              break;
 8008350:	e000      	b.n	8008354 <USBD_StdEPReq+0x158>
              break;
 8008352:	bf00      	nop
          }
          break;
 8008354:	e0aa      	b.n	80084ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835c:	2b02      	cmp	r3, #2
 800835e:	d002      	beq.n	8008366 <USBD_StdEPReq+0x16a>
 8008360:	2b03      	cmp	r3, #3
 8008362:	d032      	beq.n	80083ca <USBD_StdEPReq+0x1ce>
 8008364:	e097      	b.n	8008496 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <USBD_StdEPReq+0x180>
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b80      	cmp	r3, #128	; 0x80
 8008370:	d004      	beq.n	800837c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fbb8 	bl	8008aea <USBD_CtlError>
                break;
 800837a:	e091      	b.n	80084a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008380:	2b00      	cmp	r3, #0
 8008382:	da0b      	bge.n	800839c <USBD_StdEPReq+0x1a0>
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	3310      	adds	r3, #16
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4413      	add	r3, r2
 8008398:	3304      	adds	r3, #4
 800839a:	e00b      	b.n	80083b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	3304      	adds	r3, #4
 80083b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2202      	movs	r2, #2
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fbfb 	bl	8008bbe <USBD_CtlSendData>
              break;
 80083c8:	e06a      	b.n	80084a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da11      	bge.n	80083f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	3318      	adds	r3, #24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d117      	bne.n	800841c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb7b 	bl	8008aea <USBD_CtlError>
                  break;
 80083f4:	e054      	b.n	80084a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fb68 	bl	8008aea <USBD_CtlError>
                  break;
 800841a:	e041      	b.n	80084a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800841c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008420:	2b00      	cmp	r3, #0
 8008422:	da0b      	bge.n	800843c <USBD_StdEPReq+0x240>
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	3310      	adds	r3, #16
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	e00b      	b.n	8008454 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	4413      	add	r3, r2
 8008452:	3304      	adds	r3, #4
 8008454:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <USBD_StdEPReq+0x266>
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	2b80      	cmp	r3, #128	; 0x80
 8008460:	d103      	bne.n	800846a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	e00e      	b.n	8008488 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 f83a 	bl	80094e8 <USBD_LL_IsStallEP>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e002      	b.n	8008488 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2202      	movs	r2, #2
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fb95 	bl	8008bbe <USBD_CtlSendData>
              break;
 8008494:	e004      	b.n	80084a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fb26 	bl	8008aea <USBD_CtlError>
              break;
 800849e:	bf00      	nop
          }
          break;
 80084a0:	e004      	b.n	80084ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fb20 	bl	8008aea <USBD_CtlError>
          break;
 80084aa:	bf00      	nop
      }
      break;
 80084ac:	e004      	b.n	80084b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fb1a 	bl	8008aea <USBD_CtlError>
      break;
 80084b6:	bf00      	nop
  }

  return ret;
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	2b06      	cmp	r3, #6
 80084e6:	f200 8128 	bhi.w	800873a <USBD_GetDescriptor+0x276>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <USBD_GetDescriptor+0x2c>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	0800850d 	.word	0x0800850d
 80084f4:	08008525 	.word	0x08008525
 80084f8:	08008565 	.word	0x08008565
 80084fc:	0800873b 	.word	0x0800873b
 8008500:	0800873b 	.word	0x0800873b
 8008504:	080086db 	.word	0x080086db
 8008508:	08008707 	.word	0x08008707
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
      break;
 8008522:	e112      	b.n	800874a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7c1b      	ldrb	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10d      	bne.n	8008548 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	f107 0208 	add.w	r2, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	2202      	movs	r2, #2
 8008544:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008546:	e100      	b.n	800874a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	f107 0208 	add.w	r2, r7, #8
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
 8008558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	2202      	movs	r2, #2
 8008560:	701a      	strb	r2, [r3, #0]
      break;
 8008562:	e0f2      	b.n	800874a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b05      	cmp	r3, #5
 800856c:	f200 80ac 	bhi.w	80086c8 <USBD_GetDescriptor+0x204>
 8008570:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <USBD_GetDescriptor+0xb4>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	08008591 	.word	0x08008591
 800857c:	080085c5 	.word	0x080085c5
 8008580:	080085f9 	.word	0x080085f9
 8008584:	0800862d 	.word	0x0800862d
 8008588:	08008661 	.word	0x08008661
 800858c:	08008695 	.word	0x08008695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7c12      	ldrb	r2, [r2, #16]
 80085a8:	f107 0108 	add.w	r1, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b2:	e091      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa97 	bl	8008aea <USBD_CtlError>
            err++;
 80085bc:	7afb      	ldrb	r3, [r7, #11]
 80085be:	3301      	adds	r3, #1
 80085c0:	72fb      	strb	r3, [r7, #11]
          break;
 80085c2:	e089      	b.n	80086d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e6:	e077      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fa7d 	bl	8008aea <USBD_CtlError>
            err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
          break;
 80085f6:	e06f      	b.n	80086d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	7c12      	ldrb	r2, [r2, #16]
 8008610:	f107 0108 	add.w	r1, r7, #8
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861a:	e05d      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa63 	bl	8008aea <USBD_CtlError>
            err++;
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	3301      	adds	r3, #1
 8008628:	72fb      	strb	r3, [r7, #11]
          break;
 800862a:	e055      	b.n	80086d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	7c12      	ldrb	r2, [r2, #16]
 8008644:	f107 0108 	add.w	r1, r7, #8
 8008648:	4610      	mov	r0, r2
 800864a:	4798      	blx	r3
 800864c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864e:	e043      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa49 	bl	8008aea <USBD_CtlError>
            err++;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	3301      	adds	r3, #1
 800865c:	72fb      	strb	r3, [r7, #11]
          break;
 800865e:	e03b      	b.n	80086d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	7c12      	ldrb	r2, [r2, #16]
 8008678:	f107 0108 	add.w	r1, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008682:	e029      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa2f 	bl	8008aea <USBD_CtlError>
            err++;
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	3301      	adds	r3, #1
 8008690:	72fb      	strb	r3, [r7, #11]
          break;
 8008692:	e021      	b.n	80086d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7c12      	ldrb	r2, [r2, #16]
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b6:	e00f      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa15 	bl	8008aea <USBD_CtlError>
            err++;
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	3301      	adds	r3, #1
 80086c4:	72fb      	strb	r3, [r7, #11]
          break;
 80086c6:	e007      	b.n	80086d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa0d 	bl	8008aea <USBD_CtlError>
          err++;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	3301      	adds	r3, #1
 80086d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086d6:	e038      	b.n	800874a <USBD_GetDescriptor+0x286>
 80086d8:	e037      	b.n	800874a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7c1b      	ldrb	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	f107 0208 	add.w	r2, r7, #8
 80086ee:	4610      	mov	r0, r2
 80086f0:	4798      	blx	r3
 80086f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086f4:	e029      	b.n	800874a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9f6 	bl	8008aea <USBD_CtlError>
        err++;
 80086fe:	7afb      	ldrb	r3, [r7, #11]
 8008700:	3301      	adds	r3, #1
 8008702:	72fb      	strb	r3, [r7, #11]
      break;
 8008704:	e021      	b.n	800874a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7c1b      	ldrb	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10d      	bne.n	800872a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	f107 0208 	add.w	r2, r7, #8
 800871a:	4610      	mov	r0, r2
 800871c:	4798      	blx	r3
 800871e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	2207      	movs	r2, #7
 8008726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008728:	e00f      	b.n	800874a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f9dc 	bl	8008aea <USBD_CtlError>
        err++;
 8008732:	7afb      	ldrb	r3, [r7, #11]
 8008734:	3301      	adds	r3, #1
 8008736:	72fb      	strb	r3, [r7, #11]
      break;
 8008738:	e007      	b.n	800874a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9d4 	bl	8008aea <USBD_CtlError>
      err++;
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	3301      	adds	r3, #1
 8008746:	72fb      	strb	r3, [r7, #11]
      break;
 8008748:	bf00      	nop
  }

  if (err != 0U)
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11c      	bne.n	800878a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008750:	893b      	ldrh	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <USBD_GetDescriptor+0x2b6>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	88db      	ldrh	r3, [r3, #6]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	88da      	ldrh	r2, [r3, #6]
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	4293      	cmp	r3, r2
 8008766:	bf28      	it	cs
 8008768:	4613      	movcs	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800876e:	893b      	ldrh	r3, [r7, #8]
 8008770:	461a      	mov	r2, r3
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa22 	bl	8008bbe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	88db      	ldrh	r3, [r3, #6]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa79 	bl	8008c7a <USBD_CtlSendStatus>
 8008788:	e000      	b.n	800878c <USBD_GetDescriptor+0x2c8>
    return;
 800878a:	bf00      	nop
    }
  }
}
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop

08008794 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	889b      	ldrh	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d130      	bne.n	8008808 <USBD_SetAddress+0x74>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	88db      	ldrh	r3, [r3, #6]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d12c      	bne.n	8008808 <USBD_SetAddress+0x74>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	2b7f      	cmp	r3, #127	; 0x7f
 80087b4:	d828      	bhi.n	8008808 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d104      	bne.n	80087d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f98b 	bl	8008aea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d4:	e01d      	b.n	8008812 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7bfa      	ldrb	r2, [r7, #15]
 80087da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 feab 	bl	800953e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa46 	bl	8008c7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fc:	e009      	b.n	8008812 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008806:	e004      	b.n	8008812 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f96d 	bl	8008aea <USBD_CtlError>
  }
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	4b41      	ldr	r3, [pc, #260]	; (8008934 <USBD_SetConfig+0x118>)
 800882e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008830:	4b40      	ldr	r3, [pc, #256]	; (8008934 <USBD_SetConfig+0x118>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d904      	bls.n	8008842 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f955 	bl	8008aea <USBD_CtlError>
 8008840:	e075      	b.n	800892e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008848:	2b02      	cmp	r3, #2
 800884a:	d002      	beq.n	8008852 <USBD_SetConfig+0x36>
 800884c:	2b03      	cmp	r3, #3
 800884e:	d023      	beq.n	8008898 <USBD_SetConfig+0x7c>
 8008850:	e062      	b.n	8008918 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008852:	4b38      	ldr	r3, [pc, #224]	; (8008934 <USBD_SetConfig+0x118>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01a      	beq.n	8008890 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800885a:	4b36      	ldr	r3, [pc, #216]	; (8008934 <USBD_SetConfig+0x118>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2203      	movs	r2, #3
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800886c:	4b31      	ldr	r3, [pc, #196]	; (8008934 <USBD_SetConfig+0x118>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff f9af 	bl	8007bd6 <USBD_SetClassConfig>
 8008878:	4603      	mov	r3, r0
 800887a:	2b02      	cmp	r3, #2
 800887c:	d104      	bne.n	8008888 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f932 	bl	8008aea <USBD_CtlError>
            return;
 8008886:	e052      	b.n	800892e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f9f6 	bl	8008c7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800888e:	e04e      	b.n	800892e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f9f2 	bl	8008c7a <USBD_CtlSendStatus>
        break;
 8008896:	e04a      	b.n	800892e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008898:	4b26      	ldr	r3, [pc, #152]	; (8008934 <USBD_SetConfig+0x118>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d112      	bne.n	80088c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088a8:	4b22      	ldr	r3, [pc, #136]	; (8008934 <USBD_SetConfig+0x118>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088b2:	4b20      	ldr	r3, [pc, #128]	; (8008934 <USBD_SetConfig+0x118>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff f9ab 	bl	8007c14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9db 	bl	8008c7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088c4:	e033      	b.n	800892e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088c6:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <USBD_SetConfig+0x118>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d01d      	beq.n	8008910 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff f999 	bl	8007c14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088e2:	4b14      	ldr	r3, [pc, #80]	; (8008934 <USBD_SetConfig+0x118>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088ec:	4b11      	ldr	r3, [pc, #68]	; (8008934 <USBD_SetConfig+0x118>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff f96f 	bl	8007bd6 <USBD_SetClassConfig>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d104      	bne.n	8008908 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f8f2 	bl	8008aea <USBD_CtlError>
            return;
 8008906:	e012      	b.n	800892e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f9b6 	bl	8008c7a <USBD_CtlSendStatus>
        break;
 800890e:	e00e      	b.n	800892e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f9b2 	bl	8008c7a <USBD_CtlSendStatus>
        break;
 8008916:	e00a      	b.n	800892e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f8e5 	bl	8008aea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <USBD_SetConfig+0x118>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff f974 	bl	8007c14 <USBD_ClrClassConfig>
        break;
 800892c:	bf00      	nop
    }
  }
}
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	200003d8 	.word	0x200003d8

08008938 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	88db      	ldrh	r3, [r3, #6]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d004      	beq.n	8008954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8cc 	bl	8008aea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008952:	e022      	b.n	800899a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895a:	2b02      	cmp	r3, #2
 800895c:	dc02      	bgt.n	8008964 <USBD_GetConfig+0x2c>
 800895e:	2b00      	cmp	r3, #0
 8008960:	dc03      	bgt.n	800896a <USBD_GetConfig+0x32>
 8008962:	e015      	b.n	8008990 <USBD_GetConfig+0x58>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d00b      	beq.n	8008980 <USBD_GetConfig+0x48>
 8008968:	e012      	b.n	8008990 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3308      	adds	r3, #8
 8008974:	2201      	movs	r2, #1
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f920 	bl	8008bbe <USBD_CtlSendData>
        break;
 800897e:	e00c      	b.n	800899a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3304      	adds	r3, #4
 8008984:	2201      	movs	r2, #1
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f918 	bl	8008bbe <USBD_CtlSendData>
        break;
 800898e:	e004      	b.n	800899a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f8a9 	bl	8008aea <USBD_CtlError>
        break;
 8008998:	bf00      	nop
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d81e      	bhi.n	80089f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	88db      	ldrh	r3, [r3, #6]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d004      	beq.n	80089ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f891 	bl	8008aea <USBD_CtlError>
        break;
 80089c8:	e01a      	b.n	8008a00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f043 0202 	orr.w	r2, r3, #2
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	330c      	adds	r3, #12
 80089ea:	2202      	movs	r2, #2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8e5 	bl	8008bbe <USBD_CtlSendData>
      break;
 80089f4:	e004      	b.n	8008a00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f876 	bl	8008aea <USBD_CtlError>
      break;
 80089fe:	bf00      	nop
  }
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	885b      	ldrh	r3, [r3, #2]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d106      	bne.n	8008a28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f929 	bl	8008c7a <USBD_CtlSendStatus>
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a40:	3b01      	subs	r3, #1
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d80b      	bhi.n	8008a5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d10c      	bne.n	8008a68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f90f 	bl	8008c7a <USBD_CtlSendStatus>
      }
      break;
 8008a5c:	e004      	b.n	8008a68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f842 	bl	8008aea <USBD_CtlError>
      break;
 8008a66:	e000      	b.n	8008a6a <USBD_ClrFeature+0x3a>
      break;
 8008a68:	bf00      	nop
  }
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	785a      	ldrb	r2, [r3, #1]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	3302      	adds	r3, #2
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	3303      	adds	r3, #3
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	3305      	adds	r3, #5
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	3306      	adds	r3, #6
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	3307      	adds	r3, #7
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	80da      	strh	r2, [r3, #6]

}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr

08008aea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fcb8 	bl	800946c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008afc:	2100      	movs	r1, #0
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fcb4 	bl	800946c <USBD_LL_StallEP>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d032      	beq.n	8008b88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f834 	bl	8008b90 <USBD_GetLen>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	75fa      	strb	r2, [r7, #23]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4413      	add	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	75fa      	strb	r2, [r7, #23]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4413      	add	r3, r2
 8008b54:	2203      	movs	r2, #3
 8008b56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b58:	e012      	b.n	8008b80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	60fa      	str	r2, [r7, #12]
 8008b60:	7dfa      	ldrb	r2, [r7, #23]
 8008b62:	1c51      	adds	r1, r2, #1
 8008b64:	75f9      	strb	r1, [r7, #23]
 8008b66:	4611      	mov	r1, r2
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	440a      	add	r2, r1
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	75fa      	strb	r2, [r7, #23]
 8008b76:	461a      	mov	r2, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e8      	bne.n	8008b5a <USBD_GetString+0x4e>
    }
  }
}
 8008b88:	bf00      	nop
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008b9c:	e005      	b.n	8008baa <USBD_GetLen+0x1a>
  {
    len++;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f5      	bne.n	8008b9e <USBD_GetLen+0xe>
  }

  return len;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bd4:	88fa      	ldrh	r2, [r7, #6]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bda:	88fa      	ldrh	r2, [r7, #6]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	2100      	movs	r1, #0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fcc8 	bl	800957c <USBD_LL_Transmit>

  return USBD_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fcb6 	bl	800957c <USBD_LL_Transmit>

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c30:	88fa      	ldrh	r2, [r7, #6]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c38:	88fa      	ldrh	r2, [r7, #6]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	2100      	movs	r1, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fcbb 	bl	80095c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fca9 	bl	80095c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2100      	movs	r1, #0
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fc73 	bl	800957c <USBD_LL_Transmit>

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2205      	movs	r2, #5
 8008cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fc83 	bl	80095c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USB_Transmit>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void USB_Transmit(char* Buf, uint16_t Len)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS((uint8_t*)Buf, Len); //Explicit conversion of char ptr to uint8_t ptr
 8008cd2:	887b      	ldrh	r3, [r7, #2]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f8c2 	bl	8008e60 <CDC_Transmit_FS>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4912      	ldr	r1, [pc, #72]	; (8008d34 <MX_USB_DEVICE_Init+0x50>)
 8008cec:	4812      	ldr	r0, [pc, #72]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008cee:	f7fe ff18 	bl	8007b22 <USBD_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cf8:	f7f9 fa3e 	bl	8002178 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cfc:	490f      	ldr	r1, [pc, #60]	; (8008d3c <MX_USB_DEVICE_Init+0x58>)
 8008cfe:	480e      	ldr	r0, [pc, #56]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d00:	f7fe ff3a 	bl	8007b78 <USBD_RegisterClass>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d0a:	f7f9 fa35 	bl	8002178 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d0e:	490c      	ldr	r1, [pc, #48]	; (8008d40 <MX_USB_DEVICE_Init+0x5c>)
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d12:	f7fe fe6b 	bl	80079ec <USBD_CDC_RegisterInterface>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d1c:	f7f9 fa2c 	bl	8002178 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d20:	4805      	ldr	r0, [pc, #20]	; (8008d38 <MX_USB_DEVICE_Init+0x54>)
 8008d22:	f7fe ff42 	bl	8007baa <USBD_Start>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d2c:	f7f9 fa24 	bl	8002178 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d30:	bf00      	nop
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	2000012c 	.word	0x2000012c
 8008d38:	200003dc 	.word	0x200003dc
 8008d3c:	20000018 	.word	0x20000018
 8008d40:	2000011c 	.word	0x2000011c

08008d44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4905      	ldr	r1, [pc, #20]	; (8008d60 <CDC_Init_FS+0x1c>)
 8008d4c:	4805      	ldr	r0, [pc, #20]	; (8008d64 <CDC_Init_FS+0x20>)
 8008d4e:	f7fe fe63 	bl	8007a18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d52:	4905      	ldr	r1, [pc, #20]	; (8008d68 <CDC_Init_FS+0x24>)
 8008d54:	4803      	ldr	r0, [pc, #12]	; (8008d64 <CDC_Init_FS+0x20>)
 8008d56:	f7fe fe78 	bl	8007a4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000aa0 	.word	0x20000aa0
 8008d64:	200003dc 	.word	0x200003dc
 8008d68:	200006a0 	.word	0x200006a0

08008d6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
	...

08008d7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b23      	cmp	r3, #35	; 0x23
 8008d90:	d84a      	bhi.n	8008e28 <CDC_Control_FS+0xac>
 8008d92:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <CDC_Control_FS+0x1c>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008e29 	.word	0x08008e29
 8008d9c:	08008e29 	.word	0x08008e29
 8008da0:	08008e29 	.word	0x08008e29
 8008da4:	08008e29 	.word	0x08008e29
 8008da8:	08008e29 	.word	0x08008e29
 8008dac:	08008e29 	.word	0x08008e29
 8008db0:	08008e29 	.word	0x08008e29
 8008db4:	08008e29 	.word	0x08008e29
 8008db8:	08008e29 	.word	0x08008e29
 8008dbc:	08008e29 	.word	0x08008e29
 8008dc0:	08008e29 	.word	0x08008e29
 8008dc4:	08008e29 	.word	0x08008e29
 8008dc8:	08008e29 	.word	0x08008e29
 8008dcc:	08008e29 	.word	0x08008e29
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e29 	.word	0x08008e29
 8008dd8:	08008e29 	.word	0x08008e29
 8008ddc:	08008e29 	.word	0x08008e29
 8008de0:	08008e29 	.word	0x08008e29
 8008de4:	08008e29 	.word	0x08008e29
 8008de8:	08008e29 	.word	0x08008e29
 8008dec:	08008e29 	.word	0x08008e29
 8008df0:	08008e29 	.word	0x08008e29
 8008df4:	08008e29 	.word	0x08008e29
 8008df8:	08008e29 	.word	0x08008e29
 8008dfc:	08008e29 	.word	0x08008e29
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e29 	.word	0x08008e29
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e29 	.word	0x08008e29
 8008e10:	08008e29 	.word	0x08008e29
 8008e14:	08008e29 	.word	0x08008e29
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e29 	.word	0x08008e29
 8008e20:	08008e29 	.word	0x08008e29
 8008e24:	08008e29 	.word	0x08008e29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e28:	bf00      	nop
  }

  return (USBD_OK);
 8008e2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <CDC_Receive_FS+0x24>)
 8008e46:	f7fe fe00 	bl	8007a4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e4a:	4804      	ldr	r0, [pc, #16]	; (8008e5c <CDC_Receive_FS+0x24>)
 8008e4c:	f7fe fe3f 	bl	8007ace <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200003dc 	.word	0x200003dc

08008e60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e70:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <CDC_Transmit_FS+0x48>)
 8008e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e00b      	b.n	8008e9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e86:	887b      	ldrh	r3, [r7, #2]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	4806      	ldr	r0, [pc, #24]	; (8008ea8 <CDC_Transmit_FS+0x48>)
 8008e8e:	f7fe fdc3 	bl	8007a18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e92:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <CDC_Transmit_FS+0x48>)
 8008e94:	f7fe fdec 	bl	8007a70 <USBD_CDC_TransmitPacket>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200003dc 	.word	0x200003dc

08008eac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2212      	movs	r2, #18
 8008ebc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000148 	.word	0x20000148

08008ed0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	2000015c 	.word	0x2000015c

08008ef4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4907      	ldr	r1, [pc, #28]	; (8008f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f0a:	4808      	ldr	r0, [pc, #32]	; (8008f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f0c:	f7ff fdfe 	bl	8008b0c <USBD_GetString>
 8008f10:	e004      	b.n	8008f1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4904      	ldr	r1, [pc, #16]	; (8008f28 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f16:	4805      	ldr	r0, [pc, #20]	; (8008f2c <USBD_FS_ProductStrDescriptor+0x38>)
 8008f18:	f7ff fdf8 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f1c:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000ea0 	.word	0x20000ea0
 8008f2c:	0800a444 	.word	0x0800a444

08008f30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	4904      	ldr	r1, [pc, #16]	; (8008f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f40:	4804      	ldr	r0, [pc, #16]	; (8008f54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f42:	f7ff fde3 	bl	8008b0c <USBD_GetString>
  return USBD_StrDesc;
 8008f46:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000ea0 	.word	0x20000ea0
 8008f54:	0800a45c 	.word	0x0800a45c

08008f58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	6039      	str	r1, [r7, #0]
 8008f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	221a      	movs	r2, #26
 8008f68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f6a:	f000 f843 	bl	8008ff4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f6e:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000160 	.word	0x20000160

08008f7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f92:	4808      	ldr	r0, [pc, #32]	; (8008fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f94:	f7ff fdba 	bl	8008b0c <USBD_GetString>
 8008f98:	e004      	b.n	8008fa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4904      	ldr	r1, [pc, #16]	; (8008fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f9e:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fa0:	f7ff fdb4 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa4:	4b02      	ldr	r3, [pc, #8]	; (8008fb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000ea0 	.word	0x20000ea0
 8008fb4:	0800a470 	.word	0x0800a470

08008fb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	; (8008fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fd0:	f7ff fd9c 	bl	8008b0c <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fdc:	f7ff fd96 	bl	8008b0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000ea0 	.word	0x20000ea0
 8008ff0:	0800a47c 	.word	0x0800a47c

08008ff4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <Get_SerialNum+0x44>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <Get_SerialNum+0x48>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009006:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <Get_SerialNum+0x4c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4413      	add	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d009      	beq.n	800902e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800901a:	2208      	movs	r2, #8
 800901c:	4909      	ldr	r1, [pc, #36]	; (8009044 <Get_SerialNum+0x50>)
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f814 	bl	800904c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009024:	2204      	movs	r2, #4
 8009026:	4908      	ldr	r1, [pc, #32]	; (8009048 <Get_SerialNum+0x54>)
 8009028:	68b8      	ldr	r0, [r7, #8]
 800902a:	f000 f80f 	bl	800904c <IntToUnicode>
  }
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	1ffff7e8 	.word	0x1ffff7e8
 800903c:	1ffff7ec 	.word	0x1ffff7ec
 8009040:	1ffff7f0 	.word	0x1ffff7f0
 8009044:	20000162 	.word	0x20000162
 8009048:	20000172 	.word	0x20000172

0800904c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]
 8009062:	e027      	b.n	80090b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	0f1b      	lsrs	r3, r3, #28
 8009068:	2b09      	cmp	r3, #9
 800906a:	d80b      	bhi.n	8009084 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	0f1b      	lsrs	r3, r3, #28
 8009070:	b2da      	uxtb	r2, r3
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	4619      	mov	r1, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	440b      	add	r3, r1
 800907c:	3230      	adds	r2, #48	; 0x30
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e00a      	b.n	800909a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	0f1b      	lsrs	r3, r3, #28
 8009088:	b2da      	uxtb	r2, r3
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	4619      	mov	r1, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	440b      	add	r3, r1
 8009094:	3237      	adds	r2, #55	; 0x37
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	3301      	adds	r3, #1
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	3301      	adds	r3, #1
 80090b2:	75fb      	strb	r3, [r7, #23]
 80090b4:	7dfa      	ldrb	r2, [r7, #23]
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d3d3      	bcc.n	8009064 <IntToUnicode+0x18>
  }
}
 80090bc:	bf00      	nop
 80090be:	bf00      	nop
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr

080090c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090d0:	f107 0310 	add.w	r3, r7, #16
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	609a      	str	r2, [r3, #8]
 80090dc:	60da      	str	r2, [r3, #12]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090e6:	d12c      	bne.n	8009142 <HAL_PCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090e8:	4b18      	ldr	r3, [pc, #96]	; (800914c <HAL_PCD_MspInit+0x84>)
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	4a17      	ldr	r2, [pc, #92]	; (800914c <HAL_PCD_MspInit+0x84>)
 80090ee:	f043 0304 	orr.w	r3, r3, #4
 80090f2:	6193      	str	r3, [r2, #24]
 80090f4:	4b15      	ldr	r3, [pc, #84]	; (800914c <HAL_PCD_MspInit+0x84>)
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	60fb      	str	r3, [r7, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009106:	2300      	movs	r3, #0
 8009108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800910a:	2300      	movs	r3, #0
 800910c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800910e:	f107 0310 	add.w	r3, r7, #16
 8009112:	4619      	mov	r1, r3
 8009114:	480e      	ldr	r0, [pc, #56]	; (8009150 <HAL_PCD_MspInit+0x88>)
 8009116:	f7f9 ff61 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_PCD_MspInit+0x84>)
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	4a0b      	ldr	r2, [pc, #44]	; (800914c <HAL_PCD_MspInit+0x84>)
 8009120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009124:	6153      	str	r3, [r2, #20]
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <HAL_PCD_MspInit+0x84>)
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	2043      	movs	r0, #67	; 0x43
 8009138:	f7f9 ff19 	bl	8002f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800913c:	2043      	movs	r0, #67	; 0x43
 800913e:	f7f9 ff32 	bl	8002fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009142:	bf00      	nop
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40021000 	.word	0x40021000
 8009150:	40010800 	.word	0x40010800

08009154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fd65 	bl	8007c3a <USBD_LL_SetupStage>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7fe fd97 	bl	8007cd4 <USBD_LL_DataOutStage>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	3348      	adds	r3, #72	; 0x48
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f7fe fdee 	bl	8007db6 <USBD_LL_DataInStage>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fefe 	bl	8007ff2 <USBD_LL_SOF>
}
 80091f6:	bf00      	nop
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d001      	beq.n	8009216 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009212:	f7f8 ffb1 	bl	8002178 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800921c:	7bfa      	ldrb	r2, [r7, #15]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe feae 	bl	8007f82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fe67 	bl	8007f00 <USBD_LL_Reset>
}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fea8 	bl	8007fa0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <HAL_PCD_SuspendCallback+0x48>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	4a03      	ldr	r2, [pc, #12]	; (8009284 <HAL_PCD_SuspendCallback+0x48>)
 8009276:	f043 0306 	orr.w	r3, r3, #6
 800927a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fe96 	bl	8007fc8 <USBD_LL_Resume>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe febf 	bl	800803e <USBD_LL_IsoOUTIncomplete>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fea1 	bl	8008026 <USBD_LL_IsoINIncomplete>
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe feab 	bl	8008056 <USBD_LL_DevConnected>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fea7 	bl	800806a <USBD_LL_DevDisconnected>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d133      	bne.n	800939c <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009334:	4a1c      	ldr	r2, [pc, #112]	; (80093a8 <USBD_LL_Init+0x84>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <USBD_LL_Init+0x84>)
 8009340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009344:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <USBD_LL_Init+0x84>)
 8009346:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800934a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800934c:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <USBD_LL_Init+0x84>)
 800934e:	2204      	movs	r2, #4
 8009350:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <USBD_LL_Init+0x84>)
 8009354:	2202      	movs	r2, #2
 8009356:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009358:	4b13      	ldr	r3, [pc, #76]	; (80093a8 <USBD_LL_Init+0x84>)
 800935a:	2202      	movs	r2, #2
 800935c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800935e:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <USBD_LL_Init+0x84>)
 8009360:	2200      	movs	r2, #0
 8009362:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009364:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <USBD_LL_Init+0x84>)
 8009366:	2200      	movs	r2, #0
 8009368:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800936a:	4b0f      	ldr	r3, [pc, #60]	; (80093a8 <USBD_LL_Init+0x84>)
 800936c:	2201      	movs	r2, #1
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009370:	480d      	ldr	r0, [pc, #52]	; (80093a8 <USBD_LL_Init+0x84>)
 8009372:	f7f9 ffe8 	bl	8003346 <HAL_PCD_Init>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800937c:	f7f8 fefc 	bl	8002178 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009380:	2180      	movs	r1, #128	; 0x80
 8009382:	4809      	ldr	r0, [pc, #36]	; (80093a8 <USBD_LL_Init+0x84>)
 8009384:	f7fb f900 	bl	8004588 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009388:	2240      	movs	r2, #64	; 0x40
 800938a:	2100      	movs	r1, #0
 800938c:	4806      	ldr	r0, [pc, #24]	; (80093a8 <USBD_LL_Init+0x84>)
 800938e:	f7fb f8b5 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	2101      	movs	r1, #1
 8009396:	4804      	ldr	r0, [pc, #16]	; (80093a8 <USBD_LL_Init+0x84>)
 8009398:	f7fb f8b0 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200010a0 	.word	0x200010a0

080093ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fa f8dc 	bl	8003580 <HAL_PCD_Start>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f944 	bl	800965c <USBD_Get_USB_Status>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	461a      	mov	r2, r3
 80093f0:	4603      	mov	r3, r0
 80093f2:	70fb      	strb	r3, [r7, #3]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70bb      	strb	r3, [r7, #2]
 80093f8:	4613      	mov	r3, r2
 80093fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800940a:	78bb      	ldrb	r3, [r7, #2]
 800940c:	883a      	ldrh	r2, [r7, #0]
 800940e:	78f9      	ldrb	r1, [r7, #3]
 8009410:	f7fa fd55 	bl	8003ebe <HAL_PCD_EP_Open>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f91e 	bl	800965c <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009448:	78fa      	ldrb	r2, [r7, #3]
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f7fa fd9e 	bl	8003f8e <HAL_PCD_EP_Close>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 f8ff 	bl	800965c <USBD_Get_USB_Status>
 800945e:	4603      	mov	r3, r0
 8009460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009462:	7bbb      	ldrb	r3, [r7, #14]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fa fe43 	bl	8004116 <HAL_PCD_EP_SetStall>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f8e0 	bl	800965c <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fa fe86 	bl	80041da <HAL_PCD_EP_ClrStall>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f8c1 	bl	800965c <USBD_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	da0b      	bge.n	800951c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	333e      	adds	r3, #62	; 0x3e
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	e00b      	b.n	8009534 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	4613      	mov	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009532:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7fa fc89 	bl	8003e74 <HAL_PCD_SetAddress>
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f877 	bl	800965c <USBD_Get_USB_Status>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	607a      	str	r2, [r7, #4]
 8009586:	461a      	mov	r2, r3
 8009588:	460b      	mov	r3, r1
 800958a:	72fb      	strb	r3, [r7, #11]
 800958c:	4613      	mov	r3, r2
 800958e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800959e:	893b      	ldrh	r3, [r7, #8]
 80095a0:	7af9      	ldrb	r1, [r7, #11]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	f7fa fd86 	bl	80040b4 <HAL_PCD_EP_Transmit>
 80095a8:	4603      	mov	r3, r0
 80095aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f854 	bl	800965c <USBD_Get_USB_Status>
 80095b4:	4603      	mov	r3, r0
 80095b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3718      	adds	r7, #24
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b086      	sub	sp, #24
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	461a      	mov	r2, r3
 80095ce:	460b      	mov	r3, r1
 80095d0:	72fb      	strb	r3, [r7, #11]
 80095d2:	4613      	mov	r3, r2
 80095d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095e4:	893b      	ldrh	r3, [r7, #8]
 80095e6:	7af9      	ldrb	r1, [r7, #11]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f7fa fd1a 	bl	8004022 <HAL_PCD_EP_Receive>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 f831 	bl	800965c <USBD_Get_USB_Status>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800961a:	78fa      	ldrb	r2, [r7, #3]
 800961c:	4611      	mov	r1, r2
 800961e:	4618      	mov	r0, r3
 8009620:	f7fa fd31 	bl	8004086 <HAL_PCD_EP_GetRxCount>
 8009624:	4603      	mov	r3, r0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <USBD_static_malloc+0x14>)
}
 800963a:	4618      	mov	r0, r3
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr
 8009644:	200015a4 	.word	0x200015a4

08009648 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
	...

0800965c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d817      	bhi.n	80096a0 <USBD_Get_USB_Status+0x44>
 8009670:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USBD_Get_USB_Status+0x1c>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	08009689 	.word	0x08009689
 800967c:	0800968f 	.word	0x0800968f
 8009680:	08009695 	.word	0x08009695
 8009684:	0800969b 	.word	0x0800969b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]
    break;
 800968c:	e00b      	b.n	80096a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800968e:	2302      	movs	r3, #2
 8009690:	73fb      	strb	r3, [r7, #15]
    break;
 8009692:	e008      	b.n	80096a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009694:	2301      	movs	r3, #1
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e005      	b.n	80096a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800969a:	2302      	movs	r3, #2
 800969c:	73fb      	strb	r3, [r7, #15]
    break;
 800969e:	e002      	b.n	80096a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096a0:	2302      	movs	r3, #2
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	bf00      	nop
  }
  return usb_status;
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop

080096b4 <siprintf>:
 80096b4:	b40e      	push	{r1, r2, r3}
 80096b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096ba:	b500      	push	{lr}
 80096bc:	b09c      	sub	sp, #112	; 0x70
 80096be:	ab1d      	add	r3, sp, #116	; 0x74
 80096c0:	9002      	str	r0, [sp, #8]
 80096c2:	9006      	str	r0, [sp, #24]
 80096c4:	9107      	str	r1, [sp, #28]
 80096c6:	9104      	str	r1, [sp, #16]
 80096c8:	4808      	ldr	r0, [pc, #32]	; (80096ec <siprintf+0x38>)
 80096ca:	4909      	ldr	r1, [pc, #36]	; (80096f0 <siprintf+0x3c>)
 80096cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d0:	9105      	str	r1, [sp, #20]
 80096d2:	6800      	ldr	r0, [r0, #0]
 80096d4:	a902      	add	r1, sp, #8
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f000 f8bc 	bl	8009854 <_svfiprintf_r>
 80096dc:	2200      	movs	r2, #0
 80096de:	9b02      	ldr	r3, [sp, #8]
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	b01c      	add	sp, #112	; 0x70
 80096e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096e8:	b003      	add	sp, #12
 80096ea:	4770      	bx	lr
 80096ec:	200001c8 	.word	0x200001c8
 80096f0:	ffff0208 	.word	0xffff0208

080096f4 <strncat>:
 80096f4:	b530      	push	{r4, r5, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	7825      	ldrb	r5, [r4, #0]
 80096fa:	4623      	mov	r3, r4
 80096fc:	3401      	adds	r4, #1
 80096fe:	2d00      	cmp	r5, #0
 8009700:	d1fa      	bne.n	80096f8 <strncat+0x4>
 8009702:	3a01      	subs	r2, #1
 8009704:	d304      	bcc.n	8009710 <strncat+0x1c>
 8009706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970a:	f803 4b01 	strb.w	r4, [r3], #1
 800970e:	b904      	cbnz	r4, 8009712 <strncat+0x1e>
 8009710:	bd30      	pop	{r4, r5, pc}
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1f5      	bne.n	8009702 <strncat+0xe>
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e7f3      	b.n	8009702 <strncat+0xe>

0800971a <memset>:
 800971a:	4603      	mov	r3, r0
 800971c:	4402      	add	r2, r0
 800971e:	4293      	cmp	r3, r2
 8009720:	d100      	bne.n	8009724 <memset+0xa>
 8009722:	4770      	bx	lr
 8009724:	f803 1b01 	strb.w	r1, [r3], #1
 8009728:	e7f9      	b.n	800971e <memset+0x4>
	...

0800972c <__errno>:
 800972c:	4b01      	ldr	r3, [pc, #4]	; (8009734 <__errno+0x8>)
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200001c8 	.word	0x200001c8

08009738 <__libc_init_array>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	2600      	movs	r6, #0
 800973c:	4d0c      	ldr	r5, [pc, #48]	; (8009770 <__libc_init_array+0x38>)
 800973e:	4c0d      	ldr	r4, [pc, #52]	; (8009774 <__libc_init_array+0x3c>)
 8009740:	1b64      	subs	r4, r4, r5
 8009742:	10a4      	asrs	r4, r4, #2
 8009744:	42a6      	cmp	r6, r4
 8009746:	d109      	bne.n	800975c <__libc_init_array+0x24>
 8009748:	f000 fe64 	bl	800a414 <_init>
 800974c:	2600      	movs	r6, #0
 800974e:	4d0a      	ldr	r5, [pc, #40]	; (8009778 <__libc_init_array+0x40>)
 8009750:	4c0a      	ldr	r4, [pc, #40]	; (800977c <__libc_init_array+0x44>)
 8009752:	1b64      	subs	r4, r4, r5
 8009754:	10a4      	asrs	r4, r4, #2
 8009756:	42a6      	cmp	r6, r4
 8009758:	d105      	bne.n	8009766 <__libc_init_array+0x2e>
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009760:	4798      	blx	r3
 8009762:	3601      	adds	r6, #1
 8009764:	e7ee      	b.n	8009744 <__libc_init_array+0xc>
 8009766:	f855 3b04 	ldr.w	r3, [r5], #4
 800976a:	4798      	blx	r3
 800976c:	3601      	adds	r6, #1
 800976e:	e7f2      	b.n	8009756 <__libc_init_array+0x1e>
 8009770:	0800a904 	.word	0x0800a904
 8009774:	0800a904 	.word	0x0800a904
 8009778:	0800a904 	.word	0x0800a904
 800977c:	0800a908 	.word	0x0800a908

08009780 <__retarget_lock_acquire_recursive>:
 8009780:	4770      	bx	lr

08009782 <__retarget_lock_release_recursive>:
 8009782:	4770      	bx	lr

08009784 <memcpy>:
 8009784:	440a      	add	r2, r1
 8009786:	4291      	cmp	r1, r2
 8009788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800978c:	d100      	bne.n	8009790 <memcpy+0xc>
 800978e:	4770      	bx	lr
 8009790:	b510      	push	{r4, lr}
 8009792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009796:	4291      	cmp	r1, r2
 8009798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800979c:	d1f9      	bne.n	8009792 <memcpy+0xe>
 800979e:	bd10      	pop	{r4, pc}

080097a0 <__ssputs_r>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	461f      	mov	r7, r3
 80097a6:	688e      	ldr	r6, [r1, #8]
 80097a8:	4682      	mov	sl, r0
 80097aa:	42be      	cmp	r6, r7
 80097ac:	460c      	mov	r4, r1
 80097ae:	4690      	mov	r8, r2
 80097b0:	680b      	ldr	r3, [r1, #0]
 80097b2:	d82c      	bhi.n	800980e <__ssputs_r+0x6e>
 80097b4:	898a      	ldrh	r2, [r1, #12]
 80097b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80097ba:	d026      	beq.n	800980a <__ssputs_r+0x6a>
 80097bc:	6965      	ldr	r5, [r4, #20]
 80097be:	6909      	ldr	r1, [r1, #16]
 80097c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c4:	eba3 0901 	sub.w	r9, r3, r1
 80097c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097cc:	1c7b      	adds	r3, r7, #1
 80097ce:	444b      	add	r3, r9
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	429d      	cmp	r5, r3
 80097d4:	bf38      	it	cc
 80097d6:	461d      	movcc	r5, r3
 80097d8:	0553      	lsls	r3, r2, #21
 80097da:	d527      	bpl.n	800982c <__ssputs_r+0x8c>
 80097dc:	4629      	mov	r1, r5
 80097de:	f000 f957 	bl	8009a90 <_malloc_r>
 80097e2:	4606      	mov	r6, r0
 80097e4:	b360      	cbz	r0, 8009840 <__ssputs_r+0xa0>
 80097e6:	464a      	mov	r2, r9
 80097e8:	6921      	ldr	r1, [r4, #16]
 80097ea:	f7ff ffcb 	bl	8009784 <memcpy>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	6126      	str	r6, [r4, #16]
 80097fc:	444e      	add	r6, r9
 80097fe:	6026      	str	r6, [r4, #0]
 8009800:	463e      	mov	r6, r7
 8009802:	6165      	str	r5, [r4, #20]
 8009804:	eba5 0509 	sub.w	r5, r5, r9
 8009808:	60a5      	str	r5, [r4, #8]
 800980a:	42be      	cmp	r6, r7
 800980c:	d900      	bls.n	8009810 <__ssputs_r+0x70>
 800980e:	463e      	mov	r6, r7
 8009810:	4632      	mov	r2, r6
 8009812:	4641      	mov	r1, r8
 8009814:	6820      	ldr	r0, [r4, #0]
 8009816:	f000 fb8a 	bl	8009f2e <memmove>
 800981a:	2000      	movs	r0, #0
 800981c:	68a3      	ldr	r3, [r4, #8]
 800981e:	1b9b      	subs	r3, r3, r6
 8009820:	60a3      	str	r3, [r4, #8]
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	4433      	add	r3, r6
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982c:	462a      	mov	r2, r5
 800982e:	f000 fb4f 	bl	8009ed0 <_realloc_r>
 8009832:	4606      	mov	r6, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d1e0      	bne.n	80097fa <__ssputs_r+0x5a>
 8009838:	4650      	mov	r0, sl
 800983a:	6921      	ldr	r1, [r4, #16]
 800983c:	f000 fbb0 	bl	8009fa0 <_free_r>
 8009840:	230c      	movs	r3, #12
 8009842:	f8ca 3000 	str.w	r3, [sl]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800984c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	e7e9      	b.n	8009828 <__ssputs_r+0x88>

08009854 <_svfiprintf_r>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	4698      	mov	r8, r3
 800985a:	898b      	ldrh	r3, [r1, #12]
 800985c:	4607      	mov	r7, r0
 800985e:	061b      	lsls	r3, r3, #24
 8009860:	460d      	mov	r5, r1
 8009862:	4614      	mov	r4, r2
 8009864:	b09d      	sub	sp, #116	; 0x74
 8009866:	d50e      	bpl.n	8009886 <_svfiprintf_r+0x32>
 8009868:	690b      	ldr	r3, [r1, #16]
 800986a:	b963      	cbnz	r3, 8009886 <_svfiprintf_r+0x32>
 800986c:	2140      	movs	r1, #64	; 0x40
 800986e:	f000 f90f 	bl	8009a90 <_malloc_r>
 8009872:	6028      	str	r0, [r5, #0]
 8009874:	6128      	str	r0, [r5, #16]
 8009876:	b920      	cbnz	r0, 8009882 <_svfiprintf_r+0x2e>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009880:	e0d0      	b.n	8009a24 <_svfiprintf_r+0x1d0>
 8009882:	2340      	movs	r3, #64	; 0x40
 8009884:	616b      	str	r3, [r5, #20]
 8009886:	2300      	movs	r3, #0
 8009888:	9309      	str	r3, [sp, #36]	; 0x24
 800988a:	2320      	movs	r3, #32
 800988c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009890:	2330      	movs	r3, #48	; 0x30
 8009892:	f04f 0901 	mov.w	r9, #1
 8009896:	f8cd 800c 	str.w	r8, [sp, #12]
 800989a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009a3c <_svfiprintf_r+0x1e8>
 800989e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098a2:	4623      	mov	r3, r4
 80098a4:	469a      	mov	sl, r3
 80098a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098aa:	b10a      	cbz	r2, 80098b0 <_svfiprintf_r+0x5c>
 80098ac:	2a25      	cmp	r2, #37	; 0x25
 80098ae:	d1f9      	bne.n	80098a4 <_svfiprintf_r+0x50>
 80098b0:	ebba 0b04 	subs.w	fp, sl, r4
 80098b4:	d00b      	beq.n	80098ce <_svfiprintf_r+0x7a>
 80098b6:	465b      	mov	r3, fp
 80098b8:	4622      	mov	r2, r4
 80098ba:	4629      	mov	r1, r5
 80098bc:	4638      	mov	r0, r7
 80098be:	f7ff ff6f 	bl	80097a0 <__ssputs_r>
 80098c2:	3001      	adds	r0, #1
 80098c4:	f000 80a9 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ca:	445a      	add	r2, fp
 80098cc:	9209      	str	r2, [sp, #36]	; 0x24
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80a1 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098d8:	2300      	movs	r3, #0
 80098da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e2:	f10a 0a01 	add.w	sl, sl, #1
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098ee:	931a      	str	r3, [sp, #104]	; 0x68
 80098f0:	4654      	mov	r4, sl
 80098f2:	2205      	movs	r2, #5
 80098f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f8:	4850      	ldr	r0, [pc, #320]	; (8009a3c <_svfiprintf_r+0x1e8>)
 80098fa:	f000 fb43 	bl	8009f84 <memchr>
 80098fe:	9a04      	ldr	r2, [sp, #16]
 8009900:	b9d8      	cbnz	r0, 800993a <_svfiprintf_r+0xe6>
 8009902:	06d0      	lsls	r0, r2, #27
 8009904:	bf44      	itt	mi
 8009906:	2320      	movmi	r3, #32
 8009908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800990c:	0711      	lsls	r1, r2, #28
 800990e:	bf44      	itt	mi
 8009910:	232b      	movmi	r3, #43	; 0x2b
 8009912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009916:	f89a 3000 	ldrb.w	r3, [sl]
 800991a:	2b2a      	cmp	r3, #42	; 0x2a
 800991c:	d015      	beq.n	800994a <_svfiprintf_r+0xf6>
 800991e:	4654      	mov	r4, sl
 8009920:	2000      	movs	r0, #0
 8009922:	f04f 0c0a 	mov.w	ip, #10
 8009926:	9a07      	ldr	r2, [sp, #28]
 8009928:	4621      	mov	r1, r4
 800992a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800992e:	3b30      	subs	r3, #48	; 0x30
 8009930:	2b09      	cmp	r3, #9
 8009932:	d94d      	bls.n	80099d0 <_svfiprintf_r+0x17c>
 8009934:	b1b0      	cbz	r0, 8009964 <_svfiprintf_r+0x110>
 8009936:	9207      	str	r2, [sp, #28]
 8009938:	e014      	b.n	8009964 <_svfiprintf_r+0x110>
 800993a:	eba0 0308 	sub.w	r3, r0, r8
 800993e:	fa09 f303 	lsl.w	r3, r9, r3
 8009942:	4313      	orrs	r3, r2
 8009944:	46a2      	mov	sl, r4
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	e7d2      	b.n	80098f0 <_svfiprintf_r+0x9c>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	1d19      	adds	r1, r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	9103      	str	r1, [sp, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	bfbb      	ittet	lt
 8009956:	425b      	neglt	r3, r3
 8009958:	f042 0202 	orrlt.w	r2, r2, #2
 800995c:	9307      	strge	r3, [sp, #28]
 800995e:	9307      	strlt	r3, [sp, #28]
 8009960:	bfb8      	it	lt
 8009962:	9204      	strlt	r2, [sp, #16]
 8009964:	7823      	ldrb	r3, [r4, #0]
 8009966:	2b2e      	cmp	r3, #46	; 0x2e
 8009968:	d10c      	bne.n	8009984 <_svfiprintf_r+0x130>
 800996a:	7863      	ldrb	r3, [r4, #1]
 800996c:	2b2a      	cmp	r3, #42	; 0x2a
 800996e:	d134      	bne.n	80099da <_svfiprintf_r+0x186>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	3402      	adds	r4, #2
 8009974:	1d1a      	adds	r2, r3, #4
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	9203      	str	r2, [sp, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfb8      	it	lt
 800997e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009a40 <_svfiprintf_r+0x1ec>
 8009988:	2203      	movs	r2, #3
 800998a:	4650      	mov	r0, sl
 800998c:	7821      	ldrb	r1, [r4, #0]
 800998e:	f000 faf9 	bl	8009f84 <memchr>
 8009992:	b138      	cbz	r0, 80099a4 <_svfiprintf_r+0x150>
 8009994:	2240      	movs	r2, #64	; 0x40
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	eba0 000a 	sub.w	r0, r0, sl
 800999c:	4082      	lsls	r2, r0
 800999e:	4313      	orrs	r3, r2
 80099a0:	3401      	adds	r4, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a8:	2206      	movs	r2, #6
 80099aa:	4826      	ldr	r0, [pc, #152]	; (8009a44 <_svfiprintf_r+0x1f0>)
 80099ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099b0:	f000 fae8 	bl	8009f84 <memchr>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d038      	beq.n	8009a2a <_svfiprintf_r+0x1d6>
 80099b8:	4b23      	ldr	r3, [pc, #140]	; (8009a48 <_svfiprintf_r+0x1f4>)
 80099ba:	bb1b      	cbnz	r3, 8009a04 <_svfiprintf_r+0x1b0>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	3307      	adds	r3, #7
 80099c0:	f023 0307 	bic.w	r3, r3, #7
 80099c4:	3308      	adds	r3, #8
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ca:	4433      	add	r3, r6
 80099cc:	9309      	str	r3, [sp, #36]	; 0x24
 80099ce:	e768      	b.n	80098a2 <_svfiprintf_r+0x4e>
 80099d0:	460c      	mov	r4, r1
 80099d2:	2001      	movs	r0, #1
 80099d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d8:	e7a6      	b.n	8009928 <_svfiprintf_r+0xd4>
 80099da:	2300      	movs	r3, #0
 80099dc:	f04f 0c0a 	mov.w	ip, #10
 80099e0:	4619      	mov	r1, r3
 80099e2:	3401      	adds	r4, #1
 80099e4:	9305      	str	r3, [sp, #20]
 80099e6:	4620      	mov	r0, r4
 80099e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ec:	3a30      	subs	r2, #48	; 0x30
 80099ee:	2a09      	cmp	r2, #9
 80099f0:	d903      	bls.n	80099fa <_svfiprintf_r+0x1a6>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0c6      	beq.n	8009984 <_svfiprintf_r+0x130>
 80099f6:	9105      	str	r1, [sp, #20]
 80099f8:	e7c4      	b.n	8009984 <_svfiprintf_r+0x130>
 80099fa:	4604      	mov	r4, r0
 80099fc:	2301      	movs	r3, #1
 80099fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a02:	e7f0      	b.n	80099e6 <_svfiprintf_r+0x192>
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <_svfiprintf_r+0x1f8>)
 8009a0e:	a904      	add	r1, sp, #16
 8009a10:	f3af 8000 	nop.w
 8009a14:	1c42      	adds	r2, r0, #1
 8009a16:	4606      	mov	r6, r0
 8009a18:	d1d6      	bne.n	80099c8 <_svfiprintf_r+0x174>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af2d 	bmi.w	800987c <_svfiprintf_r+0x28>
 8009a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a24:	b01d      	add	sp, #116	; 0x74
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	ab03      	add	r3, sp, #12
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4638      	mov	r0, r7
 8009a32:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <_svfiprintf_r+0x1f8>)
 8009a34:	a904      	add	r1, sp, #16
 8009a36:	f000 f91d 	bl	8009c74 <_printf_i>
 8009a3a:	e7eb      	b.n	8009a14 <_svfiprintf_r+0x1c0>
 8009a3c:	0800a8c8 	.word	0x0800a8c8
 8009a40:	0800a8ce 	.word	0x0800a8ce
 8009a44:	0800a8d2 	.word	0x0800a8d2
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	080097a1 	.word	0x080097a1

08009a50 <sbrk_aligned>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4e0e      	ldr	r6, [pc, #56]	; (8009a8c <sbrk_aligned+0x3c>)
 8009a54:	460c      	mov	r4, r1
 8009a56:	6831      	ldr	r1, [r6, #0]
 8009a58:	4605      	mov	r5, r0
 8009a5a:	b911      	cbnz	r1, 8009a62 <sbrk_aligned+0x12>
 8009a5c:	f000 fa82 	bl	8009f64 <_sbrk_r>
 8009a60:	6030      	str	r0, [r6, #0]
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fa7d 	bl	8009f64 <_sbrk_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d00a      	beq.n	8009a84 <sbrk_aligned+0x34>
 8009a6e:	1cc4      	adds	r4, r0, #3
 8009a70:	f024 0403 	bic.w	r4, r4, #3
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	d007      	beq.n	8009a88 <sbrk_aligned+0x38>
 8009a78:	1a21      	subs	r1, r4, r0
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f000 fa72 	bl	8009f64 <_sbrk_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d101      	bne.n	8009a88 <sbrk_aligned+0x38>
 8009a84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	20001904 	.word	0x20001904

08009a90 <_malloc_r>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	1ccd      	adds	r5, r1, #3
 8009a96:	f025 0503 	bic.w	r5, r5, #3
 8009a9a:	3508      	adds	r5, #8
 8009a9c:	2d0c      	cmp	r5, #12
 8009a9e:	bf38      	it	cc
 8009aa0:	250c      	movcc	r5, #12
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	db01      	blt.n	8009aac <_malloc_r+0x1c>
 8009aa8:	42a9      	cmp	r1, r5
 8009aaa:	d905      	bls.n	8009ab8 <_malloc_r+0x28>
 8009aac:	230c      	movs	r3, #12
 8009aae:	2600      	movs	r6, #0
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b8c <_malloc_r+0xfc>
 8009abc:	f000 f9fc 	bl	8009eb8 <__malloc_lock>
 8009ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac4:	461c      	mov	r4, r3
 8009ac6:	bb5c      	cbnz	r4, 8009b20 <_malloc_r+0x90>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4638      	mov	r0, r7
 8009acc:	f7ff ffc0 	bl	8009a50 <sbrk_aligned>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	d155      	bne.n	8009b82 <_malloc_r+0xf2>
 8009ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8009ada:	4626      	mov	r6, r4
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	d145      	bne.n	8009b6c <_malloc_r+0xdc>
 8009ae0:	2c00      	cmp	r4, #0
 8009ae2:	d048      	beq.n	8009b76 <_malloc_r+0xe6>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4638      	mov	r0, r7
 8009aea:	eb04 0903 	add.w	r9, r4, r3
 8009aee:	f000 fa39 	bl	8009f64 <_sbrk_r>
 8009af2:	4581      	cmp	r9, r0
 8009af4:	d13f      	bne.n	8009b76 <_malloc_r+0xe6>
 8009af6:	6821      	ldr	r1, [r4, #0]
 8009af8:	4638      	mov	r0, r7
 8009afa:	1a6d      	subs	r5, r5, r1
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7ff ffa7 	bl	8009a50 <sbrk_aligned>
 8009b02:	3001      	adds	r0, #1
 8009b04:	d037      	beq.n	8009b76 <_malloc_r+0xe6>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	442b      	add	r3, r5
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d038      	beq.n	8009b86 <_malloc_r+0xf6>
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	42a2      	cmp	r2, r4
 8009b18:	d12b      	bne.n	8009b72 <_malloc_r+0xe2>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	e00f      	b.n	8009b40 <_malloc_r+0xb0>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	1b52      	subs	r2, r2, r5
 8009b24:	d41f      	bmi.n	8009b66 <_malloc_r+0xd6>
 8009b26:	2a0b      	cmp	r2, #11
 8009b28:	d917      	bls.n	8009b5a <_malloc_r+0xca>
 8009b2a:	1961      	adds	r1, r4, r5
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	6025      	str	r5, [r4, #0]
 8009b30:	bf18      	it	ne
 8009b32:	6059      	strne	r1, [r3, #4]
 8009b34:	6863      	ldr	r3, [r4, #4]
 8009b36:	bf08      	it	eq
 8009b38:	f8c8 1000 	streq.w	r1, [r8]
 8009b3c:	5162      	str	r2, [r4, r5]
 8009b3e:	604b      	str	r3, [r1, #4]
 8009b40:	4638      	mov	r0, r7
 8009b42:	f104 060b 	add.w	r6, r4, #11
 8009b46:	f000 f9bd 	bl	8009ec4 <__malloc_unlock>
 8009b4a:	f026 0607 	bic.w	r6, r6, #7
 8009b4e:	1d23      	adds	r3, r4, #4
 8009b50:	1af2      	subs	r2, r6, r3
 8009b52:	d0ae      	beq.n	8009ab2 <_malloc_r+0x22>
 8009b54:	1b9b      	subs	r3, r3, r6
 8009b56:	50a3      	str	r3, [r4, r2]
 8009b58:	e7ab      	b.n	8009ab2 <_malloc_r+0x22>
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6862      	ldr	r2, [r4, #4]
 8009b5e:	d1dd      	bne.n	8009b1c <_malloc_r+0x8c>
 8009b60:	f8c8 2000 	str.w	r2, [r8]
 8009b64:	e7ec      	b.n	8009b40 <_malloc_r+0xb0>
 8009b66:	4623      	mov	r3, r4
 8009b68:	6864      	ldr	r4, [r4, #4]
 8009b6a:	e7ac      	b.n	8009ac6 <_malloc_r+0x36>
 8009b6c:	4634      	mov	r4, r6
 8009b6e:	6876      	ldr	r6, [r6, #4]
 8009b70:	e7b4      	b.n	8009adc <_malloc_r+0x4c>
 8009b72:	4613      	mov	r3, r2
 8009b74:	e7cc      	b.n	8009b10 <_malloc_r+0x80>
 8009b76:	230c      	movs	r3, #12
 8009b78:	4638      	mov	r0, r7
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	f000 f9a2 	bl	8009ec4 <__malloc_unlock>
 8009b80:	e797      	b.n	8009ab2 <_malloc_r+0x22>
 8009b82:	6025      	str	r5, [r4, #0]
 8009b84:	e7dc      	b.n	8009b40 <_malloc_r+0xb0>
 8009b86:	605b      	str	r3, [r3, #4]
 8009b88:	deff      	udf	#255	; 0xff
 8009b8a:	bf00      	nop
 8009b8c:	20001900 	.word	0x20001900

08009b90 <_printf_common>:
 8009b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	4616      	mov	r6, r2
 8009b96:	4699      	mov	r9, r3
 8009b98:	688a      	ldr	r2, [r1, #8]
 8009b9a:	690b      	ldr	r3, [r1, #16]
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bfb8      	it	lt
 8009ba2:	4613      	movlt	r3, r2
 8009ba4:	6033      	str	r3, [r6, #0]
 8009ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009baa:	460c      	mov	r4, r1
 8009bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bb0:	b10a      	cbz	r2, 8009bb6 <_printf_common+0x26>
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	0699      	lsls	r1, r3, #26
 8009bba:	bf42      	ittt	mi
 8009bbc:	6833      	ldrmi	r3, [r6, #0]
 8009bbe:	3302      	addmi	r3, #2
 8009bc0:	6033      	strmi	r3, [r6, #0]
 8009bc2:	6825      	ldr	r5, [r4, #0]
 8009bc4:	f015 0506 	ands.w	r5, r5, #6
 8009bc8:	d106      	bne.n	8009bd8 <_printf_common+0x48>
 8009bca:	f104 0a19 	add.w	sl, r4, #25
 8009bce:	68e3      	ldr	r3, [r4, #12]
 8009bd0:	6832      	ldr	r2, [r6, #0]
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	dc2b      	bgt.n	8009c30 <_printf_common+0xa0>
 8009bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bdc:	1e13      	subs	r3, r2, #0
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	bf18      	it	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	0692      	lsls	r2, r2, #26
 8009be6:	d430      	bmi.n	8009c4a <_printf_common+0xba>
 8009be8:	4649      	mov	r1, r9
 8009bea:	4638      	mov	r0, r7
 8009bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bf0:	47c0      	blx	r8
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d023      	beq.n	8009c3e <_printf_common+0xae>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	6922      	ldr	r2, [r4, #16]
 8009bfa:	f003 0306 	and.w	r3, r3, #6
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	bf14      	ite	ne
 8009c02:	2500      	movne	r5, #0
 8009c04:	6833      	ldreq	r3, [r6, #0]
 8009c06:	f04f 0600 	mov.w	r6, #0
 8009c0a:	bf08      	it	eq
 8009c0c:	68e5      	ldreq	r5, [r4, #12]
 8009c0e:	f104 041a 	add.w	r4, r4, #26
 8009c12:	bf08      	it	eq
 8009c14:	1aed      	subeq	r5, r5, r3
 8009c16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c1a:	bf08      	it	eq
 8009c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c20:	4293      	cmp	r3, r2
 8009c22:	bfc4      	itt	gt
 8009c24:	1a9b      	subgt	r3, r3, r2
 8009c26:	18ed      	addgt	r5, r5, r3
 8009c28:	42b5      	cmp	r5, r6
 8009c2a:	d11a      	bne.n	8009c62 <_printf_common+0xd2>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e008      	b.n	8009c42 <_printf_common+0xb2>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4652      	mov	r2, sl
 8009c34:	4649      	mov	r1, r9
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c0      	blx	r8
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d103      	bne.n	8009c46 <_printf_common+0xb6>
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c46:	3501      	adds	r5, #1
 8009c48:	e7c1      	b.n	8009bce <_printf_common+0x3e>
 8009c4a:	2030      	movs	r0, #48	; 0x30
 8009c4c:	18e1      	adds	r1, r4, r3
 8009c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c58:	4422      	add	r2, r4
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c60:	e7c2      	b.n	8009be8 <_printf_common+0x58>
 8009c62:	2301      	movs	r3, #1
 8009c64:	4622      	mov	r2, r4
 8009c66:	4649      	mov	r1, r9
 8009c68:	4638      	mov	r0, r7
 8009c6a:	47c0      	blx	r8
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d0e6      	beq.n	8009c3e <_printf_common+0xae>
 8009c70:	3601      	adds	r6, #1
 8009c72:	e7d9      	b.n	8009c28 <_printf_common+0x98>

08009c74 <_printf_i>:
 8009c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	7e0f      	ldrb	r7, [r1, #24]
 8009c7a:	4691      	mov	r9, r2
 8009c7c:	2f78      	cmp	r7, #120	; 0x78
 8009c7e:	4680      	mov	r8, r0
 8009c80:	460c      	mov	r4, r1
 8009c82:	469a      	mov	sl, r3
 8009c84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c8a:	d807      	bhi.n	8009c9c <_printf_i+0x28>
 8009c8c:	2f62      	cmp	r7, #98	; 0x62
 8009c8e:	d80a      	bhi.n	8009ca6 <_printf_i+0x32>
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	f000 80d5 	beq.w	8009e40 <_printf_i+0x1cc>
 8009c96:	2f58      	cmp	r7, #88	; 0x58
 8009c98:	f000 80c1 	beq.w	8009e1e <_printf_i+0x1aa>
 8009c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ca4:	e03a      	b.n	8009d1c <_printf_i+0xa8>
 8009ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009caa:	2b15      	cmp	r3, #21
 8009cac:	d8f6      	bhi.n	8009c9c <_printf_i+0x28>
 8009cae:	a101      	add	r1, pc, #4	; (adr r1, 8009cb4 <_printf_i+0x40>)
 8009cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cb4:	08009d0d 	.word	0x08009d0d
 8009cb8:	08009d21 	.word	0x08009d21
 8009cbc:	08009c9d 	.word	0x08009c9d
 8009cc0:	08009c9d 	.word	0x08009c9d
 8009cc4:	08009c9d 	.word	0x08009c9d
 8009cc8:	08009c9d 	.word	0x08009c9d
 8009ccc:	08009d21 	.word	0x08009d21
 8009cd0:	08009c9d 	.word	0x08009c9d
 8009cd4:	08009c9d 	.word	0x08009c9d
 8009cd8:	08009c9d 	.word	0x08009c9d
 8009cdc:	08009c9d 	.word	0x08009c9d
 8009ce0:	08009e27 	.word	0x08009e27
 8009ce4:	08009d4d 	.word	0x08009d4d
 8009ce8:	08009de1 	.word	0x08009de1
 8009cec:	08009c9d 	.word	0x08009c9d
 8009cf0:	08009c9d 	.word	0x08009c9d
 8009cf4:	08009e49 	.word	0x08009e49
 8009cf8:	08009c9d 	.word	0x08009c9d
 8009cfc:	08009d4d 	.word	0x08009d4d
 8009d00:	08009c9d 	.word	0x08009c9d
 8009d04:	08009c9d 	.word	0x08009c9d
 8009d08:	08009de9 	.word	0x08009de9
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	1d1a      	adds	r2, r3, #4
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	602a      	str	r2, [r5, #0]
 8009d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e0a0      	b.n	8009e62 <_printf_i+0x1ee>
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	0607      	lsls	r7, r0, #24
 8009d26:	f103 0104 	add.w	r1, r3, #4
 8009d2a:	6029      	str	r1, [r5, #0]
 8009d2c:	d501      	bpl.n	8009d32 <_printf_i+0xbe>
 8009d2e:	681e      	ldr	r6, [r3, #0]
 8009d30:	e003      	b.n	8009d3a <_printf_i+0xc6>
 8009d32:	0646      	lsls	r6, r0, #25
 8009d34:	d5fb      	bpl.n	8009d2e <_printf_i+0xba>
 8009d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	da03      	bge.n	8009d46 <_printf_i+0xd2>
 8009d3e:	232d      	movs	r3, #45	; 0x2d
 8009d40:	4276      	negs	r6, r6
 8009d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d46:	230a      	movs	r3, #10
 8009d48:	4859      	ldr	r0, [pc, #356]	; (8009eb0 <_printf_i+0x23c>)
 8009d4a:	e012      	b.n	8009d72 <_printf_i+0xfe>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	1d19      	adds	r1, r3, #4
 8009d52:	6029      	str	r1, [r5, #0]
 8009d54:	0605      	lsls	r5, r0, #24
 8009d56:	d501      	bpl.n	8009d5c <_printf_i+0xe8>
 8009d58:	681e      	ldr	r6, [r3, #0]
 8009d5a:	e002      	b.n	8009d62 <_printf_i+0xee>
 8009d5c:	0641      	lsls	r1, r0, #25
 8009d5e:	d5fb      	bpl.n	8009d58 <_printf_i+0xe4>
 8009d60:	881e      	ldrh	r6, [r3, #0]
 8009d62:	2f6f      	cmp	r7, #111	; 0x6f
 8009d64:	bf0c      	ite	eq
 8009d66:	2308      	moveq	r3, #8
 8009d68:	230a      	movne	r3, #10
 8009d6a:	4851      	ldr	r0, [pc, #324]	; (8009eb0 <_printf_i+0x23c>)
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d72:	6865      	ldr	r5, [r4, #4]
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	bfa8      	it	ge
 8009d78:	6821      	ldrge	r1, [r4, #0]
 8009d7a:	60a5      	str	r5, [r4, #8]
 8009d7c:	bfa4      	itt	ge
 8009d7e:	f021 0104 	bicge.w	r1, r1, #4
 8009d82:	6021      	strge	r1, [r4, #0]
 8009d84:	b90e      	cbnz	r6, 8009d8a <_printf_i+0x116>
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	d04b      	beq.n	8009e22 <_printf_i+0x1ae>
 8009d8a:	4615      	mov	r5, r2
 8009d8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d90:	fb03 6711 	mls	r7, r3, r1, r6
 8009d94:	5dc7      	ldrb	r7, [r0, r7]
 8009d96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d9a:	4637      	mov	r7, r6
 8009d9c:	42bb      	cmp	r3, r7
 8009d9e:	460e      	mov	r6, r1
 8009da0:	d9f4      	bls.n	8009d8c <_printf_i+0x118>
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d10b      	bne.n	8009dbe <_printf_i+0x14a>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	07de      	lsls	r6, r3, #31
 8009daa:	d508      	bpl.n	8009dbe <_printf_i+0x14a>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	6861      	ldr	r1, [r4, #4]
 8009db0:	4299      	cmp	r1, r3
 8009db2:	bfde      	ittt	le
 8009db4:	2330      	movle	r3, #48	; 0x30
 8009db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009dbe:	1b52      	subs	r2, r2, r5
 8009dc0:	6122      	str	r2, [r4, #16]
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f8cd a000 	str.w	sl, [sp]
 8009dcc:	aa03      	add	r2, sp, #12
 8009dce:	f7ff fedf 	bl	8009b90 <_printf_common>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d14a      	bne.n	8009e6c <_printf_i+0x1f8>
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dda:	b004      	add	sp, #16
 8009ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	f043 0320 	orr.w	r3, r3, #32
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	2778      	movs	r7, #120	; 0x78
 8009dea:	4832      	ldr	r0, [pc, #200]	; (8009eb4 <_printf_i+0x240>)
 8009dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	6829      	ldr	r1, [r5, #0]
 8009df4:	061f      	lsls	r7, r3, #24
 8009df6:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dfa:	d402      	bmi.n	8009e02 <_printf_i+0x18e>
 8009dfc:	065f      	lsls	r7, r3, #25
 8009dfe:	bf48      	it	mi
 8009e00:	b2b6      	uxthmi	r6, r6
 8009e02:	07df      	lsls	r7, r3, #31
 8009e04:	bf48      	it	mi
 8009e06:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0a:	6029      	str	r1, [r5, #0]
 8009e0c:	bf48      	it	mi
 8009e0e:	6023      	strmi	r3, [r4, #0]
 8009e10:	b91e      	cbnz	r6, 8009e1a <_printf_i+0x1a6>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f023 0320 	bic.w	r3, r3, #32
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	2310      	movs	r3, #16
 8009e1c:	e7a6      	b.n	8009d6c <_printf_i+0xf8>
 8009e1e:	4824      	ldr	r0, [pc, #144]	; (8009eb0 <_printf_i+0x23c>)
 8009e20:	e7e4      	b.n	8009dec <_printf_i+0x178>
 8009e22:	4615      	mov	r5, r2
 8009e24:	e7bd      	b.n	8009da2 <_printf_i+0x12e>
 8009e26:	682b      	ldr	r3, [r5, #0]
 8009e28:	6826      	ldr	r6, [r4, #0]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6961      	ldr	r1, [r4, #20]
 8009e2e:	6028      	str	r0, [r5, #0]
 8009e30:	0635      	lsls	r5, r6, #24
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	d501      	bpl.n	8009e3a <_printf_i+0x1c6>
 8009e36:	6019      	str	r1, [r3, #0]
 8009e38:	e002      	b.n	8009e40 <_printf_i+0x1cc>
 8009e3a:	0670      	lsls	r0, r6, #25
 8009e3c:	d5fb      	bpl.n	8009e36 <_printf_i+0x1c2>
 8009e3e:	8019      	strh	r1, [r3, #0]
 8009e40:	2300      	movs	r3, #0
 8009e42:	4615      	mov	r5, r2
 8009e44:	6123      	str	r3, [r4, #16]
 8009e46:	e7bc      	b.n	8009dc2 <_printf_i+0x14e>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	1d1a      	adds	r2, r3, #4
 8009e4e:	602a      	str	r2, [r5, #0]
 8009e50:	681d      	ldr	r5, [r3, #0]
 8009e52:	6862      	ldr	r2, [r4, #4]
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 f895 	bl	8009f84 <memchr>
 8009e5a:	b108      	cbz	r0, 8009e60 <_printf_i+0x1ec>
 8009e5c:	1b40      	subs	r0, r0, r5
 8009e5e:	6060      	str	r0, [r4, #4]
 8009e60:	6863      	ldr	r3, [r4, #4]
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	2300      	movs	r3, #0
 8009e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6a:	e7aa      	b.n	8009dc2 <_printf_i+0x14e>
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	6923      	ldr	r3, [r4, #16]
 8009e74:	47d0      	blx	sl
 8009e76:	3001      	adds	r0, #1
 8009e78:	d0ad      	beq.n	8009dd6 <_printf_i+0x162>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	079b      	lsls	r3, r3, #30
 8009e7e:	d413      	bmi.n	8009ea8 <_printf_i+0x234>
 8009e80:	68e0      	ldr	r0, [r4, #12]
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	4298      	cmp	r0, r3
 8009e86:	bfb8      	it	lt
 8009e88:	4618      	movlt	r0, r3
 8009e8a:	e7a6      	b.n	8009dda <_printf_i+0x166>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4632      	mov	r2, r6
 8009e90:	4649      	mov	r1, r9
 8009e92:	4640      	mov	r0, r8
 8009e94:	47d0      	blx	sl
 8009e96:	3001      	adds	r0, #1
 8009e98:	d09d      	beq.n	8009dd6 <_printf_i+0x162>
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	68e3      	ldr	r3, [r4, #12]
 8009e9e:	9903      	ldr	r1, [sp, #12]
 8009ea0:	1a5b      	subs	r3, r3, r1
 8009ea2:	42ab      	cmp	r3, r5
 8009ea4:	dcf2      	bgt.n	8009e8c <_printf_i+0x218>
 8009ea6:	e7eb      	b.n	8009e80 <_printf_i+0x20c>
 8009ea8:	2500      	movs	r5, #0
 8009eaa:	f104 0619 	add.w	r6, r4, #25
 8009eae:	e7f5      	b.n	8009e9c <_printf_i+0x228>
 8009eb0:	0800a8d9 	.word	0x0800a8d9
 8009eb4:	0800a8ea 	.word	0x0800a8ea

08009eb8 <__malloc_lock>:
 8009eb8:	4801      	ldr	r0, [pc, #4]	; (8009ec0 <__malloc_lock+0x8>)
 8009eba:	f7ff bc61 	b.w	8009780 <__retarget_lock_acquire_recursive>
 8009ebe:	bf00      	nop
 8009ec0:	200018fc 	.word	0x200018fc

08009ec4 <__malloc_unlock>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__malloc_unlock+0x8>)
 8009ec6:	f7ff bc5c 	b.w	8009782 <__retarget_lock_release_recursive>
 8009eca:	bf00      	nop
 8009ecc:	200018fc 	.word	0x200018fc

08009ed0 <_realloc_r>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4614      	mov	r4, r2
 8009ed8:	460e      	mov	r6, r1
 8009eda:	b921      	cbnz	r1, 8009ee6 <_realloc_r+0x16>
 8009edc:	4611      	mov	r1, r2
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f7ff bdd5 	b.w	8009a90 <_malloc_r>
 8009ee6:	b92a      	cbnz	r2, 8009ef4 <_realloc_r+0x24>
 8009ee8:	f000 f85a 	bl	8009fa0 <_free_r>
 8009eec:	4625      	mov	r5, r4
 8009eee:	4628      	mov	r0, r5
 8009ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef4:	f000 f89c 	bl	800a030 <_malloc_usable_size_r>
 8009ef8:	4284      	cmp	r4, r0
 8009efa:	4607      	mov	r7, r0
 8009efc:	d802      	bhi.n	8009f04 <_realloc_r+0x34>
 8009efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f02:	d812      	bhi.n	8009f2a <_realloc_r+0x5a>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7ff fdc2 	bl	8009a90 <_malloc_r>
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d0ed      	beq.n	8009eee <_realloc_r+0x1e>
 8009f12:	42bc      	cmp	r4, r7
 8009f14:	4622      	mov	r2, r4
 8009f16:	4631      	mov	r1, r6
 8009f18:	bf28      	it	cs
 8009f1a:	463a      	movcs	r2, r7
 8009f1c:	f7ff fc32 	bl	8009784 <memcpy>
 8009f20:	4631      	mov	r1, r6
 8009f22:	4640      	mov	r0, r8
 8009f24:	f000 f83c 	bl	8009fa0 <_free_r>
 8009f28:	e7e1      	b.n	8009eee <_realloc_r+0x1e>
 8009f2a:	4635      	mov	r5, r6
 8009f2c:	e7df      	b.n	8009eee <_realloc_r+0x1e>

08009f2e <memmove>:
 8009f2e:	4288      	cmp	r0, r1
 8009f30:	b510      	push	{r4, lr}
 8009f32:	eb01 0402 	add.w	r4, r1, r2
 8009f36:	d902      	bls.n	8009f3e <memmove+0x10>
 8009f38:	4284      	cmp	r4, r0
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	d807      	bhi.n	8009f4e <memmove+0x20>
 8009f3e:	1e43      	subs	r3, r0, #1
 8009f40:	42a1      	cmp	r1, r4
 8009f42:	d008      	beq.n	8009f56 <memmove+0x28>
 8009f44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f4c:	e7f8      	b.n	8009f40 <memmove+0x12>
 8009f4e:	4601      	mov	r1, r0
 8009f50:	4402      	add	r2, r0
 8009f52:	428a      	cmp	r2, r1
 8009f54:	d100      	bne.n	8009f58 <memmove+0x2a>
 8009f56:	bd10      	pop	{r4, pc}
 8009f58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f60:	e7f7      	b.n	8009f52 <memmove+0x24>
	...

08009f64 <_sbrk_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	2300      	movs	r3, #0
 8009f68:	4d05      	ldr	r5, [pc, #20]	; (8009f80 <_sbrk_r+0x1c>)
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f8 fa04 	bl	800237c <_sbrk>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_sbrk_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_sbrk_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001908 	.word	0x20001908

08009f84 <memchr>:
 8009f84:	4603      	mov	r3, r0
 8009f86:	b510      	push	{r4, lr}
 8009f88:	b2c9      	uxtb	r1, r1
 8009f8a:	4402      	add	r2, r0
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	d101      	bne.n	8009f96 <memchr+0x12>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e003      	b.n	8009f9e <memchr+0x1a>
 8009f96:	7804      	ldrb	r4, [r0, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	428c      	cmp	r4, r1
 8009f9c:	d1f6      	bne.n	8009f8c <memchr+0x8>
 8009f9e:	bd10      	pop	{r4, pc}

08009fa0 <_free_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	d040      	beq.n	800a02a <_free_r+0x8a>
 8009fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fac:	1f0c      	subs	r4, r1, #4
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfb8      	it	lt
 8009fb2:	18e4      	addlt	r4, r4, r3
 8009fb4:	f7ff ff80 	bl	8009eb8 <__malloc_lock>
 8009fb8:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <_free_r+0x8c>)
 8009fba:	6813      	ldr	r3, [r2, #0]
 8009fbc:	b933      	cbnz	r3, 8009fcc <_free_r+0x2c>
 8009fbe:	6063      	str	r3, [r4, #4]
 8009fc0:	6014      	str	r4, [r2, #0]
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc8:	f7ff bf7c 	b.w	8009ec4 <__malloc_unlock>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d908      	bls.n	8009fe2 <_free_r+0x42>
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	1821      	adds	r1, r4, r0
 8009fd4:	428b      	cmp	r3, r1
 8009fd6:	bf01      	itttt	eq
 8009fd8:	6819      	ldreq	r1, [r3, #0]
 8009fda:	685b      	ldreq	r3, [r3, #4]
 8009fdc:	1809      	addeq	r1, r1, r0
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	e7ed      	b.n	8009fbe <_free_r+0x1e>
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	b10b      	cbz	r3, 8009fec <_free_r+0x4c>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d9fa      	bls.n	8009fe2 <_free_r+0x42>
 8009fec:	6811      	ldr	r1, [r2, #0]
 8009fee:	1850      	adds	r0, r2, r1
 8009ff0:	42a0      	cmp	r0, r4
 8009ff2:	d10b      	bne.n	800a00c <_free_r+0x6c>
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	4401      	add	r1, r0
 8009ff8:	1850      	adds	r0, r2, r1
 8009ffa:	4283      	cmp	r3, r0
 8009ffc:	6011      	str	r1, [r2, #0]
 8009ffe:	d1e0      	bne.n	8009fc2 <_free_r+0x22>
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	4408      	add	r0, r1
 800a006:	6010      	str	r0, [r2, #0]
 800a008:	6053      	str	r3, [r2, #4]
 800a00a:	e7da      	b.n	8009fc2 <_free_r+0x22>
 800a00c:	d902      	bls.n	800a014 <_free_r+0x74>
 800a00e:	230c      	movs	r3, #12
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	e7d6      	b.n	8009fc2 <_free_r+0x22>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	1821      	adds	r1, r4, r0
 800a018:	428b      	cmp	r3, r1
 800a01a:	bf01      	itttt	eq
 800a01c:	6819      	ldreq	r1, [r3, #0]
 800a01e:	685b      	ldreq	r3, [r3, #4]
 800a020:	1809      	addeq	r1, r1, r0
 800a022:	6021      	streq	r1, [r4, #0]
 800a024:	6063      	str	r3, [r4, #4]
 800a026:	6054      	str	r4, [r2, #4]
 800a028:	e7cb      	b.n	8009fc2 <_free_r+0x22>
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	20001900 	.word	0x20001900

0800a030 <_malloc_usable_size_r>:
 800a030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a034:	1f18      	subs	r0, r3, #4
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfbc      	itt	lt
 800a03a:	580b      	ldrlt	r3, [r1, r0]
 800a03c:	18c0      	addlt	r0, r0, r3
 800a03e:	4770      	bx	lr

0800a040 <log>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	4604      	mov	r4, r0
 800a044:	460d      	mov	r5, r1
 800a046:	f000 f833 	bl	800a0b0 <__ieee754_log>
 800a04a:	4622      	mov	r2, r4
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	462b      	mov	r3, r5
 800a052:	4620      	mov	r0, r4
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 fd45 	bl	8000ae4 <__aeabi_dcmpun>
 800a05a:	b998      	cbnz	r0, 800a084 <log+0x44>
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 fd34 	bl	8000ad0 <__aeabi_dcmpgt>
 800a068:	b960      	cbnz	r0, 800a084 <log+0x44>
 800a06a:	2200      	movs	r2, #0
 800a06c:	2300      	movs	r3, #0
 800a06e:	4620      	mov	r0, r4
 800a070:	4629      	mov	r1, r5
 800a072:	f7f6 fd05 	bl	8000a80 <__aeabi_dcmpeq>
 800a076:	b140      	cbz	r0, 800a08a <log+0x4a>
 800a078:	f7ff fb58 	bl	800972c <__errno>
 800a07c:	2322      	movs	r3, #34	; 0x22
 800a07e:	2600      	movs	r6, #0
 800a080:	4f06      	ldr	r7, [pc, #24]	; (800a09c <log+0x5c>)
 800a082:	6003      	str	r3, [r0, #0]
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a08a:	f7ff fb4f 	bl	800972c <__errno>
 800a08e:	2321      	movs	r3, #33	; 0x21
 800a090:	6003      	str	r3, [r0, #0]
 800a092:	4803      	ldr	r0, [pc, #12]	; (800a0a0 <log+0x60>)
 800a094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a098:	f000 b804 	b.w	800a0a4 <nan>
 800a09c:	fff00000 	.word	0xfff00000
 800a0a0:	0800a8cd 	.word	0x0800a8cd

0800a0a4 <nan>:
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	4901      	ldr	r1, [pc, #4]	; (800a0ac <nan+0x8>)
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	7ff80000 	.word	0x7ff80000

0800a0b0 <__ieee754_log>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	460d      	mov	r5, r1
 800a0be:	b087      	sub	sp, #28
 800a0c0:	da24      	bge.n	800a10c <__ieee754_log+0x5c>
 800a0c2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a0c6:	4304      	orrs	r4, r0
 800a0c8:	d108      	bne.n	800a0dc <__ieee754_log+0x2c>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	49cb      	ldr	r1, [pc, #812]	; (800a400 <__ieee754_log+0x350>)
 800a0d2:	f7f6 fb97 	bl	8000804 <__aeabi_ddiv>
 800a0d6:	b007      	add	sp, #28
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	da04      	bge.n	800a0ea <__ieee754_log+0x3a>
 800a0e0:	f7f6 f8ae 	bl	8000240 <__aeabi_dsub>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e7f3      	b.n	800a0d2 <__ieee754_log+0x22>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4bc5      	ldr	r3, [pc, #788]	; (800a404 <__ieee754_log+0x354>)
 800a0ee:	f7f6 fa5f 	bl	80005b0 <__aeabi_dmul>
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a0fc:	48c2      	ldr	r0, [pc, #776]	; (800a408 <__ieee754_log+0x358>)
 800a0fe:	4285      	cmp	r5, r0
 800a100:	dd06      	ble.n	800a110 <__ieee754_log+0x60>
 800a102:	4610      	mov	r0, r2
 800a104:	4619      	mov	r1, r3
 800a106:	f7f6 f89d 	bl	8000244 <__adddf3>
 800a10a:	e7e4      	b.n	800a0d6 <__ieee754_log+0x26>
 800a10c:	2100      	movs	r1, #0
 800a10e:	e7f5      	b.n	800a0fc <__ieee754_log+0x4c>
 800a110:	152c      	asrs	r4, r5, #20
 800a112:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a116:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a11a:	440c      	add	r4, r1
 800a11c:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a120:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a124:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800a128:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800a12c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a130:	ea41 0305 	orr.w	r3, r1, r5
 800a134:	4610      	mov	r0, r2
 800a136:	4619      	mov	r1, r3
 800a138:	2200      	movs	r2, #0
 800a13a:	4bb4      	ldr	r3, [pc, #720]	; (800a40c <__ieee754_log+0x35c>)
 800a13c:	f7f6 f880 	bl	8000240 <__aeabi_dsub>
 800a140:	1cab      	adds	r3, r5, #2
 800a142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a146:	2b02      	cmp	r3, #2
 800a148:	4682      	mov	sl, r0
 800a14a:	468b      	mov	fp, r1
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800a154:	dc53      	bgt.n	800a1fe <__ieee754_log+0x14e>
 800a156:	2300      	movs	r3, #0
 800a158:	f7f6 fc92 	bl	8000a80 <__aeabi_dcmpeq>
 800a15c:	b1d0      	cbz	r0, 800a194 <__ieee754_log+0xe4>
 800a15e:	2c00      	cmp	r4, #0
 800a160:	f000 8122 	beq.w	800a3a8 <__ieee754_log+0x2f8>
 800a164:	4620      	mov	r0, r4
 800a166:	f7f6 f9b9 	bl	80004dc <__aeabi_i2d>
 800a16a:	a391      	add	r3, pc, #580	; (adr r3, 800a3b0 <__ieee754_log+0x300>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	4606      	mov	r6, r0
 800a172:	460f      	mov	r7, r1
 800a174:	f7f6 fa1c 	bl	80005b0 <__aeabi_dmul>
 800a178:	a38f      	add	r3, pc, #572	; (adr r3, 800a3b8 <__ieee754_log+0x308>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 fa13 	bl	80005b0 <__aeabi_dmul>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	e7b8      	b.n	800a106 <__ieee754_log+0x56>
 800a194:	a38a      	add	r3, pc, #552	; (adr r3, 800a3c0 <__ieee754_log+0x310>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	4650      	mov	r0, sl
 800a19c:	4659      	mov	r1, fp
 800a19e:	f7f6 fa07 	bl	80005b0 <__aeabi_dmul>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	4999      	ldr	r1, [pc, #612]	; (800a410 <__ieee754_log+0x360>)
 800a1aa:	f7f6 f849 	bl	8000240 <__aeabi_dsub>
 800a1ae:	4652      	mov	r2, sl
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	4650      	mov	r0, sl
 800a1b8:	4659      	mov	r1, fp
 800a1ba:	f7f6 f9f9 	bl	80005b0 <__aeabi_dmul>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	f7f6 f9f3 	bl	80005b0 <__aeabi_dmul>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	b914      	cbnz	r4, 800a1d6 <__ieee754_log+0x126>
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	e0a2      	b.n	800a31c <__ieee754_log+0x26c>
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7f6 f980 	bl	80004dc <__aeabi_i2d>
 800a1dc:	a374      	add	r3, pc, #464	; (adr r3, 800a3b0 <__ieee754_log+0x300>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4689      	mov	r9, r1
 800a1e6:	f7f6 f9e3 	bl	80005b0 <__aeabi_dmul>
 800a1ea:	a373      	add	r3, pc, #460	; (adr r3, 800a3b8 <__ieee754_log+0x308>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	f7f6 f9da 	bl	80005b0 <__aeabi_dmul>
 800a1fc:	e0a7      	b.n	800a34e <__ieee754_log+0x29e>
 800a1fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a202:	f7f6 f81f 	bl	8000244 <__adddf3>
 800a206:	4602      	mov	r2, r0
 800a208:	460b      	mov	r3, r1
 800a20a:	4650      	mov	r0, sl
 800a20c:	4659      	mov	r1, fp
 800a20e:	f7f6 faf9 	bl	8000804 <__aeabi_ddiv>
 800a212:	e9cd 0100 	strd	r0, r1, [sp]
 800a216:	4620      	mov	r0, r4
 800a218:	f7f6 f960 	bl	80004dc <__aeabi_i2d>
 800a21c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a224:	4610      	mov	r0, r2
 800a226:	4619      	mov	r1, r3
 800a228:	f7f6 f9c2 	bl	80005b0 <__aeabi_dmul>
 800a22c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a230:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a234:	4602      	mov	r2, r0
 800a236:	9305      	str	r3, [sp, #20]
 800a238:	460b      	mov	r3, r1
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	f7f6 f9b7 	bl	80005b0 <__aeabi_dmul>
 800a242:	a361      	add	r3, pc, #388	; (adr r3, 800a3c8 <__ieee754_log+0x318>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	4680      	mov	r8, r0
 800a24a:	4689      	mov	r9, r1
 800a24c:	f7f6 f9b0 	bl	80005b0 <__aeabi_dmul>
 800a250:	a35f      	add	r3, pc, #380	; (adr r3, 800a3d0 <__ieee754_log+0x320>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f5 fff5 	bl	8000244 <__adddf3>
 800a25a:	4642      	mov	r2, r8
 800a25c:	464b      	mov	r3, r9
 800a25e:	f7f6 f9a7 	bl	80005b0 <__aeabi_dmul>
 800a262:	a35d      	add	r3, pc, #372	; (adr r3, 800a3d8 <__ieee754_log+0x328>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f5 ffec 	bl	8000244 <__adddf3>
 800a26c:	4642      	mov	r2, r8
 800a26e:	464b      	mov	r3, r9
 800a270:	f7f6 f99e 	bl	80005b0 <__aeabi_dmul>
 800a274:	a35a      	add	r3, pc, #360	; (adr r3, 800a3e0 <__ieee754_log+0x330>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ffe3 	bl	8000244 <__adddf3>
 800a27e:	4632      	mov	r2, r6
 800a280:	463b      	mov	r3, r7
 800a282:	f7f6 f995 	bl	80005b0 <__aeabi_dmul>
 800a286:	a358      	add	r3, pc, #352	; (adr r3, 800a3e8 <__ieee754_log+0x338>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f98c 	bl	80005b0 <__aeabi_dmul>
 800a298:	a355      	add	r3, pc, #340	; (adr r3, 800a3f0 <__ieee754_log+0x340>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f5 ffd1 	bl	8000244 <__adddf3>
 800a2a2:	4642      	mov	r2, r8
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	f7f6 f983 	bl	80005b0 <__aeabi_dmul>
 800a2aa:	a353      	add	r3, pc, #332	; (adr r3, 800a3f8 <__ieee754_log+0x348>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 ffc8 	bl	8000244 <__adddf3>
 800a2b4:	4642      	mov	r2, r8
 800a2b6:	464b      	mov	r3, r9
 800a2b8:	f7f6 f97a 	bl	80005b0 <__aeabi_dmul>
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7f5 ffbe 	bl	8000244 <__adddf3>
 800a2c8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a2cc:	9b05      	ldr	r3, [sp, #20]
 800a2ce:	3551      	adds	r5, #81	; 0x51
 800a2d0:	431d      	orrs	r5, r3
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	dd48      	ble.n	800a36c <__ieee754_log+0x2bc>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4b4c      	ldr	r3, [pc, #304]	; (800a410 <__ieee754_log+0x360>)
 800a2de:	4650      	mov	r0, sl
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	f7f6 f965 	bl	80005b0 <__aeabi_dmul>
 800a2e6:	4652      	mov	r2, sl
 800a2e8:	465b      	mov	r3, fp
 800a2ea:	f7f6 f961 	bl	80005b0 <__aeabi_dmul>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	f7f5 ffa3 	bl	8000244 <__adddf3>
 800a2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a302:	f7f6 f955 	bl	80005b0 <__aeabi_dmul>
 800a306:	4680      	mov	r8, r0
 800a308:	4689      	mov	r9, r1
 800a30a:	b964      	cbnz	r4, 800a326 <__ieee754_log+0x276>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f5 ff94 	bl	8000240 <__aeabi_dsub>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4650      	mov	r0, sl
 800a31e:	4659      	mov	r1, fp
 800a320:	f7f5 ff8e 	bl	8000240 <__aeabi_dsub>
 800a324:	e6d7      	b.n	800a0d6 <__ieee754_log+0x26>
 800a326:	a322      	add	r3, pc, #136	; (adr r3, 800a3b0 <__ieee754_log+0x300>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a330:	f7f6 f93e 	bl	80005b0 <__aeabi_dmul>
 800a334:	a320      	add	r3, pc, #128	; (adr r3, 800a3b8 <__ieee754_log+0x308>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	4604      	mov	r4, r0
 800a33c:	460d      	mov	r5, r1
 800a33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a342:	f7f6 f935 	bl	80005b0 <__aeabi_dmul>
 800a346:	4642      	mov	r2, r8
 800a348:	464b      	mov	r3, r9
 800a34a:	f7f5 ff7b 	bl	8000244 <__adddf3>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4630      	mov	r0, r6
 800a354:	4639      	mov	r1, r7
 800a356:	f7f5 ff73 	bl	8000240 <__aeabi_dsub>
 800a35a:	4652      	mov	r2, sl
 800a35c:	465b      	mov	r3, fp
 800a35e:	f7f5 ff6f 	bl	8000240 <__aeabi_dsub>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	e7d9      	b.n	800a320 <__ieee754_log+0x270>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	f7f5 ff64 	bl	8000240 <__aeabi_dsub>
 800a378:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a37c:	f7f6 f918 	bl	80005b0 <__aeabi_dmul>
 800a380:	4606      	mov	r6, r0
 800a382:	460f      	mov	r7, r1
 800a384:	2c00      	cmp	r4, #0
 800a386:	f43f af23 	beq.w	800a1d0 <__ieee754_log+0x120>
 800a38a:	a309      	add	r3, pc, #36	; (adr r3, 800a3b0 <__ieee754_log+0x300>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a394:	f7f6 f90c 	bl	80005b0 <__aeabi_dmul>
 800a398:	a307      	add	r3, pc, #28	; (adr r3, 800a3b8 <__ieee754_log+0x308>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a6:	e727      	b.n	800a1f8 <__ieee754_log+0x148>
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	e693      	b.n	800a0d6 <__ieee754_log+0x26>
 800a3ae:	bf00      	nop
 800a3b0:	fee00000 	.word	0xfee00000
 800a3b4:	3fe62e42 	.word	0x3fe62e42
 800a3b8:	35793c76 	.word	0x35793c76
 800a3bc:	3dea39ef 	.word	0x3dea39ef
 800a3c0:	55555555 	.word	0x55555555
 800a3c4:	3fd55555 	.word	0x3fd55555
 800a3c8:	df3e5244 	.word	0xdf3e5244
 800a3cc:	3fc2f112 	.word	0x3fc2f112
 800a3d0:	96cb03de 	.word	0x96cb03de
 800a3d4:	3fc74664 	.word	0x3fc74664
 800a3d8:	94229359 	.word	0x94229359
 800a3dc:	3fd24924 	.word	0x3fd24924
 800a3e0:	55555593 	.word	0x55555593
 800a3e4:	3fe55555 	.word	0x3fe55555
 800a3e8:	d078c69f 	.word	0xd078c69f
 800a3ec:	3fc39a09 	.word	0x3fc39a09
 800a3f0:	1d8e78af 	.word	0x1d8e78af
 800a3f4:	3fcc71c5 	.word	0x3fcc71c5
 800a3f8:	9997fa04 	.word	0x9997fa04
 800a3fc:	3fd99999 	.word	0x3fd99999
 800a400:	c3500000 	.word	0xc3500000
 800a404:	43500000 	.word	0x43500000
 800a408:	7fefffff 	.word	0x7fefffff
 800a40c:	3ff00000 	.word	0x3ff00000
 800a410:	3fe00000 	.word	0x3fe00000

0800a414 <_init>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	bf00      	nop
 800a418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41a:	bc08      	pop	{r3}
 800a41c:	469e      	mov	lr, r3
 800a41e:	4770      	bx	lr

0800a420 <_fini>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr
