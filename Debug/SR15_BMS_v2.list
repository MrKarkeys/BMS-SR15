
SR15_BMS_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800c8b8  0800c8b8  0001c8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d4  0800d0d4  00020344  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d4  0800d0d4  0001d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0dc  0800d0dc  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0dc  0800d0dc  0001d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800d0e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000174c  20000344  0800d428  00020344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a90  0800d428  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a40e  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ab5  00000000  00000000  0003a7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001910  00000000  00000000  0003f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001327  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024756  00000000  00000000  00041eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001faa3  00000000  00000000  00066605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2d6d  00000000  00000000  000860a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007aac  00000000  00000000  00148e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001508c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000344 	.word	0x20000344
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c89c 	.word	0x0800c89c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000348 	.word	0x20000348
 8000224:	0800c89c 	.word	0x0800c89c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc0:	d2ed      	bcs.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__aeabi_uldivmod>:
 80010bc:	b953      	cbnz	r3, 80010d4 <__aeabi_uldivmod+0x18>
 80010be:	b94a      	cbnz	r2, 80010d4 <__aeabi_uldivmod+0x18>
 80010c0:	2900      	cmp	r1, #0
 80010c2:	bf08      	it	eq
 80010c4:	2800      	cmpeq	r0, #0
 80010c6:	bf1c      	itt	ne
 80010c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80010cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010d0:	f000 b972 	b.w	80013b8 <__aeabi_idiv0>
 80010d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010dc:	f000 f806 	bl	80010ec <__udivmoddi4>
 80010e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010e8:	b004      	add	sp, #16
 80010ea:	4770      	bx	lr

080010ec <__udivmoddi4>:
 80010ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f0:	9e08      	ldr	r6, [sp, #32]
 80010f2:	460d      	mov	r5, r1
 80010f4:	4604      	mov	r4, r0
 80010f6:	468e      	mov	lr, r1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d14c      	bne.n	8001196 <__udivmoddi4+0xaa>
 80010fc:	428a      	cmp	r2, r1
 80010fe:	4694      	mov	ip, r2
 8001100:	d967      	bls.n	80011d2 <__udivmoddi4+0xe6>
 8001102:	fab2 f382 	clz	r3, r2
 8001106:	b153      	cbz	r3, 800111e <__udivmoddi4+0x32>
 8001108:	fa02 fc03 	lsl.w	ip, r2, r3
 800110c:	f1c3 0220 	rsb	r2, r3, #32
 8001110:	fa01 fe03 	lsl.w	lr, r1, r3
 8001114:	fa20 f202 	lsr.w	r2, r0, r2
 8001118:	ea42 0e0e 	orr.w	lr, r2, lr
 800111c:	409c      	lsls	r4, r3
 800111e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001122:	fbbe f1f7 	udiv	r1, lr, r7
 8001126:	fa1f f58c 	uxth.w	r5, ip
 800112a:	fb07 ee11 	mls	lr, r7, r1, lr
 800112e:	fb01 f005 	mul.w	r0, r1, r5
 8001132:	0c22      	lsrs	r2, r4, #16
 8001134:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001138:	4290      	cmp	r0, r2
 800113a:	d90a      	bls.n	8001152 <__udivmoddi4+0x66>
 800113c:	eb1c 0202 	adds.w	r2, ip, r2
 8001140:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8001144:	f080 8119 	bcs.w	800137a <__udivmoddi4+0x28e>
 8001148:	4290      	cmp	r0, r2
 800114a:	f240 8116 	bls.w	800137a <__udivmoddi4+0x28e>
 800114e:	3902      	subs	r1, #2
 8001150:	4462      	add	r2, ip
 8001152:	1a12      	subs	r2, r2, r0
 8001154:	fbb2 f0f7 	udiv	r0, r2, r7
 8001158:	fb07 2210 	mls	r2, r7, r0, r2
 800115c:	fb00 f505 	mul.w	r5, r0, r5
 8001160:	b2a4      	uxth	r4, r4
 8001162:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001166:	42a5      	cmp	r5, r4
 8001168:	d90a      	bls.n	8001180 <__udivmoddi4+0x94>
 800116a:	eb1c 0404 	adds.w	r4, ip, r4
 800116e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001172:	f080 8104 	bcs.w	800137e <__udivmoddi4+0x292>
 8001176:	42a5      	cmp	r5, r4
 8001178:	f240 8101 	bls.w	800137e <__udivmoddi4+0x292>
 800117c:	4464      	add	r4, ip
 800117e:	3802      	subs	r0, #2
 8001180:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001184:	2100      	movs	r1, #0
 8001186:	1b64      	subs	r4, r4, r5
 8001188:	b11e      	cbz	r6, 8001192 <__udivmoddi4+0xa6>
 800118a:	40dc      	lsrs	r4, r3
 800118c:	2300      	movs	r3, #0
 800118e:	e9c6 4300 	strd	r4, r3, [r6]
 8001192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001196:	428b      	cmp	r3, r1
 8001198:	d908      	bls.n	80011ac <__udivmoddi4+0xc0>
 800119a:	2e00      	cmp	r6, #0
 800119c:	f000 80ea 	beq.w	8001374 <__udivmoddi4+0x288>
 80011a0:	2100      	movs	r1, #0
 80011a2:	e9c6 0500 	strd	r0, r5, [r6]
 80011a6:	4608      	mov	r0, r1
 80011a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ac:	fab3 f183 	clz	r1, r3
 80011b0:	2900      	cmp	r1, #0
 80011b2:	d148      	bne.n	8001246 <__udivmoddi4+0x15a>
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	d302      	bcc.n	80011be <__udivmoddi4+0xd2>
 80011b8:	4282      	cmp	r2, r0
 80011ba:	f200 80f8 	bhi.w	80013ae <__udivmoddi4+0x2c2>
 80011be:	1a84      	subs	r4, r0, r2
 80011c0:	eb65 0203 	sbc.w	r2, r5, r3
 80011c4:	2001      	movs	r0, #1
 80011c6:	4696      	mov	lr, r2
 80011c8:	2e00      	cmp	r6, #0
 80011ca:	d0e2      	beq.n	8001192 <__udivmoddi4+0xa6>
 80011cc:	e9c6 4e00 	strd	r4, lr, [r6]
 80011d0:	e7df      	b.n	8001192 <__udivmoddi4+0xa6>
 80011d2:	b902      	cbnz	r2, 80011d6 <__udivmoddi4+0xea>
 80011d4:	deff      	udf	#255	; 0xff
 80011d6:	fab2 f382 	clz	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 808e 	bne.w	80012fc <__udivmoddi4+0x210>
 80011e0:	1a88      	subs	r0, r1, r2
 80011e2:	2101      	movs	r1, #1
 80011e4:	0c17      	lsrs	r7, r2, #16
 80011e6:	fa1f fe82 	uxth.w	lr, r2
 80011ea:	fbb0 f5f7 	udiv	r5, r0, r7
 80011ee:	fb07 0015 	mls	r0, r7, r5, r0
 80011f2:	0c22      	lsrs	r2, r4, #16
 80011f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011f8:	fb0e f005 	mul.w	r0, lr, r5
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x126>
 8001200:	eb1c 0202 	adds.w	r2, ip, r2
 8001204:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001208:	d202      	bcs.n	8001210 <__udivmoddi4+0x124>
 800120a:	4290      	cmp	r0, r2
 800120c:	f200 80cc 	bhi.w	80013a8 <__udivmoddi4+0x2bc>
 8001210:	4645      	mov	r5, r8
 8001212:	1a12      	subs	r2, r2, r0
 8001214:	fbb2 f0f7 	udiv	r0, r2, r7
 8001218:	fb07 2210 	mls	r2, r7, r0, r2
 800121c:	fb0e fe00 	mul.w	lr, lr, r0
 8001220:	b2a4      	uxth	r4, r4
 8001222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001226:	45a6      	cmp	lr, r4
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x150>
 800122a:	eb1c 0404 	adds.w	r4, ip, r4
 800122e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x14e>
 8001234:	45a6      	cmp	lr, r4
 8001236:	f200 80b4 	bhi.w	80013a2 <__udivmoddi4+0x2b6>
 800123a:	4610      	mov	r0, r2
 800123c:	eba4 040e 	sub.w	r4, r4, lr
 8001240:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001244:	e7a0      	b.n	8001188 <__udivmoddi4+0x9c>
 8001246:	f1c1 0720 	rsb	r7, r1, #32
 800124a:	408b      	lsls	r3, r1
 800124c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001250:	ea4c 0c03 	orr.w	ip, ip, r3
 8001254:	fa25 fa07 	lsr.w	sl, r5, r7
 8001258:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800125c:	fbba f8f9 	udiv	r8, sl, r9
 8001260:	408d      	lsls	r5, r1
 8001262:	fa20 f307 	lsr.w	r3, r0, r7
 8001266:	fb09 aa18 	mls	sl, r9, r8, sl
 800126a:	fa1f fe8c 	uxth.w	lr, ip
 800126e:	432b      	orrs	r3, r5
 8001270:	fa00 f501 	lsl.w	r5, r0, r1
 8001274:	fb08 f00e 	mul.w	r0, r8, lr
 8001278:	0c1c      	lsrs	r4, r3, #16
 800127a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800127e:	42a0      	cmp	r0, r4
 8001280:	fa02 f201 	lsl.w	r2, r2, r1
 8001284:	d90b      	bls.n	800129e <__udivmoddi4+0x1b2>
 8001286:	eb1c 0404 	adds.w	r4, ip, r4
 800128a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800128e:	f080 8086 	bcs.w	800139e <__udivmoddi4+0x2b2>
 8001292:	42a0      	cmp	r0, r4
 8001294:	f240 8083 	bls.w	800139e <__udivmoddi4+0x2b2>
 8001298:	f1a8 0802 	sub.w	r8, r8, #2
 800129c:	4464      	add	r4, ip
 800129e:	1a24      	subs	r4, r4, r0
 80012a0:	b298      	uxth	r0, r3
 80012a2:	fbb4 f3f9 	udiv	r3, r4, r9
 80012a6:	fb09 4413 	mls	r4, r9, r3, r4
 80012aa:	fb03 fe0e 	mul.w	lr, r3, lr
 80012ae:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012b2:	45a6      	cmp	lr, r4
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x1dc>
 80012b6:	eb1c 0404 	adds.w	r4, ip, r4
 80012ba:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80012be:	d26a      	bcs.n	8001396 <__udivmoddi4+0x2aa>
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d968      	bls.n	8001396 <__udivmoddi4+0x2aa>
 80012c4:	3b02      	subs	r3, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012cc:	fba0 9302 	umull	r9, r3, r0, r2
 80012d0:	eba4 040e 	sub.w	r4, r4, lr
 80012d4:	429c      	cmp	r4, r3
 80012d6:	46c8      	mov	r8, r9
 80012d8:	469e      	mov	lr, r3
 80012da:	d354      	bcc.n	8001386 <__udivmoddi4+0x29a>
 80012dc:	d051      	beq.n	8001382 <__udivmoddi4+0x296>
 80012de:	2e00      	cmp	r6, #0
 80012e0:	d067      	beq.n	80013b2 <__udivmoddi4+0x2c6>
 80012e2:	ebb5 0308 	subs.w	r3, r5, r8
 80012e6:	eb64 040e 	sbc.w	r4, r4, lr
 80012ea:	40cb      	lsrs	r3, r1
 80012ec:	fa04 f707 	lsl.w	r7, r4, r7
 80012f0:	431f      	orrs	r7, r3
 80012f2:	40cc      	lsrs	r4, r1
 80012f4:	e9c6 7400 	strd	r7, r4, [r6]
 80012f8:	2100      	movs	r1, #0
 80012fa:	e74a      	b.n	8001192 <__udivmoddi4+0xa6>
 80012fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001300:	f1c3 0020 	rsb	r0, r3, #32
 8001304:	40c1      	lsrs	r1, r0
 8001306:	409d      	lsls	r5, r3
 8001308:	fa24 f000 	lsr.w	r0, r4, r0
 800130c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001310:	4328      	orrs	r0, r5
 8001312:	fbb1 f5f7 	udiv	r5, r1, r7
 8001316:	fb07 1115 	mls	r1, r7, r5, r1
 800131a:	fa1f fe8c 	uxth.w	lr, ip
 800131e:	0c02      	lsrs	r2, r0, #16
 8001320:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001324:	fb05 f10e 	mul.w	r1, r5, lr
 8001328:	4291      	cmp	r1, r2
 800132a:	fa04 f403 	lsl.w	r4, r4, r3
 800132e:	d908      	bls.n	8001342 <__udivmoddi4+0x256>
 8001330:	eb1c 0202 	adds.w	r2, ip, r2
 8001334:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001338:	d22f      	bcs.n	800139a <__udivmoddi4+0x2ae>
 800133a:	4291      	cmp	r1, r2
 800133c:	d92d      	bls.n	800139a <__udivmoddi4+0x2ae>
 800133e:	3d02      	subs	r5, #2
 8001340:	4462      	add	r2, ip
 8001342:	1a52      	subs	r2, r2, r1
 8001344:	fbb2 f1f7 	udiv	r1, r2, r7
 8001348:	fb07 2211 	mls	r2, r7, r1, r2
 800134c:	b280      	uxth	r0, r0
 800134e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001352:	fb01 f20e 	mul.w	r2, r1, lr
 8001356:	4282      	cmp	r2, r0
 8001358:	d908      	bls.n	800136c <__udivmoddi4+0x280>
 800135a:	eb1c 0000 	adds.w	r0, ip, r0
 800135e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8001362:	d216      	bcs.n	8001392 <__udivmoddi4+0x2a6>
 8001364:	4282      	cmp	r2, r0
 8001366:	d914      	bls.n	8001392 <__udivmoddi4+0x2a6>
 8001368:	3902      	subs	r1, #2
 800136a:	4460      	add	r0, ip
 800136c:	1a80      	subs	r0, r0, r2
 800136e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001372:	e73a      	b.n	80011ea <__udivmoddi4+0xfe>
 8001374:	4631      	mov	r1, r6
 8001376:	4630      	mov	r0, r6
 8001378:	e70b      	b.n	8001192 <__udivmoddi4+0xa6>
 800137a:	4671      	mov	r1, lr
 800137c:	e6e9      	b.n	8001152 <__udivmoddi4+0x66>
 800137e:	4610      	mov	r0, r2
 8001380:	e6fe      	b.n	8001180 <__udivmoddi4+0x94>
 8001382:	454d      	cmp	r5, r9
 8001384:	d2ab      	bcs.n	80012de <__udivmoddi4+0x1f2>
 8001386:	ebb9 0802 	subs.w	r8, r9, r2
 800138a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800138e:	3801      	subs	r0, #1
 8001390:	e7a5      	b.n	80012de <__udivmoddi4+0x1f2>
 8001392:	4641      	mov	r1, r8
 8001394:	e7ea      	b.n	800136c <__udivmoddi4+0x280>
 8001396:	4603      	mov	r3, r0
 8001398:	e796      	b.n	80012c8 <__udivmoddi4+0x1dc>
 800139a:	4645      	mov	r5, r8
 800139c:	e7d1      	b.n	8001342 <__udivmoddi4+0x256>
 800139e:	46d0      	mov	r8, sl
 80013a0:	e77d      	b.n	800129e <__udivmoddi4+0x1b2>
 80013a2:	4464      	add	r4, ip
 80013a4:	3802      	subs	r0, #2
 80013a6:	e749      	b.n	800123c <__udivmoddi4+0x150>
 80013a8:	3d02      	subs	r5, #2
 80013aa:	4462      	add	r2, ip
 80013ac:	e731      	b.n	8001212 <__udivmoddi4+0x126>
 80013ae:	4608      	mov	r0, r1
 80013b0:	e70a      	b.n	80011c8 <__udivmoddi4+0xdc>
 80013b2:	4631      	mov	r1, r6
 80013b4:	e6ed      	b.n	8001192 <__udivmoddi4+0xa6>
 80013b6:	bf00      	nop

080013b8 <__aeabi_idiv0>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <LTC_PEC15_Calc>:
		0xba39, 0xb10b, 0x7492, 0x5368, 0x96f1, 0x9dc3, 0x585a, 0x8ba7, 0x4e3e,
		0x450c, 0x8095 };

uint16_t LTC_PEC15_Calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate a PEC
		) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	remainder = 16;	//Initialize the PEC to 0x10000
 80013c8:	2310      	movs	r3, #16
 80013ca:	81fb      	strh	r3, [r7, #14]

	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80013cc:	2300      	movs	r3, #0
 80013ce:	737b      	strb	r3, [r7, #13]
 80013d0:	e018      	b.n	8001404 <LTC_PEC15_Calc+0x48>
			{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	09db      	lsrs	r3, r3, #7
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4053      	eors	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ crc15Table[addr];
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	897b      	ldrh	r3, [r7, #10]
 80013f2:	490a      	ldr	r1, [pc, #40]	; (800141c <LTC_PEC15_Calc+0x60>)
 80013f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4053      	eors	r3, r2
 80013fc:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i < len; i++) // loops for each byte in data array
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	3301      	adds	r3, #1
 8001402:	737b      	strb	r3, [r7, #13]
 8001404:	7b7a      	ldrb	r2, [r7, #13]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3e2      	bcc.n	80013d2 <LTC_PEC15_Calc+0x16>
	}

	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b29b      	uxth	r3, r3
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	0800c928 	.word	0x0800c928

08001420 <LTC_Set_Num_Devices>:

/* Set number of LTC6813/slave devices */
void LTC_Set_Num_Devices(uint8_t num) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	if (num)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <LTC_Set_Num_Devices+0x16>
		num_devices = num; //Non-zero
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <LTC_Set_Num_Devices+0x20>)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	7013      	strb	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000360 	.word	0x20000360

08001444 <LTC_Get_Num_Devices>:

/* Get number of LTC6813/slave devices */
uint8_t LTC_Get_Num_Devices(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	return num_devices;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <LTC_Get_Num_Devices+0x10>)
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000360 	.word	0x20000360

08001458 <LTC_Set_Num_Series_Groups>:

/* Set number of series groups per LTC6813/slave */
void LTC_Set_Num_Series_Groups(uint8_t num) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	if (num && (num <= 18))
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <LTC_Set_Num_Series_Groups+0x1c>
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b12      	cmp	r3, #18
 800146c:	d802      	bhi.n	8001474 <LTC_Set_Num_Series_Groups+0x1c>
		num_series_groups = num; //Non-zero and 18 or less
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <LTC_Set_Num_Series_Groups+0x28>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	7013      	strb	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000361 	.word	0x20000361

08001484 <LTC_Wakeup_Idle>:
uint8_t LTC_Get_Num_Series_Groups(void) {
	return num_series_groups;
}

/* Wake LTC up from IDLE state into READY state */
LTC_SPI_StatusTypeDef LTC_Wakeup_Idle(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
	LTC_SPI_StatusTypeDef hal_ret;
	uint8_t hex_ff = 0xFF;
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	71bb      	strb	r3, [r7, #6]

	LTC_nCS_Low(); //Pull CS low
 8001492:	f000 feff 	bl	8002294 <LTC_nCS_Low>

	for (int i = 0; i < num_devices; i++) {
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	e019      	b.n	80014d0 <LTC_Wakeup_Idle+0x4c>
		hal_ret = HAL_SPI_Transmit(&hspi1, &hex_ff, 1, 100); //Send byte 0xFF to wake LTC up
 800149c:	1db9      	adds	r1, r7, #6
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	2201      	movs	r2, #1
 80014a2:	4812      	ldr	r0, [pc, #72]	; (80014ec <LTC_Wakeup_Idle+0x68>)
 80014a4:	f003 ffc8 	bl	8005438 <HAL_SPI_Transmit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
		if (hal_ret) { //Non-zero means error
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00b      	beq.n	80014ca <LTC_Wakeup_Idle+0x46>
			//Shift 1 by returned HAL_StatusTypeDef value to get LTC_SPI_StatusTypeDef equivalent
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2200      	movs	r2, #0
 80014b6:	4413      	add	r3, r2
 80014b8:	2201      	movs	r2, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	b25a      	sxtb	r2, r3
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < num_devices; i++) {
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <LTC_Wakeup_Idle+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	4293      	cmp	r3, r2
 80014da:	dbdf      	blt.n	800149c <LTC_Wakeup_Idle+0x18>
		}
	}

	LTC_nCS_High(); //Pull CS high
 80014dc:	f000 fece 	bl	800227c <LTC_nCS_High>

	return ret;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000420 	.word	0x20000420
 80014f0:	20000360 	.word	0x20000360

080014f4 <getActualTemps>:
	}

	return ret;
}

void getActualTemps(float *actual_temp, uint16_t *read_temp) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	static float scalar;
	static float steinhart;

	for (uint8_t i = 0; i < 12; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e071      	b.n	80015e8 <getActualTemps+0xf4>
		  scalar = 30000.0f / (float)(read_temp[i])- 1.0f;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fc2c 	bl	8000d6c <__aeabi_ui2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4619      	mov	r1, r3
 8001518:	4837      	ldr	r0, [pc, #220]	; (80015f8 <getActualTemps+0x104>)
 800151a:	f7ff fd33 	bl	8000f84 <__aeabi_fdiv>
 800151e:	4603      	mov	r3, r0
 8001520:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb6f 	bl	8000c08 <__aeabi_fsub>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <getActualTemps+0x108>)
 8001530:	601a      	str	r2, [r3, #0]
		  scalar = (float)ntcSeriesResistance / scalar;
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <getActualTemps+0x108>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4831      	ldr	r0, [pc, #196]	; (8001600 <getActualTemps+0x10c>)
 800153a:	f7ff fd23 	bl	8000f84 <__aeabi_fdiv>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <getActualTemps+0x108>)
 8001544:	601a      	str	r2, [r3, #0]
		  steinhart = scalar / (float)ntcNominal;               // (R/Ro)
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <getActualTemps+0x108>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	492d      	ldr	r1, [pc, #180]	; (8001600 <getActualTemps+0x10c>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fd19 	bl	8000f84 <__aeabi_fdiv>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <getActualTemps+0x110>)
 8001558:	601a      	str	r2, [r3, #0]
		  steinhart = log(steinhart);                           // ln(R/Ro)
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <getActualTemps+0x110>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffce 	bl	8000500 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f00a ffaa 	bl	800c4c4 <log>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff faf2 	bl	8000b60 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <getActualTemps+0x110>)
 8001580:	6013      	str	r3, [r2, #0]
		  steinhart /= (float)ntcBetaFactor;                    // 1/B * ln(R/Ro)
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <getActualTemps+0x110>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4920      	ldr	r1, [pc, #128]	; (8001608 <getActualTemps+0x114>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fcfb 	bl	8000f84 <__aeabi_fdiv>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <getActualTemps+0x110>)
 8001594:	601a      	str	r2, [r3, #0]
		  steinhart += 1.0f / ((float)ntcNominalTemp + 273.15f);       // + (1/To)
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <getActualTemps+0x110>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	491c      	ldr	r1, [pc, #112]	; (800160c <getActualTemps+0x118>)
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb35 	bl	8000c0c <__addsf3>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <getActualTemps+0x110>)
 80015a8:	601a      	str	r2, [r3, #0]
		  steinhart = 1.0f / steinhart;                         // Invert
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <getActualTemps+0x110>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015b4:	f7ff fce6 	bl	8000f84 <__aeabi_fdiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <getActualTemps+0x110>)
 80015be:	601a      	str	r2, [r3, #0]
		  steinhart -= 273.15f;    // convert to degree
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <getActualTemps+0x110>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4912      	ldr	r1, [pc, #72]	; (8001610 <getActualTemps+0x11c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb1e 	bl	8000c08 <__aeabi_fsub>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <getActualTemps+0x110>)
 80015d2:	601a      	str	r2, [r3, #0]

		  actual_temp[i] = steinhart;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <getActualTemps+0x110>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 12; i++) {
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	3301      	adds	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	2b0b      	cmp	r3, #11
 80015ec:	d98a      	bls.n	8001504 <getActualTemps+0x10>
	}
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	46ea6000 	.word	0x46ea6000
 80015fc:	20000364 	.word	0x20000364
 8001600:	47c35000 	.word	0x47c35000
 8001604:	20000368 	.word	0x20000368
 8001608:	4584d000 	.word	0x4584d000
 800160c:	3b5bcf0f 	.word	0x3b5bcf0f
 8001610:	43889333 	.word	0x43889333

08001614 <LTC_ReadRawCellTemps>:

LTC_SPI_StatusTypeDef LTC_ReadRawCellTemps(uint16_t *read_auxiliary) {
 8001614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001618:	b089      	sub	sp, #36	; 0x24
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	466b      	mov	r3, sp
 8001620:	461e      	mov	r6, r3
	LTC_SPI_StatusTypeDef ret = LTC_SPI_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	77fb      	strb	r3, [r7, #31]
	LTC_SPI_StatusTypeDef hal_ret;
	const uint8_t ARR_SIZE_REG = LTC_Get_Num_Devices() * REG_LEN;
 8001626:	f7ff ff0d 	bl	8001444 <LTC_Get_Num_Devices>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	2308      	movs	r3, #8
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	773b      	strb	r3, [r7, #28]
	uint8_t read_auxiliary_reg[ARR_SIZE_REG]; // Increased in size to handle multiple devices
 8001636:	7f3b      	ldrb	r3, [r7, #28]
 8001638:	3b01      	subs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	7f3b      	ldrb	r3, [r7, #28]
 800163e:	2200      	movs	r2, #0
 8001640:	4698      	mov	r8, r3
 8001642:	4691      	mov	r9, r2
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001650:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001654:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001658:	7f3b      	ldrb	r3, [r7, #28]
 800165a:	2200      	movs	r2, #0
 800165c:	461c      	mov	r4, r3
 800165e:	4615      	mov	r5, r2
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	00eb      	lsls	r3, r5, #3
 800166a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800166e:	00e2      	lsls	r2, r4, #3
 8001670:	7f3b      	ldrb	r3, [r7, #28]
 8001672:	3307      	adds	r3, #7
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	ebad 0d03 	sub.w	sp, sp, r3
 800167c:	466b      	mov	r3, sp
 800167e:	3300      	adds	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	77bb      	strb	r3, [r7, #30]
 8001686:	e081      	b.n	800178c <LTC_ReadRawCellTemps+0x178>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
		uint8_t cmd[4];
		uint16_t cmd_pec;

		cmd[0] = (0xFF & (LTC_CMD_AUXREG[i] >> 8)); //RDCV Register
 8001688:	7fbb      	ldrb	r3, [r7, #30]
 800168a:	4a48      	ldr	r2, [pc, #288]	; (80017ac <LTC_ReadRawCellTemps+0x198>)
 800168c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	723b      	strb	r3, [r7, #8]
		cmd[1] = (0xFF & (LTC_CMD_AUXREG[i])); //RDCV Register
 8001698:	7fbb      	ldrb	r3, [r7, #30]
 800169a:	4a44      	ldr	r2, [pc, #272]	; (80017ac <LTC_ReadRawCellTemps+0x198>)
 800169c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	727b      	strb	r3, [r7, #9]
		cmd_pec = LTC_PEC15_Calc(2, cmd);
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff fe86 	bl	80013bc <LTC_PEC15_Calc>
 80016b0:	4603      	mov	r3, r0
 80016b2:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t) (cmd_pec >> 8);
 80016b4:	8a7b      	ldrh	r3, [r7, #18]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t) (cmd_pec);
 80016be:	8a7b      	ldrh	r3, [r7, #18]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	72fb      	strb	r3, [r7, #11]

		ret |= LTC_Wakeup_Idle(); //Wake LTC up
 80016c4:	f7ff fede 	bl	8001484 <LTC_Wakeup_Idle>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	77fb      	strb	r3, [r7, #31]

		LTC_nCS_Low(); //Pull CS low
 80016d2:	f000 fddf 	bl	8002294 <LTC_nCS_Low>

		hal_ret = HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 80016d6:	f107 0108 	add.w	r1, r7, #8
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	2204      	movs	r2, #4
 80016de:	4834      	ldr	r0, [pc, #208]	; (80017b0 <LTC_ReadRawCellTemps+0x19c>)
 80016e0:	f003 feaa 	bl	8005438 <HAL_SPI_Transmit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	747b      	strb	r3, [r7, #17]
		if (hal_ret) { //Non-zero means error
 80016e8:	7c7b      	ldrb	r3, [r7, #17]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <LTC_ReadRawCellTemps+0xf2>
			ret |= (1 << (hal_ret + LTC_SPI_TX_BIT_OFFSET)); //TX error
 80016ee:	7c7b      	ldrb	r3, [r7, #17]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4413      	add	r3, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	b25a      	sxtb	r2, r3
 80016fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	77fb      	strb	r3, [r7, #31]
		}

		hal_ret = HAL_SPI_Receive(&hspi1, (uint8_t*) read_auxiliary_reg,
 8001706:	7f3b      	ldrb	r3, [r7, #28]
 8001708:	b29a      	uxth	r2, r3
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	6979      	ldr	r1, [r7, #20]
 800170e:	4828      	ldr	r0, [pc, #160]	; (80017b0 <LTC_ReadRawCellTemps+0x19c>)
 8001710:	f003 ffd5 	bl	80056be <HAL_SPI_Receive>
 8001714:	4603      	mov	r3, r0
 8001716:	747b      	strb	r3, [r7, #17]
				ARR_SIZE_REG, 100);
		if (hal_ret) { //Non-zero means error
 8001718:	7c7b      	ldrb	r3, [r7, #17]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <LTC_ReadRawCellTemps+0x122>
			ret |= (1 << (hal_ret + LTC_SPI_RX_BIT_OFFSET)); //RX error
 800171e:	7c7b      	ldrb	r3, [r7, #17]
 8001720:	2204      	movs	r2, #4
 8001722:	4413      	add	r3, r2
 8001724:	2201      	movs	r2, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	b25a      	sxtb	r2, r3
 800172c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001730:	4313      	orrs	r3, r2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	77fb      	strb	r3, [r7, #31]
		}

		// Process the received data
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 8001736:	2300      	movs	r3, #0
 8001738:	777b      	strb	r3, [r7, #29]
 800173a:	e01b      	b.n	8001774 <LTC_ReadRawCellTemps+0x160>
			// Assuming data format is [cell voltage, cell voltage, ..., PEC, PEC]
			// PEC for each device is the last two bytes of its data segment
			uint8_t *data_ptr = &read_auxiliary_reg[dev_idx * REG_LEN];
 800173c:	7f7b      	ldrb	r3, [r7, #29]
 800173e:	2208      	movs	r2, #8
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]

			memcpy(
					&read_auxiliary[dev_idx * num_aux_series_groups
 800174a:	7f7b      	ldrb	r3, [r7, #29]
 800174c:	2206      	movs	r2, #6
 800174e:	fb03 f202 	mul.w	r2, r3, r2
							+ i * LTC_SERIES_GROUPS_PER_RDAUX], data_ptr,
 8001752:	7fbb      	ldrb	r3, [r7, #30]
 8001754:	2103      	movs	r1, #3
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
					&read_auxiliary[dev_idx * num_aux_series_groups
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
					REG_LEN - 2);
 8001762:	2208      	movs	r2, #8
 8001764:	3a02      	subs	r2, #2
			memcpy(
 8001766:	68f9      	ldr	r1, [r7, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fdc4 	bl	800a2f6 <memcpy>
		for (uint8_t dev_idx = 0; dev_idx < LTC_Get_Num_Devices(); dev_idx++) {
 800176e:	7f7b      	ldrb	r3, [r7, #29]
 8001770:	3301      	adds	r3, #1
 8001772:	777b      	strb	r3, [r7, #29]
 8001774:	f7ff fe66 	bl	8001444 <LTC_Get_Num_Devices>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	7f7b      	ldrb	r3, [r7, #29]
 800177e:	4293      	cmp	r3, r2
 8001780:	d3dc      	bcc.n	800173c <LTC_ReadRawCellTemps+0x128>
		}

		LTC_nCS_High(); //Pull CS high
 8001782:	f000 fd7b 	bl	800227c <LTC_nCS_High>
			i < (num_aux_series_groups / LTC_SERIES_GROUPS_PER_RDAUX); i++) {
 8001786:	7fbb      	ldrb	r3, [r7, #30]
 8001788:	3301      	adds	r3, #1
 800178a:	77bb      	strb	r3, [r7, #30]
 800178c:	2206      	movs	r2, #6
 800178e:	2303      	movs	r3, #3
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	7fba      	ldrb	r2, [r7, #30]
 8001798:	429a      	cmp	r2, r3
 800179a:	f4ff af75 	bcc.w	8001688 <LTC_ReadRawCellTemps+0x74>
	}

	return ret;
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	46b5      	mov	sp, r6
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017ac:	0800c924 	.word	0x0800c924
 80017b0:	20000420 	.word	0x20000420

080017b4 <LTC_ADAX>:
	LTC_nCS_High();
}

void LTC_ADAX(uint8_t MD, //ADC Mode
		uint8_t CHG //GPIO Channels to be measured)
		) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t cmd_pec;
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	105b      	asrs	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
	cmd[0] = md_bits + 0x04;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3304      	adds	r3, #4
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	723b      	strb	r3, [r7, #8]
	md_bits = (MD & 0x01) << 7;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	01db      	lsls	r3, r3, #7
 80017dc:	73fb      	strb	r3, [r7, #15]
	cmd[1] = md_bits + 0x60 + CHG;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	79bb      	ldrb	r3, [r7, #6]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	727b      	strb	r3, [r7, #9]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4619      	mov	r1, r3
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff fde2 	bl	80013bc <LTC_PEC15_Calc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	72fb      	strb	r3, [r7, #11]
	 wakeup_idle (); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
	 output_low(LTC6811_CS);
	 spi_write_array(4,cmd);
	 output_high(LTC6811_CS);
	 */
	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800180c:	f7ff fe3a 	bl	8001484 <LTC_Wakeup_Idle>
	LTC_nCS_Low();
 8001810:	f000 fd40 	bl	8002294 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001814:	f107 0108 	add.w	r1, r7, #8
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	2204      	movs	r2, #4
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <LTC_ADAX+0x7c>)
 800181e:	f003 fe0b 	bl	8005438 <HAL_SPI_Transmit>
	LTC_nCS_High();
 8001822:	f000 fd2b 	bl	800227c <LTC_nCS_High>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000420 	.word	0x20000420

08001834 <LTC_PollAdc>:

int32_t LTC_PollAdc() {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
	uint8_t finished = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	72fb      	strb	r3, [r7, #11]
	uint8_t current_time = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	72bb      	strb	r3, [r7, #10]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	cmd[0] = 0x07;
 8001846:	2307      	movs	r3, #7
 8001848:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x14;
 800184a:	2314      	movs	r3, #20
 800184c:	717b      	strb	r3, [r7, #5]
	cmd_pec = LTC_PEC15_Calc(2, cmd);
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4619      	mov	r1, r3
 8001852:	2002      	movs	r0, #2
 8001854:	f7ff fdb2 	bl	80013bc <LTC_PEC15_Calc>
 8001858:	4603      	mov	r3, r0
 800185a:	813b      	strh	r3, [r7, #8]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800185c:	893b      	ldrh	r3, [r7, #8]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	71bb      	strb	r3, [r7, #6]
	cmd[3] = (uint8_t) (cmd_pec);
 8001866:	893b      	ldrh	r3, [r7, #8]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	71fb      	strb	r3, [r7, #7]

	LTC_Wakeup_Idle(); //This will guarantee that the ltc6811 isoSPI port is awake. This command can be removed.
 800186c:	f7ff fe0a 	bl	8001484 <LTC_Wakeup_Idle>

	LTC_nCS_Low();
 8001870:	f000 fd10 	bl	8002294 <LTC_nCS_Low>
	HAL_SPI_Transmit(&hspi1, (uint8_t*) cmd, 4, 100);
 8001874:	1d39      	adds	r1, r7, #4
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	2204      	movs	r2, #4
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <LTC_PollAdc+0x84>)
 800187c:	f003 fddc 	bl	8005438 <HAL_SPI_Transmit>

	while ((counter < 200000) && (finished == 0)) {
 8001880:	e00c      	b.n	800189c <LTC_PollAdc+0x68>
		current_time = HAL_GetTick();
 8001882:	f000 ffe9 	bl	8002858 <HAL_GetTick>
 8001886:	4603      	mov	r3, r0
 8001888:	72bb      	strb	r3, [r7, #10]
		if (current_time > 0) {
 800188a:	7abb      	ldrb	r3, [r7, #10]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <LTC_PollAdc+0x62>
			finished = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	72fb      	strb	r3, [r7, #11]
 8001894:	e002      	b.n	800189c <LTC_PollAdc+0x68>
		} else {
			counter = counter + 10;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	330a      	adds	r3, #10
 800189a:	60fb      	str	r3, [r7, #12]
	while ((counter < 200000) && (finished == 0)) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <LTC_PollAdc+0x88>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d802      	bhi.n	80018aa <LTC_PollAdc+0x76>
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0eb      	beq.n	8001882 <LTC_PollAdc+0x4e>
		}
	}
	LTC_nCS_High();
 80018aa:	f000 fce7 	bl	800227c <LTC_nCS_High>
	return (counter);
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000420 	.word	0x20000420
 80018bc:	00030d3f 	.word	0x00030d3f

080018c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_ADC1_Init+0x74>)
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <MX_ADC1_Init+0x78>)
 80018d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_ADC1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_ADC1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_ADC1_Init+0x74>)
 80018ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_ADC1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_ADC1_Init+0x74>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_ADC1_Init+0x74>)
 80018fe:	f000 ffd9 	bl	80028b4 <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fc32 	bl	8002170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800190c:	230e      	movs	r3, #14
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001910:	2301      	movs	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_ADC1_Init+0x74>)
 800191e:	f001 f8a1 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001928:	f000 fc22 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000036c 	.word	0x2000036c
 8001938:	40012400 	.word	0x40012400

0800193c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_ADC2_Init+0x74>)
 800194e:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <MX_ADC2_Init+0x78>)
 8001950:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_ADC2_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_ADC2_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_ADC2_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_ADC2_Init+0x74>)
 8001966:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800196a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_ADC2_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_ADC2_Init+0x74>)
 8001974:	2201      	movs	r2, #1
 8001976:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_ADC2_Init+0x74>)
 800197a:	f000 ff9b 	bl	80028b4 <HAL_ADC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001984:	f000 fbf4 	bl	8002170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001988:	230a      	movs	r3, #10
 800198a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800198c:	2301      	movs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_ADC2_Init+0x74>)
 800199a:	f001 f863 	bl	8002a64 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80019a4:	f000 fbe4 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000039c 	.word	0x2000039c
 80019b4:	40012800 	.word	0x40012800

080019b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <HAL_ADC_MspInit+0xbc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d122      	bne.n	8001a1e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a26      	ldr	r2, [pc, #152]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6193      	str	r3, [r2, #24]
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a08:	2330      	movs	r3, #48	; 0x30
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4619      	mov	r1, r3
 8001a16:	4819      	ldr	r0, [pc, #100]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a18:	f001 fb66 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001a1c:	e026      	b.n	8001a6c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_ADC_MspInit+0xc8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d121      	bne.n	8001a6c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_ADC_MspInit+0xc0>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4619      	mov	r1, r3
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_ADC_MspInit+0xc4>)
 8001a68:	f001 fb3e 	bl	80030e8 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40012400 	.word	0x40012400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40012800 	.word	0x40012800

08001a84 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <MX_CAN1_Init+0x64>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001a90:	2210      	movs	r2, #16
 8001a92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_CAN1_Init+0x60>)
 8001ad2:	f001 f900 	bl	8002cd6 <HAL_CAN_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f000 fb48 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003cc 	.word	0x200003cc
 8001ae8:	40006400 	.word	0x40006400

08001aec <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <MX_CAN2_Init+0x64>)
 8001af4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001af8:	2210      	movs	r2, #16
 8001afa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_CAN2_Init+0x60>)
 8001b3a:	f001 f8cc 	bl	8002cd6 <HAL_CAN_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001b44:	f000 fb14 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200003f4 	.word	0x200003f4
 8001b50:	40006800 	.word	0x40006800

08001b54 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_CAN_MspInit+0x15c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d14d      	bne.n	8001c10 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a4e      	ldr	r2, [pc, #312]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001b7c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d10b      	bne.n	8001b9e <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b86:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	483c      	ldr	r0, [pc, #240]	; (8001cbc <HAL_CAN_MspInit+0x168>)
 8001bcc:	f001 fa8c 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4835      	ldr	r0, [pc, #212]	; (8001cbc <HAL_CAN_MspInit+0x168>)
 8001be6:	f001 fa7f 	bl	80030e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001bea:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <HAL_CAN_MspInit+0x16c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c08:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <HAL_CAN_MspInit+0x16c>)
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001c0e:	e04b      	b.n	8001ca8 <HAL_CAN_MspInit+0x154>
  else if(canHandle->Instance==CAN2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <HAL_CAN_MspInit+0x170>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d146      	bne.n	8001ca8 <HAL_CAN_MspInit+0x154>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001c3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_CAN_MspInit+0x160>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10b      	bne.n	8001c5c <HAL_CAN_MspInit+0x108>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_CAN_MspInit+0x164>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <HAL_CAN_MspInit+0x168>)
 8001c8a:	f001 fa2d 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <HAL_CAN_MspInit+0x168>)
 8001ca4:	f001 fa20 	bl	80030e8 <HAL_GPIO_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	; 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40006400 	.word	0x40006400
 8001cb4:	2000041c 	.word	0x2000041c
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40006800 	.word	0x40006800

08001cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001ce2:	f043 0310 	orr.w	r3, r3, #16
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001cfa:	f043 0320 	orr.w	r3, r3, #32
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a26      	ldr	r2, [pc, #152]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_GPIO_Init+0xe4>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2110      	movs	r1, #16
 8001d40:	481b      	ldr	r0, [pc, #108]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d42:	f001 fb55 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin, GPIO_PIN_RESET);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	481a      	ldr	r0, [pc, #104]	; (8001db4 <MX_GPIO_Init+0xec>)
 8001d4c:	f001 fb50 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC_nCS_Pin;
 8001d50:	2310      	movs	r3, #16
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC_nCS_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4812      	ldr	r0, [pc, #72]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d68:	f001 f9be 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_HEARTBEAT_LED_Pin;
 8001d6c:	2340      	movs	r3, #64	; 0x40
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCU_HEARTBEAT_LED_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_GPIO_Init+0xec>)
 8001d84:	f001 f9b0 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PMUX_ST_Pin;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PMUX_ST_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_GPIO_Init+0xec>)
 8001d9e:	f001 f9a3 	bl	80030e8 <HAL_GPIO_Init>

}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40011000 	.word	0x40011000

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc2:	f000 fcf1 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc6:	f000 f8f7 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dca:	f7ff ff7d 	bl	8001cc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001dce:	f7ff fd77 	bl	80018c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dd2:	f7ff fdb3 	bl	800193c <MX_ADC2_Init>
  MX_CAN1_Init();
 8001dd6:	f7ff fe55 	bl	8001a84 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001dda:	f7ff fe87 	bl	8001aec <MX_CAN2_Init>
  MX_TIM7_Init();
 8001dde:	f000 fb8f 	bl	8002500 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001de2:	f000 f9cb 	bl	800217c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001de6:	f000 fbdf 	bl	80025a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001dea:	f000 fc07 	bl	80025fc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001dee:	f006 ffff 	bl	8008df0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  GpioTimePacket_Init(&tp_led_heartbeat, MCU_HEARTBEAT_LED_GPIO_Port, MCU_HEARTBEAT_LED_Pin);
 8001df2:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001df6:	f103 0310 	add.w	r3, r3, #16
 8001dfa:	2240      	movs	r2, #64	; 0x40
 8001dfc:	496c      	ldr	r1, [pc, #432]	; (8001fb0 <main+0x1f8>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f946 	bl	8002090 <GpioTimePacket_Init>
  TimerPacket_Init(&timerpacket_ltc, LTC_DELAY);
 8001e04:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001e08:	f103 0304 	add.w	r3, r3, #4
 8001e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f97d 	bl	8002110 <TimerPacket_Init>

  //Pull SPI1 nCS HIGH (deselect)
  LTC_nCS_High();
 8001e16:	f000 fa31 	bl	800227c <LTC_nCS_High>
  LTC_Set_Num_Devices(NUM_DEVICES);
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fb00 	bl	8001420 <LTC_Set_Num_Devices>
  LTC_Set_Num_Series_Groups(NUM_SERIES_GROUP);
 8001e20:	200c      	movs	r0, #12
 8001e22:	f7ff fb19 	bl	8001458 <LTC_Set_Num_Series_Groups>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001e26:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001e2a:	f103 0310 	add.w	r3, r3, #16
 8001e2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f949 	bl	80020ca <GpioFixedToggle>

		if (TimerPacket_FixedPulse(&timerpacket_ltc)) {
 8001e38:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001e3c:	f103 0304 	add.w	r3, r3, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f978 	bl	8002136 <TimerPacket_FixedPulse>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ec      	beq.n	8001e26 <main+0x6e>
			char packV[30];
			char buf[20];
			char out_buf[2048] = "";
 8001e4c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e50:	2200      	movs	r2, #0
 8001e52:	f843 2ce8 	str.w	r2, [r3, #-232]
 8001e56:	3be4      	subs	r3, #228	; 0xe4
 8001e58:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f008 fa01 	bl	800a266 <memset>
			char char_to_str[2];
			int packvoltage = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001e6a:	6013      	str	r3, [r2, #0]
//			sprintf(packV, "Pack Voltage: %d/10000 V", packvoltage);
//			strncat(out_buf, packV, 30);
//			strncat(out_buf, char_to_str, 2);
//
//
			char_to_str[0] = '\n';
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e72:	f102 0214 	add.w	r2, r2, #20
 8001e76:	7013      	strb	r3, [r2, #0]
			char_to_str[1] = '\0';
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e7e:	f102 0215 	add.w	r2, r2, #21
 8001e82:	7013      	strb	r3, [r2, #0]
//			strncat(out_buf, char_to_str, 2);
//
//			USB_Transmit(out_buf, strlen(out_buf));

			char buf2[20];
			char out_buf2[2048] = "";
 8001e84:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001e88:	f103 0308 	add.w	r3, r3, #8
 8001e8c:	f6a3 03e8 	subw	r3, r3, #2280	; 0x8e8
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	3304      	adds	r3, #4
 8001e96:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 f9e2 	bl	800a266 <memset>

			LTC_Wakeup_Idle();
 8001ea2:	f7ff faef 	bl	8001484 <LTC_Wakeup_Idle>
			LTC_ADAX(MD_7KHZ_3KHZ, AUX_CH_ALL);
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fc81 	bl	80017b4 <LTC_ADAX>
			LTC_PollAdc();
 8001eb2:	f7ff fcbf 	bl	8001834 <LTC_PollAdc>
			LTC_ReadRawCellTemps((uint16_t *) read_temp); // Set to read back all aux registers
 8001eb6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001eba:	f103 031c 	add.w	r3, r3, #28
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fba8 	bl	8001614 <LTC_ReadRawCellTemps>
			for (uint8_t i = 0; i < 12; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001eca:	f102 0207 	add.w	r2, r2, #7
 8001ece:	7013      	strb	r3, [r2, #0]
 8001ed0:	e04e      	b.n	8001f70 <main+0x1b8>
//					//sprintf(buf2, "Vref:%u", read_temp[i]);
//					sprintf(buf2, "temp: %0.2f", actual_temp[i]);
//					strncat(out_buf2, buf2, 20);
//					strncat(out_buf2, char_to_str, 2);
//				}
				getActualTemps(actual_temp, read_temp);
 8001ed2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001ed6:	f102 021c 	add.w	r2, r2, #28
 8001eda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001ede:	f103 030c 	add.w	r3, r3, #12
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fb05 	bl	80014f4 <getActualTemps>
				//sprintf(buf2, "Vref:%u", read_temp[i]);
				sprintf(buf2, "temp: %0.2f     raw cell value: %u", actual_temp[i], read_temp[i]);
 8001eea:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001eee:	f103 0307 	add.w	r3, r3, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001efa:	f103 0308 	add.w	r3, r3, #8
 8001efe:	443b      	add	r3, r7
 8001f00:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fafb 	bl	8000500 <__aeabi_f2d>
 8001f0a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f0e:	f103 0307 	add.w	r3, r3, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8001f1a:	f103 0308 	add.w	r3, r3, #8
 8001f1e:	443b      	add	r3, r7
 8001f20:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8001f24:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4921      	ldr	r1, [pc, #132]	; (8001fb4 <main+0x1fc>)
 8001f30:	4620      	mov	r0, r4
 8001f32:	f008 f8a3 	bl	800a07c <siprintf>
				strncat(out_buf2, buf2, 20);
 8001f36:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f3a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f3e:	2214      	movs	r2, #20
 8001f40:	4618      	mov	r0, r3
 8001f42:	f008 f97d 	bl	800a240 <strncat>
				strncat(out_buf2, char_to_str, 2);
 8001f46:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f4a:	f101 0114 	add.w	r1, r1, #20
 8001f4e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f52:	2202      	movs	r2, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f008 f973 	bl	800a240 <strncat>
			for (uint8_t i = 0; i < 12; i++) {
 8001f5a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f5e:	f103 0307 	add.w	r3, r3, #7
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8001f6a:	f102 0207 	add.w	r2, r2, #7
 8001f6e:	7013      	strb	r3, [r2, #0]
 8001f70:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8001f74:	f103 0307 	add.w	r3, r3, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b0b      	cmp	r3, #11
 8001f7c:	d9a9      	bls.n	8001ed2 <main+0x11a>
			}
			strncat(out_buf2, char_to_str, 2);
 8001f7e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f82:	f101 0114 	add.w	r1, r1, #20
 8001f86:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f008 f957 	bl	800a240 <strncat>
			USB_Transmit(out_buf2, strlen(out_buf2));
 8001f92:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe f946 	bl	8000228 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f006 ff13 	bl	8008dd2 <USB_Transmit>
		GpioFixedToggle(&tp_led_heartbeat, LED_HEARTBEAT_DELAY_MS);
 8001fac:	e73b      	b.n	8001e26 <main+0x6e>
 8001fae:	bf00      	nop
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	0800c8b8 	.word	0x0800c8b8

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b09c      	sub	sp, #112	; 0x70
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f008 f94d 	bl	800a266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2220      	movs	r2, #32
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f008 f93f 	bl	800a266 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8001ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002000:	2302      	movs	r3, #2
 8002002:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800200a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800200e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002010:	2302      	movs	r3, #2
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002018:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800201a:	2340      	movs	r3, #64	; 0x40
 800201c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fb46 	bl	80046b4 <HAL_RCC_OscConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800202e:	f000 f89f 	bl	8002170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002032:	230f      	movs	r3, #15
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002036:	2302      	movs	r3, #2
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800203e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f002 fe46 	bl	8004ce0 <HAL_RCC_ClockConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800205a:	f000 f889 	bl	8002170 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800205e:	2312      	movs	r3, #18
 8002060:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002066:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f003 f82c 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800207a:	f000 f879 	bl	8002170 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800207e:	4b03      	ldr	r3, [pc, #12]	; (800208c <SystemClock_Config+0xd4>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	3770      	adds	r7, #112	; 0x70
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	42420070 	.word	0x42420070

08002090 <GpioTimePacket_Init>:
/* USER CODE BEGIN 4 */

//Initialize struct values
//Will initialize GPIO to LOW!
void GpioTimePacket_Init(GpioTimePacket *gtp, GPIO_TypeDef *port, uint16_t pin)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET); //Set GPIO LOW
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	68b8      	ldr	r0, [r7, #8]
 80020a6:	f001 f9a3 	bl	80033f0 <HAL_GPIO_WritePin>
	gtp->gpio_port	= port;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	601a      	str	r2, [r3, #0]
	gtp->gpio_pin	= pin;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	809a      	strh	r2, [r3, #4]
	gtp->ts_prev 	= 0; //Init to 0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	gtp->ts_curr 	= 0; //Init to 0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <GpioFixedToggle>:

//update_ms = update after X ms
void GpioFixedToggle(GpioTimePacket *gtp, uint16_t update_ms)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
	gtp->ts_curr = HAL_GetTick(); //Record current timestamp
 80020d6:	f000 fbbf 	bl	8002858 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]

	if (gtp->ts_curr - gtp->ts_prev > update_ms) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d90b      	bls.n	8002108 <GpioFixedToggle+0x3e>
		HAL_GPIO_TogglePin(gtp->gpio_port, gtp->gpio_pin); // Toggle GPIO
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	889b      	ldrh	r3, [r3, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f001 f990 	bl	8003420 <HAL_GPIO_TogglePin>
		gtp->ts_prev = gtp->ts_curr;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]
	}
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <TimerPacket_Init>:

//Initialize struct values
//Will initialize GPIO to LOW!
void TimerPacket_Init(TimerPacket *tp, uint32_t delay)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	tp->ts_prev 	= 0;		//Init to 0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
	tp->ts_curr 	= 0; 		//Init to 0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
	tp->delay		= delay;	//Init to user value
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <TimerPacket_FixedPulse>:

//update_ms = update after X ms
uint8_t TimerPacket_FixedPulse(TimerPacket *tp)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	tp->ts_curr = HAL_GetTick(); //Record current timestamp
 800213e:	f000 fb8b 	bl	8002858 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]

	if (tp->ts_curr - tp->ts_prev > tp->delay) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	429a      	cmp	r2, r3
 8002158:	d905      	bls.n	8002166 <TimerPacket_FixedPulse+0x30>
		tp->ts_prev = tp->ts_curr; //Update prev timestamp to current
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
		return 1; //Enact event (time interval is a go)
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <TimerPacket_FixedPulse+0x32>
	}
	return 0; //Do not enact event
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002178:	e7fe      	b.n	8002178 <Error_Handler+0x8>
	...

0800217c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <MX_SPI1_Init+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800218c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_SPI1_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021b0:	2228      	movs	r2, #40	; 0x28
 80021b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021c8:	220a      	movs	r2, #10
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021ce:	f003 f8af 	bl	8005330 <HAL_SPI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021d8:	f7ff ffca 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000420 	.word	0x20000420
 80021e4:	40013000 	.word	0x40013000

080021e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_SPI_MspInit+0x88>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d12f      	bne.n	8002268 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 800220e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_SPI_MspInit+0x8c>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002238:	23a0      	movs	r3, #160	; 0xa0
 800223a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	4619      	mov	r1, r3
 800224a:	480b      	ldr	r0, [pc, #44]	; (8002278 <HAL_SPI_MspInit+0x90>)
 800224c:	f000 ff4c 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002250:	2340      	movs	r3, #64	; 0x40
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_SPI_MspInit+0x90>)
 8002264:	f000 ff40 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40013000 	.word	0x40013000
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800

0800227c <LTC_nCS_High>:
  }
}

/* USER CODE BEGIN 1 */
/* Pull nCS line to SPI1 HIGH */
void LTC_nCS_High(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_SET); //Pull CS high
 8002280:	2201      	movs	r2, #1
 8002282:	2110      	movs	r1, #16
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <LTC_nCS_High+0x14>)
 8002286:	f001 f8b3 	bl	80033f0 <HAL_GPIO_WritePin>
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40010800 	.word	0x40010800

08002294 <LTC_nCS_Low>:

/* Pull nCS line to SPI1 LOW */
void LTC_nCS_Low(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC_nCS_GPIO_Port, LTC_nCS_Pin, GPIO_PIN_RESET); //Pull CS high
 8002298:	2200      	movs	r2, #0
 800229a:	2110      	movs	r1, #16
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <LTC_nCS_Low+0x14>)
 800229e:	f001 f8a7 	bl	80033f0 <HAL_GPIO_WritePin>
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40010800 	.word	0x40010800

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_MspInit+0x5c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_MspInit+0x5c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6193      	str	r3, [r2, #24]
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_MspInit+0x5c>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_MspInit+0x5c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_MspInit+0x5c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_MspInit+0x5c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_MspInit+0x60>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_MspInit+0x60>)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002356:	f000 fa6d 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <OTG_FS_IRQHandler+0x10>)
 8002366:	f001 f9b3 	bl	80036d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20001220 	.word	0x20001220

08002374 <_getpid>:
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
 8002378:	2301      	movs	r3, #1
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <_kill>:
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
 800238c:	f007 ff78 	bl	800a280 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	2216      	movs	r2, #22
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_exit>:
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffe7 	bl	8002382 <_kill>
 80023b4:	e7fe      	b.n	80023b4 <_exit+0x12>

080023b6 <_read>:
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e00a      	b.n	80023de <_read+0x28>
 80023c8:	f3af 8000 	nop.w
 80023cc:	4601      	mov	r1, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf0      	blt.n	80023c8 <_read+0x12>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_write>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e009      	b.n	8002416 <_write+0x26>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f3af 8000 	nop.w
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf1      	blt.n	8002402 <_write+0x12>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_close>:
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <_fstat>:
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	2300      	movs	r3, #0
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <_isatty>:
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	2301      	movs	r3, #1
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <_lseek>:
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	2300      	movs	r3, #0
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <_sbrk>:
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
 80024b8:	f007 fee2 	bl	800a280 <__errno>
 80024bc:	4603      	mov	r3, r0
 80024be:	220c      	movs	r2, #12
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20010000 	.word	0x20010000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	20000478 	.word	0x20000478
 80024f0:	20001a90 	.word	0x20001a90

080024f4 <SystemInit>:
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <MX_TIM7_Init>:
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <MX_TIM7_Init+0x64>)
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <MX_TIM7_Init+0x68>)
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <MX_TIM7_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <MX_TIM7_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <MX_TIM7_Init+0x64>)
 8002522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_TIM7_Init+0x64>)
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	619a      	str	r2, [r3, #24]
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <MX_TIM7_Init+0x64>)
 8002530:	f003 fc86 	bl	8005e40 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM7_Init+0x3e>
 800253a:	f7ff fe19 	bl	8002170 <Error_Handler>
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	463b      	mov	r3, r7
 8002548:	4619      	mov	r1, r3
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <MX_TIM7_Init+0x64>)
 800254c:	f003 fd34 	bl	8005fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM7_Init+0x5a>
 8002556:	f7ff fe0b 	bl	8002170 <Error_Handler>
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000047c 	.word	0x2000047c
 8002568:	40001400 	.word	0x40001400

0800256c <HAL_TIM_Base_MspInit>:
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_TIM_Base_MspInit+0x34>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10b      	bne.n	8002596 <HAL_TIM_Base_MspInit+0x2a>
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_TIM_Base_MspInit+0x38>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_TIM_Base_MspInit+0x38>)
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_TIM_Base_MspInit+0x38>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40001400 	.word	0x40001400
 80025a4:	40021000 	.word	0x40021000

080025a8 <MX_USART2_UART_Init>:
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <MX_USART2_UART_Init+0x50>)
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025e0:	f003 fd50 	bl	8006084 <HAL_UART_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART2_UART_Init+0x46>
 80025ea:	f7ff fdc1 	bl	8002170 <Error_Handler>
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004c4 	.word	0x200004c4
 80025f8:	40004400 	.word	0x40004400

080025fc <MX_USART3_UART_Init>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_USART3_UART_Init+0x50>)
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_USART3_UART_Init+0x4c>)
 8002634:	f003 fd26 	bl	8006084 <HAL_UART_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_USART3_UART_Init+0x46>
 800263e:	f7ff fd97 	bl	8002170 <Error_Handler>
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000050c 	.word	0x2000050c
 800264c:	40004800 	.word	0x40004800

08002650 <HAL_UART_MspInit>:
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	f107 0318 	add.w	r3, r7, #24
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a37      	ldr	r2, [pc, #220]	; (8002748 <HAL_UART_MspInit+0xf8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d130      	bne.n	80026d2 <HAL_UART_MspInit+0x82>
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_UART_MspInit+0xfc>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	4a35      	ldr	r2, [pc, #212]	; (800274c <HAL_UART_MspInit+0xfc>)
 8002676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267a:	61d3      	str	r3, [r2, #28]
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_UART_MspInit+0xfc>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_UART_MspInit+0xfc>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a2f      	ldr	r2, [pc, #188]	; (800274c <HAL_UART_MspInit+0xfc>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_UART_MspInit+0xfc>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2304      	movs	r3, #4
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	2302      	movs	r3, #2
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	2303      	movs	r3, #3
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	f107 0318 	add.w	r3, r7, #24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4827      	ldr	r0, [pc, #156]	; (8002750 <HAL_UART_MspInit+0x100>)
 80026b4:	f000 fd18 	bl	80030e8 <HAL_GPIO_Init>
 80026b8:	2308      	movs	r3, #8
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	4619      	mov	r1, r3
 80026ca:	4821      	ldr	r0, [pc, #132]	; (8002750 <HAL_UART_MspInit+0x100>)
 80026cc:	f000 fd0c 	bl	80030e8 <HAL_GPIO_Init>
 80026d0:	e036      	b.n	8002740 <HAL_UART_MspInit+0xf0>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_UART_MspInit+0x104>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d131      	bne.n	8002740 <HAL_UART_MspInit+0xf0>
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_UART_MspInit+0xfc>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_UART_MspInit+0xfc>)
 80026e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e6:	61d3      	str	r3, [r2, #28]
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_UART_MspInit+0xfc>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_UART_MspInit+0xfc>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a14      	ldr	r2, [pc, #80]	; (800274c <HAL_UART_MspInit+0xfc>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_UART_MspInit+0xfc>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	2303      	movs	r3, #3
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	f107 0318 	add.w	r3, r7, #24
 800271e:	4619      	mov	r1, r3
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <HAL_UART_MspInit+0x108>)
 8002722:	f000 fce1 	bl	80030e8 <HAL_GPIO_Init>
 8002726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	4619      	mov	r1, r3
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <HAL_UART_MspInit+0x108>)
 800273c:	f000 fcd4 	bl	80030e8 <HAL_GPIO_Init>
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40004400 	.word	0x40004400
 800274c:	40021000 	.word	0x40021000
 8002750:	40010800 	.word	0x40010800
 8002754:	40004800 	.word	0x40004800
 8002758:	40010c00 	.word	0x40010c00

0800275c <Reset_Handler>:
 800275c:	f7ff feca 	bl	80024f4 <SystemInit>
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <LoopFillZerobss+0xe>)
 8002762:	490c      	ldr	r1, [pc, #48]	; (8002794 <LoopFillZerobss+0x12>)
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <LoopFillZerobss+0x16>)
 8002766:	2300      	movs	r3, #0
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:
 800276a:	58d4      	ldr	r4, [r2, r3]
 800276c:	50c4      	str	r4, [r0, r3]
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:
 8002770:	18c4      	adds	r4, r0, r3
 8002772:	428c      	cmp	r4, r1
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <LoopFillZerobss+0x1a>)
 8002778:	4c09      	ldr	r4, [pc, #36]	; (80027a0 <LoopFillZerobss+0x1e>)
 800277a:	2300      	movs	r3, #0
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:
 8002782:	42a2      	cmp	r2, r4
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>
 8002786:	f007 fd81 	bl	800a28c <__libc_init_array>
 800278a:	f7ff fb15 	bl	8001db8 <main>
 800278e:	4770      	bx	lr
 8002790:	20000000 	.word	0x20000000
 8002794:	20000344 	.word	0x20000344
 8002798:	0800d0e4 	.word	0x0800d0e4
 800279c:	20000344 	.word	0x20000344
 80027a0:	20001a90 	.word	0x20001a90

080027a4 <ADC1_2_IRQHandler>:
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_Init+0x28>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_Init+0x28>)
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 fc53 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	200f      	movs	r0, #15
 80027c0:	f000 f808 	bl	80027d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7ff fd72 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x54>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x58>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fc6b 	bl	80030ce <HAL_SYSTICK_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00e      	b.n	8002820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d80a      	bhi.n	800281e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002808:	2200      	movs	r2, #0
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002810:	f000 fc33 	bl	800307a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_InitTick+0x5c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000000 	.word	0x20000000
 800282c:	20000008 	.word	0x20000008
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_IncTick+0x20>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000008 	.word	0x20000008
 8002854:	20000554 	.word	0x20000554

08002858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000554 	.word	0x20000554

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff0 	bl	8002858 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffe0 	bl	8002858 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008

080028b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0be      	b.n	8002a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f860 	bl	80019b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f9ab 	bl	8002c54 <ADC_ConversionStop_Disable>
 80028fe:	4603      	mov	r3, r0
 8002900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 8099 	bne.w	8002a42 <HAL_ADC_Init+0x18e>
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8095 	bne.w	8002a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7b1b      	ldrb	r3, [r3, #12]
 800293a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800293c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d003      	beq.n	8002956 <HAL_ADC_Init+0xa2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_ADC_Init+0xa8>
 8002956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295a:	e000      	b.n	800295e <HAL_ADC_Init+0xaa>
 800295c:	2300      	movs	r3, #0
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7d1b      	ldrb	r3, [r3, #20]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	3b01      	subs	r3, #1
 800297a:	035a      	lsls	r2, r3, #13
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_ADC_Init+0x1a8>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d0:	d003      	beq.n	80029da <HAL_ADC_Init+0x126>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_ADC_Init+0x1ac>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a1e:	e018      	b.n	8002a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f023 0312 	bic.w	r3, r3, #18
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a40:	e007      	b.n	8002a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8002a60:	ff1f0efe 	.word	0xff1f0efe

08002a64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0dc      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x1da>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d81c      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b05      	subs	r3, #5
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4019      	ands	r1, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b05      	subs	r3, #5
 8002ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
 8002acc:	e03c      	b.n	8002b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d81c      	bhi.n	8002b10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b23      	subs	r3, #35	; 0x23
 8002ae8:	221f      	movs	r2, #31
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	4019      	ands	r1, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b23      	subs	r3, #35	; 0x23
 8002b02:	fa00 f203 	lsl.w	r2, r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0e:	e01b      	b.n	8002b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b41      	subs	r3, #65	; 0x41
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4019      	ands	r1, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b41      	subs	r3, #65	; 0x41
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d91c      	bls.n	8002b8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b1e      	subs	r3, #30
 8002b62:	2207      	movs	r2, #7
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4019      	ands	r1, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b1e      	subs	r3, #30
 8002b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	e019      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6919      	ldr	r1, [r3, #16]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4019      	ands	r1, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6898      	ldr	r0, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d003      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d132      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d125      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d126      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bf4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d11a      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9a      	lsrs	r2, r3, #18
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c14:	e002      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f9      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x1b2>
 8002c22:	e007      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012400 	.word	0x40012400
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d12e      	bne.n	8002ccc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c7e:	f7ff fdeb 	bl	8002858 <HAL_GetTick>
 8002c82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c84:	e01b      	b.n	8002cbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c86:	f7ff fde7 	bl	8002858 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10d      	bne.n	8002cbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d0dc      	beq.n	8002c86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0ed      	b.n	8002ec4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fe ff2d 	bl	8001b54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0a:	f7ff fda5 	bl	8002858 <HAL_GetTick>
 8002d0e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d10:	e012      	b.n	8002d38 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d12:	f7ff fda1 	bl	8002858 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b0a      	cmp	r3, #10
 8002d1e:	d90b      	bls.n	8002d38 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2205      	movs	r2, #5
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0c5      	b.n	8002ec4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0e5      	beq.n	8002d12 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0202 	bic.w	r2, r2, #2
 8002d54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d56:	f7ff fd7f 	bl	8002858 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d5c:	e012      	b.n	8002d84 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d5e:	f7ff fd7b 	bl	8002858 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b0a      	cmp	r3, #10
 8002d6a:	d90b      	bls.n	8002d84 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2205      	movs	r2, #5
 8002d7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e09f      	b.n	8002ec4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7e1b      	ldrb	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d108      	bne.n	8002dac <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e5b      	ldrb	r3, [r3, #25]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d108      	bne.n	8002dd6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7e9b      	ldrb	r3, [r3, #26]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d108      	bne.n	8002e00 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0220 	orr.w	r2, r2, #32
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e007      	b.n	8002e10 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0220 	bic.w	r2, r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7edb      	ldrb	r3, [r3, #27]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d108      	bne.n	8002e2a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e007      	b.n	8002e3a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0210 	orr.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0208 	orr.w	r2, r2, #8
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e007      	b.n	8002e64 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0208 	bic.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7f5b      	ldrb	r3, [r3, #29]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d108      	bne.n	8002e7e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0204 	orr.w	r2, r2, #4
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e007      	b.n	8002e8e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	ea42 0103 	orr.w	r1, r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <__NVIC_SetPriorityGrouping+0x44>)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	60d3      	str	r3, [r2, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <__NVIC_GetPriorityGrouping+0x18>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 0307 	and.w	r3, r3, #7
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db0b      	blt.n	8002f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	4906      	ldr	r1, [pc, #24]	; (8002f64 <__NVIC_EnableIRQ+0x34>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	2001      	movs	r0, #1
 8002f52:	fa00 f202 	lsl.w	r2, r0, r2
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003044:	f7ff ff90 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff2d 	bl	8002ecc <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff42 	bl	8002f14 <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff90 	bl	8002fbc <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5f 	bl	8002f68 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff35 	bl	8002f30 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e169      	b.n	80033d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030fc:	2201      	movs	r2, #1
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8158 	bne.w	80033ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a9a      	ldr	r2, [pc, #616]	; (8003388 <HAL_GPIO_Init+0x2a0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d05e      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003124:	4a98      	ldr	r2, [pc, #608]	; (8003388 <HAL_GPIO_Init+0x2a0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d875      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800312a:	4a98      	ldr	r2, [pc, #608]	; (800338c <HAL_GPIO_Init+0x2a4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d058      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003130:	4a96      	ldr	r2, [pc, #600]	; (800338c <HAL_GPIO_Init+0x2a4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d86f      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003136:	4a96      	ldr	r2, [pc, #600]	; (8003390 <HAL_GPIO_Init+0x2a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d052      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 800313c:	4a94      	ldr	r2, [pc, #592]	; (8003390 <HAL_GPIO_Init+0x2a8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d869      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003142:	4a94      	ldr	r2, [pc, #592]	; (8003394 <HAL_GPIO_Init+0x2ac>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04c      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003148:	4a92      	ldr	r2, [pc, #584]	; (8003394 <HAL_GPIO_Init+0x2ac>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d863      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800314e:	4a92      	ldr	r2, [pc, #584]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d046      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
 8003154:	4a90      	ldr	r2, [pc, #576]	; (8003398 <HAL_GPIO_Init+0x2b0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d85d      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 800315a:	2b12      	cmp	r3, #18
 800315c:	d82a      	bhi.n	80031b4 <HAL_GPIO_Init+0xcc>
 800315e:	2b12      	cmp	r3, #18
 8003160:	d859      	bhi.n	8003216 <HAL_GPIO_Init+0x12e>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_GPIO_Init+0x80>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	080031e3 	.word	0x080031e3
 800316c:	080031bd 	.word	0x080031bd
 8003170:	080031cf 	.word	0x080031cf
 8003174:	08003211 	.word	0x08003211
 8003178:	08003217 	.word	0x08003217
 800317c:	08003217 	.word	0x08003217
 8003180:	08003217 	.word	0x08003217
 8003184:	08003217 	.word	0x08003217
 8003188:	08003217 	.word	0x08003217
 800318c:	08003217 	.word	0x08003217
 8003190:	08003217 	.word	0x08003217
 8003194:	08003217 	.word	0x08003217
 8003198:	08003217 	.word	0x08003217
 800319c:	08003217 	.word	0x08003217
 80031a0:	08003217 	.word	0x08003217
 80031a4:	08003217 	.word	0x08003217
 80031a8:	08003217 	.word	0x08003217
 80031ac:	080031c5 	.word	0x080031c5
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	4a79      	ldr	r2, [pc, #484]	; (800339c <HAL_GPIO_Init+0x2b4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ba:	e02c      	b.n	8003216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e029      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e024      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	3308      	adds	r3, #8
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e01f      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	330c      	adds	r3, #12
 80031de:	623b      	str	r3, [r7, #32]
          break;
 80031e0:	e01a      	b.n	8003218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ea:	2304      	movs	r3, #4
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e013      	b.n	8003218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f8:	2308      	movs	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	611a      	str	r2, [r3, #16]
          break;
 8003202:	e009      	b.n	8003218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	615a      	str	r2, [r3, #20]
          break;
 800320e:	e003      	b.n	8003218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003210:	2300      	movs	r3, #0
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x130>
          break;
 8003216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d801      	bhi.n	8003222 <HAL_GPIO_Init+0x13a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	e001      	b.n	8003226 <HAL_GPIO_Init+0x13e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d802      	bhi.n	8003234 <HAL_GPIO_Init+0x14c>
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x152>
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	3b08      	subs	r3, #8
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	210f      	movs	r1, #15
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	401a      	ands	r2, r3
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80b1 	beq.w	80033ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b4a      	ldr	r3, [pc, #296]	; (80033a0 <HAL_GPIO_Init+0x2b8>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003280:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <HAL_GPIO_Init+0x2bc>)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <HAL_GPIO_Init+0x2c0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_GPIO_Init+0x1ec>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3f      	ldr	r2, [pc, #252]	; (80033ac <HAL_GPIO_Init+0x2c4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00d      	beq.n	80032d0 <HAL_GPIO_Init+0x1e8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	; (80033b0 <HAL_GPIO_Init+0x2c8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <HAL_GPIO_Init+0x1e4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3d      	ldr	r2, [pc, #244]	; (80033b4 <HAL_GPIO_Init+0x2cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <HAL_GPIO_Init+0x1e0>
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e004      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e002      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_GPIO_Init+0x1ee>
 80032d4:	2300      	movs	r3, #0
 80032d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d8:	f002 0203 	and.w	r2, r2, #3
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	4093      	lsls	r3, r2
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e6:	492f      	ldr	r1, [pc, #188]	; (80033a4 <HAL_GPIO_Init+0x2bc>)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	492c      	ldr	r1, [pc, #176]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
 800330c:	e006      	b.n	800331c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	43db      	mvns	r3, r3
 8003316:	4928      	ldr	r1, [pc, #160]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003318:	4013      	ands	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4922      	ldr	r1, [pc, #136]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
 8003334:	e006      	b.n	8003344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	43db      	mvns	r3, r3
 800333e:	491e      	ldr	r1, [pc, #120]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003340:	4013      	ands	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4918      	ldr	r1, [pc, #96]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	43db      	mvns	r3, r3
 8003366:	4914      	ldr	r1, [pc, #80]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 8003368:	4013      	ands	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <HAL_GPIO_Init+0x2d0>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x2e2>
 8003386:	bf00      	nop
 8003388:	10320000 	.word	0x10320000
 800338c:	10310000 	.word	0x10310000
 8003390:	10220000 	.word	0x10220000
 8003394:	10210000 	.word	0x10210000
 8003398:	10120000 	.word	0x10120000
 800339c:	10110000 	.word	0x10110000
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40010800 	.word	0x40010800
 80033ac:	40010c00 	.word	0x40010c00
 80033b0:	40011000 	.word	0x40011000
 80033b4:	40011400 	.word	0x40011400
 80033b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_GPIO_Init+0x304>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4909      	ldr	r1, [pc, #36]	; (80033ec <HAL_GPIO_Init+0x304>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f ae8e 	bne.w	80030fc <HAL_GPIO_Init+0x14>
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	372c      	adds	r7, #44	; 0x2c
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43d9      	mvns	r1, r3
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	400b      	ands	r3, r1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003454:	b08f      	sub	sp, #60	; 0x3c
 8003456:	af0a      	add	r7, sp, #40	; 0x28
 8003458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e10f      	b.n	8003684 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f005 fea8 	bl	80091d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ff9a 	bl	80063dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	687e      	ldr	r6, [r7, #4]
 80034b0:	466d      	mov	r5, sp
 80034b2:	f106 0410 	add.w	r4, r6, #16
 80034b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034c6:	1d33      	adds	r3, r6, #4
 80034c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	f002 feb8 	bl	8006240 <USB_CoreInit>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0d0      	b.n	8003684 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 ff87 	bl	80063fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e04a      	b.n	800358a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	333d      	adds	r3, #61	; 0x3d
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	b298      	uxth	r0, r3
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3356      	adds	r3, #86	; 0x56
 8003530:	4602      	mov	r2, r0
 8003532:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3340      	adds	r3, #64	; 0x40
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	; 0x44
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3348      	adds	r3, #72	; 0x48
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	; 0x4c
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	3301      	adds	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d3af      	bcc.n	80034f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e044      	b.n	8003624 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	3301      	adds	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d3b5      	bcc.n	800359a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	687e      	ldr	r6, [r7, #4]
 8003636:	466d      	mov	r5, sp
 8003638:	f106 0410 	add.w	r4, r6, #16
 800363c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003648:	e885 0003 	stmia.w	r5, {r0, r1}
 800364c:	1d33      	adds	r3, r6, #4
 800364e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003650:	6838      	ldr	r0, [r7, #0]
 8003652:	f002 ff1f 	bl	8006494 <USB_DevInit>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e00d      	b.n	8003684 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fea9 	bl	80073d4 <USB_DevDisconnect>

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800368c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Start+0x16>
 800369e:	2302      	movs	r3, #2
 80036a0:	e012      	b.n	80036c8 <HAL_PCD_Start+0x3c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 fe84 	bl	80063bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 fe6b 	bl	8007394 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b08d      	sub	sp, #52	; 0x34
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 ff22 	bl	8007530 <USB_GetMode>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8443 	bne.w	8003f7a <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fe8b 	bl	8007414 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8439 	beq.w	8003f78 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 fe78 	bl	8007414 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d107      	bne.n	800373e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f002 0202 	and.w	r2, r2, #2
 800373c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f003 fe66 	bl	8007414 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b10      	cmp	r3, #16
 8003750:	d161      	bne.n	8003816 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	0c5b      	lsrs	r3, r3, #17
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	2b02      	cmp	r3, #2
 800378c:	d124      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d035      	beq.n	8003806 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	6a38      	ldr	r0, [r7, #32]
 80037ae:	f003 fca3 	bl	80070f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037be:	441a      	add	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d0:	441a      	add	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	e016      	b.n	8003806 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	0c5b      	lsrs	r3, r3, #17
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d110      	bne.n	8003806 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ea:	2208      	movs	r2, #8
 80037ec:	4619      	mov	r1, r3
 80037ee:	6a38      	ldr	r0, [r7, #32]
 80037f0:	f003 fc82 	bl	80070f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003800:	441a      	add	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0210 	orr.w	r2, r2, #16
 8003814:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 fdfa 	bl	8007414 <USB_ReadInterrupts>
 8003820:	4603      	mov	r3, r0
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800382a:	f040 80a7 	bne.w	800397c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fdfe 	bl	8007438 <USB_ReadDevAllOutEpInterrupt>
 800383c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800383e:	e099      	b.n	8003974 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808e 	beq.w	8003968 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fe20 	bl	800749c <USB_ReadDevOutEPInterrupt>
 800385c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	2301      	movs	r3, #1
 8003878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800387a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fe41 	bl	8004504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003898:	461a      	mov	r2, r3
 800389a:	2308      	movs	r3, #8
 800389c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fe7d 	bl	80045a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	461a      	mov	r2, r3
 80038be:	2310      	movs	r3, #16
 80038c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d030      	beq.n	800392e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d109      	bne.n	80038ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	3304      	adds	r3, #4
 8003900:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d108      	bne.n	800391c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f005 fd4a 	bl	80093b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	2302      	movs	r3, #2
 800392c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	2320      	movs	r3, #32
 8003948:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003966:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	3301      	adds	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f af62 	bne.w	8003840 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fd47 	bl	8007414 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003990:	f040 80a4 	bne.w	8003adc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f003 fd66 	bl	800746a <USB_ReadDevAllInEpInterrupt>
 800399e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039a4:	e096      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 808b 	beq.w	8003ac8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fd8a 	bl	80074d6 <USB_ReadDevInEPInterrupt>
 80039c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2201      	movs	r2, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ee:	4013      	ands	r3, r2
 80039f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	461a      	mov	r2, r3
 8003a00:	2301      	movs	r3, #1
 8003a02:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 fc55 	bl	80092ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a26:	461a      	mov	r2, r3
 8003a28:	2308      	movs	r3, #8
 8003a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	461a      	mov	r2, r3
 8003a44:	2310      	movs	r3, #16
 8003a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2340      	movs	r3, #64	; 0x40
 8003a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d023      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a70:	6a38      	ldr	r0, [r7, #32]
 8003a72:	f002 fe31 	bl	80066d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	3338      	adds	r3, #56	; 0x38
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d108      	bne.n	8003aa4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f005 fc98 	bl	80093d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fc96 	bl	80043f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3301      	adds	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f47f af65 	bne.w	80039a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fc97 	bl	8007414 <USB_ReadInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003af0:	d114      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f005 fc44 	bl	8009394 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fc77 	bl	8007414 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	d112      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f005 fc00 	bl	8009348 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b56:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f003 fc59 	bl	8007414 <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	f040 80b5 	bne.w	8003cda <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2110      	movs	r1, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fda4 	bl	80066d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	e046      	b.n	8003c24 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ba8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	3301      	adds	r3, #1
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3b3      	bcc.n	8003b96 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d016      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5a:	f043 030b 	orr.w	r3, r3, #11
 8003c5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c70:	f043 030b 	orr.w	r3, r3, #11
 8003c74:	6453      	str	r3, [r2, #68]	; 0x44
 8003c76:	e015      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c8a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	f043 030b 	orr.w	r3, r3, #11
 8003ca2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cb6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f003 fc63 	bl	8007590 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fb98 	bl	8007414 <USB_ReadInterrupts>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d124      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fc28 	bl	800754a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 fd66 	bl	80067d0 <USB_GetDevSpeed>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681c      	ldr	r4, [r3, #0]
 8003d10:	f001 f98c 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8003d14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f002 fab0 	bl	8006284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f005 faf0 	bl	800930a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 fb68 	bl	8007414 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10a      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f005 facd 	bl	80092ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f002 0208 	and.w	r2, r2, #8
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f003 fb53 	bl	8007414 <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d122      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d84:	2301      	movs	r3, #1
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e014      	b.n	8003db4 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 faf2 	bl	8004392 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	3301      	adds	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3e5      	bcc.n	8003d8a <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f003 fb26 	bl	8007414 <USB_ReadInterrupts>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d13b      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	e02b      	b.n	8003e32 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3340      	adds	r3, #64	; 0x40
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d115      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da12      	bge.n	8003e2c <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	333f      	adds	r3, #63	; 0x3f
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fab3 	bl	8004392 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3ce      	bcc.n	8003dda <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fadf 	bl	8007414 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e60:	d155      	bne.n	8003f0e <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e62:	2301      	movs	r3, #1
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e045      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d12e      	bne.n	8003eee <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da2b      	bge.n	8003eee <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ea2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d121      	bne.n	8003eee <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eea:	6053      	str	r3, [r2, #4]
            break;
 8003eec:	e007      	b.n	8003efe <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3b4      	bcc.n	8003e68 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 fa7e 	bl	8007414 <USB_ReadInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d10a      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f005 fa67 	bl	80093f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 fa68 	bl	8007414 <USB_ReadInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d115      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f005 fa57 	bl	8009414 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e000      	b.n	8003f7a <HAL_PCD_IRQHandler+0x8aa>
      return;
 8003f78:	bf00      	nop
    }
  }
}
 8003f7a:	3734      	adds	r7, #52	; 0x34
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd90      	pop	{r4, r7, pc}

08003f80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_PCD_SetAddress+0x1a>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e013      	b.n	8003fc2 <HAL_PCD_SetAddress+0x42>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 f9c9 	bl	800734a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4603      	mov	r3, r0
 8003fda:	70fb      	strb	r3, [r7, #3]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	803b      	strh	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da0f      	bge.n	8004010 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	3338      	adds	r3, #56	; 0x38
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	705a      	strb	r2, [r3, #1]
 800400e:	e00f      	b.n	8004030 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800403c:	883a      	ldrh	r2, [r7, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	78ba      	ldrb	r2, [r7, #2]
 8004046:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800405a:	78bb      	ldrb	r3, [r7, #2]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d102      	bne.n	8004066 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_PCD_EP_Open+0xaa>
 8004070:	2302      	movs	r3, #2
 8004072:	e00e      	b.n	8004092 <HAL_PCD_EP_Open+0xc8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68f9      	ldr	r1, [r7, #12]
 8004082:	4618      	mov	r0, r3
 8004084:	f002 fbc2 	bl	800680c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004090:	7afb      	ldrb	r3, [r7, #11]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da0f      	bge.n	80040ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	3338      	adds	r3, #56	; 0x38
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	705a      	strb	r2, [r3, #1]
 80040cc:	e00f      	b.n	80040ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_PCD_EP_Close+0x6e>
 8004104:	2302      	movs	r3, #2
 8004106:	e00e      	b.n	8004126 <HAL_PCD_EP_Close+0x8c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 fbfe 	bl	8006918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	460b      	mov	r3, r1
 800413c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004170:	7afb      	ldrb	r3, [r7, #11]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	b2da      	uxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6979      	ldr	r1, [r7, #20]
 8004182:	4618      	mov	r0, r3
 8004184:	f002 fca4 	bl	8006ad0 <USB_EPStartXfer>

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80041b4:	681b      	ldr	r3, [r3, #0]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	460b      	mov	r3, r1
 80041ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	3338      	adds	r3, #56	; 0x38
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2201      	movs	r2, #1
 80041fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004200:	7afb      	ldrb	r3, [r7, #11]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	b2da      	uxtb	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	4618      	mov	r0, r3
 8004214:	f002 fc5c 	bl	8006ad0 <USB_EPStartXfer>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 020f 	and.w	r2, r3, #15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d901      	bls.n	8004240 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04e      	b.n	80042de <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da0f      	bge.n	8004268 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	3338      	adds	r3, #56	; 0x38
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	705a      	strb	r2, [r3, #1]
 8004266:	e00d      	b.n	8004284 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_PCD_EP_SetStall+0x82>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e01c      	b.n	80042de <HAL_PCD_EP_SetStall+0xbc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f002 ff77 	bl	80071a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d108      	bne.n	80042d4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f003 f95e 	bl	8007590 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	f003 020f 	and.w	r2, r3, #15
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d901      	bls.n	8004304 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e042      	b.n	800438a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da0f      	bge.n	800432c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	3338      	adds	r3, #56	; 0x38
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4413      	add	r3, r2
 8004320:	3304      	adds	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	705a      	strb	r2, [r3, #1]
 800432a:	e00f      	b.n	800434c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_PCD_EP_ClrStall+0x86>
 8004368:	2302      	movs	r3, #2
 800436a:	e00e      	b.n	800438a <HAL_PCD_EP_ClrStall+0xa4>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68f9      	ldr	r1, [r7, #12]
 800437a:	4618      	mov	r0, r3
 800437c:	f002 ff80 	bl	8007280 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800439e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da0c      	bge.n	80043c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	3338      	adds	r3, #56	; 0x38
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e00c      	b.n	80043da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	3304      	adds	r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f002 fda7 	bl	8006f34 <USB_EPStopXfer>
 80043e6:	4603      	mov	r3, r0
 80043e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043ea:	7afb      	ldrb	r3, [r7, #11]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	3338      	adds	r3, #56	; 0x38
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d901      	bls.n	800442c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e067      	b.n	80044fc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d902      	bls.n	8004448 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3303      	adds	r3, #3
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004450:	e026      	b.n	80044a0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	429a      	cmp	r2, r3
 8004466:	d902      	bls.n	800446e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3303      	adds	r3, #3
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	b29b      	uxth	r3, r3
 8004482:	6978      	ldr	r0, [r7, #20]
 8004484:	f002 fdff 	bl	8007086 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	441a      	add	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d809      	bhi.n	80044ca <PCD_WriteEmptyTxFifo+0xd6>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044be:	429a      	cmp	r2, r3
 80044c0:	d203      	bcs.n	80044ca <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1c3      	bne.n	8004452 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d811      	bhi.n	80044fa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	2201      	movs	r2, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	6939      	ldr	r1, [r7, #16]
 80044f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f6:	4013      	ands	r3, r2
 80044f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	333c      	adds	r3, #60	; 0x3c
 800451c:	3304      	adds	r3, #4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <PCD_EP_OutXfrComplete_int+0x98>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d124      	bne.n	8004584 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	6093      	str	r3, [r2, #8]
 8004558:	e01a      	b.n	8004590 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	461a      	mov	r2, r3
 8004572:	2320      	movs	r3, #32
 8004574:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f004 fe81 	bl	8009284 <HAL_PCD_DataOutStageCallback>
 8004582:	e005      	b.n	8004590 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f004 fe7a 	bl	8009284 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	4f54310a 	.word	0x4f54310a

080045a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	333c      	adds	r3, #60	; 0x3c
 80045b8:	3304      	adds	r3, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <PCD_EP_OutSetupPacket_int+0x64>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d90e      	bls.n	80045f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f004 fe33 	bl	8009260 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	4f54300a 	.word	0x4f54300a

08004608 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	4613      	mov	r3, r2
 8004616:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d107      	bne.n	8004636 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004626:	883b      	ldrh	r3, [r7, #0]
 8004628:	0419      	lsls	r1, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	430a      	orrs	r2, r1
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
 8004634:	e028      	b.n	8004688 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e00d      	b.n	8004666 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	3301      	adds	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	3b01      	subs	r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d3ec      	bcc.n	800464a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004670:	883b      	ldrh	r3, [r7, #0]
 8004672:	0418      	lsls	r0, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6819      	ldr	r1, [r3, #0]
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	3b01      	subs	r3, #1
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	4302      	orrs	r2, r0
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	887a      	ldrh	r2, [r7, #2]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e304      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8087 	beq.w	80047e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046d4:	4b92      	ldr	r3, [pc, #584]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00c      	beq.n	80046fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046e0:	4b8f      	ldr	r3, [pc, #572]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d112      	bne.n	8004712 <HAL_RCC_OscConfig+0x5e>
 80046ec:	4b8c      	ldr	r3, [pc, #560]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f8:	d10b      	bne.n	8004712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fa:	4b89      	ldr	r3, [pc, #548]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d06c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x12c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d168      	bne.n	80047e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e2de      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x76>
 800471c:	4b80      	ldr	r3, [pc, #512]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a7f      	ldr	r2, [pc, #508]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e02e      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x98>
 8004732:	4b7b      	ldr	r3, [pc, #492]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7a      	ldr	r2, [pc, #488]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b78      	ldr	r3, [pc, #480]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a77      	ldr	r2, [pc, #476]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0xbc>
 8004756:	4b72      	ldr	r3, [pc, #456]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a71      	ldr	r2, [pc, #452]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6e      	ldr	r2, [pc, #440]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xd4>
 8004770:	4b6b      	ldr	r3, [pc, #428]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6a      	ldr	r2, [pc, #424]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a67      	ldr	r2, [pc, #412]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fe f862 	bl	8002858 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004798:	f7fe f85e 	bl	8002858 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e292      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b5d      	ldr	r3, [pc, #372]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xe4>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fe f84e 	bl	8002858 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fe f84a 	bl	8002858 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e27e      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	4b53      	ldr	r3, [pc, #332]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x10c>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d063      	beq.n	80048b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ee:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047fa:	4b49      	ldr	r3, [pc, #292]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11c      	bne.n	8004840 <HAL_RCC_OscConfig+0x18c>
 8004806:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x176>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e252      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4939      	ldr	r1, [pc, #228]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	e03a      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fe f803 	bl	8002858 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004856:	f7fd ffff 	bl	8002858 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e233      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4927      	ldr	r1, [pc, #156]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
 8004888:	e015      	b.n	80048b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b26      	ldr	r3, [pc, #152]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fd ffe2 	bl	8002858 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fd ffde 	bl	8002858 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e212      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03a      	beq.n	8004938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d019      	beq.n	80048fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b17      	ldr	r3, [pc, #92]	; (8004928 <HAL_RCC_OscConfig+0x274>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7fd ffc2 	bl	8002858 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd ffbe 	bl	8002858 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1f2      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048f6:	2001      	movs	r0, #1
 80048f8:	f000 fbca 	bl	8005090 <RCC_Delay>
 80048fc:	e01c      	b.n	8004938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCC_OscConfig+0x274>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004904:	f7fd ffa8 	bl	8002858 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490a:	e00f      	b.n	800492c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490c:	f7fd ffa4 	bl	8002858 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d908      	bls.n	800492c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e1d8      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
 8004924:	42420000 	.word	0x42420000
 8004928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	4b9b      	ldr	r3, [pc, #620]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1e9      	bne.n	800490c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a6 	beq.w	8004a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494a:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004956:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	4a90      	ldr	r2, [pc, #576]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	61d3      	str	r3, [r2, #28]
 8004962:	4b8e      	ldr	r3, [pc, #568]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x4ec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b88      	ldr	r3, [pc, #544]	; (8004ba0 <HAL_RCC_OscConfig+0x4ec>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a87      	ldr	r2, [pc, #540]	; (8004ba0 <HAL_RCC_OscConfig+0x4ec>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fd ff65 	bl	8002858 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fd ff61 	bl	8002858 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	; 0x64
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e195      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b7e      	ldr	r3, [pc, #504]	; (8004ba0 <HAL_RCC_OscConfig+0x4ec>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x312>
 80049b8:	4b78      	ldr	r3, [pc, #480]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a77      	ldr	r2, [pc, #476]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	e02d      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x334>
 80049ce:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	6213      	str	r3, [r2, #32]
 80049da:	4b70      	ldr	r3, [pc, #448]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4a6f      	ldr	r2, [pc, #444]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6213      	str	r3, [r2, #32]
 80049e6:	e01c      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d10c      	bne.n	8004a0a <HAL_RCC_OscConfig+0x356>
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	6213      	str	r3, [r2, #32]
 80049fc:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	4a66      	ldr	r2, [pc, #408]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	6213      	str	r3, [r2, #32]
 8004a08:	e00b      	b.n	8004a22 <HAL_RCC_OscConfig+0x36e>
 8004a0a:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a63      	ldr	r2, [pc, #396]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	6213      	str	r3, [r2, #32]
 8004a16:	4b61      	ldr	r3, [pc, #388]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4a60      	ldr	r2, [pc, #384]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a1c:	f023 0304 	bic.w	r3, r3, #4
 8004a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d015      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fd ff15 	bl	8002858 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd ff11 	bl	8002858 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e143      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b54      	ldr	r3, [pc, #336]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCC_OscConfig+0x37e>
 8004a54:	e014      	b.n	8004a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7fd feff 	bl	8002858 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fd fefb 	bl	8002858 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e12d      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	4b49      	ldr	r3, [pc, #292]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ee      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b45      	ldr	r3, [pc, #276]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	4a44      	ldr	r2, [pc, #272]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 808c 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004a9c:	4b3f      	ldr	r3, [pc, #252]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004aaa:	4b3c      	ldr	r3, [pc, #240]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e103      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d14e      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004adc:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0ef      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004af0:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <HAL_RCC_OscConfig+0x4f0>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fd feaf 	bl	8002858 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afe:	f7fd feab 	bl	8002858 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0df      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004b10:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	491c      	ldr	r1, [pc, #112]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004b2e:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4918      	ldr	r1, [pc, #96]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <HAL_RCC_OscConfig+0x4f0>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b46:	f7fd fe87 	bl	8002858 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b4e:	f7fd fe83 	bl	8002858 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0b7      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x49a>
 8004b6c:	e022      	b.n	8004bb4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <HAL_RCC_OscConfig+0x4e8>)
 8004b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_RCC_OscConfig+0x4f0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd fe6a 	bl	8002858 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004b86:	e00f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b88:	f7fd fe66 	bl	8002858 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d908      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e09a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e9      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8088 	beq.w	8004cce <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bbe:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d068      	beq.n	8004c9c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d14d      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <HAL_RCC_OscConfig+0x628>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fe3e 	bl	8002858 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd fe3a 	bl	8002858 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e06e      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c06:	d10f      	bne.n	8004c28 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004c08:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4931      	ldr	r1, [pc, #196]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	f023 020f 	bic.w	r2, r3, #15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	492d      	ldr	r1, [pc, #180]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c28:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	4927      	ldr	r1, [pc, #156]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c40:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <HAL_RCC_OscConfig+0x628>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fe07 	bl	8002858 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd fe03 	bl	8002858 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e037      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x59a>
 8004c6c:	e02f      	b.n	8004cce <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x628>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fdf0 	bl	8002858 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fdec 	bl	8002858 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e020      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x5c8>
 8004c9a:	e018      	b.n	8004cce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e013      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_OscConfig+0x624>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d106      	bne.n	8004cca <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d001      	beq.n	8004cce <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	42420060 	.word	0x42420060

08004ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0d0      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b6a      	ldr	r3, [pc, #424]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d910      	bls.n	8004d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4965      	ldr	r1, [pc, #404]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0b8      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d3c:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d54:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4a52      	ldr	r2, [pc, #328]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	494d      	ldr	r1, [pc, #308]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d040      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d86:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d115      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e07f      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e073      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06b      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4936      	ldr	r1, [pc, #216]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fd42 	bl	8002858 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd fd3e 	bl	8002858 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e053      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d210      	bcs.n	8004e30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0207 	bic.w	r2, r3, #7
 8004e16:	4922      	ldr	r1, [pc, #136]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e032      	b.n	8004e96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	490e      	ldr	r1, [pc, #56]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e6e:	f000 f821 	bl	8004eb4 <HAL_RCC_GetSysClockFreq>
 8004e72:	4602      	mov	r2, r0
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	490a      	ldr	r1, [pc, #40]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	5ccb      	ldrb	r3, [r1, r3]
 8004e82:	fa22 f303 	lsr.w	r3, r2, r3
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1cc>)
 8004e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fd fca0 	bl	80027d4 <HAL_InitTick>

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40022000 	.word	0x40022000
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800cd28 	.word	0x0800cd28
 8004eac:	20000000 	.word	0x20000000
 8004eb0:	20000004 	.word	0x20000004

08004eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb8:	b08e      	sub	sp, #56	; 0x38
 8004eba:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ed8:	4b4e      	ldr	r3, [pc, #312]	; (8005014 <HAL_RCC_GetSysClockFreq+0x160>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d002      	beq.n	8004eee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8004eec:	e089      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ef0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ef2:	e089      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_GetSysClockFreq+0x168>)
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d072      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004f0c:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4b42      	ldr	r3, [pc, #264]	; (8005020 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d053      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	3301      	adds	r3, #1
 8004f32:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	3302      	adds	r3, #2
 8004f40:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2200      	movs	r2, #0
 8004f46:	469a      	mov	sl, r3
 8004f48:	4693      	mov	fp, r2
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	617a      	str	r2, [r7, #20]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	fb03 f20b 	mul.w	r2, r3, fp
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	fb0a f303 	mul.w	r3, sl, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	fbaa 0102 	umull	r0, r1, sl, r2
 8004f66:	440b      	add	r3, r1
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f6c:	fb03 f201 	mul.w	r2, r3, r1
 8004f70:	2300      	movs	r3, #0
 8004f72:	fb00 f303 	mul.w	r3, r0, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	4a27      	ldr	r2, [pc, #156]	; (8005018 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f7a:	fba0 4502 	umull	r4, r5, r0, r2
 8004f7e:	442b      	add	r3, r5
 8004f80:	461d      	mov	r5, r3
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2200      	movs	r2, #0
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	60fa      	str	r2, [r7, #12]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f96:	460b      	mov	r3, r1
 8004f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	fb02 f203 	mul.w	r2, r2, r3
 8004fa2:	465b      	mov	r3, fp
 8004fa4:	4684      	mov	ip, r0
 8004fa6:	fb0c f303 	mul.w	r3, ip, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	4602      	mov	r2, r0
 8004fae:	4651      	mov	r1, sl
 8004fb0:	fba2 8901 	umull	r8, r9, r2, r1
 8004fb4:	444b      	add	r3, r9
 8004fb6:	4699      	mov	r9, r3
 8004fb8:	4642      	mov	r2, r8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	f7fc f87c 	bl	80010bc <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4613      	mov	r3, r2
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
 8004fcc:	e007      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	4a11      	ldr	r2, [pc, #68]	; (8005018 <HAL_RCC_GetSysClockFreq+0x164>)
 8004fd2:	fb03 f202 	mul.w	r2, r3, r2
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004fde:	4b0f      	ldr	r3, [pc, #60]	; (800501c <HAL_RCC_GetSysClockFreq+0x168>)
 8004fe0:	7b5b      	ldrb	r3, [r3, #13]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff0:	e004      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <HAL_RCC_GetSysClockFreq+0x170>)
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005000:	e002      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_GetSysClockFreq+0x174>)
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005006:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800500a:	4618      	mov	r0, r3
 800500c:	3738      	adds	r7, #56	; 0x38
 800500e:	46bd      	mov	sp, r7
 8005010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005014:	40021000 	.word	0x40021000
 8005018:	017d7840 	.word	0x017d7840
 800501c:	0800cd40 	.word	0x0800cd40
 8005020:	0800cd50 	.word	0x0800cd50
 8005024:	003d0900 	.word	0x003d0900
 8005028:	007a1200 	.word	0x007a1200

0800502c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005030:	4b02      	ldr	r3, [pc, #8]	; (800503c <HAL_RCC_GetHCLKFreq+0x10>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	20000000 	.word	0x20000000

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff2 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021000 	.word	0x40021000
 8005064:	0800cd38 	.word	0x0800cd38

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800506c:	f7ff ffde 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	0adb      	lsrs	r3, r3, #11
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	0800cd38 	.word	0x0800cd38

08005090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005098:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <RCC_Delay+0x34>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <RCC_Delay+0x38>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	0a5b      	lsrs	r3, r3, #9
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050ac:	bf00      	nop
  }
  while (Delay --);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	60fa      	str	r2, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f9      	bne.n	80050ac <RCC_Delay+0x1c>
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	20000000 	.word	0x20000000
 80050c8:	10624dd3 	.word	0x10624dd3

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d07d      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f0:	4b8b      	ldr	r3, [pc, #556]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b88      	ldr	r3, [pc, #544]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4a87      	ldr	r2, [pc, #540]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	61d3      	str	r3, [r2, #28]
 8005108:	4b85      	ldr	r3, [pc, #532]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005114:	2301      	movs	r3, #1
 8005116:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d118      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005124:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7e      	ldr	r2, [pc, #504]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005130:	f7fd fb92 	bl	8002858 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fd fb8e 	bl	8002858 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e0e5      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005156:	4b72      	ldr	r3, [pc, #456]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d027      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005174:	4b6a      	ldr	r3, [pc, #424]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005184:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800518a:	4a65      	ldr	r2, [pc, #404]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d014      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fd fb5d 	bl	8002858 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fd fb59 	bl	8002858 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0ae      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ee      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c4:	4b56      	ldr	r3, [pc, #344]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4953      	ldr	r1, [pc, #332]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051d6:	7efb      	ldrb	r3, [r7, #27]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	4b50      	ldr	r3, [pc, #320]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	4a4f      	ldr	r2, [pc, #316]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f4:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4947      	ldr	r1, [pc, #284]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005212:	4b43      	ldr	r3, [pc, #268]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	4940      	ldr	r1, [pc, #256]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8005230:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	4938      	ldr	r1, [pc, #224]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800523e:	4313      	orrs	r3, r2
 8005240:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8005242:	4b37      	ldr	r3, [pc, #220]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d148      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005264:	4b2e      	ldr	r3, [pc, #184]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d138      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005270:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800527c:	4b28      	ldr	r3, [pc, #160]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e042      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	4920      	ldr	r1, [pc, #128]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80052a2:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	491c      	ldr	r1, [pc, #112]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80052b4:	4b1d      	ldr	r3, [pc, #116]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fd facd 	bl	8002858 <HAL_GetTick>
 80052be:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052c2:	f7fd fac9 	bl	8002858 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b64      	cmp	r3, #100	; 0x64
 80052ce:	d901      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e020      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80052e0:	e009      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80052e2:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d001      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00f      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
 8005328:	42420440 	.word	0x42420440
 800532c:	42420070 	.word	0x42420070

08005330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e076      	b.n	8005430 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d009      	beq.n	8005368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	61da      	str	r2, [r3, #28]
 800535a:	e005      	b.n	8005368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc ff30 	bl	80021e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ec:	ea42 0103 	orr.w	r1, r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	0c1a      	lsrs	r2, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f002 0204 	and.w	r2, r2, #4
 800540e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800541e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_SPI_Transmit+0x22>
 8005456:	2302      	movs	r3, #2
 8005458:	e12d      	b.n	80056b6 <HAL_SPI_Transmit+0x27e>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005462:	f7fd f9f9 	bl	8002858 <HAL_GetTick>
 8005466:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d002      	beq.n	800547e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005478:	2302      	movs	r3, #2
 800547a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800547c:	e116      	b.n	80056ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Transmit+0x52>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800548e:	e10d      	b.n	80056ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2203      	movs	r2, #3
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d10f      	bne.n	80054f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d007      	beq.n	8005516 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d14f      	bne.n	80055c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_SPI_Transmit+0xf6>
 8005528:	8afb      	ldrh	r3, [r7, #22]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d142      	bne.n	80055b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	881a      	ldrh	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	1c9a      	adds	r2, r3, #2
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005552:	e02f      	b.n	80055b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d112      	bne.n	8005588 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	86da      	strh	r2, [r3, #54]	; 0x36
 8005586:	e015      	b.n	80055b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005588:	f7fd f966 	bl	8002858 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d803      	bhi.n	80055a0 <HAL_SPI_Transmit+0x168>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_Transmit+0x16e>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80055b2:	e07b      	b.n	80056ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1ca      	bne.n	8005554 <HAL_SPI_Transmit+0x11c>
 80055be:	e050      	b.n	8005662 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_Transmit+0x196>
 80055c8:	8afb      	ldrh	r3, [r7, #22]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d144      	bne.n	8005658 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055f4:	e030      	b.n	8005658 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d113      	bne.n	800562c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	86da      	strh	r2, [r3, #54]	; 0x36
 800562a:	e015      	b.n	8005658 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562c:	f7fd f914 	bl	8002858 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d803      	bhi.n	8005644 <HAL_SPI_Transmit+0x20c>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005642:	d102      	bne.n	800564a <HAL_SPI_Transmit+0x212>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005656:	e029      	b.n	80056ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1c9      	bne.n	80055f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fbcc 	bl	8005e04 <SPI_EndRxTxTransaction>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e003      	b.n	80056ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b088      	sub	sp, #32
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056e2:	e0fb      	b.n	80058dc <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ec:	d112      	bne.n	8005714 <HAL_SPI_Receive+0x56>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10e      	bne.n	8005714 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2204      	movs	r2, #4
 80056fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8ef 	bl	80058ee <HAL_SPI_TransmitReceive>
 8005710:	4603      	mov	r3, r0
 8005712:	e0e8      	b.n	80058e6 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Receive+0x64>
 800571e:	2302      	movs	r3, #2
 8005720:	e0e1      	b.n	80058e6 <HAL_SPI_Receive+0x228>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572a:	f7fd f895 	bl	8002858 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_Receive+0x7e>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005740:	e0cc      	b.n	80058dc <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2204      	movs	r2, #4
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005788:	d10f      	bne.n	80057aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	d007      	beq.n	80057c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d16a      	bne.n	80058a6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057d0:	e032      	b.n	8005838 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d115      	bne.n	800580c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f103 020c 	add.w	r2, r3, #12
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	87da      	strh	r2, [r3, #62]	; 0x3e
 800580a:	e015      	b.n	8005838 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fd f824 	bl	8002858 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Receive+0x166>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005822:	d102      	bne.n	800582a <HAL_SPI_Receive+0x16c>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005836:	e051      	b.n	80058dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1c7      	bne.n	80057d2 <HAL_SPI_Receive+0x114>
 8005842:	e035      	b.n	80058b0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d113      	bne.n	800587a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	b292      	uxth	r2, r2
 800585e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	1c9a      	adds	r2, r3, #2
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005878:	e015      	b.n	80058a6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587a:	f7fc ffed 	bl	8002858 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d803      	bhi.n	8005892 <HAL_SPI_Receive+0x1d4>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d102      	bne.n	8005898 <HAL_SPI_Receive+0x1da>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80058a4:	e01a      	b.n	80058dc <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1c9      	bne.n	8005844 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa53 	bl	8005d60 <SPI_EndRxTransaction>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
 80058d2:	e003      	b.n	80058dc <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b08c      	sub	sp, #48	; 0x30
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058fc:	2301      	movs	r3, #1
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x26>
 8005910:	2302      	movs	r3, #2
 8005912:	e198      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x358>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591c:	f7fc ff9c 	bl	8002858 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800593a:	2b01      	cmp	r3, #1
 800593c:	d00f      	beq.n	800595e <HAL_SPI_TransmitReceive+0x70>
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005944:	d107      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x68>
 800594e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005952:	2b04      	cmp	r3, #4
 8005954:	d003      	beq.n	800595e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005956:	2302      	movs	r3, #2
 8005958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800595c:	e16d      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x82>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x82>
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005976:	e160      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b04      	cmp	r3, #4
 8005982:	d003      	beq.n	800598c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2205      	movs	r2, #5
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d007      	beq.n	80059e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e8:	d17c      	bne.n	8005ae4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x10a>
 80059f2:	8b7b      	ldrh	r3, [r7, #26]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d16a      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1c:	e057      	b.n	8005ace <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d11b      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x176>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d016      	beq.n	8005a64 <HAL_SPI_TransmitReceive+0x176>
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d113      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d119      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x1b8>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d014      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	b292      	uxth	r2, r2
 8005a88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005aa6:	f7fc fed7 	bl	8002858 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d80b      	bhi.n	8005ace <HAL_SPI_TransmitReceive+0x1e0>
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005abc:	d007      	beq.n	8005ace <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005acc:	e0b5      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1a2      	bne.n	8005a1e <HAL_SPI_TransmitReceive+0x130>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d19d      	bne.n	8005a1e <HAL_SPI_TransmitReceive+0x130>
 8005ae2:	e080      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_TransmitReceive+0x204>
 8005aec:	8b7b      	ldrh	r3, [r7, #26]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d16f      	bne.n	8005bd2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b18:	e05b      	b.n	8005bd2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d11c      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x274>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d017      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x274>
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d114      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d119      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x2b6>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d014      	beq.n	8005ba4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ba4:	f7fc fe58 	bl	8002858 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d803      	bhi.n	8005bbc <HAL_SPI_TransmitReceive+0x2ce>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bba:	d102      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x2d4>
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005bd0:	e033      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d19e      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x22c>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d199      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f90a 	bl	8005e04 <SPI_EndRxTxTransaction>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c02:	e01a      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c30:	e003      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	; 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c60:	f7fc fdfa 	bl	8002858 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c70:	f7fc fdf2 	bl	8002858 <HAL_GetTick>
 8005c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	015b      	lsls	r3, r3, #5
 8005c7c:	0d1b      	lsrs	r3, r3, #20
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c86:	e054      	b.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c8e:	d050      	beq.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c90:	f7fc fde2 	bl	8002858 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d902      	bls.n	8005ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d13d      	bne.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cbe:	d111      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc8:	d004      	beq.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd2:	d107      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cec:	d10f      	bne.n	8005d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e017      	b.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d19b      	bne.n	8005c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000000 	.word	0x20000000

08005d60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d74:	d111      	bne.n	8005d9a <SPI_EndRxTransaction+0x3a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7e:	d004      	beq.n	8005d8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d107      	bne.n	8005d9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d98:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da2:	d117      	bne.n	8005dd4 <SPI_EndRxTransaction+0x74>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dac:	d112      	bne.n	8005dd4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	2101      	movs	r1, #1
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f7ff ff49 	bl	8005c50 <SPI_WaitFlagStateUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01a      	beq.n	8005dfa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	f043 0220 	orr.w	r2, r3, #32
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e013      	b.n	8005dfc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2180      	movs	r1, #128	; 0x80
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff ff36 	bl	8005c50 <SPI_WaitFlagStateUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d007      	beq.n	8005dfa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f043 0220 	orr.w	r2, r3, #32
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e000      	b.n	8005dfc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ff18 	bl	8005c50 <SPI_WaitFlagStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e000      	b.n	8005e38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e041      	b.n	8005ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc fb80 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 f82e 	bl	8005ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <TIM_Base_SetConfig+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <TIM_Base_SetConfig+0xcc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <TIM_Base_SetConfig+0xd0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <TIM_Base_SetConfig+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <TIM_Base_SetConfig+0xc8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_Base_SetConfig+0x72>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d00b      	beq.n	8005f52 <TIM_Base_SetConfig+0x72>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <TIM_Base_SetConfig+0xcc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_Base_SetConfig+0x72>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <TIM_Base_SetConfig+0xd0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_Base_SetConfig+0x72>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <TIM_Base_SetConfig+0xd4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <TIM_Base_SetConfig+0xc8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d103      	bne.n	8005f98 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800
 8005fb4:	40000c00 	.word	0x40000c00

08005fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e04b      	b.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d00e      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d009      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00

08006084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e042      	b.n	800611c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fc fad0 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2224      	movs	r2, #36	; 0x24
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f82b 	bl	8006124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800615e:	f023 030c 	bic.w	r3, r3, #12
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	430b      	orrs	r3, r1
 800616a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2c      	ldr	r2, [pc, #176]	; (8006238 <UART_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800618c:	f7fe ff6c 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	e002      	b.n	800619a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fe ff54 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 8006198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <UART_SetConfig+0x118>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	0119      	lsls	r1, r3, #4
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <UART_SetConfig+0x118>)
 80061d2:	fba3 0302 	umull	r0, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	3332      	adds	r3, #50	; 0x32
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <UART_SetConfig+0x118>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f0:	4419      	add	r1, r3
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	fbb2 f2f3 	udiv	r2, r2, r3
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <UART_SetConfig+0x118>)
 800620a:	fba3 0302 	umull	r0, r3, r3, r2
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	2064      	movs	r0, #100	; 0x64
 8006212:	fb00 f303 	mul.w	r3, r0, r3
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	3332      	adds	r3, #50	; 0x32
 800621c:	4a07      	ldr	r2, [pc, #28]	; (800623c <UART_SetConfig+0x118>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	440a      	add	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40013800 	.word	0x40013800
 800623c:	51eb851f 	.word	0x51eb851f

08006240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006240:	b084      	sub	sp, #16
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	f107 001c 	add.w	r0, r7, #28
 800624e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f9de 	bl	8007620 <USB_CoreReset>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006280:	b004      	add	sp, #16
 8006282:	4770      	bx	lr

08006284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d165      	bne.n	8006364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a3e      	ldr	r2, [pc, #248]	; (8006394 <USB_SetTurnaroundTime+0x110>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d906      	bls.n	80062ae <USB_SetTurnaroundTime+0x2a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a3d      	ldr	r2, [pc, #244]	; (8006398 <USB_SetTurnaroundTime+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d202      	bcs.n	80062ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062a8:	230f      	movs	r3, #15
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e05c      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a39      	ldr	r2, [pc, #228]	; (8006398 <USB_SetTurnaroundTime+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d306      	bcc.n	80062c4 <USB_SetTurnaroundTime+0x40>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a38      	ldr	r2, [pc, #224]	; (800639c <USB_SetTurnaroundTime+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d202      	bcs.n	80062c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062be:	230e      	movs	r3, #14
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e051      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a35      	ldr	r2, [pc, #212]	; (800639c <USB_SetTurnaroundTime+0x118>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d306      	bcc.n	80062da <USB_SetTurnaroundTime+0x56>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <USB_SetTurnaroundTime+0x11c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d202      	bcs.n	80062da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062d4:	230d      	movs	r3, #13
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e046      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a30      	ldr	r2, [pc, #192]	; (80063a0 <USB_SetTurnaroundTime+0x11c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d306      	bcc.n	80062f0 <USB_SetTurnaroundTime+0x6c>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <USB_SetTurnaroundTime+0x120>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d802      	bhi.n	80062f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062ea:	230c      	movs	r3, #12
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e03b      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <USB_SetTurnaroundTime+0x120>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d906      	bls.n	8006306 <USB_SetTurnaroundTime+0x82>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a2b      	ldr	r2, [pc, #172]	; (80063a8 <USB_SetTurnaroundTime+0x124>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d802      	bhi.n	8006306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006300:	230b      	movs	r3, #11
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e030      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <USB_SetTurnaroundTime+0x124>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d906      	bls.n	800631c <USB_SetTurnaroundTime+0x98>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a26      	ldr	r2, [pc, #152]	; (80063ac <USB_SetTurnaroundTime+0x128>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d802      	bhi.n	800631c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006316:	230a      	movs	r3, #10
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e025      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <USB_SetTurnaroundTime+0x128>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <USB_SetTurnaroundTime+0xae>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <USB_SetTurnaroundTime+0x12c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d202      	bcs.n	8006332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800632c:	2309      	movs	r3, #9
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e01a      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <USB_SetTurnaroundTime+0x12c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d306      	bcc.n	8006348 <USB_SetTurnaroundTime+0xc4>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a1d      	ldr	r2, [pc, #116]	; (80063b4 <USB_SetTurnaroundTime+0x130>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006342:	2308      	movs	r3, #8
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e00f      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a1a      	ldr	r2, [pc, #104]	; (80063b4 <USB_SetTurnaroundTime+0x130>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0xda>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a19      	ldr	r2, [pc, #100]	; (80063b8 <USB_SetTurnaroundTime+0x134>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d202      	bcs.n	800635e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006358:	2307      	movs	r3, #7
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e004      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800635e:	2306      	movs	r3, #6
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e001      	b.n	8006368 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006364:	2309      	movs	r3, #9
 8006366:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	029b      	lsls	r3, r3, #10
 800637c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006380:	431a      	orrs	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	00d8acbf 	.word	0x00d8acbf
 8006398:	00e4e1c0 	.word	0x00e4e1c0
 800639c:	00f42400 	.word	0x00f42400
 80063a0:	01067380 	.word	0x01067380
 80063a4:	011a499f 	.word	0x011a499f
 80063a8:	01312cff 	.word	0x01312cff
 80063ac:	014ca43f 	.word	0x014ca43f
 80063b0:	016e3600 	.word	0x016e3600
 80063b4:	01a6ab1f 	.word	0x01a6ab1f
 80063b8:	01e84800 	.word	0x01e84800

080063bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f043 0201 	orr.w	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f023 0201 	bic.w	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d115      	bne.n	800644a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800642a:	2001      	movs	r0, #1
 800642c:	f7fc fa1e 	bl	800286c <HAL_Delay>
      ms++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 f87a 	bl	8007530 <USB_GetMode>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d01e      	beq.n	8006480 <USB_SetCurrentMode+0x84>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b31      	cmp	r3, #49	; 0x31
 8006446:	d9f0      	bls.n	800642a <USB_SetCurrentMode+0x2e>
 8006448:	e01a      	b.n	8006480 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d115      	bne.n	800647c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800645c:	2001      	movs	r0, #1
 800645e:	f7fc fa05 	bl	800286c <HAL_Delay>
      ms++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 f861 	bl	8007530 <USB_GetMode>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <USB_SetCurrentMode+0x84>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b31      	cmp	r3, #49	; 0x31
 8006478:	d9f0      	bls.n	800645c <USB_SetCurrentMode+0x60>
 800647a:	e001      	b.n	8006480 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e005      	b.n	800648c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b32      	cmp	r3, #50	; 0x32
 8006484:	d101      	bne.n	800648a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006494:	b084      	sub	sp, #16
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e009      	b.n	80064c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3340      	adds	r3, #64	; 0x40
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3301      	adds	r3, #1
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b0e      	cmp	r3, #14
 80064cc:	d9f2      	bls.n	80064b4 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064e6:	2103      	movs	r1, #3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f959 	bl	80067a0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ee:	2110      	movs	r1, #16
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8f1 	bl	80066d8 <USB_FlushTxFifo>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f91d 	bl	8006740 <USB_FlushRxFifo>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	461a      	mov	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	e043      	b.n	80065c2 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006550:	d118      	bne.n	8006584 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	461a      	mov	r2, r3
 8006566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e013      	b.n	8006596 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e008      	b.n	8006596 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	461a      	mov	r2, r3
 80065b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	3301      	adds	r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3b7      	bcc.n	800653a <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e043      	b.n	8006658 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e6:	d118      	bne.n	800661a <USB_DevInit+0x186>
    {
      if (i == 0U)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e013      	b.n	800662c <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e008      	b.n	800662c <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	461a      	mov	r2, r3
 800664c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006650:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d3b7      	bcc.n	80065d0 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006672:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f043 0210 	orr.w	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <USB_DevInit+0x240>)
 8006694:	4313      	orrs	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f043 0208 	orr.w	r2, r3, #8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d107      	bne.n	80066c2 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ce:	b004      	add	sp, #16
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	803c3800 	.word	0x803c3800

080066d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <USB_FlushTxFifo+0x64>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e01b      	b.n	8006730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	daf2      	bge.n	80066e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	019b      	lsls	r3, r3, #6
 8006708:	f043 0220 	orr.w	r2, r3, #32
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <USB_FlushTxFifo+0x64>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e006      	b.n	8006730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b20      	cmp	r3, #32
 800672c:	d0f0      	beq.n	8006710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	00030d40 	.word	0x00030d40

08006740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a11      	ldr	r2, [pc, #68]	; (800679c <USB_FlushRxFifo+0x5c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e018      	b.n	8006790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	daf2      	bge.n	800674c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2210      	movs	r2, #16
 800676e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a08      	ldr	r2, [pc, #32]	; (800679c <USB_FlushRxFifo+0x5c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b10      	cmp	r3, #16
 800678c:	d0f0      	beq.n	8006770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	00030d40 	.word	0x00030d40

080067a0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067c0:	4313      	orrs	r3, r2
 80067c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0306 	and.w	r3, r3, #6
 80067e8:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d002      	beq.n	80067f6 <USB_GetDevSpeed+0x26>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d102      	bne.n	80067fc <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067f6:	2302      	movs	r3, #2
 80067f8:	75fb      	strb	r3, [r7, #23]
 80067fa:	e001      	b.n	8006800 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80067fc:	230f      	movs	r3, #15
 80067fe:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d13a      	bne.n	800689e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	2101      	movs	r1, #1
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	b29b      	uxth	r3, r3
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006846:	4313      	orrs	r3, r2
 8006848:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d155      	bne.n	800690c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800687c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006884:	4313      	orrs	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e036      	b.n	800690c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	2101      	movs	r1, #1
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068bc:	4313      	orrs	r3, r2
 80068be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11a      	bne.n	800690c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068f2:	430b      	orrs	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d161      	bne.n	80069f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800694a:	d11f      	bne.n	800698c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800696a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	43db      	mvns	r3, r3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ac:	4013      	ands	r3, r2
 80069ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	2101      	movs	r1, #1
 80069c2:	fa01 f303 	lsl.w	r3, r1, r3
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d0:	4013      	ands	r3, r2
 80069d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	0159      	lsls	r1, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	440b      	add	r3, r1
 80069ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ee:	4619      	mov	r1, r3
 80069f0:	4b35      	ldr	r3, [pc, #212]	; (8006ac8 <USB_DeactivateEndpoint+0x1b0>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]
 80069f6:	e060      	b.n	8006aba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a0e:	d11f      	bne.n	8006a50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	2101      	movs	r1, #1
 8006a62:	fa01 f303 	lsl.w	r3, r1, r3
 8006a66:	041b      	lsls	r3, r3, #16
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a70:	4013      	ands	r3, r2
 8006a72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	2101      	movs	r1, #1
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a94:	4013      	ands	r3, r2
 8006a96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	0159      	lsls	r1, r3, #5
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	440b      	add	r3, r1
 8006aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <USB_DeactivateEndpoint+0x1b4>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	ec337800 	.word	0xec337800
 8006acc:	eff37800 	.word	0xeff37800

08006ad0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	f040 8128 	bne.w	8006d3e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d132      	bne.n	8006b5c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	0cdb      	lsrs	r3, r3, #19
 8006b56:	04db      	lsls	r3, r3, #19
 8006b58:	6113      	str	r3, [r2, #16]
 8006b5a:	e092      	b.n	8006c82 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b76:	0cdb      	lsrs	r3, r3, #19
 8006b78:	04db      	lsls	r3, r3, #19
 8006b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11a      	bne.n	8006bdc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d903      	bls.n	8006bba <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bd8:	6113      	str	r3, [r2, #16]
 8006bda:	e01b      	b.n	8006c14 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6919      	ldr	r1, [r3, #16]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	440b      	add	r3, r1
 8006bf4:	1e59      	subs	r1, r3, #1
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bfe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c00:	4b8d      	ldr	r3, [pc, #564]	; (8006e38 <USB_EPStartXfer+0x368>)
 8006c02:	400b      	ands	r3, r1
 8006c04:	6939      	ldr	r1, [r7, #16]
 8006c06:	0148      	lsls	r0, r1, #5
 8006c08:	6979      	ldr	r1, [r7, #20]
 8006c0a:	4401      	add	r1, r0
 8006c0c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c10:	4313      	orrs	r3, r2
 8006c12:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2a:	6939      	ldr	r1, [r7, #16]
 8006c2c:	0148      	lsls	r0, r1, #5
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	4401      	add	r1, r0
 8006c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d11f      	bne.n	8006c82 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c60:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c80:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ca0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d015      	beq.n	8006cd6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8139 	beq.w	8006f26 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	6979      	ldr	r1, [r7, #20]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	634b      	str	r3, [r1, #52]	; 0x34
 8006cd4:	e127      	b.n	8006f26 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d110      	bne.n	8006d08 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	e00f      	b.n	8006d28 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d26:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68d9      	ldr	r1, [r3, #12]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f9a5 	bl	8007086 <USB_WritePacket>
 8006d3c:	e0f3      	b.n	8006f26 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d58:	0cdb      	lsrs	r3, r3, #19
 8006d5a:	04db      	lsls	r3, r3, #19
 8006d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d80:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d12f      	bne.n	8006de8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	0148      	lsls	r0, r1, #5
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	4401      	add	r1, r0
 8006dbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006de4:	6113      	str	r3, [r2, #16]
 8006de6:	e061      	b.n	8006eac <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d125      	bne.n	8006e3c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e06:	6939      	ldr	r1, [r7, #16]
 8006e08:	0148      	lsls	r0, r1, #5
 8006e0a:	6979      	ldr	r1, [r7, #20]
 8006e0c:	4401      	add	r1, r0
 8006e0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e12:	4313      	orrs	r3, r2
 8006e14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e34:	6113      	str	r3, [r2, #16]
 8006e36:	e039      	b.n	8006eac <USB_EPStartXfer+0x3dc>
 8006e38:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	89fa      	ldrh	r2, [r7, #14]
 8006e58:	fb03 f202 	mul.w	r2, r3, r2
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	89fb      	ldrh	r3, [r7, #14]
 8006e70:	04d9      	lsls	r1, r3, #19
 8006e72:	4b2f      	ldr	r3, [pc, #188]	; (8006f30 <USB_EPStartXfer+0x460>)
 8006e74:	400b      	ands	r3, r1
 8006e76:	6939      	ldr	r1, [r7, #16]
 8006e78:	0148      	lsls	r0, r1, #5
 8006e7a:	6979      	ldr	r1, [r7, #20]
 8006e7c:	4401      	add	r1, r0
 8006e7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e82:	4313      	orrs	r3, r2
 8006e84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9c:	6939      	ldr	r1, [r7, #16]
 8006e9e:	0148      	lsls	r0, r1, #5
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	791b      	ldrb	r3, [r3, #4]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d128      	bne.n	8006f06 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d110      	bne.n	8006ee6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	e00f      	b.n	8006f06 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	1ff80000 	.word	0x1ff80000

08006f34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d14a      	bne.n	8006fe8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f6a:	f040 8086 	bne.w	800707a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d902      	bls.n	8006fcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fca:	e056      	b.n	800707a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe4:	d0e7      	beq.n	8006fb6 <USB_EPStopXfer+0x82>
 8006fe6:	e048      	b.n	800707a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007000:	d13b      	bne.n	800707a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007024:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007048:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f242 7210 	movw	r2, #10000	; 0x2710
 8007056:	4293      	cmp	r3, r2
 8007058:	d902      	bls.n	8007060 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
          break;
 800705e:	e00c      	b.n	800707a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007078:	d0e7      	beq.n	800704a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
}
 800707c:	4618      	mov	r0, r3
 800707e:	371c      	adds	r7, #28
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr

08007086 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007086:	b480      	push	{r7}
 8007088:	b089      	sub	sp, #36	; 0x24
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	460b      	mov	r3, r1
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	4613      	mov	r3, r2
 800709a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80070a4:	88bb      	ldrh	r3, [r7, #4]
 80070a6:	3303      	adds	r3, #3
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e018      	b.n	80070e4 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	031a      	lsls	r2, r3, #12
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	461a      	mov	r2, r3
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6013      	str	r3, [r2, #0]
    pSrc++;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	3301      	adds	r3, #1
 80070ca:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3301      	adds	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	3301      	adds	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3301      	adds	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3e2      	bcc.n	80070b2 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b08b      	sub	sp, #44	; 0x2c
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800710e:	88fb      	ldrh	r3, [r7, #6]
 8007110:	089b      	lsrs	r3, r3, #2
 8007112:	b29b      	uxth	r3, r3
 8007114:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800711e:	2300      	movs	r3, #0
 8007120:	623b      	str	r3, [r7, #32]
 8007122:	e014      	b.n	800714e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	3301      	adds	r3, #1
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	3301      	adds	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	3301      	adds	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	3301      	adds	r3, #1
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	3301      	adds	r3, #1
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	6a3a      	ldr	r2, [r7, #32]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	429a      	cmp	r2, r3
 8007154:	d3e6      	bcc.n	8007124 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007156:	8bfb      	ldrh	r3, [r7, #30]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01e      	beq.n	800719a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	461a      	mov	r2, r3
 8007168:	f107 0310 	add.w	r3, r7, #16
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	b2da      	uxtb	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	701a      	strb	r2, [r3, #0]
      i++;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	3301      	adds	r3, #1
 8007186:	623b      	str	r3, [r7, #32]
      pDest++;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	3301      	adds	r3, #1
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	3b01      	subs	r3, #1
 8007192:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007194:	8bfb      	ldrh	r3, [r7, #30]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1ea      	bne.n	8007170 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800719c:	4618      	mov	r0, r3
 800719e:	372c      	adds	r7, #44	; 0x2c
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d12c      	bne.n	800721c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	db12      	blt.n	80071fa <USB_EPSetStall+0x54>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00f      	beq.n	80071fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	0151      	lsls	r1, r2, #5
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	440a      	add	r2, r1
 80071f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	e02b      	b.n	8007274 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	db12      	blt.n	8007254 <USB_EPSetStall+0xae>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00f      	beq.n	8007254 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800724e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007252:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007272:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d128      	bne.n	80072ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	791b      	ldrb	r3, [r3, #4]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d003      	beq.n	80072cc <USB_EPClearStall+0x4c>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	791b      	ldrb	r3, [r3, #4]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d138      	bne.n	800733e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	0151      	lsls	r1, r2, #5
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	440a      	add	r2, r1
 80072e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e027      	b.n	800733e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	440a      	add	r2, r1
 8007304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800730c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	791b      	ldrb	r3, [r3, #4]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d003      	beq.n	800731e <USB_EPClearStall+0x9e>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d10f      	bne.n	800733e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007368:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800736c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c2:	f023 0302 	bic.w	r3, r3, #2
 80073c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr

080073d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007402:	f043 0302 	orr.w	r3, r3, #2
 8007406:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4013      	ands	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800742c:	68fb      	ldr	r3, [r7, #12]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4013      	ands	r3, r2
 800745a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	0c1b      	lsrs	r3, r3, #16
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	b29b      	uxth	r3, r3
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr

0800749c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074ca:	68bb      	ldr	r3, [r7, #8]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	01db      	lsls	r3, r3, #7
 8007508:	b2db      	uxtb	r3, r3
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4013      	ands	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007524:	68bb      	ldr	r3, [r7, #8]
}
 8007526:	4618      	mov	r0, r3
 8007528:	371c      	adds	r7, #28
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr

08007530 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0301 	and.w	r3, r3, #1
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
	...

08007590 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	333c      	adds	r3, #60	; 0x3c
 80075a2:	3304      	adds	r3, #4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a1c      	ldr	r2, [pc, #112]	; (800761c <USB_EP0_OutStart+0x8c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d90a      	bls.n	80075c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c0:	d101      	bne.n	80075c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e024      	b.n	8007610 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	461a      	mov	r2, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f4:	f043 0318 	orr.w	r3, r3, #24
 80075f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007608:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800760c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	4f54300a 	.word	0x4f54300a

08007620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a12      	ldr	r2, [pc, #72]	; (8007680 <USB_CoreReset+0x60>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e01b      	b.n	8007676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	daf2      	bge.n	800762c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	f043 0201 	orr.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <USB_CoreReset+0x60>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e006      	b.n	8007676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b01      	cmp	r3, #1
 8007672:	d0f0      	beq.n	8007656 <USB_CoreReset+0x36>

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	00030d40 	.word	0x00030d40

08007684 <USBD_CDC_Init>:
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7c1b      	ldrb	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d115      	bne.n	80076c8 <USBD_CDC_Init+0x44>
 800769c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a0:	2202      	movs	r2, #2
 80076a2:	2181      	movs	r1, #129	; 0x81
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 ff22 	bl	80094ee <USBD_LL_OpenEP>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80076b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b4:	2202      	movs	r2, #2
 80076b6:	2101      	movs	r1, #1
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 ff18 	bl	80094ee <USBD_LL_OpenEP>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80076c6:	e012      	b.n	80076ee <USBD_CDC_Init+0x6a>
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	2202      	movs	r2, #2
 80076cc:	2181      	movs	r1, #129	; 0x81
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 ff0d 	bl	80094ee <USBD_LL_OpenEP>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	2202      	movs	r2, #2
 80076de:	2101      	movs	r1, #1
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 ff04 	bl	80094ee <USBD_LL_OpenEP>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80076ee:	2308      	movs	r3, #8
 80076f0:	2203      	movs	r2, #3
 80076f2:	2182      	movs	r1, #130	; 0x82
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 fefa 	bl	80094ee <USBD_LL_OpenEP>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	641a      	str	r2, [r3, #64]	; 0x40
 8007700:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007704:	f002 f81a 	bl	800973c <USBD_static_malloc>
 8007708:	4602      	mov	r2, r0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <USBD_CDC_Init+0x9c>
 800771a:	2301      	movs	r3, #1
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	e026      	b.n	800776e <USBD_CDC_Init+0xea>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	60bb      	str	r3, [r7, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4798      	blx	r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7c1b      	ldrb	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <USBD_CDC_Init+0xda>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 ffb9 	bl	80096ce <USBD_LL_PrepareReceive>
 800775c:	e007      	b.n	800776e <USBD_CDC_Init+0xea>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007764:	2340      	movs	r3, #64	; 0x40
 8007766:	2101      	movs	r1, #1
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 ffb0 	bl	80096ce <USBD_LL_PrepareReceive>
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_CDC_DeInit>:
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
 8007788:	2181      	movs	r1, #129	; 0x81
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fed5 	bl	800953a <USBD_LL_CloseEP>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c
 8007796:	2101      	movs	r1, #1
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fece 	bl	800953a <USBD_LL_CloseEP>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80077a6:	2182      	movs	r1, #130	; 0x82
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 fec6 	bl	800953a <USBD_LL_CloseEP>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <USBD_CDC_DeInit+0x64>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4798      	blx	r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 ffc0 	bl	8009754 <USBD_static_free>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_CDC_Setup>:
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	2300      	movs	r3, #0
 80077fe:	81bb      	strh	r3, [r7, #12]
 8007800:	2300      	movs	r3, #0
 8007802:	75fb      	strb	r3, [r7, #23]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780c:	2b00      	cmp	r3, #0
 800780e:	d039      	beq.n	8007884 <USBD_CDC_Setup+0x9e>
 8007810:	2b20      	cmp	r3, #32
 8007812:	d17f      	bne.n	8007914 <USBD_CDC_Setup+0x12e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d029      	beq.n	8007870 <USBD_CDC_Setup+0x8a>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b25b      	sxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	da11      	bge.n	800784a <USBD_CDC_Setup+0x64>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	7850      	ldrb	r0, [r2, #1]
 8007832:	6939      	ldr	r1, [r7, #16]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	88d2      	ldrh	r2, [r2, #6]
 8007838:	4798      	blx	r3
 800783a:	6939      	ldr	r1, [r7, #16]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	88db      	ldrh	r3, [r3, #6]
 8007840:	461a      	mov	r2, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fa41 	bl	8008cca <USBD_CtlSendData>
 8007848:	e06b      	b.n	8007922 <USBD_CDC_Setup+0x13c>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785a      	ldrb	r2, [r3, #1]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8007860:	6939      	ldr	r1, [r7, #16]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88db      	ldrh	r3, [r3, #6]
 8007866:	461a      	mov	r2, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fa5c 	bl	8008d26 <USBD_CtlPrepareRx>
 800786e:	e058      	b.n	8007922 <USBD_CDC_Setup+0x13c>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	7850      	ldrb	r0, [r2, #1]
 800787c:	2200      	movs	r2, #0
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	4798      	blx	r3
 8007882:	e04e      	b.n	8007922 <USBD_CDC_Setup+0x13c>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b0b      	cmp	r3, #11
 800788a:	d02e      	beq.n	80078ea <USBD_CDC_Setup+0x104>
 800788c:	2b0b      	cmp	r3, #11
 800788e:	dc38      	bgt.n	8007902 <USBD_CDC_Setup+0x11c>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <USBD_CDC_Setup+0xb4>
 8007894:	2b0a      	cmp	r3, #10
 8007896:	d014      	beq.n	80078c2 <USBD_CDC_Setup+0xdc>
 8007898:	e033      	b.n	8007902 <USBD_CDC_Setup+0x11c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d107      	bne.n	80078b4 <USBD_CDC_Setup+0xce>
 80078a4:	f107 030c 	add.w	r3, r7, #12
 80078a8:	2202      	movs	r2, #2
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 fa0c 	bl	8008cca <USBD_CtlSendData>
 80078b2:	e02e      	b.n	8007912 <USBD_CDC_Setup+0x12c>
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f99d 	bl	8008bf6 <USBD_CtlError>
 80078bc:	2302      	movs	r3, #2
 80078be:	75fb      	strb	r3, [r7, #23]
 80078c0:	e027      	b.n	8007912 <USBD_CDC_Setup+0x12c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d107      	bne.n	80078dc <USBD_CDC_Setup+0xf6>
 80078cc:	f107 030f 	add.w	r3, r7, #15
 80078d0:	2201      	movs	r2, #1
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 f9f8 	bl	8008cca <USBD_CtlSendData>
 80078da:	e01a      	b.n	8007912 <USBD_CDC_Setup+0x12c>
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f989 	bl	8008bf6 <USBD_CtlError>
 80078e4:	2302      	movs	r3, #2
 80078e6:	75fb      	strb	r3, [r7, #23]
 80078e8:	e013      	b.n	8007912 <USBD_CDC_Setup+0x12c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d00d      	beq.n	8007910 <USBD_CDC_Setup+0x12a>
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 f97d 	bl	8008bf6 <USBD_CtlError>
 80078fc:	2302      	movs	r3, #2
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e006      	b.n	8007910 <USBD_CDC_Setup+0x12a>
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 f976 	bl	8008bf6 <USBD_CtlError>
 800790a:	2302      	movs	r3, #2
 800790c:	75fb      	strb	r3, [r7, #23]
 800790e:	e000      	b.n	8007912 <USBD_CDC_Setup+0x12c>
 8007910:	bf00      	nop
 8007912:	e006      	b.n	8007922 <USBD_CDC_Setup+0x13c>
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f96d 	bl	8008bf6 <USBD_CtlError>
 800791c:	2302      	movs	r3, #2
 800791e:	75fb      	strb	r3, [r7, #23]
 8007920:	bf00      	nop
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_CDC_DataIn>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d03a      	beq.n	80079c8 <USBD_CDC_DataIn+0x9c>
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	331c      	adds	r3, #28
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d029      	beq.n	80079bc <USBD_CDC_DataIn+0x90>
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	331c      	adds	r3, #28
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	78f9      	ldrb	r1, [r7, #3]
 800797c:	68b8      	ldr	r0, [r7, #8]
 800797e:	460b      	mov	r3, r1
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	440b      	add	r3, r1
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4403      	add	r3, r0
 8007988:	3344      	adds	r3, #68	; 0x44
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d110      	bne.n	80079bc <USBD_CDC_DataIn+0x90>
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	331c      	adds	r3, #28
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	78f9      	ldrb	r1, [r7, #3]
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fe67 	bl	8009688 <USBD_LL_Transmit>
 80079ba:	e003      	b.n	80079c4 <USBD_CDC_DataIn+0x98>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80079c4:	2300      	movs	r3, #0
 80079c6:	e000      	b.n	80079ca <USBD_CDC_DataIn+0x9e>
 80079c8:	2302      	movs	r3, #2
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_CDC_DataOut>:
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 fe92 	bl	8009714 <USBD_LL_GetRxDataSize>
 80079f0:	4602      	mov	r2, r0
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <USBD_CDC_DataOut+0x4c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a16:	4611      	mov	r1, r2
 8007a18:	4798      	blx	r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e000      	b.n	8007a20 <USBD_CDC_DataOut+0x4e>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_CDC_EP0_RxReady>:
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <USBD_CDC_EP0_RxReady+0x46>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a48:	2bff      	cmp	r3, #255	; 0xff
 8007a4a:	d010      	beq.n	8007a6e <USBD_CDC_EP0_RxReady+0x46>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 8007a62:	b292      	uxth	r2, r2
 8007a64:	4798      	blx	r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	; 0xff
 8007a6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_CDC_GetFSCfgDesc>:
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2243      	movs	r2, #67	; 0x43
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <USBD_CDC_GetFSCfgDesc+0x1c>)
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000094 	.word	0x20000094

08007a98 <USBD_CDC_GetHSCfgDesc>:
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2243      	movs	r2, #67	; 0x43
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <USBD_CDC_GetHSCfgDesc+0x1c>)
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000050 	.word	0x20000050

08007ab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2243      	movs	r2, #67	; 0x43
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	200000d8 	.word	0x200000d8

08007ad8 <USBD_CDC_GetDeviceQualifierDescriptor>:
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000000c 	.word	0x2000000c

08007af8 <USBD_CDC_RegisterInterface>:
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	2302      	movs	r3, #2
 8007b04:	73fb      	strb	r3, [r7, #15]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <USBD_CDC_RegisterInterface+0x20>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <USBD_CDC_SetTxBuffer>:
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	371c      	adds	r7, #28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <USBD_CDC_SetRxBuffer>:
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007b70:	2300      	movs	r3, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <USBD_CDC_TransmitPacket>:
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01c      	beq.n	8007bd0 <USBD_CDC_TransmitPacket+0x54>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d115      	bne.n	8007bcc <USBD_CDC_TransmitPacket+0x50>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	2181      	movs	r1, #129	; 0x81
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fd60 	bl	8009688 <USBD_LL_Transmit>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e002      	b.n	8007bd2 <USBD_CDC_TransmitPacket+0x56>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <USBD_CDC_TransmitPacket+0x56>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CDC_ReceivePacket>:
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d017      	beq.n	8007c24 <USBD_CDC_ReceivePacket+0x4a>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7c1b      	ldrb	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <USBD_CDC_ReceivePacket+0x36>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c06:	2101      	movs	r1, #1
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fd60 	bl	80096ce <USBD_LL_PrepareReceive>
 8007c0e:	e007      	b.n	8007c20 <USBD_CDC_ReceivePacket+0x46>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c16:	2340      	movs	r3, #64	; 0x40
 8007c18:	2101      	movs	r1, #1
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fd57 	bl	80096ce <USBD_LL_PrepareReceive>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <USBD_CDC_ReceivePacket+0x4c>
 8007c24:	2302      	movs	r3, #2
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_Init>:
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	71fb      	strb	r3, [r7, #7]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <USBD_Init+0x18>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e01a      	b.n	8007c7c <USBD_Init+0x4e>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <USBD_Init+0x2a>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <USBD_Init+0x38>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	79fa      	ldrb	r2, [r7, #7]
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f001 fbdb 	bl	8009430 <USBD_LL_Init>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_RegisterClass>:
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <USBD_RegisterClass+0x22>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e001      	b.n	8007caa <USBD_RegisterClass+0x26>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	73fb      	strb	r3, [r7, #15]
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USBD_Start>:
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fbfa 	bl	80094b8 <USBD_LL_Start>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_RunTestMode>:
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_SetClassConfig>:
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
 8007cee:	2302      	movs	r3, #2
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <USBD_SetClassConfig+0x34>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <USBD_SetClassConfig+0x34>
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_ClrClassConfig>:
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_SetupStage>:
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 ff10 	bl	8008b7e <USBD_ParseSetupRequest>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d016      	beq.n	8007db0 <USBD_LL_SetupStage+0x6a>
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d81c      	bhi.n	8007dc0 <USBD_LL_SetupStage+0x7a>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <USBD_LL_SetupStage+0x4a>
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d008      	beq.n	8007da0 <USBD_LL_SetupStage+0x5a>
 8007d8e:	e017      	b.n	8007dc0 <USBD_LL_SetupStage+0x7a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa03 	bl	80081a4 <USBD_StdDevReq>
 8007d9e:	e01a      	b.n	8007dd6 <USBD_LL_SetupStage+0x90>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fa65 	bl	8008278 <USBD_StdItfReq>
 8007dae:	e012      	b.n	8007dd6 <USBD_LL_SetupStage+0x90>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 faa5 	bl	8008308 <USBD_StdEPReq>
 8007dbe:	e00a      	b.n	8007dd6 <USBD_LL_SetupStage+0x90>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fbd2 	bl	8009578 <USBD_LL_StallEP>
 8007dd4:	bf00      	nop
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_LL_DataOutStage>:
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	460b      	mov	r3, r1
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	72fb      	strb	r3, [r7, #11]
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d14b      	bne.n	8007e8c <USBD_LL_DataOutStage+0xac>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d134      	bne.n	8007e70 <USBD_LL_DataOutStage+0x90>
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d919      	bls.n	8007e46 <USBD_LL_DataOutStage+0x66>
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	60da      	str	r2, [r3, #12]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d203      	bcs.n	8007e34 <USBD_LL_DataOutStage+0x54>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	e002      	b.n	8007e3a <USBD_LL_DataOutStage+0x5a>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 ff8f 	bl	8008d62 <USBD_CtlContinueRx>
 8007e44:	e038      	b.n	8007eb8 <USBD_LL_DataOutStage+0xd8>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <USBD_LL_DataOutStage+0x88>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d105      	bne.n	8007e68 <USBD_LL_DataOutStage+0x88>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	4798      	blx	r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 ff8c 	bl	8008d86 <USBD_CtlSendStatus>
 8007e6e:	e023      	b.n	8007eb8 <USBD_LL_DataOutStage+0xd8>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d11e      	bne.n	8007eb8 <USBD_LL_DataOutStage+0xd8>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8007e82:	2100      	movs	r1, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fb77 	bl	8009578 <USBD_LL_StallEP>
 8007e8a:	e015      	b.n	8007eb8 <USBD_LL_DataOutStage+0xd8>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00d      	beq.n	8007eb4 <USBD_LL_DataOutStage+0xd4>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d108      	bne.n	8007eb4 <USBD_LL_DataOutStage+0xd4>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	7afa      	ldrb	r2, [r7, #11]
 8007eac:	4611      	mov	r1, r2
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	4798      	blx	r3
 8007eb2:	e001      	b.n	8007eb8 <USBD_LL_DataOutStage+0xd8>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e000      	b.n	8007eba <USBD_LL_DataOutStage+0xda>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_DataInStage>:
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	607a      	str	r2, [r7, #4]
 8007ece:	72fb      	strb	r3, [r7, #11]
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d17f      	bne.n	8007fd6 <USBD_LL_DataInStage+0x114>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d15c      	bne.n	8007fa0 <USBD_LL_DataInStage+0xde>
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d915      	bls.n	8007f1e <USBD_LL_DataInStage+0x5c>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fef9 	bl	8008d02 <USBD_CtlContinueSendData>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2200      	movs	r2, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f001 fbd9 	bl	80096ce <USBD_LL_PrepareReceive>
 8007f1c:	e04e      	b.n	8007fbc <USBD_LL_DataInStage+0xfa>
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	6912      	ldr	r2, [r2, #16]
 8007f26:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f2a:	fb01 f202 	mul.w	r2, r1, r2
 8007f2e:	1a9b      	subs	r3, r3, r2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11c      	bne.n	8007f6e <USBD_LL_DataInStage+0xac>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d316      	bcc.n	8007f6e <USBD_LL_DataInStage+0xac>
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20f      	bcs.n	8007f6e <USBD_LL_DataInStage+0xac>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2100      	movs	r1, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fed5 	bl	8008d02 <USBD_CtlContinueSendData>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8007f60:	2300      	movs	r3, #0
 8007f62:	2200      	movs	r2, #0
 8007f64:	2100      	movs	r1, #0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f001 fbb1 	bl	80096ce <USBD_LL_PrepareReceive>
 8007f6c:	e026      	b.n	8007fbc <USBD_LL_DataInStage+0xfa>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <USBD_LL_DataInStage+0xce>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d105      	bne.n	8007f90 <USBD_LL_DataInStage+0xce>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	4798      	blx	r3
 8007f90:	2180      	movs	r1, #128	; 0x80
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f001 faf0 	bl	8009578 <USBD_LL_StallEP>
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 ff07 	bl	8008dac <USBD_CtlReceiveStatus>
 8007f9e:	e00d      	b.n	8007fbc <USBD_LL_DataInStage+0xfa>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d004      	beq.n	8007fb4 <USBD_LL_DataInStage+0xf2>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d103      	bne.n	8007fbc <USBD_LL_DataInStage+0xfa>
 8007fb4:	2180      	movs	r1, #128	; 0x80
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f001 fade 	bl	8009578 <USBD_LL_StallEP>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d11d      	bne.n	8008002 <USBD_LL_DataInStage+0x140>
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fe81 	bl	8007cce <USBD_RunTestMode>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fd4:	e015      	b.n	8008002 <USBD_LL_DataInStage+0x140>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00d      	beq.n	8007ffe <USBD_LL_DataInStage+0x13c>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d108      	bne.n	8007ffe <USBD_LL_DataInStage+0x13c>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	7afa      	ldrb	r2, [r7, #11]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	4798      	blx	r3
 8007ffc:	e001      	b.n	8008002 <USBD_LL_DataInStage+0x140>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e000      	b.n	8008004 <USBD_LL_DataInStage+0x142>
 8008002:	2300      	movs	r3, #0
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_Reset>:
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	2340      	movs	r3, #64	; 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fa67 	bl	80094ee <USBD_LL_OpenEP>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2240      	movs	r2, #64	; 0x40
 800802c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	2200      	movs	r2, #0
 8008034:	2180      	movs	r1, #128	; 0x80
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fa59 	bl	80094ee <USBD_LL_OpenEP>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	619a      	str	r2, [r3, #24]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2240      	movs	r2, #64	; 0x40
 8008046:	625a      	str	r2, [r3, #36]	; 0x24
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <USBD_LL_Reset+0x78>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6852      	ldr	r2, [r2, #4]
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	4611      	mov	r1, r2
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	4798      	blx	r3
 8008084:	2300      	movs	r3, #0
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_SetSpeed>:
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	741a      	strb	r2, [r3, #16]
 80080a0:	2300      	movs	r3, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr

080080ac <USBD_LL_Suspend>:
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2204      	movs	r2, #4
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80080c8:	2300      	movs	r3, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr

080080d4 <USBD_LL_Resume>:
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d105      	bne.n	80080f2 <USBD_LL_Resume+0x1e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80080f2:	2300      	movs	r3, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <USBD_LL_SOF>:
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	2b03      	cmp	r3, #3
 800810e:	d10b      	bne.n	8008128 <USBD_LL_SOF+0x2a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <USBD_LL_SOF+0x2a>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	2300      	movs	r3, #0
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_LL_IsoINIncomplete>:
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
 800813e:	2300      	movs	r3, #0
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr

0800814a <USBD_LL_IsoOUTIncomplete>:
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
 8008156:	2300      	movs	r3, #0
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <USBD_LL_DevConnected>:
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	2300      	movs	r3, #0
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <USBD_LL_DevDisconnected>:
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6852      	ldr	r2, [r2, #4]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	4611      	mov	r1, r2
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	2300      	movs	r3, #0
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_StdDevReq>:
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d005      	beq.n	80081ca <USBD_StdDevReq+0x26>
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d84f      	bhi.n	8008262 <USBD_StdDevReq+0xbe>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <USBD_StdDevReq+0x36>
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d14b      	bne.n	8008262 <USBD_StdDevReq+0xbe>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
 80081d8:	e048      	b.n	800826c <USBD_StdDevReq+0xc8>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	2b09      	cmp	r3, #9
 80081e0:	d839      	bhi.n	8008256 <USBD_StdDevReq+0xb2>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <USBD_StdDevReq+0x44>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008239 	.word	0x08008239
 80081ec:	0800824d 	.word	0x0800824d
 80081f0:	08008257 	.word	0x08008257
 80081f4:	08008243 	.word	0x08008243
 80081f8:	08008257 	.word	0x08008257
 80081fc:	0800821b 	.word	0x0800821b
 8008200:	08008211 	.word	0x08008211
 8008204:	08008257 	.word	0x08008257
 8008208:	0800822f 	.word	0x0800822f
 800820c:	08008225 	.word	0x08008225
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9dc 	bl	80085d0 <USBD_GetDescriptor>
 8008218:	e022      	b.n	8008260 <USBD_StdDevReq+0xbc>
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fb3f 	bl	80088a0 <USBD_SetAddress>
 8008222:	e01d      	b.n	8008260 <USBD_StdDevReq+0xbc>
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fb7e 	bl	8008928 <USBD_SetConfig>
 800822c:	e018      	b.n	8008260 <USBD_StdDevReq+0xbc>
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc07 	bl	8008a44 <USBD_GetConfig>
 8008236:	e013      	b.n	8008260 <USBD_StdDevReq+0xbc>
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc37 	bl	8008aae <USBD_GetStatus>
 8008240:	e00e      	b.n	8008260 <USBD_StdDevReq+0xbc>
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fc65 	bl	8008b14 <USBD_SetFeature>
 800824a:	e009      	b.n	8008260 <USBD_StdDevReq+0xbc>
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fc74 	bl	8008b3c <USBD_ClrFeature>
 8008254:	e004      	b.n	8008260 <USBD_StdDevReq+0xbc>
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fccc 	bl	8008bf6 <USBD_CtlError>
 800825e:	bf00      	nop
 8008260:	e004      	b.n	800826c <USBD_StdDevReq+0xc8>
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fcc6 	bl	8008bf6 <USBD_CtlError>
 800826a:	bf00      	nop
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop

08008278 <USBD_StdItfReq>:
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d005      	beq.n	800829e <USBD_StdItfReq+0x26>
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	d82e      	bhi.n	80082f4 <USBD_StdItfReq+0x7c>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <USBD_StdItfReq+0x26>
 800829a:	2b20      	cmp	r3, #32
 800829c:	d12a      	bne.n	80082f4 <USBD_StdItfReq+0x7c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a4:	3b01      	subs	r3, #1
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d81d      	bhi.n	80082e6 <USBD_StdItfReq+0x6e>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	889b      	ldrh	r3, [r3, #4]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d813      	bhi.n	80082dc <USBD_StdItfReq+0x64>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	88db      	ldrh	r3, [r3, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d110      	bne.n	80082f0 <USBD_StdItfReq+0x78>
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10d      	bne.n	80082f0 <USBD_StdItfReq+0x78>
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fd56 	bl	8008d86 <USBD_CtlSendStatus>
 80082da:	e009      	b.n	80082f0 <USBD_StdItfReq+0x78>
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc89 	bl	8008bf6 <USBD_CtlError>
 80082e4:	e004      	b.n	80082f0 <USBD_StdItfReq+0x78>
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fc84 	bl	8008bf6 <USBD_CtlError>
 80082ee:	e000      	b.n	80082f2 <USBD_StdItfReq+0x7a>
 80082f0:	bf00      	nop
 80082f2:	e004      	b.n	80082fe <USBD_StdItfReq+0x86>
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fc7d 	bl	8008bf6 <USBD_CtlError>
 80082fc:	bf00      	nop
 80082fe:	2300      	movs	r3, #0
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_StdEPReq>:
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	73bb      	strb	r3, [r7, #14]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d007      	beq.n	8008338 <USBD_StdEPReq+0x30>
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	f200 8146 	bhi.w	80085ba <USBD_StdEPReq+0x2b2>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <USBD_StdEPReq+0x40>
 8008332:	2b20      	cmp	r3, #32
 8008334:	f040 8141 	bne.w	80085ba <USBD_StdEPReq+0x2b2>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
 8008346:	e13d      	b.n	80085c4 <USBD_StdEPReq+0x2bc>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008350:	2b20      	cmp	r3, #32
 8008352:	d10a      	bne.n	800836a <USBD_StdEPReq+0x62>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	e12d      	b.n	80085c6 <USBD_StdEPReq+0x2be>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d007      	beq.n	8008382 <USBD_StdEPReq+0x7a>
 8008372:	2b03      	cmp	r3, #3
 8008374:	f300 811b 	bgt.w	80085ae <USBD_StdEPReq+0x2a6>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d072      	beq.n	8008462 <USBD_StdEPReq+0x15a>
 800837c:	2b01      	cmp	r3, #1
 800837e:	d03a      	beq.n	80083f6 <USBD_StdEPReq+0xee>
 8008380:	e115      	b.n	80085ae <USBD_StdEPReq+0x2a6>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	2b02      	cmp	r3, #2
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0x8a>
 800838c:	2b03      	cmp	r3, #3
 800838e:	d015      	beq.n	80083bc <USBD_StdEPReq+0xb4>
 8008390:	e02b      	b.n	80083ea <USBD_StdEPReq+0xe2>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <USBD_StdEPReq+0xaa>
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2b80      	cmp	r3, #128	; 0x80
 800839c:	d009      	beq.n	80083b2 <USBD_StdEPReq+0xaa>
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f8e8 	bl	8009578 <USBD_LL_StallEP>
 80083a8:	2180      	movs	r1, #128	; 0x80
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 f8e4 	bl	8009578 <USBD_LL_StallEP>
 80083b0:	e020      	b.n	80083f4 <USBD_StdEPReq+0xec>
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc1e 	bl	8008bf6 <USBD_CtlError>
 80083ba:	e01b      	b.n	80083f4 <USBD_StdEPReq+0xec>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10e      	bne.n	80083e2 <USBD_StdEPReq+0xda>
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <USBD_StdEPReq+0xda>
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b80      	cmp	r3, #128	; 0x80
 80083ce:	d008      	beq.n	80083e2 <USBD_StdEPReq+0xda>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	88db      	ldrh	r3, [r3, #6]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <USBD_StdEPReq+0xda>
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f8cb 	bl	8009578 <USBD_LL_StallEP>
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fccf 	bl	8008d86 <USBD_CtlSendStatus>
 80083e8:	e004      	b.n	80083f4 <USBD_StdEPReq+0xec>
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc02 	bl	8008bf6 <USBD_CtlError>
 80083f2:	bf00      	nop
 80083f4:	e0e0      	b.n	80085b8 <USBD_StdEPReq+0x2b0>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d002      	beq.n	8008406 <USBD_StdEPReq+0xfe>
 8008400:	2b03      	cmp	r3, #3
 8008402:	d015      	beq.n	8008430 <USBD_StdEPReq+0x128>
 8008404:	e026      	b.n	8008454 <USBD_StdEPReq+0x14c>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00c      	beq.n	8008426 <USBD_StdEPReq+0x11e>
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d009      	beq.n	8008426 <USBD_StdEPReq+0x11e>
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f001 f8ae 	bl	8009578 <USBD_LL_StallEP>
 800841c:	2180      	movs	r1, #128	; 0x80
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 f8aa 	bl	8009578 <USBD_LL_StallEP>
 8008424:	e01c      	b.n	8008460 <USBD_StdEPReq+0x158>
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbe4 	bl	8008bf6 <USBD_CtlError>
 800842e:	e017      	b.n	8008460 <USBD_StdEPReq+0x158>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	885b      	ldrh	r3, [r3, #2]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d112      	bne.n	800845e <USBD_StdEPReq+0x156>
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <USBD_StdEPReq+0x144>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 f8b5 	bl	80095b6 <USBD_LL_ClearStallEP>
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc9a 	bl	8008d86 <USBD_CtlSendStatus>
 8008452:	e004      	b.n	800845e <USBD_StdEPReq+0x156>
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fbcd 	bl	8008bf6 <USBD_CtlError>
 800845c:	e000      	b.n	8008460 <USBD_StdEPReq+0x158>
 800845e:	bf00      	nop
 8008460:	e0aa      	b.n	80085b8 <USBD_StdEPReq+0x2b0>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	2b02      	cmp	r3, #2
 800846a:	d002      	beq.n	8008472 <USBD_StdEPReq+0x16a>
 800846c:	2b03      	cmp	r3, #3
 800846e:	d032      	beq.n	80084d6 <USBD_StdEPReq+0x1ce>
 8008470:	e097      	b.n	80085a2 <USBD_StdEPReq+0x29a>
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <USBD_StdEPReq+0x180>
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d004      	beq.n	8008488 <USBD_StdEPReq+0x180>
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbb8 	bl	8008bf6 <USBD_CtlError>
 8008486:	e091      	b.n	80085ac <USBD_StdEPReq+0x2a4>
 8008488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800848c:	2b00      	cmp	r3, #0
 800848e:	da0b      	bge.n	80084a8 <USBD_StdEPReq+0x1a0>
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	3310      	adds	r3, #16
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	4413      	add	r3, r2
 80084a4:	3304      	adds	r3, #4
 80084a6:	e00b      	b.n	80084c0 <USBD_StdEPReq+0x1b8>
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	4413      	add	r3, r2
 80084be:	3304      	adds	r3, #4
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2202      	movs	r2, #2
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fbfb 	bl	8008cca <USBD_CtlSendData>
 80084d4:	e06a      	b.n	80085ac <USBD_StdEPReq+0x2a4>
 80084d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da11      	bge.n	8008502 <USBD_StdEPReq+0x1fa>
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	f003 020f 	and.w	r2, r3, #15
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	440b      	add	r3, r1
 80084f0:	3318      	adds	r3, #24
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d117      	bne.n	8008528 <USBD_StdEPReq+0x220>
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fb7b 	bl	8008bf6 <USBD_CtlError>
 8008500:	e054      	b.n	80085ac <USBD_StdEPReq+0x2a4>
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	f003 020f 	and.w	r2, r3, #15
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	440b      	add	r3, r1
 8008514:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <USBD_StdEPReq+0x220>
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fb68 	bl	8008bf6 <USBD_CtlError>
 8008526:	e041      	b.n	80085ac <USBD_StdEPReq+0x2a4>
 8008528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852c:	2b00      	cmp	r3, #0
 800852e:	da0b      	bge.n	8008548 <USBD_StdEPReq+0x240>
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	3310      	adds	r3, #16
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	3304      	adds	r3, #4
 8008546:	e00b      	b.n	8008560 <USBD_StdEPReq+0x258>
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4413      	add	r3, r2
 800855e:	3304      	adds	r3, #4
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <USBD_StdEPReq+0x266>
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b80      	cmp	r3, #128	; 0x80
 800856c:	d103      	bne.n	8008576 <USBD_StdEPReq+0x26e>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e00e      	b.n	8008594 <USBD_StdEPReq+0x28c>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f83a 	bl	80095f4 <USBD_LL_IsStallEP>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <USBD_StdEPReq+0x286>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2201      	movs	r2, #1
 800858a:	601a      	str	r2, [r3, #0]
 800858c:	e002      	b.n	8008594 <USBD_StdEPReq+0x28c>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2202      	movs	r2, #2
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fb95 	bl	8008cca <USBD_CtlSendData>
 80085a0:	e004      	b.n	80085ac <USBD_StdEPReq+0x2a4>
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb26 	bl	8008bf6 <USBD_CtlError>
 80085aa:	bf00      	nop
 80085ac:	e004      	b.n	80085b8 <USBD_StdEPReq+0x2b0>
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fb20 	bl	8008bf6 <USBD_CtlError>
 80085b6:	bf00      	nop
 80085b8:	e004      	b.n	80085c4 <USBD_StdEPReq+0x2bc>
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fb1a 	bl	8008bf6 <USBD_CtlError>
 80085c2:	bf00      	nop
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <USBD_GetDescriptor>:
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
 80085da:	2300      	movs	r3, #0
 80085dc:	813b      	strh	r3, [r7, #8]
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	2300      	movs	r3, #0
 80085e4:	72fb      	strb	r3, [r7, #11]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	885b      	ldrh	r3, [r3, #2]
 80085ea:	0a1b      	lsrs	r3, r3, #8
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b06      	cmp	r3, #6
 80085f2:	f200 8128 	bhi.w	8008846 <USBD_GetDescriptor+0x276>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <USBD_GetDescriptor+0x2c>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008631 	.word	0x08008631
 8008604:	08008671 	.word	0x08008671
 8008608:	08008847 	.word	0x08008847
 800860c:	08008847 	.word	0x08008847
 8008610:	080087e7 	.word	0x080087e7
 8008614:	08008813 	.word	0x08008813
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	e112      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7c1b      	ldrb	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10d      	bne.n	8008654 <USBD_GetDescriptor+0x84>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f107 0208 	add.w	r2, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	e100      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f107 0208 	add.w	r2, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	2202      	movs	r2, #2
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e0f2      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b05      	cmp	r3, #5
 8008678:	f200 80ac 	bhi.w	80087d4 <USBD_GetDescriptor+0x204>
 800867c:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <USBD_GetDescriptor+0xb4>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	0800869d 	.word	0x0800869d
 8008688:	080086d1 	.word	0x080086d1
 800868c:	08008705 	.word	0x08008705
 8008690:	08008739 	.word	0x08008739
 8008694:	0800876d 	.word	0x0800876d
 8008698:	080087a1 	.word	0x080087a1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_GetDescriptor+0xf0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	e091      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa97 	bl	8008bf6 <USBD_CtlError>
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
 80086ce:	e089      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <USBD_GetDescriptor+0x124>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	e077      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa7d 	bl	8008bf6 <USBD_CtlError>
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	3301      	adds	r3, #1
 8008700:	72fb      	strb	r3, [r7, #11]
 8008702:	e06f      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <USBD_GetDescriptor+0x158>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7c12      	ldrb	r2, [r2, #16]
 800871c:	f107 0108 	add.w	r1, r7, #8
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	e05d      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa63 	bl	8008bf6 <USBD_CtlError>
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
 8008736:	e055      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <USBD_GetDescriptor+0x18c>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	7c12      	ldrb	r2, [r2, #16]
 8008750:	f107 0108 	add.w	r1, r7, #8
 8008754:	4610      	mov	r0, r2
 8008756:	4798      	blx	r3
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	e043      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa49 	bl	8008bf6 <USBD_CtlError>
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
 800876a:	e03b      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00b      	beq.n	8008790 <USBD_GetDescriptor+0x1c0>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	f107 0108 	add.w	r1, r7, #8
 8008788:	4610      	mov	r0, r2
 800878a:	4798      	blx	r3
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	e029      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa2f 	bl	8008bf6 <USBD_CtlError>
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	3301      	adds	r3, #1
 800879c:	72fb      	strb	r3, [r7, #11]
 800879e:	e021      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_GetDescriptor+0x1f4>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	7c12      	ldrb	r2, [r2, #16]
 80087b8:	f107 0108 	add.w	r1, r7, #8
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	e00f      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa15 	bl	8008bf6 <USBD_CtlError>
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	3301      	adds	r3, #1
 80087d0:	72fb      	strb	r3, [r7, #11]
 80087d2:	e007      	b.n	80087e4 <USBD_GetDescriptor+0x214>
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa0d 	bl	8008bf6 <USBD_CtlError>
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
 80087e2:	e038      	b.n	8008856 <USBD_GetDescriptor+0x286>
 80087e4:	e037      	b.n	8008856 <USBD_GetDescriptor+0x286>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7c1b      	ldrb	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d109      	bne.n	8008802 <USBD_GetDescriptor+0x232>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f6:	f107 0208 	add.w	r2, r7, #8
 80087fa:	4610      	mov	r0, r2
 80087fc:	4798      	blx	r3
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	e029      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f9f6 	bl	8008bf6 <USBD_CtlError>
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	3301      	adds	r3, #1
 800880e:	72fb      	strb	r3, [r7, #11]
 8008810:	e021      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7c1b      	ldrb	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10d      	bne.n	8008836 <USBD_GetDescriptor+0x266>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f107 0208 	add.w	r2, r7, #8
 8008826:	4610      	mov	r0, r2
 8008828:	4798      	blx	r3
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	2207      	movs	r2, #7
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e00f      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f9dc 	bl	8008bf6 <USBD_CtlError>
 800883e:	7afb      	ldrb	r3, [r7, #11]
 8008840:	3301      	adds	r3, #1
 8008842:	72fb      	strb	r3, [r7, #11]
 8008844:	e007      	b.n	8008856 <USBD_GetDescriptor+0x286>
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9d4 	bl	8008bf6 <USBD_CtlError>
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	3301      	adds	r3, #1
 8008852:	72fb      	strb	r3, [r7, #11]
 8008854:	bf00      	nop
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11c      	bne.n	8008896 <USBD_GetDescriptor+0x2c6>
 800885c:	893b      	ldrh	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d011      	beq.n	8008886 <USBD_GetDescriptor+0x2b6>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <USBD_GetDescriptor+0x2b6>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88da      	ldrh	r2, [r3, #6]
 800886e:	893b      	ldrh	r3, [r7, #8]
 8008870:	4293      	cmp	r3, r2
 8008872:	bf28      	it	cs
 8008874:	4613      	movcs	r3, r2
 8008876:	b29b      	uxth	r3, r3
 8008878:	813b      	strh	r3, [r7, #8]
 800887a:	893b      	ldrh	r3, [r7, #8]
 800887c:	461a      	mov	r2, r3
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa22 	bl	8008cca <USBD_CtlSendData>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	88db      	ldrh	r3, [r3, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <USBD_GetDescriptor+0x2c8>
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa79 	bl	8008d86 <USBD_CtlSendStatus>
 8008894:	e000      	b.n	8008898 <USBD_GetDescriptor+0x2c8>
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop

080088a0 <USBD_SetAddress>:
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	889b      	ldrh	r3, [r3, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d130      	bne.n	8008914 <USBD_SetAddress+0x74>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d12c      	bne.n	8008914 <USBD_SetAddress+0x74>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	2b7f      	cmp	r3, #127	; 0x7f
 80088c0:	d828      	bhi.n	8008914 <USBD_SetAddress+0x74>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088cc:	73fb      	strb	r3, [r7, #15]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d104      	bne.n	80088e2 <USBD_SetAddress+0x42>
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f98b 	bl	8008bf6 <USBD_CtlError>
 80088e0:	e01d      	b.n	800891e <USBD_SetAddress+0x7e>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7bfa      	ldrb	r2, [r7, #15]
 80088e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 feab 	bl	800964a <USBD_LL_SetUSBAddress>
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fa46 	bl	8008d86 <USBD_CtlSendStatus>
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d004      	beq.n	800890a <USBD_SetAddress+0x6a>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008908:	e009      	b.n	800891e <USBD_SetAddress+0x7e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008912:	e004      	b.n	800891e <USBD_SetAddress+0x7e>
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f96d 	bl	8008bf6 <USBD_CtlError>
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <USBD_SetConfig>:
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	885b      	ldrh	r3, [r3, #2]
 8008936:	b2da      	uxtb	r2, r3
 8008938:	4b41      	ldr	r3, [pc, #260]	; (8008a40 <USBD_SetConfig+0x118>)
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <USBD_SetConfig+0x118>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d904      	bls.n	800894e <USBD_SetConfig+0x26>
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f955 	bl	8008bf6 <USBD_CtlError>
 800894c:	e075      	b.n	8008a3a <USBD_SetConfig+0x112>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008954:	2b02      	cmp	r3, #2
 8008956:	d002      	beq.n	800895e <USBD_SetConfig+0x36>
 8008958:	2b03      	cmp	r3, #3
 800895a:	d023      	beq.n	80089a4 <USBD_SetConfig+0x7c>
 800895c:	e062      	b.n	8008a24 <USBD_SetConfig+0xfc>
 800895e:	4b38      	ldr	r3, [pc, #224]	; (8008a40 <USBD_SetConfig+0x118>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01a      	beq.n	800899c <USBD_SetConfig+0x74>
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <USBD_SetConfig+0x118>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	605a      	str	r2, [r3, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2203      	movs	r2, #3
 8008974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008978:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <USBD_SetConfig+0x118>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff f9af 	bl	8007ce2 <USBD_SetClassConfig>
 8008984:	4603      	mov	r3, r0
 8008986:	2b02      	cmp	r3, #2
 8008988:	d104      	bne.n	8008994 <USBD_SetConfig+0x6c>
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f932 	bl	8008bf6 <USBD_CtlError>
 8008992:	e052      	b.n	8008a3a <USBD_SetConfig+0x112>
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f9f6 	bl	8008d86 <USBD_CtlSendStatus>
 800899a:	e04e      	b.n	8008a3a <USBD_SetConfig+0x112>
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f9f2 	bl	8008d86 <USBD_CtlSendStatus>
 80089a2:	e04a      	b.n	8008a3a <USBD_SetConfig+0x112>
 80089a4:	4b26      	ldr	r3, [pc, #152]	; (8008a40 <USBD_SetConfig+0x118>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d112      	bne.n	80089d2 <USBD_SetConfig+0xaa>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <USBD_SetConfig+0x118>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <USBD_SetConfig+0x118>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff f9ab 	bl	8007d20 <USBD_ClrClassConfig>
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f9db 	bl	8008d86 <USBD_CtlSendStatus>
 80089d0:	e033      	b.n	8008a3a <USBD_SetConfig+0x112>
 80089d2:	4b1b      	ldr	r3, [pc, #108]	; (8008a40 <USBD_SetConfig+0x118>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d01d      	beq.n	8008a1c <USBD_SetConfig+0xf4>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff f999 	bl	8007d20 <USBD_ClrClassConfig>
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <USBD_SetConfig+0x118>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <USBD_SetConfig+0x118>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff f96f 	bl	8007ce2 <USBD_SetClassConfig>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d104      	bne.n	8008a14 <USBD_SetConfig+0xec>
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f8f2 	bl	8008bf6 <USBD_CtlError>
 8008a12:	e012      	b.n	8008a3a <USBD_SetConfig+0x112>
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9b6 	bl	8008d86 <USBD_CtlSendStatus>
 8008a1a:	e00e      	b.n	8008a3a <USBD_SetConfig+0x112>
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f9b2 	bl	8008d86 <USBD_CtlSendStatus>
 8008a22:	e00a      	b.n	8008a3a <USBD_SetConfig+0x112>
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8e5 	bl	8008bf6 <USBD_CtlError>
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <USBD_SetConfig+0x118>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7ff f974 	bl	8007d20 <USBD_ClrClassConfig>
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000558 	.word	0x20000558

08008a44 <USBD_GetConfig>:
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d004      	beq.n	8008a60 <USBD_GetConfig+0x1c>
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8cc 	bl	8008bf6 <USBD_CtlError>
 8008a5e:	e022      	b.n	8008aa6 <USBD_GetConfig+0x62>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	dc02      	bgt.n	8008a70 <USBD_GetConfig+0x2c>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc03      	bgt.n	8008a76 <USBD_GetConfig+0x32>
 8008a6e:	e015      	b.n	8008a9c <USBD_GetConfig+0x58>
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d00b      	beq.n	8008a8c <USBD_GetConfig+0x48>
 8008a74:	e012      	b.n	8008a9c <USBD_GetConfig+0x58>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	609a      	str	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	2201      	movs	r2, #1
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f920 	bl	8008cca <USBD_CtlSendData>
 8008a8a:	e00c      	b.n	8008aa6 <USBD_GetConfig+0x62>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	2201      	movs	r2, #1
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f918 	bl	8008cca <USBD_CtlSendData>
 8008a9a:	e004      	b.n	8008aa6 <USBD_GetConfig+0x62>
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f8a9 	bl	8008bf6 <USBD_CtlError>
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_GetStatus>:
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d81e      	bhi.n	8008b02 <USBD_GetStatus+0x54>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	88db      	ldrh	r3, [r3, #6]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d004      	beq.n	8008ad6 <USBD_GetStatus+0x28>
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f891 	bl	8008bf6 <USBD_CtlError>
 8008ad4:	e01a      	b.n	8008b0c <USBD_GetStatus+0x5e>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	60da      	str	r2, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <USBD_GetStatus+0x44>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f043 0202 	orr.w	r2, r3, #2
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	60da      	str	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	330c      	adds	r3, #12
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8e5 	bl	8008cca <USBD_CtlSendData>
 8008b00:	e004      	b.n	8008b0c <USBD_GetStatus+0x5e>
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f876 	bl	8008bf6 <USBD_CtlError>
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_SetFeature>:
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d106      	bne.n	8008b34 <USBD_SetFeature+0x20>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f929 	bl	8008d86 <USBD_CtlSendStatus>
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_ClrFeature>:
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d80b      	bhi.n	8008b6a <USBD_ClrFeature+0x2e>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d10c      	bne.n	8008b74 <USBD_ClrFeature+0x38>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f90f 	bl	8008d86 <USBD_CtlSendStatus>
 8008b68:	e004      	b.n	8008b74 <USBD_ClrFeature+0x38>
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f842 	bl	8008bf6 <USBD_CtlError>
 8008b72:	e000      	b.n	8008b76 <USBD_ClrFeature+0x3a>
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_ParseSetupRequest>:
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	785a      	ldrb	r2, [r3, #1]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	705a      	strb	r2, [r3, #1]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	3303      	adds	r3, #3
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4413      	add	r3, r2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	805a      	strh	r2, [r3, #2]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	3305      	adds	r3, #5
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	809a      	strh	r2, [r3, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	3306      	adds	r3, #6
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	3307      	adds	r3, #7
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	80da      	strh	r2, [r3, #6]
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr

08008bf6 <USBD_CtlError>:
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b082      	sub	sp, #8
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
 8008c00:	2180      	movs	r1, #128	; 0x80
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fcb8 	bl	8009578 <USBD_LL_StallEP>
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fcb4 	bl	8009578 <USBD_LL_StallEP>
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_GetString>:
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	2300      	movs	r3, #0
 8008c26:	75fb      	strb	r3, [r7, #23]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d032      	beq.n	8008c94 <USBD_GetString+0x7c>
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 f834 	bl	8008c9c <USBD_GetLen>
 8008c34:	4603      	mov	r3, r0
 8008c36:	3301      	adds	r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	801a      	strh	r2, [r3, #0]
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	75fa      	strb	r2, [r7, #23]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	75fa      	strb	r2, [r7, #23]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4413      	add	r3, r2
 8008c60:	2203      	movs	r2, #3
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e012      	b.n	8008c8c <USBD_GetString+0x74>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	60fa      	str	r2, [r7, #12]
 8008c6c:	7dfa      	ldrb	r2, [r7, #23]
 8008c6e:	1c51      	adds	r1, r2, #1
 8008c70:	75f9      	strb	r1, [r7, #23]
 8008c72:	4611      	mov	r1, r2
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	440a      	add	r2, r1
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	7013      	strb	r3, [r2, #0]
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	75fa      	strb	r2, [r7, #23]
 8008c82:	461a      	mov	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	4413      	add	r3, r2
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e8      	bne.n	8008c66 <USBD_GetString+0x4e>
 8008c94:	bf00      	nop
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_GetLen>:
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
 8008ca8:	e005      	b.n	8008cb6 <USBD_GetLen+0x1a>
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	3301      	adds	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f5      	bne.n	8008caa <USBD_GetLen+0xe>
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr

08008cca <USBD_CtlSendData>:
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	80fb      	strh	r3, [r7, #6]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	61da      	str	r2, [r3, #28]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	621a      	str	r2, [r3, #32]
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fcc8 	bl	8009688 <USBD_LL_Transmit>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlContinueSendData>:
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	80fb      	strh	r3, [r7, #6]
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fcb6 	bl	8009688 <USBD_LL_Transmit>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_CtlPrepareRx>:
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	4613      	mov	r3, r2
 8008d32:	80fb      	strh	r3, [r7, #6]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2203      	movs	r2, #3
 8008d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008d3c:	88fa      	ldrh	r2, [r7, #6]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fcbb 	bl	80096ce <USBD_LL_PrepareReceive>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_CtlContinueRx>:
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	80fb      	strh	r3, [r7, #6]
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	2100      	movs	r1, #0
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fca9 	bl	80096ce <USBD_LL_PrepareReceive>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CtlSendStatus>:
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2204      	movs	r2, #4
 8008d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008d96:	2300      	movs	r3, #0
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc73 	bl	8009688 <USBD_LL_Transmit>
 8008da2:	2300      	movs	r3, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_CtlReceiveStatus>:
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2205      	movs	r2, #5
 8008db8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fc83 	bl	80096ce <USBD_LL_PrepareReceive>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USB_Transmit>:
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	807b      	strh	r3, [r7, #2]
 8008dde:	887b      	ldrh	r3, [r7, #2]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f8c2 	bl	8008f6c <CDC_Transmit_FS>
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <MX_USB_DEVICE_Init>:
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	2200      	movs	r2, #0
 8008df6:	4912      	ldr	r1, [pc, #72]	; (8008e40 <MX_USB_DEVICE_Init+0x50>)
 8008df8:	4812      	ldr	r0, [pc, #72]	; (8008e44 <MX_USB_DEVICE_Init+0x54>)
 8008dfa:	f7fe ff18 	bl	8007c2e <USBD_Init>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <MX_USB_DEVICE_Init+0x18>
 8008e04:	f7f9 f9b4 	bl	8002170 <Error_Handler>
 8008e08:	490f      	ldr	r1, [pc, #60]	; (8008e48 <MX_USB_DEVICE_Init+0x58>)
 8008e0a:	480e      	ldr	r0, [pc, #56]	; (8008e44 <MX_USB_DEVICE_Init+0x54>)
 8008e0c:	f7fe ff3a 	bl	8007c84 <USBD_RegisterClass>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <MX_USB_DEVICE_Init+0x2a>
 8008e16:	f7f9 f9ab 	bl	8002170 <Error_Handler>
 8008e1a:	490c      	ldr	r1, [pc, #48]	; (8008e4c <MX_USB_DEVICE_Init+0x5c>)
 8008e1c:	4809      	ldr	r0, [pc, #36]	; (8008e44 <MX_USB_DEVICE_Init+0x54>)
 8008e1e:	f7fe fe6b 	bl	8007af8 <USBD_CDC_RegisterInterface>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <MX_USB_DEVICE_Init+0x3c>
 8008e28:	f7f9 f9a2 	bl	8002170 <Error_Handler>
 8008e2c:	4805      	ldr	r0, [pc, #20]	; (8008e44 <MX_USB_DEVICE_Init+0x54>)
 8008e2e:	f7fe ff42 	bl	8007cb6 <USBD_Start>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <MX_USB_DEVICE_Init+0x4c>
 8008e38:	f7f9 f99a 	bl	8002170 <Error_Handler>
 8008e3c:	bf00      	nop
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	2000012c 	.word	0x2000012c
 8008e44:	2000055c 	.word	0x2000055c
 8008e48:	20000018 	.word	0x20000018
 8008e4c:	2000011c 	.word	0x2000011c

08008e50 <CDC_Init_FS>:
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	2200      	movs	r2, #0
 8008e56:	4905      	ldr	r1, [pc, #20]	; (8008e6c <CDC_Init_FS+0x1c>)
 8008e58:	4805      	ldr	r0, [pc, #20]	; (8008e70 <CDC_Init_FS+0x20>)
 8008e5a:	f7fe fe63 	bl	8007b24 <USBD_CDC_SetTxBuffer>
 8008e5e:	4905      	ldr	r1, [pc, #20]	; (8008e74 <CDC_Init_FS+0x24>)
 8008e60:	4803      	ldr	r0, [pc, #12]	; (8008e70 <CDC_Init_FS+0x20>)
 8008e62:	f7fe fe78 	bl	8007b56 <USBD_CDC_SetRxBuffer>
 8008e66:	2300      	movs	r3, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000c20 	.word	0x20000c20
 8008e70:	2000055c 	.word	0x2000055c
 8008e74:	20000820 	.word	0x20000820

08008e78 <CDC_DeInit_FS>:
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bc80      	pop	{r7}
 8008e84:	4770      	bx	lr
	...

08008e88 <CDC_Control_FS>:
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	6039      	str	r1, [r7, #0]
 8008e92:	71fb      	strb	r3, [r7, #7]
 8008e94:	4613      	mov	r3, r2
 8008e96:	80bb      	strh	r3, [r7, #4]
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	2b23      	cmp	r3, #35	; 0x23
 8008e9c:	d84a      	bhi.n	8008f34 <CDC_Control_FS+0xac>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <CDC_Control_FS+0x1c>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008f35 	.word	0x08008f35
 8008ea8:	08008f35 	.word	0x08008f35
 8008eac:	08008f35 	.word	0x08008f35
 8008eb0:	08008f35 	.word	0x08008f35
 8008eb4:	08008f35 	.word	0x08008f35
 8008eb8:	08008f35 	.word	0x08008f35
 8008ebc:	08008f35 	.word	0x08008f35
 8008ec0:	08008f35 	.word	0x08008f35
 8008ec4:	08008f35 	.word	0x08008f35
 8008ec8:	08008f35 	.word	0x08008f35
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008f35 	.word	0x08008f35
 8008ed4:	08008f35 	.word	0x08008f35
 8008ed8:	08008f35 	.word	0x08008f35
 8008edc:	08008f35 	.word	0x08008f35
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f35 	.word	0x08008f35
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f35 	.word	0x08008f35
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f35 	.word	0x08008f35
 8008efc:	08008f35 	.word	0x08008f35
 8008f00:	08008f35 	.word	0x08008f35
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f35 	.word	0x08008f35
 8008f0c:	08008f35 	.word	0x08008f35
 8008f10:	08008f35 	.word	0x08008f35
 8008f14:	08008f35 	.word	0x08008f35
 8008f18:	08008f35 	.word	0x08008f35
 8008f1c:	08008f35 	.word	0x08008f35
 8008f20:	08008f35 	.word	0x08008f35
 8008f24:	08008f35 	.word	0x08008f35
 8008f28:	08008f35 	.word	0x08008f35
 8008f2c:	08008f35 	.word	0x08008f35
 8008f30:	08008f35 	.word	0x08008f35
 8008f34:	bf00      	nop
 8008f36:	2300      	movs	r3, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop

08008f44 <CDC_Receive_FS>:
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	4805      	ldr	r0, [pc, #20]	; (8008f68 <CDC_Receive_FS+0x24>)
 8008f52:	f7fe fe00 	bl	8007b56 <USBD_CDC_SetRxBuffer>
 8008f56:	4804      	ldr	r0, [pc, #16]	; (8008f68 <CDC_Receive_FS+0x24>)
 8008f58:	f7fe fe3f 	bl	8007bda <USBD_CDC_ReceivePacket>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000055c 	.word	0x2000055c

08008f6c <CDC_Transmit_FS>:
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	807b      	strh	r3, [r7, #2]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
 8008f7c:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <CDC_Transmit_FS+0x48>)
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <CDC_Transmit_FS+0x26>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e00b      	b.n	8008faa <CDC_Transmit_FS+0x3e>
 8008f92:	887b      	ldrh	r3, [r7, #2]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4806      	ldr	r0, [pc, #24]	; (8008fb4 <CDC_Transmit_FS+0x48>)
 8008f9a:	f7fe fdc3 	bl	8007b24 <USBD_CDC_SetTxBuffer>
 8008f9e:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <CDC_Transmit_FS+0x48>)
 8008fa0:	f7fe fdec 	bl	8007b7c <USBD_CDC_TransmitPacket>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000055c 	.word	0x2000055c

08008fb8 <USBD_FS_DeviceDescriptor>:
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2212      	movs	r2, #18
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	4b03      	ldr	r3, [pc, #12]	; (8008fd8 <USBD_FS_DeviceDescriptor+0x20>)
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000148 	.word	0x20000148

08008fdc <USBD_FS_LangIDStrDescriptor>:
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	71fb      	strb	r3, [r7, #7]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2204      	movs	r2, #4
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <USBD_FS_LangIDStrDescriptor+0x20>)
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc80      	pop	{r7}
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	2000015c 	.word	0x2000015c

08009000 <USBD_FS_ProductStrDescriptor>:
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	6039      	str	r1, [r7, #0]
 800900a:	71fb      	strb	r3, [r7, #7]
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <USBD_FS_ProductStrDescriptor+0x1e>
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4907      	ldr	r1, [pc, #28]	; (8009034 <USBD_FS_ProductStrDescriptor+0x34>)
 8009016:	4808      	ldr	r0, [pc, #32]	; (8009038 <USBD_FS_ProductStrDescriptor+0x38>)
 8009018:	f7ff fdfe 	bl	8008c18 <USBD_GetString>
 800901c:	e004      	b.n	8009028 <USBD_FS_ProductStrDescriptor+0x28>
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4904      	ldr	r1, [pc, #16]	; (8009034 <USBD_FS_ProductStrDescriptor+0x34>)
 8009022:	4805      	ldr	r0, [pc, #20]	; (8009038 <USBD_FS_ProductStrDescriptor+0x38>)
 8009024:	f7ff fdf8 	bl	8008c18 <USBD_GetString>
 8009028:	4b02      	ldr	r3, [pc, #8]	; (8009034 <USBD_FS_ProductStrDescriptor+0x34>)
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20001020 	.word	0x20001020
 8009038:	0800c8dc 	.word	0x0800c8dc

0800903c <USBD_FS_ManufacturerStrDescriptor>:
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	4904      	ldr	r1, [pc, #16]	; (800905c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800904c:	4804      	ldr	r0, [pc, #16]	; (8009060 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800904e:	f7ff fde3 	bl	8008c18 <USBD_GetString>
 8009052:	4b02      	ldr	r3, [pc, #8]	; (800905c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20001020 	.word	0x20001020
 8009060:	0800c8f4 	.word	0x0800c8f4

08009064 <USBD_FS_SerialStrDescriptor>:
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	221a      	movs	r2, #26
 8009074:	801a      	strh	r2, [r3, #0]
 8009076:	f000 f843 	bl	8009100 <Get_SerialNum>
 800907a:	4b02      	ldr	r3, [pc, #8]	; (8009084 <USBD_FS_SerialStrDescriptor+0x20>)
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	20000160 	.word	0x20000160

08009088 <USBD_FS_ConfigStrDescriptor>:
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	71fb      	strb	r3, [r7, #7]
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d105      	bne.n	80090a6 <USBD_FS_ConfigStrDescriptor+0x1e>
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4907      	ldr	r1, [pc, #28]	; (80090bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800909e:	4808      	ldr	r0, [pc, #32]	; (80090c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090a0:	f7ff fdba 	bl	8008c18 <USBD_GetString>
 80090a4:	e004      	b.n	80090b0 <USBD_FS_ConfigStrDescriptor+0x28>
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090aa:	4805      	ldr	r0, [pc, #20]	; (80090c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090ac:	f7ff fdb4 	bl	8008c18 <USBD_GetString>
 80090b0:	4b02      	ldr	r3, [pc, #8]	; (80090bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20001020 	.word	0x20001020
 80090c0:	0800c908 	.word	0x0800c908

080090c4 <USBD_FS_InterfaceStrDescriptor>:
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	71fb      	strb	r3, [r7, #7]
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d105      	bne.n	80090e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4907      	ldr	r1, [pc, #28]	; (80090f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090da:	4808      	ldr	r0, [pc, #32]	; (80090fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090dc:	f7ff fd9c 	bl	8008c18 <USBD_GetString>
 80090e0:	e004      	b.n	80090ec <USBD_FS_InterfaceStrDescriptor+0x28>
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4904      	ldr	r1, [pc, #16]	; (80090f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e8:	f7ff fd96 	bl	8008c18 <USBD_GetString>
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001020 	.word	0x20001020
 80090fc:	0800c914 	.word	0x0800c914

08009100 <Get_SerialNum>:
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <Get_SerialNum+0x44>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <Get_SerialNum+0x48>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	4b0e      	ldr	r3, [pc, #56]	; (800914c <Get_SerialNum+0x4c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <Get_SerialNum+0x3a>
 8009126:	2208      	movs	r2, #8
 8009128:	4909      	ldr	r1, [pc, #36]	; (8009150 <Get_SerialNum+0x50>)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f814 	bl	8009158 <IntToUnicode>
 8009130:	2204      	movs	r2, #4
 8009132:	4908      	ldr	r1, [pc, #32]	; (8009154 <Get_SerialNum+0x54>)
 8009134:	68b8      	ldr	r0, [r7, #8]
 8009136:	f000 f80f 	bl	8009158 <IntToUnicode>
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	1ffff7e8 	.word	0x1ffff7e8
 8009148:	1ffff7ec 	.word	0x1ffff7ec
 800914c:	1ffff7f0 	.word	0x1ffff7f0
 8009150:	20000162 	.word	0x20000162
 8009154:	20000172 	.word	0x20000172

08009158 <IntToUnicode>:
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	71fb      	strb	r3, [r7, #7]
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]
 800916e:	e027      	b.n	80091c0 <IntToUnicode+0x68>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	0f1b      	lsrs	r3, r3, #28
 8009174:	2b09      	cmp	r3, #9
 8009176:	d80b      	bhi.n	8009190 <IntToUnicode+0x38>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0f1b      	lsrs	r3, r3, #28
 800917c:	b2da      	uxtb	r2, r3
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4619      	mov	r1, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	440b      	add	r3, r1
 8009188:	3230      	adds	r2, #48	; 0x30
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e00a      	b.n	80091a6 <IntToUnicode+0x4e>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	0f1b      	lsrs	r3, r3, #28
 8009194:	b2da      	uxtb	r2, r3
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4619      	mov	r1, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	440b      	add	r3, r1
 80091a0:	3237      	adds	r2, #55	; 0x37
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	3301      	adds	r3, #1
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	4413      	add	r3, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	3301      	adds	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]
 80091c0:	7dfa      	ldrb	r2, [r7, #23]
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d3d3      	bcc.n	8009170 <IntToUnicode+0x18>
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <HAL_PCD_MspInit>:
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	f107 0310 	add.w	r3, r7, #16
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	605a      	str	r2, [r3, #4]
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091f2:	d12c      	bne.n	800924e <HAL_PCD_MspInit+0x7a>
 80091f4:	4b18      	ldr	r3, [pc, #96]	; (8009258 <HAL_PCD_MspInit+0x84>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <HAL_PCD_MspInit+0x84>)
 80091fa:	f043 0304 	orr.w	r3, r3, #4
 80091fe:	6193      	str	r3, [r2, #24]
 8009200:	4b15      	ldr	r3, [pc, #84]	; (8009258 <HAL_PCD_MspInit+0x84>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009210:	613b      	str	r3, [r7, #16]
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	4619      	mov	r1, r3
 8009220:	480e      	ldr	r0, [pc, #56]	; (800925c <HAL_PCD_MspInit+0x88>)
 8009222:	f7f9 ff61 	bl	80030e8 <HAL_GPIO_Init>
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <HAL_PCD_MspInit+0x84>)
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	4a0b      	ldr	r2, [pc, #44]	; (8009258 <HAL_PCD_MspInit+0x84>)
 800922c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009230:	6153      	str	r3, [r2, #20]
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_PCD_MspInit+0x84>)
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800923a:	60bb      	str	r3, [r7, #8]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	2043      	movs	r0, #67	; 0x43
 8009244:	f7f9 ff19 	bl	800307a <HAL_NVIC_SetPriority>
 8009248:	2043      	movs	r0, #67	; 0x43
 800924a:	f7f9 ff32 	bl	80030b2 <HAL_NVIC_EnableIRQ>
 800924e:	bf00      	nop
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40021000 	.word	0x40021000
 800925c:	40010800 	.word	0x40010800

08009260 <HAL_PCD_SetupStageCallback>:
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fe fd65 	bl	8007d46 <USBD_LL_SetupStage>
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_PCD_DataOutStageCallback>:
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009296:	78fa      	ldrb	r2, [r7, #3]
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	4613      	mov	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	440b      	add	r3, r1
 80092a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7fe fd97 	bl	8007de0 <USBD_LL_DataOutStage>
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_PCD_DataInStageCallback>:
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 80092cc:	78fa      	ldrb	r2, [r7, #3]
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	3348      	adds	r3, #72	; 0x48
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	4619      	mov	r1, r3
 80092e2:	f7fe fdee 	bl	8007ec2 <USBD_LL_DataInStage>
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_PCD_SOFCallback>:
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fefe 	bl	80080fe <USBD_LL_SOF>
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_ResetCallback>:
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	2301      	movs	r3, #1
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d001      	beq.n	8009322 <HAL_PCD_ResetCallback+0x18>
 800931e:	f7f8 ff27 	bl	8002170 <Error_Handler>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe feae 	bl	800808e <USBD_LL_SetSpeed>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fe67 	bl	800800c <USBD_LL_Reset>
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_PCD_SuspendCallback>:
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fea8 	bl	80080ac <USBD_LL_Suspend>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	6013      	str	r3, [r2, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <HAL_PCD_SuspendCallback+0x40>
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <HAL_PCD_SuspendCallback+0x48>)
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	4a03      	ldr	r2, [pc, #12]	; (8009390 <HAL_PCD_SuspendCallback+0x48>)
 8009382:	f043 0306 	orr.w	r3, r3, #6
 8009386:	6113      	str	r3, [r2, #16]
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	e000ed00 	.word	0xe000ed00

08009394 <HAL_PCD_ResumeCallback>:
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fe96 	bl	80080d4 <USBD_LL_Resume>
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_PCD_ISOOUTIncompleteCallback>:
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe febf 	bl	800814a <USBD_LL_IsoOUTIncomplete>
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_PCD_ISOINIncompleteCallback>:
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fea1 	bl	8008132 <USBD_LL_IsoINIncomplete>
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_PCD_ConnectCallback>:
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe feab 	bl	8008162 <USBD_LL_DevConnected>
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_DisconnectCallback>:
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fea7 	bl	8008176 <USBD_LL_DevDisconnected>
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_LL_Init>:
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d133      	bne.n	80094a8 <USBD_LL_Init+0x78>
 8009440:	4a1c      	ldr	r2, [pc, #112]	; (80094b4 <USBD_LL_Init+0x84>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a1a      	ldr	r2, [pc, #104]	; (80094b4 <USBD_LL_Init+0x84>)
 800944c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8009450:	4b18      	ldr	r3, [pc, #96]	; (80094b4 <USBD_LL_Init+0x84>)
 8009452:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	4b16      	ldr	r3, [pc, #88]	; (80094b4 <USBD_LL_Init+0x84>)
 800945a:	2204      	movs	r2, #4
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	4b15      	ldr	r3, [pc, #84]	; (80094b4 <USBD_LL_Init+0x84>)
 8009460:	2202      	movs	r2, #2
 8009462:	611a      	str	r2, [r3, #16]
 8009464:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <USBD_LL_Init+0x84>)
 8009466:	2202      	movs	r2, #2
 8009468:	619a      	str	r2, [r3, #24]
 800946a:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <USBD_LL_Init+0x84>)
 800946c:	2200      	movs	r2, #0
 800946e:	61da      	str	r2, [r3, #28]
 8009470:	4b10      	ldr	r3, [pc, #64]	; (80094b4 <USBD_LL_Init+0x84>)
 8009472:	2200      	movs	r2, #0
 8009474:	621a      	str	r2, [r3, #32]
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <USBD_LL_Init+0x84>)
 8009478:	2201      	movs	r2, #1
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c
 800947c:	480d      	ldr	r0, [pc, #52]	; (80094b4 <USBD_LL_Init+0x84>)
 800947e:	f7f9 ffe8 	bl	8003452 <HAL_PCD_Init>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <USBD_LL_Init+0x5c>
 8009488:	f7f8 fe72 	bl	8002170 <Error_Handler>
 800948c:	2180      	movs	r1, #128	; 0x80
 800948e:	4809      	ldr	r0, [pc, #36]	; (80094b4 <USBD_LL_Init+0x84>)
 8009490:	f7fb f900 	bl	8004694 <HAL_PCDEx_SetRxFiFo>
 8009494:	2240      	movs	r2, #64	; 0x40
 8009496:	2100      	movs	r1, #0
 8009498:	4806      	ldr	r0, [pc, #24]	; (80094b4 <USBD_LL_Init+0x84>)
 800949a:	f7fb f8b5 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
 800949e:	2280      	movs	r2, #128	; 0x80
 80094a0:	2101      	movs	r1, #1
 80094a2:	4804      	ldr	r0, [pc, #16]	; (80094b4 <USBD_LL_Init+0x84>)
 80094a4:	f7fb f8b0 	bl	8004608 <HAL_PCDEx_SetTxFiFo>
 80094a8:	2300      	movs	r3, #0
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20001220 	.word	0x20001220

080094b8 <USBD_LL_Start>:
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	2300      	movs	r3, #0
 80094c6:	73bb      	strb	r3, [r7, #14]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fa f8dc 	bl	800368c <HAL_PCD_Start>
 80094d4:	4603      	mov	r3, r0
 80094d6:	73fb      	strb	r3, [r7, #15]
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f944 	bl	8009768 <USBD_Get_USB_Status>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_OpenEP>:
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	4603      	mov	r3, r0
 80094fe:	70fb      	strb	r3, [r7, #3]
 8009500:	460b      	mov	r3, r1
 8009502:	70bb      	strb	r3, [r7, #2]
 8009504:	4613      	mov	r3, r2
 8009506:	803b      	strh	r3, [r7, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
 800950c:	2300      	movs	r3, #0
 800950e:	73bb      	strb	r3, [r7, #14]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009516:	78bb      	ldrb	r3, [r7, #2]
 8009518:	883a      	ldrh	r2, [r7, #0]
 800951a:	78f9      	ldrb	r1, [r7, #3]
 800951c:	f7fa fd55 	bl	8003fca <HAL_PCD_EP_Open>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f91e 	bl	8009768 <USBD_Get_USB_Status>
 800952c:	4603      	mov	r3, r0
 800952e:	73bb      	strb	r3, [r7, #14]
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_CloseEP>:
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	460b      	mov	r3, r1
 8009544:	70fb      	strb	r3, [r7, #3]
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7fa fd9e 	bl	800409a <HAL_PCD_EP_Close>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f8ff 	bl	8009768 <USBD_Get_USB_Status>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_LL_StallEP>:
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	2300      	movs	r3, #0
 800958a:	73bb      	strb	r3, [r7, #14]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	f7fa fe43 	bl	8004222 <HAL_PCD_EP_SetStall>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f8e0 	bl	8009768 <USBD_Get_USB_Status>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73bb      	strb	r3, [r7, #14]
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_ClearStallEP>:
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]
 80095c6:	2300      	movs	r3, #0
 80095c8:	73bb      	strb	r3, [r7, #14]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa fe86 	bl	80042e6 <HAL_PCD_EP_ClrStall>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f8c1 	bl	8009768 <USBD_Get_USB_Status>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73bb      	strb	r3, [r7, #14]
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_LL_IsStallEP>:
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800960c:	2b00      	cmp	r3, #0
 800960e:	da0b      	bge.n	8009628 <USBD_LL_IsStallEP+0x34>
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	333e      	adds	r3, #62	; 0x3e
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	e00b      	b.n	8009640 <USBD_LL_IsStallEP+0x4c>
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	4613      	mov	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <USBD_LL_SetUSBAddress>:
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	2300      	movs	r3, #0
 800965c:	73bb      	strb	r3, [r7, #14]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f7fa fc89 	bl	8003f80 <HAL_PCD_SetAddress>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f877 	bl	8009768 <USBD_Get_USB_Status>
 800967a:	4603      	mov	r3, r0
 800967c:	73bb      	strb	r3, [r7, #14]
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_LL_Transmit>:
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	607a      	str	r2, [r7, #4]
 8009692:	461a      	mov	r2, r3
 8009694:	460b      	mov	r3, r1
 8009696:	72fb      	strb	r3, [r7, #11]
 8009698:	4613      	mov	r3, r2
 800969a:	813b      	strh	r3, [r7, #8]
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096aa:	893b      	ldrh	r3, [r7, #8]
 80096ac:	7af9      	ldrb	r1, [r7, #11]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f7fa fd86 	bl	80041c0 <HAL_PCD_EP_Transmit>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f854 	bl	8009768 <USBD_Get_USB_Status>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75bb      	strb	r3, [r7, #22]
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_PrepareReceive>:
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b086      	sub	sp, #24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	461a      	mov	r2, r3
 80096da:	460b      	mov	r3, r1
 80096dc:	72fb      	strb	r3, [r7, #11]
 80096de:	4613      	mov	r3, r2
 80096e0:	813b      	strh	r3, [r7, #8]
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	2300      	movs	r3, #0
 80096e8:	75bb      	strb	r3, [r7, #22]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096f0:	893b      	ldrh	r3, [r7, #8]
 80096f2:	7af9      	ldrb	r1, [r7, #11]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	f7fa fd1a 	bl	800412e <HAL_PCD_EP_Receive>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f831 	bl	8009768 <USBD_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	75bb      	strb	r3, [r7, #22]
 800970a:	7dbb      	ldrb	r3, [r7, #22]
 800970c:	4618      	mov	r0, r3
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_GetRxDataSize>:
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7fa fd31 	bl	8004192 <HAL_PCD_EP_GetRxCount>
 8009730:	4603      	mov	r3, r0
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <USBD_static_malloc>:
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <USBD_static_malloc+0x14>)
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	bc80      	pop	{r7}
 800974e:	4770      	bx	lr
 8009750:	20001724 	.word	0x20001724

08009754 <USBD_static_free>:
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr
	...

08009768 <USBD_Get_USB_Status>:
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	71fb      	strb	r3, [r7, #7]
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d817      	bhi.n	80097ac <USBD_Get_USB_Status+0x44>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <USBD_Get_USB_Status+0x1c>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	08009795 	.word	0x08009795
 8009788:	0800979b 	.word	0x0800979b
 800978c:	080097a1 	.word	0x080097a1
 8009790:	080097a7 	.word	0x080097a7
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
 8009798:	e00b      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
 800979a:	2302      	movs	r3, #2
 800979c:	73fb      	strb	r3, [r7, #15]
 800979e:	e008      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
 80097a4:	e005      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
 80097a6:	2302      	movs	r3, #2
 80097a8:	73fb      	strb	r3, [r7, #15]
 80097aa:	e002      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
 80097ac:	2302      	movs	r3, #2
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	bf00      	nop
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop

080097c0 <__cvt>:
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c6:	461f      	mov	r7, r3
 80097c8:	bfbb      	ittet	lt
 80097ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80097ce:	461f      	movlt	r7, r3
 80097d0:	2300      	movge	r3, #0
 80097d2:	232d      	movlt	r3, #45	; 0x2d
 80097d4:	b088      	sub	sp, #32
 80097d6:	4614      	mov	r4, r2
 80097d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80097dc:	7013      	strb	r3, [r2, #0]
 80097de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80097e4:	f023 0820 	bic.w	r8, r3, #32
 80097e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097ec:	d005      	beq.n	80097fa <__cvt+0x3a>
 80097ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097f2:	d100      	bne.n	80097f6 <__cvt+0x36>
 80097f4:	3501      	adds	r5, #1
 80097f6:	2302      	movs	r3, #2
 80097f8:	e000      	b.n	80097fc <__cvt+0x3c>
 80097fa:	2303      	movs	r3, #3
 80097fc:	aa07      	add	r2, sp, #28
 80097fe:	9204      	str	r2, [sp, #16]
 8009800:	aa06      	add	r2, sp, #24
 8009802:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009806:	e9cd 3500 	strd	r3, r5, [sp]
 800980a:	4622      	mov	r2, r4
 800980c:	463b      	mov	r3, r7
 800980e:	f000 fe0b 	bl	800a428 <_dtoa_r>
 8009812:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009816:	4606      	mov	r6, r0
 8009818:	d102      	bne.n	8009820 <__cvt+0x60>
 800981a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800981c:	07db      	lsls	r3, r3, #31
 800981e:	d522      	bpl.n	8009866 <__cvt+0xa6>
 8009820:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009824:	eb06 0905 	add.w	r9, r6, r5
 8009828:	d110      	bne.n	800984c <__cvt+0x8c>
 800982a:	7833      	ldrb	r3, [r6, #0]
 800982c:	2b30      	cmp	r3, #48	; 0x30
 800982e:	d10a      	bne.n	8009846 <__cvt+0x86>
 8009830:	2200      	movs	r2, #0
 8009832:	2300      	movs	r3, #0
 8009834:	4620      	mov	r0, r4
 8009836:	4639      	mov	r1, r7
 8009838:	f7f7 f922 	bl	8000a80 <__aeabi_dcmpeq>
 800983c:	b918      	cbnz	r0, 8009846 <__cvt+0x86>
 800983e:	f1c5 0501 	rsb	r5, r5, #1
 8009842:	f8ca 5000 	str.w	r5, [sl]
 8009846:	f8da 3000 	ldr.w	r3, [sl]
 800984a:	4499      	add	r9, r3
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	4620      	mov	r0, r4
 8009852:	4639      	mov	r1, r7
 8009854:	f7f7 f914 	bl	8000a80 <__aeabi_dcmpeq>
 8009858:	b108      	cbz	r0, 800985e <__cvt+0x9e>
 800985a:	f8cd 901c 	str.w	r9, [sp, #28]
 800985e:	2230      	movs	r2, #48	; 0x30
 8009860:	9b07      	ldr	r3, [sp, #28]
 8009862:	454b      	cmp	r3, r9
 8009864:	d307      	bcc.n	8009876 <__cvt+0xb6>
 8009866:	4630      	mov	r0, r6
 8009868:	9b07      	ldr	r3, [sp, #28]
 800986a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800986c:	1b9b      	subs	r3, r3, r6
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	b008      	add	sp, #32
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	1c59      	adds	r1, r3, #1
 8009878:	9107      	str	r1, [sp, #28]
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	e7f0      	b.n	8009860 <__cvt+0xa0>

0800987e <__exponent>:
 800987e:	4603      	mov	r3, r0
 8009880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009882:	2900      	cmp	r1, #0
 8009884:	f803 2b02 	strb.w	r2, [r3], #2
 8009888:	bfb6      	itet	lt
 800988a:	222d      	movlt	r2, #45	; 0x2d
 800988c:	222b      	movge	r2, #43	; 0x2b
 800988e:	4249      	neglt	r1, r1
 8009890:	2909      	cmp	r1, #9
 8009892:	7042      	strb	r2, [r0, #1]
 8009894:	dd2a      	ble.n	80098ec <__exponent+0x6e>
 8009896:	f10d 0207 	add.w	r2, sp, #7
 800989a:	4617      	mov	r7, r2
 800989c:	260a      	movs	r6, #10
 800989e:	fb91 f5f6 	sdiv	r5, r1, r6
 80098a2:	4694      	mov	ip, r2
 80098a4:	fb06 1415 	mls	r4, r6, r5, r1
 80098a8:	3430      	adds	r4, #48	; 0x30
 80098aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098ae:	460c      	mov	r4, r1
 80098b0:	2c63      	cmp	r4, #99	; 0x63
 80098b2:	4629      	mov	r1, r5
 80098b4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80098b8:	dcf1      	bgt.n	800989e <__exponent+0x20>
 80098ba:	3130      	adds	r1, #48	; 0x30
 80098bc:	f1ac 0402 	sub.w	r4, ip, #2
 80098c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098c4:	4622      	mov	r2, r4
 80098c6:	1c41      	adds	r1, r0, #1
 80098c8:	42ba      	cmp	r2, r7
 80098ca:	d30a      	bcc.n	80098e2 <__exponent+0x64>
 80098cc:	f10d 0209 	add.w	r2, sp, #9
 80098d0:	eba2 020c 	sub.w	r2, r2, ip
 80098d4:	42bc      	cmp	r4, r7
 80098d6:	bf88      	it	hi
 80098d8:	2200      	movhi	r2, #0
 80098da:	4413      	add	r3, r2
 80098dc:	1a18      	subs	r0, r3, r0
 80098de:	b003      	add	sp, #12
 80098e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098ea:	e7ed      	b.n	80098c8 <__exponent+0x4a>
 80098ec:	2330      	movs	r3, #48	; 0x30
 80098ee:	3130      	adds	r1, #48	; 0x30
 80098f0:	7083      	strb	r3, [r0, #2]
 80098f2:	70c1      	strb	r1, [r0, #3]
 80098f4:	1d03      	adds	r3, r0, #4
 80098f6:	e7f1      	b.n	80098dc <__exponent+0x5e>

080098f8 <_printf_float>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	b091      	sub	sp, #68	; 0x44
 80098fe:	460c      	mov	r4, r1
 8009900:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009904:	4616      	mov	r6, r2
 8009906:	461f      	mov	r7, r3
 8009908:	4605      	mov	r5, r0
 800990a:	f000 fcb5 	bl	800a278 <_localeconv_r>
 800990e:	6803      	ldr	r3, [r0, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	9309      	str	r3, [sp, #36]	; 0x24
 8009914:	f7f6 fc88 	bl	8000228 <strlen>
 8009918:	2300      	movs	r3, #0
 800991a:	930e      	str	r3, [sp, #56]	; 0x38
 800991c:	f8d8 3000 	ldr.w	r3, [r8]
 8009920:	900a      	str	r0, [sp, #40]	; 0x28
 8009922:	3307      	adds	r3, #7
 8009924:	f023 0307 	bic.w	r3, r3, #7
 8009928:	f103 0208 	add.w	r2, r3, #8
 800992c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009930:	f8d4 b000 	ldr.w	fp, [r4]
 8009934:	f8c8 2000 	str.w	r2, [r8]
 8009938:	e9d3 a800 	ldrd	sl, r8, [r3]
 800993c:	4652      	mov	r2, sl
 800993e:	4643      	mov	r3, r8
 8009940:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009944:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009948:	930b      	str	r3, [sp, #44]	; 0x2c
 800994a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994e:	4650      	mov	r0, sl
 8009950:	4b9c      	ldr	r3, [pc, #624]	; (8009bc4 <_printf_float+0x2cc>)
 8009952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009954:	f7f7 f8c6 	bl	8000ae4 <__aeabi_dcmpun>
 8009958:	bb70      	cbnz	r0, 80099b8 <_printf_float+0xc0>
 800995a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800995e:	4650      	mov	r0, sl
 8009960:	4b98      	ldr	r3, [pc, #608]	; (8009bc4 <_printf_float+0x2cc>)
 8009962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009964:	f7f7 f8a0 	bl	8000aa8 <__aeabi_dcmple>
 8009968:	bb30      	cbnz	r0, 80099b8 <_printf_float+0xc0>
 800996a:	2200      	movs	r2, #0
 800996c:	2300      	movs	r3, #0
 800996e:	4650      	mov	r0, sl
 8009970:	4641      	mov	r1, r8
 8009972:	f7f7 f88f 	bl	8000a94 <__aeabi_dcmplt>
 8009976:	b110      	cbz	r0, 800997e <_printf_float+0x86>
 8009978:	232d      	movs	r3, #45	; 0x2d
 800997a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800997e:	4a92      	ldr	r2, [pc, #584]	; (8009bc8 <_printf_float+0x2d0>)
 8009980:	4b92      	ldr	r3, [pc, #584]	; (8009bcc <_printf_float+0x2d4>)
 8009982:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009986:	bf94      	ite	ls
 8009988:	4690      	movls	r8, r2
 800998a:	4698      	movhi	r8, r3
 800998c:	2303      	movs	r3, #3
 800998e:	f04f 0a00 	mov.w	sl, #0
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	f02b 0304 	bic.w	r3, fp, #4
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	4633      	mov	r3, r6
 800999c:	4621      	mov	r1, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	9700      	str	r7, [sp, #0]
 80099a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80099a4:	f000 f9d6 	bl	8009d54 <_printf_common>
 80099a8:	3001      	adds	r0, #1
 80099aa:	f040 8090 	bne.w	8009ace <_printf_float+0x1d6>
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b2:	b011      	add	sp, #68	; 0x44
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b8:	4652      	mov	r2, sl
 80099ba:	4643      	mov	r3, r8
 80099bc:	4650      	mov	r0, sl
 80099be:	4641      	mov	r1, r8
 80099c0:	f7f7 f890 	bl	8000ae4 <__aeabi_dcmpun>
 80099c4:	b148      	cbz	r0, 80099da <_printf_float+0xe2>
 80099c6:	f1b8 0f00 	cmp.w	r8, #0
 80099ca:	bfb8      	it	lt
 80099cc:	232d      	movlt	r3, #45	; 0x2d
 80099ce:	4a80      	ldr	r2, [pc, #512]	; (8009bd0 <_printf_float+0x2d8>)
 80099d0:	bfb8      	it	lt
 80099d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099d6:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <_printf_float+0x2dc>)
 80099d8:	e7d3      	b.n	8009982 <_printf_float+0x8a>
 80099da:	6863      	ldr	r3, [r4, #4]
 80099dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	d142      	bne.n	8009a6a <_printf_float+0x172>
 80099e4:	2306      	movs	r3, #6
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	9206      	str	r2, [sp, #24]
 80099ec:	aa0e      	add	r2, sp, #56	; 0x38
 80099ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80099f2:	aa0d      	add	r2, sp, #52	; 0x34
 80099f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80099f8:	9203      	str	r2, [sp, #12]
 80099fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80099fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	4652      	mov	r2, sl
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a10:	f7ff fed6 	bl	80097c0 <__cvt>
 8009a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a16:	4680      	mov	r8, r0
 8009a18:	2947      	cmp	r1, #71	; 0x47
 8009a1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a1c:	d108      	bne.n	8009a30 <_printf_float+0x138>
 8009a1e:	1cc8      	adds	r0, r1, #3
 8009a20:	db02      	blt.n	8009a28 <_printf_float+0x130>
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	4299      	cmp	r1, r3
 8009a26:	dd40      	ble.n	8009aaa <_printf_float+0x1b2>
 8009a28:	f1a9 0902 	sub.w	r9, r9, #2
 8009a2c:	fa5f f989 	uxtb.w	r9, r9
 8009a30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a34:	d81f      	bhi.n	8009a76 <_printf_float+0x17e>
 8009a36:	464a      	mov	r2, r9
 8009a38:	3901      	subs	r1, #1
 8009a3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a3e:	910d      	str	r1, [sp, #52]	; 0x34
 8009a40:	f7ff ff1d 	bl	800987e <__exponent>
 8009a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a46:	4682      	mov	sl, r0
 8009a48:	1813      	adds	r3, r2, r0
 8009a4a:	2a01      	cmp	r2, #1
 8009a4c:	6123      	str	r3, [r4, #16]
 8009a4e:	dc02      	bgt.n	8009a56 <_printf_float+0x15e>
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	07d2      	lsls	r2, r2, #31
 8009a54:	d501      	bpl.n	8009a5a <_printf_float+0x162>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d09b      	beq.n	800999a <_printf_float+0xa2>
 8009a62:	232d      	movs	r3, #45	; 0x2d
 8009a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a68:	e797      	b.n	800999a <_printf_float+0xa2>
 8009a6a:	2947      	cmp	r1, #71	; 0x47
 8009a6c:	d1bc      	bne.n	80099e8 <_printf_float+0xf0>
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1ba      	bne.n	80099e8 <_printf_float+0xf0>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7b7      	b.n	80099e6 <_printf_float+0xee>
 8009a76:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a7a:	d118      	bne.n	8009aae <_printf_float+0x1b6>
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	6863      	ldr	r3, [r4, #4]
 8009a80:	dd0b      	ble.n	8009a9a <_printf_float+0x1a2>
 8009a82:	6121      	str	r1, [r4, #16]
 8009a84:	b913      	cbnz	r3, 8009a8c <_printf_float+0x194>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	07d0      	lsls	r0, r2, #31
 8009a8a:	d502      	bpl.n	8009a92 <_printf_float+0x19a>
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	440b      	add	r3, r1
 8009a90:	6123      	str	r3, [r4, #16]
 8009a92:	f04f 0a00 	mov.w	sl, #0
 8009a96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a98:	e7df      	b.n	8009a5a <_printf_float+0x162>
 8009a9a:	b913      	cbnz	r3, 8009aa2 <_printf_float+0x1aa>
 8009a9c:	6822      	ldr	r2, [r4, #0]
 8009a9e:	07d2      	lsls	r2, r2, #31
 8009aa0:	d501      	bpl.n	8009aa6 <_printf_float+0x1ae>
 8009aa2:	3302      	adds	r3, #2
 8009aa4:	e7f4      	b.n	8009a90 <_printf_float+0x198>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7f2      	b.n	8009a90 <_printf_float+0x198>
 8009aaa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	db05      	blt.n	8009ac0 <_printf_float+0x1c8>
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	6121      	str	r1, [r4, #16]
 8009ab8:	07d8      	lsls	r0, r3, #31
 8009aba:	d5ea      	bpl.n	8009a92 <_printf_float+0x19a>
 8009abc:	1c4b      	adds	r3, r1, #1
 8009abe:	e7e7      	b.n	8009a90 <_printf_float+0x198>
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	bfcc      	ite	gt
 8009ac4:	2201      	movgt	r2, #1
 8009ac6:	f1c1 0202 	rsble	r2, r1, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	e7e0      	b.n	8009a90 <_printf_float+0x198>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	055a      	lsls	r2, r3, #21
 8009ad2:	d407      	bmi.n	8009ae4 <_printf_float+0x1ec>
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	4642      	mov	r2, r8
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d12b      	bne.n	8009b3a <_printf_float+0x242>
 8009ae2:	e764      	b.n	80099ae <_printf_float+0xb6>
 8009ae4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ae8:	f240 80dd 	bls.w	8009ca6 <_printf_float+0x3ae>
 8009aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009af0:	2200      	movs	r2, #0
 8009af2:	2300      	movs	r3, #0
 8009af4:	f7f6 ffc4 	bl	8000a80 <__aeabi_dcmpeq>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d033      	beq.n	8009b64 <_printf_float+0x26c>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	4a35      	ldr	r2, [pc, #212]	; (8009bd8 <_printf_float+0x2e0>)
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	f43f af51 	beq.w	80099ae <_printf_float+0xb6>
 8009b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b10:	429a      	cmp	r2, r3
 8009b12:	db02      	blt.n	8009b1a <_printf_float+0x222>
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	07d8      	lsls	r0, r3, #31
 8009b18:	d50f      	bpl.n	8009b3a <_printf_float+0x242>
 8009b1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f af42 	beq.w	80099ae <_printf_float+0xb6>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	f104 091a 	add.w	r9, r4, #26
 8009b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b34:	3b01      	subs	r3, #1
 8009b36:	4543      	cmp	r3, r8
 8009b38:	dc09      	bgt.n	8009b4e <_printf_float+0x256>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	079b      	lsls	r3, r3, #30
 8009b3e:	f100 8104 	bmi.w	8009d4a <_printf_float+0x452>
 8009b42:	68e0      	ldr	r0, [r4, #12]
 8009b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b46:	4298      	cmp	r0, r3
 8009b48:	bfb8      	it	lt
 8009b4a:	4618      	movlt	r0, r3
 8009b4c:	e731      	b.n	80099b2 <_printf_float+0xba>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	464a      	mov	r2, r9
 8009b52:	4631      	mov	r1, r6
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b8      	blx	r7
 8009b58:	3001      	adds	r0, #1
 8009b5a:	f43f af28 	beq.w	80099ae <_printf_float+0xb6>
 8009b5e:	f108 0801 	add.w	r8, r8, #1
 8009b62:	e7e6      	b.n	8009b32 <_printf_float+0x23a>
 8009b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dc38      	bgt.n	8009bdc <_printf_float+0x2e4>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	4a19      	ldr	r2, [pc, #100]	; (8009bd8 <_printf_float+0x2e0>)
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	f43f af1a 	beq.w	80099ae <_printf_float+0xb6>
 8009b7a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	d102      	bne.n	8009b88 <_printf_float+0x290>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	07d9      	lsls	r1, r3, #31
 8009b86:	d5d8      	bpl.n	8009b3a <_printf_float+0x242>
 8009b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af0b 	beq.w	80099ae <_printf_float+0xb6>
 8009b98:	f04f 0900 	mov.w	r9, #0
 8009b9c:	f104 0a1a 	add.w	sl, r4, #26
 8009ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	454b      	cmp	r3, r9
 8009ba6:	dc01      	bgt.n	8009bac <_printf_float+0x2b4>
 8009ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009baa:	e794      	b.n	8009ad6 <_printf_float+0x1de>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f aef9 	beq.w	80099ae <_printf_float+0xb6>
 8009bbc:	f109 0901 	add.w	r9, r9, #1
 8009bc0:	e7ee      	b.n	8009ba0 <_printf_float+0x2a8>
 8009bc2:	bf00      	nop
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	0800cd60 	.word	0x0800cd60
 8009bcc:	0800cd64 	.word	0x0800cd64
 8009bd0:	0800cd68 	.word	0x0800cd68
 8009bd4:	0800cd6c 	.word	0x0800cd6c
 8009bd8:	0800cd70 	.word	0x0800cd70
 8009bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be0:	429a      	cmp	r2, r3
 8009be2:	bfa8      	it	ge
 8009be4:	461a      	movge	r2, r3
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	4691      	mov	r9, r2
 8009bea:	dc37      	bgt.n	8009c5c <_printf_float+0x364>
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf4:	f104 021a 	add.w	r2, r4, #26
 8009bf8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009bfc:	ebaa 0309 	sub.w	r3, sl, r9
 8009c00:	455b      	cmp	r3, fp
 8009c02:	dc33      	bgt.n	8009c6c <_printf_float+0x374>
 8009c04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	db3b      	blt.n	8009c84 <_printf_float+0x38c>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d438      	bmi.n	8009c84 <_printf_float+0x38c>
 8009c12:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c16:	eba2 0903 	sub.w	r9, r2, r3
 8009c1a:	eba2 020a 	sub.w	r2, r2, sl
 8009c1e:	4591      	cmp	r9, r2
 8009c20:	bfa8      	it	ge
 8009c22:	4691      	movge	r9, r2
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	dc34      	bgt.n	8009c94 <_printf_float+0x39c>
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c32:	f104 0a1a 	add.w	sl, r4, #26
 8009c36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	eba3 0309 	sub.w	r3, r3, r9
 8009c40:	4543      	cmp	r3, r8
 8009c42:	f77f af7a 	ble.w	8009b3a <_printf_float+0x242>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	f43f aeac 	beq.w	80099ae <_printf_float+0xb6>
 8009c56:	f108 0801 	add.w	r8, r8, #1
 8009c5a:	e7ec      	b.n	8009c36 <_printf_float+0x33e>
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4642      	mov	r2, r8
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1c0      	bne.n	8009bec <_printf_float+0x2f4>
 8009c6a:	e6a0      	b.n	80099ae <_printf_float+0xb6>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f ae99 	beq.w	80099ae <_printf_float+0xb6>
 8009c7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c7e:	f10b 0b01 	add.w	fp, fp, #1
 8009c82:	e7b9      	b.n	8009bf8 <_printf_float+0x300>
 8009c84:	4631      	mov	r1, r6
 8009c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d1bf      	bne.n	8009c12 <_printf_float+0x31a>
 8009c92:	e68c      	b.n	80099ae <_printf_float+0xb6>
 8009c94:	464b      	mov	r3, r9
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	eb08 020a 	add.w	r2, r8, sl
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d1c2      	bne.n	8009c2a <_printf_float+0x332>
 8009ca4:	e683      	b.n	80099ae <_printf_float+0xb6>
 8009ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca8:	2a01      	cmp	r2, #1
 8009caa:	dc01      	bgt.n	8009cb0 <_printf_float+0x3b8>
 8009cac:	07db      	lsls	r3, r3, #31
 8009cae:	d539      	bpl.n	8009d24 <_printf_float+0x42c>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f ae77 	beq.w	80099ae <_printf_float+0xb6>
 8009cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f43f ae6f 	beq.w	80099ae <_printf_float+0xb6>
 8009cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009cdc:	f7f6 fed0 	bl	8000a80 <__aeabi_dcmpeq>
 8009ce0:	b9d8      	cbnz	r0, 8009d1a <_printf_float+0x422>
 8009ce2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8009ce6:	f108 0201 	add.w	r2, r8, #1
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d10e      	bne.n	8009d12 <_printf_float+0x41a>
 8009cf4:	e65b      	b.n	80099ae <_printf_float+0xb6>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	464a      	mov	r2, r9
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae54 	beq.w	80099ae <_printf_float+0xb6>
 8009d06:	f108 0801 	add.w	r8, r8, #1
 8009d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4543      	cmp	r3, r8
 8009d10:	dcf1      	bgt.n	8009cf6 <_printf_float+0x3fe>
 8009d12:	4653      	mov	r3, sl
 8009d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d18:	e6de      	b.n	8009ad8 <_printf_float+0x1e0>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 091a 	add.w	r9, r4, #26
 8009d22:	e7f2      	b.n	8009d0a <_printf_float+0x412>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4642      	mov	r2, r8
 8009d28:	e7df      	b.n	8009cea <_printf_float+0x3f2>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae3a 	beq.w	80099ae <_printf_float+0xb6>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dcf0      	bgt.n	8009d2a <_printf_float+0x432>
 8009d48:	e6fb      	b.n	8009b42 <_printf_float+0x24a>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0919 	add.w	r9, r4, #25
 8009d52:	e7f4      	b.n	8009d3e <_printf_float+0x446>

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4699      	mov	r9, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	4607      	mov	r7, r0
 8009d62:	4293      	cmp	r3, r2
 8009d64:	bfb8      	it	lt
 8009d66:	4613      	movlt	r3, r2
 8009d68:	6033      	str	r3, [r6, #0]
 8009d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d6e:	460c      	mov	r4, r1
 8009d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc2b      	bgt.n	8009df4 <_printf_common+0xa0>
 8009d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da0:	1e13      	subs	r3, r2, #0
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d430      	bmi.n	8009e0e <_printf_common+0xba>
 8009dac:	4649      	mov	r1, r9
 8009dae:	4638      	mov	r0, r7
 8009db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db4:	47c0      	blx	r8
 8009db6:	3001      	adds	r0, #1
 8009db8:	d023      	beq.n	8009e02 <_printf_common+0xae>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	6922      	ldr	r2, [r4, #16]
 8009dbe:	f003 0306 	and.w	r3, r3, #6
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	bf14      	ite	ne
 8009dc6:	2500      	movne	r5, #0
 8009dc8:	6833      	ldreq	r3, [r6, #0]
 8009dca:	f04f 0600 	mov.w	r6, #0
 8009dce:	bf08      	it	eq
 8009dd0:	68e5      	ldreq	r5, [r4, #12]
 8009dd2:	f104 041a 	add.w	r4, r4, #26
 8009dd6:	bf08      	it	eq
 8009dd8:	1aed      	subeq	r5, r5, r3
 8009dda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009dde:	bf08      	it	eq
 8009de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de4:	4293      	cmp	r3, r2
 8009de6:	bfc4      	itt	gt
 8009de8:	1a9b      	subgt	r3, r3, r2
 8009dea:	18ed      	addgt	r5, r5, r3
 8009dec:	42b5      	cmp	r5, r6
 8009dee:	d11a      	bne.n	8009e26 <_printf_common+0xd2>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e008      	b.n	8009e06 <_printf_common+0xb2>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4652      	mov	r2, sl
 8009df8:	4649      	mov	r1, r9
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	47c0      	blx	r8
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d103      	bne.n	8009e0a <_printf_common+0xb6>
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	e7c1      	b.n	8009d92 <_printf_common+0x3e>
 8009e0e:	2030      	movs	r0, #48	; 0x30
 8009e10:	18e1      	adds	r1, r4, r3
 8009e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e1c:	4422      	add	r2, r4
 8009e1e:	3302      	adds	r3, #2
 8009e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e24:	e7c2      	b.n	8009dac <_printf_common+0x58>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	47c0      	blx	r8
 8009e30:	3001      	adds	r0, #1
 8009e32:	d0e6      	beq.n	8009e02 <_printf_common+0xae>
 8009e34:	3601      	adds	r6, #1
 8009e36:	e7d9      	b.n	8009dec <_printf_common+0x98>

08009e38 <_printf_i>:
 8009e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	7e0f      	ldrb	r7, [r1, #24]
 8009e3e:	4691      	mov	r9, r2
 8009e40:	2f78      	cmp	r7, #120	; 0x78
 8009e42:	4680      	mov	r8, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	469a      	mov	sl, r3
 8009e48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e4e:	d807      	bhi.n	8009e60 <_printf_i+0x28>
 8009e50:	2f62      	cmp	r7, #98	; 0x62
 8009e52:	d80a      	bhi.n	8009e6a <_printf_i+0x32>
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f000 80d5 	beq.w	800a004 <_printf_i+0x1cc>
 8009e5a:	2f58      	cmp	r7, #88	; 0x58
 8009e5c:	f000 80c1 	beq.w	8009fe2 <_printf_i+0x1aa>
 8009e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e68:	e03a      	b.n	8009ee0 <_printf_i+0xa8>
 8009e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e6e:	2b15      	cmp	r3, #21
 8009e70:	d8f6      	bhi.n	8009e60 <_printf_i+0x28>
 8009e72:	a101      	add	r1, pc, #4	; (adr r1, 8009e78 <_printf_i+0x40>)
 8009e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009e61 	.word	0x08009e61
 8009e84:	08009e61 	.word	0x08009e61
 8009e88:	08009e61 	.word	0x08009e61
 8009e8c:	08009e61 	.word	0x08009e61
 8009e90:	08009ee5 	.word	0x08009ee5
 8009e94:	08009e61 	.word	0x08009e61
 8009e98:	08009e61 	.word	0x08009e61
 8009e9c:	08009e61 	.word	0x08009e61
 8009ea0:	08009e61 	.word	0x08009e61
 8009ea4:	08009feb 	.word	0x08009feb
 8009ea8:	08009f11 	.word	0x08009f11
 8009eac:	08009fa5 	.word	0x08009fa5
 8009eb0:	08009e61 	.word	0x08009e61
 8009eb4:	08009e61 	.word	0x08009e61
 8009eb8:	0800a00d 	.word	0x0800a00d
 8009ebc:	08009e61 	.word	0x08009e61
 8009ec0:	08009f11 	.word	0x08009f11
 8009ec4:	08009e61 	.word	0x08009e61
 8009ec8:	08009e61 	.word	0x08009e61
 8009ecc:	08009fad 	.word	0x08009fad
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	602a      	str	r2, [r5, #0]
 8009ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0a0      	b.n	800a026 <_printf_i+0x1ee>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	0607      	lsls	r7, r0, #24
 8009eea:	f103 0104 	add.w	r1, r3, #4
 8009eee:	6029      	str	r1, [r5, #0]
 8009ef0:	d501      	bpl.n	8009ef6 <_printf_i+0xbe>
 8009ef2:	681e      	ldr	r6, [r3, #0]
 8009ef4:	e003      	b.n	8009efe <_printf_i+0xc6>
 8009ef6:	0646      	lsls	r6, r0, #25
 8009ef8:	d5fb      	bpl.n	8009ef2 <_printf_i+0xba>
 8009efa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	da03      	bge.n	8009f0a <_printf_i+0xd2>
 8009f02:	232d      	movs	r3, #45	; 0x2d
 8009f04:	4276      	negs	r6, r6
 8009f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	4859      	ldr	r0, [pc, #356]	; (800a074 <_printf_i+0x23c>)
 8009f0e:	e012      	b.n	8009f36 <_printf_i+0xfe>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	6820      	ldr	r0, [r4, #0]
 8009f14:	1d19      	adds	r1, r3, #4
 8009f16:	6029      	str	r1, [r5, #0]
 8009f18:	0605      	lsls	r5, r0, #24
 8009f1a:	d501      	bpl.n	8009f20 <_printf_i+0xe8>
 8009f1c:	681e      	ldr	r6, [r3, #0]
 8009f1e:	e002      	b.n	8009f26 <_printf_i+0xee>
 8009f20:	0641      	lsls	r1, r0, #25
 8009f22:	d5fb      	bpl.n	8009f1c <_printf_i+0xe4>
 8009f24:	881e      	ldrh	r6, [r3, #0]
 8009f26:	2f6f      	cmp	r7, #111	; 0x6f
 8009f28:	bf0c      	ite	eq
 8009f2a:	2308      	moveq	r3, #8
 8009f2c:	230a      	movne	r3, #10
 8009f2e:	4851      	ldr	r0, [pc, #324]	; (800a074 <_printf_i+0x23c>)
 8009f30:	2100      	movs	r1, #0
 8009f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f36:	6865      	ldr	r5, [r4, #4]
 8009f38:	2d00      	cmp	r5, #0
 8009f3a:	bfa8      	it	ge
 8009f3c:	6821      	ldrge	r1, [r4, #0]
 8009f3e:	60a5      	str	r5, [r4, #8]
 8009f40:	bfa4      	itt	ge
 8009f42:	f021 0104 	bicge.w	r1, r1, #4
 8009f46:	6021      	strge	r1, [r4, #0]
 8009f48:	b90e      	cbnz	r6, 8009f4e <_printf_i+0x116>
 8009f4a:	2d00      	cmp	r5, #0
 8009f4c:	d04b      	beq.n	8009fe6 <_printf_i+0x1ae>
 8009f4e:	4615      	mov	r5, r2
 8009f50:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f54:	fb03 6711 	mls	r7, r3, r1, r6
 8009f58:	5dc7      	ldrb	r7, [r0, r7]
 8009f5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f5e:	4637      	mov	r7, r6
 8009f60:	42bb      	cmp	r3, r7
 8009f62:	460e      	mov	r6, r1
 8009f64:	d9f4      	bls.n	8009f50 <_printf_i+0x118>
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d10b      	bne.n	8009f82 <_printf_i+0x14a>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	07de      	lsls	r6, r3, #31
 8009f6e:	d508      	bpl.n	8009f82 <_printf_i+0x14a>
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	6861      	ldr	r1, [r4, #4]
 8009f74:	4299      	cmp	r1, r3
 8009f76:	bfde      	ittt	le
 8009f78:	2330      	movle	r3, #48	; 0x30
 8009f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f82:	1b52      	subs	r2, r2, r5
 8009f84:	6122      	str	r2, [r4, #16]
 8009f86:	464b      	mov	r3, r9
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f8cd a000 	str.w	sl, [sp]
 8009f90:	aa03      	add	r2, sp, #12
 8009f92:	f7ff fedf 	bl	8009d54 <_printf_common>
 8009f96:	3001      	adds	r0, #1
 8009f98:	d14a      	bne.n	800a030 <_printf_i+0x1f8>
 8009f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f9e:	b004      	add	sp, #16
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	f043 0320 	orr.w	r3, r3, #32
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	2778      	movs	r7, #120	; 0x78
 8009fae:	4832      	ldr	r0, [pc, #200]	; (800a078 <_printf_i+0x240>)
 8009fb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	6829      	ldr	r1, [r5, #0]
 8009fb8:	061f      	lsls	r7, r3, #24
 8009fba:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fbe:	d402      	bmi.n	8009fc6 <_printf_i+0x18e>
 8009fc0:	065f      	lsls	r7, r3, #25
 8009fc2:	bf48      	it	mi
 8009fc4:	b2b6      	uxthmi	r6, r6
 8009fc6:	07df      	lsls	r7, r3, #31
 8009fc8:	bf48      	it	mi
 8009fca:	f043 0320 	orrmi.w	r3, r3, #32
 8009fce:	6029      	str	r1, [r5, #0]
 8009fd0:	bf48      	it	mi
 8009fd2:	6023      	strmi	r3, [r4, #0]
 8009fd4:	b91e      	cbnz	r6, 8009fde <_printf_i+0x1a6>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	f023 0320 	bic.w	r3, r3, #32
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	2310      	movs	r3, #16
 8009fe0:	e7a6      	b.n	8009f30 <_printf_i+0xf8>
 8009fe2:	4824      	ldr	r0, [pc, #144]	; (800a074 <_printf_i+0x23c>)
 8009fe4:	e7e4      	b.n	8009fb0 <_printf_i+0x178>
 8009fe6:	4615      	mov	r5, r2
 8009fe8:	e7bd      	b.n	8009f66 <_printf_i+0x12e>
 8009fea:	682b      	ldr	r3, [r5, #0]
 8009fec:	6826      	ldr	r6, [r4, #0]
 8009fee:	1d18      	adds	r0, r3, #4
 8009ff0:	6961      	ldr	r1, [r4, #20]
 8009ff2:	6028      	str	r0, [r5, #0]
 8009ff4:	0635      	lsls	r5, r6, #24
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	d501      	bpl.n	8009ffe <_printf_i+0x1c6>
 8009ffa:	6019      	str	r1, [r3, #0]
 8009ffc:	e002      	b.n	800a004 <_printf_i+0x1cc>
 8009ffe:	0670      	lsls	r0, r6, #25
 800a000:	d5fb      	bpl.n	8009ffa <_printf_i+0x1c2>
 800a002:	8019      	strh	r1, [r3, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	4615      	mov	r5, r2
 800a008:	6123      	str	r3, [r4, #16]
 800a00a:	e7bc      	b.n	8009f86 <_printf_i+0x14e>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	2100      	movs	r1, #0
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	681d      	ldr	r5, [r3, #0]
 800a016:	6862      	ldr	r2, [r4, #4]
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f95e 	bl	800a2da <memchr>
 800a01e:	b108      	cbz	r0, 800a024 <_printf_i+0x1ec>
 800a020:	1b40      	subs	r0, r0, r5
 800a022:	6060      	str	r0, [r4, #4]
 800a024:	6863      	ldr	r3, [r4, #4]
 800a026:	6123      	str	r3, [r4, #16]
 800a028:	2300      	movs	r3, #0
 800a02a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02e:	e7aa      	b.n	8009f86 <_printf_i+0x14e>
 800a030:	462a      	mov	r2, r5
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	47d0      	blx	sl
 800a03a:	3001      	adds	r0, #1
 800a03c:	d0ad      	beq.n	8009f9a <_printf_i+0x162>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	079b      	lsls	r3, r3, #30
 800a042:	d413      	bmi.n	800a06c <_printf_i+0x234>
 800a044:	68e0      	ldr	r0, [r4, #12]
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	4298      	cmp	r0, r3
 800a04a:	bfb8      	it	lt
 800a04c:	4618      	movlt	r0, r3
 800a04e:	e7a6      	b.n	8009f9e <_printf_i+0x166>
 800a050:	2301      	movs	r3, #1
 800a052:	4632      	mov	r2, r6
 800a054:	4649      	mov	r1, r9
 800a056:	4640      	mov	r0, r8
 800a058:	47d0      	blx	sl
 800a05a:	3001      	adds	r0, #1
 800a05c:	d09d      	beq.n	8009f9a <_printf_i+0x162>
 800a05e:	3501      	adds	r5, #1
 800a060:	68e3      	ldr	r3, [r4, #12]
 800a062:	9903      	ldr	r1, [sp, #12]
 800a064:	1a5b      	subs	r3, r3, r1
 800a066:	42ab      	cmp	r3, r5
 800a068:	dcf2      	bgt.n	800a050 <_printf_i+0x218>
 800a06a:	e7eb      	b.n	800a044 <_printf_i+0x20c>
 800a06c:	2500      	movs	r5, #0
 800a06e:	f104 0619 	add.w	r6, r4, #25
 800a072:	e7f5      	b.n	800a060 <_printf_i+0x228>
 800a074:	0800cd72 	.word	0x0800cd72
 800a078:	0800cd83 	.word	0x0800cd83

0800a07c <siprintf>:
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a082:	b500      	push	{lr}
 800a084:	b09c      	sub	sp, #112	; 0x70
 800a086:	ab1d      	add	r3, sp, #116	; 0x74
 800a088:	9002      	str	r0, [sp, #8]
 800a08a:	9006      	str	r0, [sp, #24]
 800a08c:	9107      	str	r1, [sp, #28]
 800a08e:	9104      	str	r1, [sp, #16]
 800a090:	4808      	ldr	r0, [pc, #32]	; (800a0b4 <siprintf+0x38>)
 800a092:	4909      	ldr	r1, [pc, #36]	; (800a0b8 <siprintf+0x3c>)
 800a094:	f853 2b04 	ldr.w	r2, [r3], #4
 800a098:	9105      	str	r1, [sp, #20]
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	a902      	add	r1, sp, #8
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	f001 f800 	bl	800b0a4 <_svfiprintf_r>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	9b02      	ldr	r3, [sp, #8]
 800a0a8:	701a      	strb	r2, [r3, #0]
 800a0aa:	b01c      	add	sp, #112	; 0x70
 800a0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b0:	b003      	add	sp, #12
 800a0b2:	4770      	bx	lr
 800a0b4:	200001d4 	.word	0x200001d4
 800a0b8:	ffff0208 	.word	0xffff0208

0800a0bc <std>:
 800a0bc:	2300      	movs	r3, #0
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a0c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ca:	6083      	str	r3, [r0, #8]
 800a0cc:	8181      	strh	r1, [r0, #12]
 800a0ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a0d0:	81c2      	strh	r2, [r0, #14]
 800a0d2:	6183      	str	r3, [r0, #24]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	2208      	movs	r2, #8
 800a0d8:	305c      	adds	r0, #92	; 0x5c
 800a0da:	f000 f8c4 	bl	800a266 <memset>
 800a0de:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <std+0x58>)
 800a0e0:	6224      	str	r4, [r4, #32]
 800a0e2:	6263      	str	r3, [r4, #36]	; 0x24
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <std+0x5c>)
 800a0e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <std+0x60>)
 800a0ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <std+0x64>)
 800a0ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a0f0:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <std+0x68>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d006      	beq.n	800a104 <std+0x48>
 800a0f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0fa:	4294      	cmp	r4, r2
 800a0fc:	d002      	beq.n	800a104 <std+0x48>
 800a0fe:	33d0      	adds	r3, #208	; 0xd0
 800a100:	429c      	cmp	r4, r3
 800a102:	d105      	bne.n	800a110 <std+0x54>
 800a104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a10c:	f000 b8e2 	b.w	800a2d4 <__retarget_lock_init_recursive>
 800a110:	bd10      	pop	{r4, pc}
 800a112:	bf00      	nop
 800a114:	0800bc4d 	.word	0x0800bc4d
 800a118:	0800bc6f 	.word	0x0800bc6f
 800a11c:	0800bca7 	.word	0x0800bca7
 800a120:	0800bccb 	.word	0x0800bccb
 800a124:	20001944 	.word	0x20001944

0800a128 <stdio_exit_handler>:
 800a128:	4a02      	ldr	r2, [pc, #8]	; (800a134 <stdio_exit_handler+0xc>)
 800a12a:	4903      	ldr	r1, [pc, #12]	; (800a138 <stdio_exit_handler+0x10>)
 800a12c:	4803      	ldr	r0, [pc, #12]	; (800a13c <stdio_exit_handler+0x14>)
 800a12e:	f000 b869 	b.w	800a204 <_fwalk_sglue>
 800a132:	bf00      	nop
 800a134:	2000017c 	.word	0x2000017c
 800a138:	0800b4f5 	.word	0x0800b4f5
 800a13c:	20000188 	.word	0x20000188

0800a140 <cleanup_stdio>:
 800a140:	6841      	ldr	r1, [r0, #4]
 800a142:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <cleanup_stdio+0x34>)
 800a144:	b510      	push	{r4, lr}
 800a146:	4299      	cmp	r1, r3
 800a148:	4604      	mov	r4, r0
 800a14a:	d001      	beq.n	800a150 <cleanup_stdio+0x10>
 800a14c:	f001 f9d2 	bl	800b4f4 <_fflush_r>
 800a150:	68a1      	ldr	r1, [r4, #8]
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <cleanup_stdio+0x38>)
 800a154:	4299      	cmp	r1, r3
 800a156:	d002      	beq.n	800a15e <cleanup_stdio+0x1e>
 800a158:	4620      	mov	r0, r4
 800a15a:	f001 f9cb 	bl	800b4f4 <_fflush_r>
 800a15e:	68e1      	ldr	r1, [r4, #12]
 800a160:	4b06      	ldr	r3, [pc, #24]	; (800a17c <cleanup_stdio+0x3c>)
 800a162:	4299      	cmp	r1, r3
 800a164:	d004      	beq.n	800a170 <cleanup_stdio+0x30>
 800a166:	4620      	mov	r0, r4
 800a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16c:	f001 b9c2 	b.w	800b4f4 <_fflush_r>
 800a170:	bd10      	pop	{r4, pc}
 800a172:	bf00      	nop
 800a174:	20001944 	.word	0x20001944
 800a178:	200019ac 	.word	0x200019ac
 800a17c:	20001a14 	.word	0x20001a14

0800a180 <global_stdio_init.part.0>:
 800a180:	b510      	push	{r4, lr}
 800a182:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <global_stdio_init.part.0+0x30>)
 800a184:	4c0b      	ldr	r4, [pc, #44]	; (800a1b4 <global_stdio_init.part.0+0x34>)
 800a186:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <global_stdio_init.part.0+0x38>)
 800a188:	4620      	mov	r0, r4
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	2104      	movs	r1, #4
 800a18e:	2200      	movs	r2, #0
 800a190:	f7ff ff94 	bl	800a0bc <std>
 800a194:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a198:	2201      	movs	r2, #1
 800a19a:	2109      	movs	r1, #9
 800a19c:	f7ff ff8e 	bl	800a0bc <std>
 800a1a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1aa:	2112      	movs	r1, #18
 800a1ac:	f7ff bf86 	b.w	800a0bc <std>
 800a1b0:	20001a7c 	.word	0x20001a7c
 800a1b4:	20001944 	.word	0x20001944
 800a1b8:	0800a129 	.word	0x0800a129

0800a1bc <__sfp_lock_acquire>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	; (800a1c4 <__sfp_lock_acquire+0x8>)
 800a1be:	f000 b88a 	b.w	800a2d6 <__retarget_lock_acquire_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	20001a81 	.word	0x20001a81

0800a1c8 <__sfp_lock_release>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__sfp_lock_release+0x8>)
 800a1ca:	f000 b885 	b.w	800a2d8 <__retarget_lock_release_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	20001a81 	.word	0x20001a81

0800a1d4 <__sinit>:
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	f7ff fff0 	bl	800a1bc <__sfp_lock_acquire>
 800a1dc:	6a23      	ldr	r3, [r4, #32]
 800a1de:	b11b      	cbz	r3, 800a1e8 <__sinit+0x14>
 800a1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1e4:	f7ff bff0 	b.w	800a1c8 <__sfp_lock_release>
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <__sinit+0x28>)
 800a1ea:	6223      	str	r3, [r4, #32]
 800a1ec:	4b04      	ldr	r3, [pc, #16]	; (800a200 <__sinit+0x2c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1f5      	bne.n	800a1e0 <__sinit+0xc>
 800a1f4:	f7ff ffc4 	bl	800a180 <global_stdio_init.part.0>
 800a1f8:	e7f2      	b.n	800a1e0 <__sinit+0xc>
 800a1fa:	bf00      	nop
 800a1fc:	0800a141 	.word	0x0800a141
 800a200:	20001a7c 	.word	0x20001a7c

0800a204 <_fwalk_sglue>:
 800a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a208:	4607      	mov	r7, r0
 800a20a:	4688      	mov	r8, r1
 800a20c:	4614      	mov	r4, r2
 800a20e:	2600      	movs	r6, #0
 800a210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a214:	f1b9 0901 	subs.w	r9, r9, #1
 800a218:	d505      	bpl.n	800a226 <_fwalk_sglue+0x22>
 800a21a:	6824      	ldr	r4, [r4, #0]
 800a21c:	2c00      	cmp	r4, #0
 800a21e:	d1f7      	bne.n	800a210 <_fwalk_sglue+0xc>
 800a220:	4630      	mov	r0, r6
 800a222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a226:	89ab      	ldrh	r3, [r5, #12]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d907      	bls.n	800a23c <_fwalk_sglue+0x38>
 800a22c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a230:	3301      	adds	r3, #1
 800a232:	d003      	beq.n	800a23c <_fwalk_sglue+0x38>
 800a234:	4629      	mov	r1, r5
 800a236:	4638      	mov	r0, r7
 800a238:	47c0      	blx	r8
 800a23a:	4306      	orrs	r6, r0
 800a23c:	3568      	adds	r5, #104	; 0x68
 800a23e:	e7e9      	b.n	800a214 <_fwalk_sglue+0x10>

0800a240 <strncat>:
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	4604      	mov	r4, r0
 800a244:	7825      	ldrb	r5, [r4, #0]
 800a246:	4623      	mov	r3, r4
 800a248:	3401      	adds	r4, #1
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	d1fa      	bne.n	800a244 <strncat+0x4>
 800a24e:	3a01      	subs	r2, #1
 800a250:	d304      	bcc.n	800a25c <strncat+0x1c>
 800a252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a256:	f803 4b01 	strb.w	r4, [r3], #1
 800a25a:	b904      	cbnz	r4, 800a25e <strncat+0x1e>
 800a25c:	bd30      	pop	{r4, r5, pc}
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d1f5      	bne.n	800a24e <strncat+0xe>
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	e7f3      	b.n	800a24e <strncat+0xe>

0800a266 <memset>:
 800a266:	4603      	mov	r3, r0
 800a268:	4402      	add	r2, r0
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d100      	bne.n	800a270 <memset+0xa>
 800a26e:	4770      	bx	lr
 800a270:	f803 1b01 	strb.w	r1, [r3], #1
 800a274:	e7f9      	b.n	800a26a <memset+0x4>
	...

0800a278 <_localeconv_r>:
 800a278:	4800      	ldr	r0, [pc, #0]	; (800a27c <_localeconv_r+0x4>)
 800a27a:	4770      	bx	lr
 800a27c:	200002c8 	.word	0x200002c8

0800a280 <__errno>:
 800a280:	4b01      	ldr	r3, [pc, #4]	; (800a288 <__errno+0x8>)
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	200001d4 	.word	0x200001d4

0800a28c <__libc_init_array>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	2600      	movs	r6, #0
 800a290:	4d0c      	ldr	r5, [pc, #48]	; (800a2c4 <__libc_init_array+0x38>)
 800a292:	4c0d      	ldr	r4, [pc, #52]	; (800a2c8 <__libc_init_array+0x3c>)
 800a294:	1b64      	subs	r4, r4, r5
 800a296:	10a4      	asrs	r4, r4, #2
 800a298:	42a6      	cmp	r6, r4
 800a29a:	d109      	bne.n	800a2b0 <__libc_init_array+0x24>
 800a29c:	f002 fafe 	bl	800c89c <_init>
 800a2a0:	2600      	movs	r6, #0
 800a2a2:	4d0a      	ldr	r5, [pc, #40]	; (800a2cc <__libc_init_array+0x40>)
 800a2a4:	4c0a      	ldr	r4, [pc, #40]	; (800a2d0 <__libc_init_array+0x44>)
 800a2a6:	1b64      	subs	r4, r4, r5
 800a2a8:	10a4      	asrs	r4, r4, #2
 800a2aa:	42a6      	cmp	r6, r4
 800a2ac:	d105      	bne.n	800a2ba <__libc_init_array+0x2e>
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b4:	4798      	blx	r3
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	e7ee      	b.n	800a298 <__libc_init_array+0xc>
 800a2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2be:	4798      	blx	r3
 800a2c0:	3601      	adds	r6, #1
 800a2c2:	e7f2      	b.n	800a2aa <__libc_init_array+0x1e>
 800a2c4:	0800d0dc 	.word	0x0800d0dc
 800a2c8:	0800d0dc 	.word	0x0800d0dc
 800a2cc:	0800d0dc 	.word	0x0800d0dc
 800a2d0:	0800d0e0 	.word	0x0800d0e0

0800a2d4 <__retarget_lock_init_recursive>:
 800a2d4:	4770      	bx	lr

0800a2d6 <__retarget_lock_acquire_recursive>:
 800a2d6:	4770      	bx	lr

0800a2d8 <__retarget_lock_release_recursive>:
 800a2d8:	4770      	bx	lr

0800a2da <memchr>:
 800a2da:	4603      	mov	r3, r0
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	b2c9      	uxtb	r1, r1
 800a2e0:	4402      	add	r2, r0
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	d101      	bne.n	800a2ec <memchr+0x12>
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e003      	b.n	800a2f4 <memchr+0x1a>
 800a2ec:	7804      	ldrb	r4, [r0, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	428c      	cmp	r4, r1
 800a2f2:	d1f6      	bne.n	800a2e2 <memchr+0x8>
 800a2f4:	bd10      	pop	{r4, pc}

0800a2f6 <memcpy>:
 800a2f6:	440a      	add	r2, r1
 800a2f8:	4291      	cmp	r1, r2
 800a2fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a2fe:	d100      	bne.n	800a302 <memcpy+0xc>
 800a300:	4770      	bx	lr
 800a302:	b510      	push	{r4, lr}
 800a304:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a308:	4291      	cmp	r1, r2
 800a30a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a30e:	d1f9      	bne.n	800a304 <memcpy+0xe>
 800a310:	bd10      	pop	{r4, pc}

0800a312 <quorem>:
 800a312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a316:	6903      	ldr	r3, [r0, #16]
 800a318:	690c      	ldr	r4, [r1, #16]
 800a31a:	4607      	mov	r7, r0
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	db7f      	blt.n	800a420 <quorem+0x10e>
 800a320:	3c01      	subs	r4, #1
 800a322:	f100 0514 	add.w	r5, r0, #20
 800a326:	f101 0814 	add.w	r8, r1, #20
 800a32a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a338:	3301      	adds	r3, #1
 800a33a:	429a      	cmp	r2, r3
 800a33c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a348:	d331      	bcc.n	800a3ae <quorem+0x9c>
 800a34a:	f04f 0e00 	mov.w	lr, #0
 800a34e:	4640      	mov	r0, r8
 800a350:	46ac      	mov	ip, r5
 800a352:	46f2      	mov	sl, lr
 800a354:	f850 2b04 	ldr.w	r2, [r0], #4
 800a358:	b293      	uxth	r3, r2
 800a35a:	fb06 e303 	mla	r3, r6, r3, lr
 800a35e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a362:	0c1a      	lsrs	r2, r3, #16
 800a364:	b29b      	uxth	r3, r3
 800a366:	fb06 220e 	mla	r2, r6, lr, r2
 800a36a:	ebaa 0303 	sub.w	r3, sl, r3
 800a36e:	f8dc a000 	ldr.w	sl, [ip]
 800a372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a376:	fa1f fa8a 	uxth.w	sl, sl
 800a37a:	4453      	add	r3, sl
 800a37c:	f8dc a000 	ldr.w	sl, [ip]
 800a380:	b292      	uxth	r2, r2
 800a382:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a386:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a390:	4581      	cmp	r9, r0
 800a392:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a396:	f84c 3b04 	str.w	r3, [ip], #4
 800a39a:	d2db      	bcs.n	800a354 <quorem+0x42>
 800a39c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3a0:	b92b      	cbnz	r3, 800a3ae <quorem+0x9c>
 800a3a2:	9b01      	ldr	r3, [sp, #4]
 800a3a4:	3b04      	subs	r3, #4
 800a3a6:	429d      	cmp	r5, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	d32d      	bcc.n	800a408 <quorem+0xf6>
 800a3ac:	613c      	str	r4, [r7, #16]
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f001 fb4e 	bl	800ba50 <__mcmp>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	db23      	blt.n	800a400 <quorem+0xee>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	3601      	adds	r6, #1
 800a3be:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3c2:	f8d1 c000 	ldr.w	ip, [r1]
 800a3c6:	b293      	uxth	r3, r2
 800a3c8:	1ac3      	subs	r3, r0, r3
 800a3ca:	0c12      	lsrs	r2, r2, #16
 800a3cc:	fa1f f08c 	uxth.w	r0, ip
 800a3d0:	4403      	add	r3, r0
 800a3d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a3d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e0:	45c1      	cmp	r9, r8
 800a3e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3e6:	f841 3b04 	str.w	r3, [r1], #4
 800a3ea:	d2e8      	bcs.n	800a3be <quorem+0xac>
 800a3ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3f4:	b922      	cbnz	r2, 800a400 <quorem+0xee>
 800a3f6:	3b04      	subs	r3, #4
 800a3f8:	429d      	cmp	r5, r3
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	d30a      	bcc.n	800a414 <quorem+0x102>
 800a3fe:	613c      	str	r4, [r7, #16]
 800a400:	4630      	mov	r0, r6
 800a402:	b003      	add	sp, #12
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	3b04      	subs	r3, #4
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	d1cd      	bne.n	800a3ac <quorem+0x9a>
 800a410:	3c01      	subs	r4, #1
 800a412:	e7c8      	b.n	800a3a6 <quorem+0x94>
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	3b04      	subs	r3, #4
 800a418:	2a00      	cmp	r2, #0
 800a41a:	d1f0      	bne.n	800a3fe <quorem+0xec>
 800a41c:	3c01      	subs	r4, #1
 800a41e:	e7eb      	b.n	800a3f8 <quorem+0xe6>
 800a420:	2000      	movs	r0, #0
 800a422:	e7ee      	b.n	800a402 <quorem+0xf0>
 800a424:	0000      	movs	r0, r0
	...

0800a428 <_dtoa_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	4616      	mov	r6, r2
 800a42e:	461f      	mov	r7, r3
 800a430:	69c4      	ldr	r4, [r0, #28]
 800a432:	b099      	sub	sp, #100	; 0x64
 800a434:	4605      	mov	r5, r0
 800a436:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a43a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a43e:	b974      	cbnz	r4, 800a45e <_dtoa_r+0x36>
 800a440:	2010      	movs	r0, #16
 800a442:	f000 ff2d 	bl	800b2a0 <malloc>
 800a446:	4602      	mov	r2, r0
 800a448:	61e8      	str	r0, [r5, #28]
 800a44a:	b920      	cbnz	r0, 800a456 <_dtoa_r+0x2e>
 800a44c:	21ef      	movs	r1, #239	; 0xef
 800a44e:	4bac      	ldr	r3, [pc, #688]	; (800a700 <_dtoa_r+0x2d8>)
 800a450:	48ac      	ldr	r0, [pc, #688]	; (800a704 <_dtoa_r+0x2dc>)
 800a452:	f001 fcdd 	bl	800be10 <__assert_func>
 800a456:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a45a:	6004      	str	r4, [r0, #0]
 800a45c:	60c4      	str	r4, [r0, #12]
 800a45e:	69eb      	ldr	r3, [r5, #28]
 800a460:	6819      	ldr	r1, [r3, #0]
 800a462:	b151      	cbz	r1, 800a47a <_dtoa_r+0x52>
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	2301      	movs	r3, #1
 800a468:	4093      	lsls	r3, r2
 800a46a:	604a      	str	r2, [r1, #4]
 800a46c:	608b      	str	r3, [r1, #8]
 800a46e:	4628      	mov	r0, r5
 800a470:	f001 f8b4 	bl	800b5dc <_Bfree>
 800a474:	2200      	movs	r2, #0
 800a476:	69eb      	ldr	r3, [r5, #28]
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	1e3b      	subs	r3, r7, #0
 800a47c:	bfaf      	iteee	ge
 800a47e:	2300      	movge	r3, #0
 800a480:	2201      	movlt	r2, #1
 800a482:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a486:	9305      	strlt	r3, [sp, #20]
 800a488:	bfa8      	it	ge
 800a48a:	f8c8 3000 	strge.w	r3, [r8]
 800a48e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a492:	4b9d      	ldr	r3, [pc, #628]	; (800a708 <_dtoa_r+0x2e0>)
 800a494:	bfb8      	it	lt
 800a496:	f8c8 2000 	strlt.w	r2, [r8]
 800a49a:	ea33 0309 	bics.w	r3, r3, r9
 800a49e:	d119      	bne.n	800a4d4 <_dtoa_r+0xac>
 800a4a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ac:	4333      	orrs	r3, r6
 800a4ae:	f000 8589 	beq.w	800afc4 <_dtoa_r+0xb9c>
 800a4b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4b4:	b953      	cbnz	r3, 800a4cc <_dtoa_r+0xa4>
 800a4b6:	4b95      	ldr	r3, [pc, #596]	; (800a70c <_dtoa_r+0x2e4>)
 800a4b8:	e023      	b.n	800a502 <_dtoa_r+0xda>
 800a4ba:	4b95      	ldr	r3, [pc, #596]	; (800a710 <_dtoa_r+0x2e8>)
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	9803      	ldr	r0, [sp, #12]
 800a4c6:	b019      	add	sp, #100	; 0x64
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	4b8f      	ldr	r3, [pc, #572]	; (800a70c <_dtoa_r+0x2e4>)
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	3303      	adds	r3, #3
 800a4d2:	e7f5      	b.n	800a4c0 <_dtoa_r+0x98>
 800a4d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f7f6 facc 	bl	8000a80 <__aeabi_dcmpeq>
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	b160      	cbz	r0, 800a506 <_dtoa_r+0xde>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 8562 	beq.w	800afbe <_dtoa_r+0xb96>
 800a4fa:	4b86      	ldr	r3, [pc, #536]	; (800a714 <_dtoa_r+0x2ec>)
 800a4fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	3b01      	subs	r3, #1
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	e7de      	b.n	800a4c4 <_dtoa_r+0x9c>
 800a506:	ab16      	add	r3, sp, #88	; 0x58
 800a508:	9301      	str	r3, [sp, #4]
 800a50a:	ab17      	add	r3, sp, #92	; 0x5c
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4628      	mov	r0, r5
 800a510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a514:	f001 fb44 	bl	800bba0 <__d2b>
 800a518:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a51c:	4682      	mov	sl, r0
 800a51e:	2c00      	cmp	r4, #0
 800a520:	d07e      	beq.n	800a620 <_dtoa_r+0x1f8>
 800a522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a528:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a52c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a530:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a534:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a538:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a53c:	4619      	mov	r1, r3
 800a53e:	2200      	movs	r2, #0
 800a540:	4b75      	ldr	r3, [pc, #468]	; (800a718 <_dtoa_r+0x2f0>)
 800a542:	f7f5 fe7d 	bl	8000240 <__aeabi_dsub>
 800a546:	a368      	add	r3, pc, #416	; (adr r3, 800a6e8 <_dtoa_r+0x2c0>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f6 f830 	bl	80005b0 <__aeabi_dmul>
 800a550:	a367      	add	r3, pc, #412	; (adr r3, 800a6f0 <_dtoa_r+0x2c8>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f5 fe75 	bl	8000244 <__adddf3>
 800a55a:	4606      	mov	r6, r0
 800a55c:	4620      	mov	r0, r4
 800a55e:	460f      	mov	r7, r1
 800a560:	f7f5 ffbc 	bl	80004dc <__aeabi_i2d>
 800a564:	a364      	add	r3, pc, #400	; (adr r3, 800a6f8 <_dtoa_r+0x2d0>)
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	f7f6 f821 	bl	80005b0 <__aeabi_dmul>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	f7f5 fe65 	bl	8000244 <__adddf3>
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	f7f6 fac7 	bl	8000b10 <__aeabi_d2iz>
 800a582:	2200      	movs	r2, #0
 800a584:	4683      	mov	fp, r0
 800a586:	2300      	movs	r3, #0
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 fa82 	bl	8000a94 <__aeabi_dcmplt>
 800a590:	b148      	cbz	r0, 800a5a6 <_dtoa_r+0x17e>
 800a592:	4658      	mov	r0, fp
 800a594:	f7f5 ffa2 	bl	80004dc <__aeabi_i2d>
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	f7f6 fa70 	bl	8000a80 <__aeabi_dcmpeq>
 800a5a0:	b908      	cbnz	r0, 800a5a6 <_dtoa_r+0x17e>
 800a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5a6:	f1bb 0f16 	cmp.w	fp, #22
 800a5aa:	d857      	bhi.n	800a65c <_dtoa_r+0x234>
 800a5ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5b0:	4b5a      	ldr	r3, [pc, #360]	; (800a71c <_dtoa_r+0x2f4>)
 800a5b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f7f6 fa6b 	bl	8000a94 <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d04e      	beq.n	800a660 <_dtoa_r+0x238>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a5c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a5cc:	1b1b      	subs	r3, r3, r4
 800a5ce:	1e5a      	subs	r2, r3, #1
 800a5d0:	bf46      	itte	mi
 800a5d2:	f1c3 0901 	rsbmi	r9, r3, #1
 800a5d6:	2300      	movmi	r3, #0
 800a5d8:	f04f 0900 	movpl.w	r9, #0
 800a5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5de:	bf48      	it	mi
 800a5e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a5e2:	f1bb 0f00 	cmp.w	fp, #0
 800a5e6:	db3d      	blt.n	800a664 <_dtoa_r+0x23c>
 800a5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a5ee:	445b      	add	r3, fp
 800a5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d867      	bhi.n	800a6cc <_dtoa_r+0x2a4>
 800a5fc:	2b05      	cmp	r3, #5
 800a5fe:	bfc4      	itt	gt
 800a600:	3b04      	subgt	r3, #4
 800a602:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a606:	bfc8      	it	gt
 800a608:	2400      	movgt	r4, #0
 800a60a:	f1a3 0302 	sub.w	r3, r3, #2
 800a60e:	bfd8      	it	le
 800a610:	2401      	movle	r4, #1
 800a612:	2b03      	cmp	r3, #3
 800a614:	f200 8086 	bhi.w	800a724 <_dtoa_r+0x2fc>
 800a618:	e8df f003 	tbb	[pc, r3]
 800a61c:	5637392c 	.word	0x5637392c
 800a620:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a624:	441c      	add	r4, r3
 800a626:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	bfc1      	itttt	gt
 800a62e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a632:	fa09 f903 	lslgt.w	r9, r9, r3
 800a636:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a63a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a63e:	bfd6      	itet	le
 800a640:	f1c3 0320 	rsble	r3, r3, #32
 800a644:	ea49 0003 	orrgt.w	r0, r9, r3
 800a648:	fa06 f003 	lslle.w	r0, r6, r3
 800a64c:	f7f5 ff36 	bl	80004bc <__aeabi_ui2d>
 800a650:	2201      	movs	r2, #1
 800a652:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a656:	3c01      	subs	r4, #1
 800a658:	9213      	str	r2, [sp, #76]	; 0x4c
 800a65a:	e76f      	b.n	800a53c <_dtoa_r+0x114>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e7b3      	b.n	800a5c8 <_dtoa_r+0x1a0>
 800a660:	900f      	str	r0, [sp, #60]	; 0x3c
 800a662:	e7b2      	b.n	800a5ca <_dtoa_r+0x1a2>
 800a664:	f1cb 0300 	rsb	r3, fp, #0
 800a668:	930a      	str	r3, [sp, #40]	; 0x28
 800a66a:	2300      	movs	r3, #0
 800a66c:	eba9 090b 	sub.w	r9, r9, fp
 800a670:	930e      	str	r3, [sp, #56]	; 0x38
 800a672:	e7c0      	b.n	800a5f6 <_dtoa_r+0x1ce>
 800a674:	2300      	movs	r3, #0
 800a676:	930b      	str	r3, [sp, #44]	; 0x2c
 800a678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dc55      	bgt.n	800a72a <_dtoa_r+0x302>
 800a67e:	2301      	movs	r3, #1
 800a680:	461a      	mov	r2, r3
 800a682:	9306      	str	r3, [sp, #24]
 800a684:	9308      	str	r3, [sp, #32]
 800a686:	9223      	str	r2, [sp, #140]	; 0x8c
 800a688:	e00b      	b.n	800a6a2 <_dtoa_r+0x27a>
 800a68a:	2301      	movs	r3, #1
 800a68c:	e7f3      	b.n	800a676 <_dtoa_r+0x24e>
 800a68e:	2300      	movs	r3, #0
 800a690:	930b      	str	r3, [sp, #44]	; 0x2c
 800a692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a694:	445b      	add	r3, fp
 800a696:	9306      	str	r3, [sp, #24]
 800a698:	3301      	adds	r3, #1
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	9308      	str	r3, [sp, #32]
 800a69e:	bfb8      	it	lt
 800a6a0:	2301      	movlt	r3, #1
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	2204      	movs	r2, #4
 800a6a6:	69e8      	ldr	r0, [r5, #28]
 800a6a8:	f102 0614 	add.w	r6, r2, #20
 800a6ac:	429e      	cmp	r6, r3
 800a6ae:	d940      	bls.n	800a732 <_dtoa_r+0x30a>
 800a6b0:	6041      	str	r1, [r0, #4]
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 ff52 	bl	800b55c <_Balloc>
 800a6b8:	9003      	str	r0, [sp, #12]
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d13c      	bne.n	800a738 <_dtoa_r+0x310>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f240 11af 	movw	r1, #431	; 0x1af
 800a6c4:	4b16      	ldr	r3, [pc, #88]	; (800a720 <_dtoa_r+0x2f8>)
 800a6c6:	e6c3      	b.n	800a450 <_dtoa_r+0x28>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e7e1      	b.n	800a690 <_dtoa_r+0x268>
 800a6cc:	2401      	movs	r4, #1
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6d2:	9322      	str	r3, [sp, #136]	; 0x88
 800a6d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6d8:	2200      	movs	r2, #0
 800a6da:	9306      	str	r3, [sp, #24]
 800a6dc:	9308      	str	r3, [sp, #32]
 800a6de:	2312      	movs	r3, #18
 800a6e0:	e7d1      	b.n	800a686 <_dtoa_r+0x25e>
 800a6e2:	bf00      	nop
 800a6e4:	f3af 8000 	nop.w
 800a6e8:	636f4361 	.word	0x636f4361
 800a6ec:	3fd287a7 	.word	0x3fd287a7
 800a6f0:	8b60c8b3 	.word	0x8b60c8b3
 800a6f4:	3fc68a28 	.word	0x3fc68a28
 800a6f8:	509f79fb 	.word	0x509f79fb
 800a6fc:	3fd34413 	.word	0x3fd34413
 800a700:	0800cda1 	.word	0x0800cda1
 800a704:	0800cdb8 	.word	0x0800cdb8
 800a708:	7ff00000 	.word	0x7ff00000
 800a70c:	0800cd9d 	.word	0x0800cd9d
 800a710:	0800cd94 	.word	0x0800cd94
 800a714:	0800cd71 	.word	0x0800cd71
 800a718:	3ff80000 	.word	0x3ff80000
 800a71c:	0800ceb8 	.word	0x0800ceb8
 800a720:	0800ce10 	.word	0x0800ce10
 800a724:	2301      	movs	r3, #1
 800a726:	930b      	str	r3, [sp, #44]	; 0x2c
 800a728:	e7d4      	b.n	800a6d4 <_dtoa_r+0x2ac>
 800a72a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a72c:	9306      	str	r3, [sp, #24]
 800a72e:	9308      	str	r3, [sp, #32]
 800a730:	e7b7      	b.n	800a6a2 <_dtoa_r+0x27a>
 800a732:	3101      	adds	r1, #1
 800a734:	0052      	lsls	r2, r2, #1
 800a736:	e7b7      	b.n	800a6a8 <_dtoa_r+0x280>
 800a738:	69eb      	ldr	r3, [r5, #28]
 800a73a:	9a03      	ldr	r2, [sp, #12]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	9b08      	ldr	r3, [sp, #32]
 800a740:	2b0e      	cmp	r3, #14
 800a742:	f200 80a8 	bhi.w	800a896 <_dtoa_r+0x46e>
 800a746:	2c00      	cmp	r4, #0
 800a748:	f000 80a5 	beq.w	800a896 <_dtoa_r+0x46e>
 800a74c:	f1bb 0f00 	cmp.w	fp, #0
 800a750:	dd34      	ble.n	800a7bc <_dtoa_r+0x394>
 800a752:	4b9a      	ldr	r3, [pc, #616]	; (800a9bc <_dtoa_r+0x594>)
 800a754:	f00b 020f 	and.w	r2, fp, #15
 800a758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a75c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a760:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a764:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a768:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a76c:	d016      	beq.n	800a79c <_dtoa_r+0x374>
 800a76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a772:	4b93      	ldr	r3, [pc, #588]	; (800a9c0 <_dtoa_r+0x598>)
 800a774:	2703      	movs	r7, #3
 800a776:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a77a:	f7f6 f843 	bl	8000804 <__aeabi_ddiv>
 800a77e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a782:	f004 040f 	and.w	r4, r4, #15
 800a786:	4e8e      	ldr	r6, [pc, #568]	; (800a9c0 <_dtoa_r+0x598>)
 800a788:	b954      	cbnz	r4, 800a7a0 <_dtoa_r+0x378>
 800a78a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a78e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a792:	f7f6 f837 	bl	8000804 <__aeabi_ddiv>
 800a796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a79a:	e029      	b.n	800a7f0 <_dtoa_r+0x3c8>
 800a79c:	2702      	movs	r7, #2
 800a79e:	e7f2      	b.n	800a786 <_dtoa_r+0x35e>
 800a7a0:	07e1      	lsls	r1, r4, #31
 800a7a2:	d508      	bpl.n	800a7b6 <_dtoa_r+0x38e>
 800a7a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7ac:	f7f5 ff00 	bl	80005b0 <__aeabi_dmul>
 800a7b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a7b4:	3701      	adds	r7, #1
 800a7b6:	1064      	asrs	r4, r4, #1
 800a7b8:	3608      	adds	r6, #8
 800a7ba:	e7e5      	b.n	800a788 <_dtoa_r+0x360>
 800a7bc:	f000 80a5 	beq.w	800a90a <_dtoa_r+0x4e2>
 800a7c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7c4:	f1cb 0400 	rsb	r4, fp, #0
 800a7c8:	4b7c      	ldr	r3, [pc, #496]	; (800a9bc <_dtoa_r+0x594>)
 800a7ca:	f004 020f 	and.w	r2, r4, #15
 800a7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f5 feeb 	bl	80005b0 <__aeabi_dmul>
 800a7da:	2702      	movs	r7, #2
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7e2:	4e77      	ldr	r6, [pc, #476]	; (800a9c0 <_dtoa_r+0x598>)
 800a7e4:	1124      	asrs	r4, r4, #4
 800a7e6:	2c00      	cmp	r4, #0
 800a7e8:	f040 8084 	bne.w	800a8f4 <_dtoa_r+0x4cc>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1d2      	bne.n	800a796 <_dtoa_r+0x36e>
 800a7f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8087 	beq.w	800a90e <_dtoa_r+0x4e6>
 800a800:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a804:	2200      	movs	r2, #0
 800a806:	4b6f      	ldr	r3, [pc, #444]	; (800a9c4 <_dtoa_r+0x59c>)
 800a808:	f7f6 f944 	bl	8000a94 <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d07e      	beq.n	800a90e <_dtoa_r+0x4e6>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d07b      	beq.n	800a90e <_dtoa_r+0x4e6>
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd38      	ble.n	800a88e <_dtoa_r+0x466>
 800a81c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a820:	2200      	movs	r2, #0
 800a822:	4b69      	ldr	r3, [pc, #420]	; (800a9c8 <_dtoa_r+0x5a0>)
 800a824:	f7f5 fec4 	bl	80005b0 <__aeabi_dmul>
 800a828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a82c:	9c06      	ldr	r4, [sp, #24]
 800a82e:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800a832:	3701      	adds	r7, #1
 800a834:	4638      	mov	r0, r7
 800a836:	f7f5 fe51 	bl	80004dc <__aeabi_i2d>
 800a83a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a83e:	f7f5 feb7 	bl	80005b0 <__aeabi_dmul>
 800a842:	2200      	movs	r2, #0
 800a844:	4b61      	ldr	r3, [pc, #388]	; (800a9cc <_dtoa_r+0x5a4>)
 800a846:	f7f5 fcfd 	bl	8000244 <__adddf3>
 800a84a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a84e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a852:	9611      	str	r6, [sp, #68]	; 0x44
 800a854:	2c00      	cmp	r4, #0
 800a856:	d15d      	bne.n	800a914 <_dtoa_r+0x4ec>
 800a858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a85c:	2200      	movs	r2, #0
 800a85e:	4b5c      	ldr	r3, [pc, #368]	; (800a9d0 <_dtoa_r+0x5a8>)
 800a860:	f7f5 fcee 	bl	8000240 <__aeabi_dsub>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a86c:	4633      	mov	r3, r6
 800a86e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a870:	f7f6 f92e 	bl	8000ad0 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	f040 8295 	bne.w	800ada4 <_dtoa_r+0x97c>
 800a87a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a87e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a880:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a884:	f7f6 f906 	bl	8000a94 <__aeabi_dcmplt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	f040 8289 	bne.w	800ada0 <_dtoa_r+0x978>
 800a88e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a892:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a896:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f2c0 8151 	blt.w	800ab40 <_dtoa_r+0x718>
 800a89e:	f1bb 0f0e 	cmp.w	fp, #14
 800a8a2:	f300 814d 	bgt.w	800ab40 <_dtoa_r+0x718>
 800a8a6:	4b45      	ldr	r3, [pc, #276]	; (800a9bc <_dtoa_r+0x594>)
 800a8a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a8b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f280 80da 	bge.w	800aa70 <_dtoa_r+0x648>
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f300 80d6 	bgt.w	800aa70 <_dtoa_r+0x648>
 800a8c4:	f040 826b 	bne.w	800ad9e <_dtoa_r+0x976>
 800a8c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4b40      	ldr	r3, [pc, #256]	; (800a9d0 <_dtoa_r+0x5a8>)
 800a8d0:	f7f5 fe6e 	bl	80005b0 <__aeabi_dmul>
 800a8d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8d8:	f7f6 f8f0 	bl	8000abc <__aeabi_dcmpge>
 800a8dc:	9c08      	ldr	r4, [sp, #32]
 800a8de:	4626      	mov	r6, r4
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	f040 8241 	bne.w	800ad68 <_dtoa_r+0x940>
 800a8e6:	2331      	movs	r3, #49	; 0x31
 800a8e8:	9f03      	ldr	r7, [sp, #12]
 800a8ea:	f10b 0b01 	add.w	fp, fp, #1
 800a8ee:	f807 3b01 	strb.w	r3, [r7], #1
 800a8f2:	e23d      	b.n	800ad70 <_dtoa_r+0x948>
 800a8f4:	07e2      	lsls	r2, r4, #31
 800a8f6:	d505      	bpl.n	800a904 <_dtoa_r+0x4dc>
 800a8f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8fc:	f7f5 fe58 	bl	80005b0 <__aeabi_dmul>
 800a900:	2301      	movs	r3, #1
 800a902:	3701      	adds	r7, #1
 800a904:	1064      	asrs	r4, r4, #1
 800a906:	3608      	adds	r6, #8
 800a908:	e76d      	b.n	800a7e6 <_dtoa_r+0x3be>
 800a90a:	2702      	movs	r7, #2
 800a90c:	e770      	b.n	800a7f0 <_dtoa_r+0x3c8>
 800a90e:	46d8      	mov	r8, fp
 800a910:	9c08      	ldr	r4, [sp, #32]
 800a912:	e78f      	b.n	800a834 <_dtoa_r+0x40c>
 800a914:	9903      	ldr	r1, [sp, #12]
 800a916:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <_dtoa_r+0x594>)
 800a918:	4421      	add	r1, r4
 800a91a:	9112      	str	r1, [sp, #72]	; 0x48
 800a91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a91e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a922:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a926:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d054      	beq.n	800a9d8 <_dtoa_r+0x5b0>
 800a92e:	2000      	movs	r0, #0
 800a930:	4928      	ldr	r1, [pc, #160]	; (800a9d4 <_dtoa_r+0x5ac>)
 800a932:	f7f5 ff67 	bl	8000804 <__aeabi_ddiv>
 800a936:	463b      	mov	r3, r7
 800a938:	4632      	mov	r2, r6
 800a93a:	f7f5 fc81 	bl	8000240 <__aeabi_dsub>
 800a93e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a942:	9f03      	ldr	r7, [sp, #12]
 800a944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a948:	f7f6 f8e2 	bl	8000b10 <__aeabi_d2iz>
 800a94c:	4604      	mov	r4, r0
 800a94e:	f7f5 fdc5 	bl	80004dc <__aeabi_i2d>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a95a:	f7f5 fc71 	bl	8000240 <__aeabi_dsub>
 800a95e:	4602      	mov	r2, r0
 800a960:	460b      	mov	r3, r1
 800a962:	3430      	adds	r4, #48	; 0x30
 800a964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a96c:	f807 4b01 	strb.w	r4, [r7], #1
 800a970:	f7f6 f890 	bl	8000a94 <__aeabi_dcmplt>
 800a974:	2800      	cmp	r0, #0
 800a976:	d173      	bne.n	800aa60 <_dtoa_r+0x638>
 800a978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97c:	2000      	movs	r0, #0
 800a97e:	4911      	ldr	r1, [pc, #68]	; (800a9c4 <_dtoa_r+0x59c>)
 800a980:	f7f5 fc5e 	bl	8000240 <__aeabi_dsub>
 800a984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a988:	f7f6 f884 	bl	8000a94 <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f040 80b6 	bne.w	800aafe <_dtoa_r+0x6d6>
 800a992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a994:	429f      	cmp	r7, r3
 800a996:	f43f af7a 	beq.w	800a88e <_dtoa_r+0x466>
 800a99a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <_dtoa_r+0x5a0>)
 800a9a2:	f7f5 fe05 	bl	80005b0 <__aeabi_dmul>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <_dtoa_r+0x5a0>)
 800a9b2:	f7f5 fdfd 	bl	80005b0 <__aeabi_dmul>
 800a9b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9ba:	e7c3      	b.n	800a944 <_dtoa_r+0x51c>
 800a9bc:	0800ceb8 	.word	0x0800ceb8
 800a9c0:	0800ce90 	.word	0x0800ce90
 800a9c4:	3ff00000 	.word	0x3ff00000
 800a9c8:	40240000 	.word	0x40240000
 800a9cc:	401c0000 	.word	0x401c0000
 800a9d0:	40140000 	.word	0x40140000
 800a9d4:	3fe00000 	.word	0x3fe00000
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f5 fde8 	bl	80005b0 <__aeabi_dmul>
 800a9e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9e6:	9c03      	ldr	r4, [sp, #12]
 800a9e8:	9314      	str	r3, [sp, #80]	; 0x50
 800a9ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ee:	f7f6 f88f 	bl	8000b10 <__aeabi_d2iz>
 800a9f2:	9015      	str	r0, [sp, #84]	; 0x54
 800a9f4:	f7f5 fd72 	bl	80004dc <__aeabi_i2d>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa00:	f7f5 fc1e 	bl	8000240 <__aeabi_dsub>
 800aa04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa06:	4606      	mov	r6, r0
 800aa08:	3330      	adds	r3, #48	; 0x30
 800aa0a:	f804 3b01 	strb.w	r3, [r4], #1
 800aa0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa10:	460f      	mov	r7, r1
 800aa12:	429c      	cmp	r4, r3
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	d124      	bne.n	800aa64 <_dtoa_r+0x63c>
 800aa1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa1e:	4baf      	ldr	r3, [pc, #700]	; (800acdc <_dtoa_r+0x8b4>)
 800aa20:	f7f5 fc10 	bl	8000244 <__adddf3>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	f7f6 f850 	bl	8000ad0 <__aeabi_dcmpgt>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d163      	bne.n	800aafc <_dtoa_r+0x6d4>
 800aa34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa38:	2000      	movs	r0, #0
 800aa3a:	49a8      	ldr	r1, [pc, #672]	; (800acdc <_dtoa_r+0x8b4>)
 800aa3c:	f7f5 fc00 	bl	8000240 <__aeabi_dsub>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	f7f6 f824 	bl	8000a94 <__aeabi_dcmplt>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f43f af1e 	beq.w	800a88e <_dtoa_r+0x466>
 800aa52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa54:	1e7b      	subs	r3, r7, #1
 800aa56:	9314      	str	r3, [sp, #80]	; 0x50
 800aa58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa5c:	2b30      	cmp	r3, #48	; 0x30
 800aa5e:	d0f8      	beq.n	800aa52 <_dtoa_r+0x62a>
 800aa60:	46c3      	mov	fp, r8
 800aa62:	e03b      	b.n	800aadc <_dtoa_r+0x6b4>
 800aa64:	4b9e      	ldr	r3, [pc, #632]	; (800ace0 <_dtoa_r+0x8b8>)
 800aa66:	f7f5 fda3 	bl	80005b0 <__aeabi_dmul>
 800aa6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa6e:	e7bc      	b.n	800a9ea <_dtoa_r+0x5c2>
 800aa70:	9f03      	ldr	r7, [sp, #12]
 800aa72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fec1 	bl	8000804 <__aeabi_ddiv>
 800aa82:	f7f6 f845 	bl	8000b10 <__aeabi_d2iz>
 800aa86:	4604      	mov	r4, r0
 800aa88:	f7f5 fd28 	bl	80004dc <__aeabi_i2d>
 800aa8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa90:	f7f5 fd8e 	bl	80005b0 <__aeabi_dmul>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	f7f5 fbd0 	bl	8000240 <__aeabi_dsub>
 800aaa0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aaa4:	f807 6b01 	strb.w	r6, [r7], #1
 800aaa8:	9e03      	ldr	r6, [sp, #12]
 800aaaa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aaae:	1bbe      	subs	r6, r7, r6
 800aab0:	45b4      	cmp	ip, r6
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	d136      	bne.n	800ab26 <_dtoa_r+0x6fe>
 800aab8:	f7f5 fbc4 	bl	8000244 <__adddf3>
 800aabc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aac0:	4680      	mov	r8, r0
 800aac2:	4689      	mov	r9, r1
 800aac4:	f7f6 f804 	bl	8000ad0 <__aeabi_dcmpgt>
 800aac8:	bb58      	cbnz	r0, 800ab22 <_dtoa_r+0x6fa>
 800aaca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aace:	4640      	mov	r0, r8
 800aad0:	4649      	mov	r1, r9
 800aad2:	f7f5 ffd5 	bl	8000a80 <__aeabi_dcmpeq>
 800aad6:	b108      	cbz	r0, 800aadc <_dtoa_r+0x6b4>
 800aad8:	07e3      	lsls	r3, r4, #31
 800aada:	d422      	bmi.n	800ab22 <_dtoa_r+0x6fa>
 800aadc:	4651      	mov	r1, sl
 800aade:	4628      	mov	r0, r5
 800aae0:	f000 fd7c 	bl	800b5dc <_Bfree>
 800aae4:	2300      	movs	r3, #0
 800aae6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aae8:	703b      	strb	r3, [r7, #0]
 800aaea:	f10b 0301 	add.w	r3, fp, #1
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f43f ace6 	beq.w	800a4c4 <_dtoa_r+0x9c>
 800aaf8:	601f      	str	r7, [r3, #0]
 800aafa:	e4e3      	b.n	800a4c4 <_dtoa_r+0x9c>
 800aafc:	4627      	mov	r7, r4
 800aafe:	463b      	mov	r3, r7
 800ab00:	461f      	mov	r7, r3
 800ab02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab06:	2a39      	cmp	r2, #57	; 0x39
 800ab08:	d107      	bne.n	800ab1a <_dtoa_r+0x6f2>
 800ab0a:	9a03      	ldr	r2, [sp, #12]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d1f7      	bne.n	800ab00 <_dtoa_r+0x6d8>
 800ab10:	2230      	movs	r2, #48	; 0x30
 800ab12:	9903      	ldr	r1, [sp, #12]
 800ab14:	f108 0801 	add.w	r8, r8, #1
 800ab18:	700a      	strb	r2, [r1, #0]
 800ab1a:	781a      	ldrb	r2, [r3, #0]
 800ab1c:	3201      	adds	r2, #1
 800ab1e:	701a      	strb	r2, [r3, #0]
 800ab20:	e79e      	b.n	800aa60 <_dtoa_r+0x638>
 800ab22:	46d8      	mov	r8, fp
 800ab24:	e7eb      	b.n	800aafe <_dtoa_r+0x6d6>
 800ab26:	2200      	movs	r2, #0
 800ab28:	4b6d      	ldr	r3, [pc, #436]	; (800ace0 <_dtoa_r+0x8b8>)
 800ab2a:	f7f5 fd41 	bl	80005b0 <__aeabi_dmul>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	2300      	movs	r3, #0
 800ab32:	4680      	mov	r8, r0
 800ab34:	4689      	mov	r9, r1
 800ab36:	f7f5 ffa3 	bl	8000a80 <__aeabi_dcmpeq>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d09b      	beq.n	800aa76 <_dtoa_r+0x64e>
 800ab3e:	e7cd      	b.n	800aadc <_dtoa_r+0x6b4>
 800ab40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	f000 80c4 	beq.w	800acd0 <_dtoa_r+0x8a8>
 800ab48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab4a:	2a01      	cmp	r2, #1
 800ab4c:	f300 80a8 	bgt.w	800aca0 <_dtoa_r+0x878>
 800ab50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab52:	2a00      	cmp	r2, #0
 800ab54:	f000 80a0 	beq.w	800ac98 <_dtoa_r+0x870>
 800ab58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab5c:	464f      	mov	r7, r9
 800ab5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab62:	2101      	movs	r1, #1
 800ab64:	441a      	add	r2, r3
 800ab66:	4628      	mov	r0, r5
 800ab68:	4499      	add	r9, r3
 800ab6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab6c:	f000 fdec 	bl	800b748 <__i2b>
 800ab70:	4606      	mov	r6, r0
 800ab72:	b15f      	cbz	r7, 800ab8c <_dtoa_r+0x764>
 800ab74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dd08      	ble.n	800ab8c <_dtoa_r+0x764>
 800ab7a:	42bb      	cmp	r3, r7
 800ab7c:	bfa8      	it	ge
 800ab7e:	463b      	movge	r3, r7
 800ab80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab82:	eba9 0903 	sub.w	r9, r9, r3
 800ab86:	1aff      	subs	r7, r7, r3
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8e:	b1f3      	cbz	r3, 800abce <_dtoa_r+0x7a6>
 800ab90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 80a0 	beq.w	800acd8 <_dtoa_r+0x8b0>
 800ab98:	2c00      	cmp	r4, #0
 800ab9a:	dd10      	ble.n	800abbe <_dtoa_r+0x796>
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 fe8f 	bl	800b8c4 <__pow5mult>
 800aba6:	4652      	mov	r2, sl
 800aba8:	4601      	mov	r1, r0
 800abaa:	4606      	mov	r6, r0
 800abac:	4628      	mov	r0, r5
 800abae:	f000 fde1 	bl	800b774 <__multiply>
 800abb2:	4680      	mov	r8, r0
 800abb4:	4651      	mov	r1, sl
 800abb6:	4628      	mov	r0, r5
 800abb8:	f000 fd10 	bl	800b5dc <_Bfree>
 800abbc:	46c2      	mov	sl, r8
 800abbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc0:	1b1a      	subs	r2, r3, r4
 800abc2:	d004      	beq.n	800abce <_dtoa_r+0x7a6>
 800abc4:	4651      	mov	r1, sl
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 fe7c 	bl	800b8c4 <__pow5mult>
 800abcc:	4682      	mov	sl, r0
 800abce:	2101      	movs	r1, #1
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 fdb9 	bl	800b748 <__i2b>
 800abd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abd8:	4604      	mov	r4, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f340 8082 	ble.w	800ace4 <_dtoa_r+0x8bc>
 800abe0:	461a      	mov	r2, r3
 800abe2:	4601      	mov	r1, r0
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 fe6d 	bl	800b8c4 <__pow5mult>
 800abea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abec:	4604      	mov	r4, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	dd7b      	ble.n	800acea <_dtoa_r+0x8c2>
 800abf2:	f04f 0800 	mov.w	r8, #0
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abfc:	6918      	ldr	r0, [r3, #16]
 800abfe:	f000 fd55 	bl	800b6ac <__hi0bits>
 800ac02:	f1c0 0020 	rsb	r0, r0, #32
 800ac06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac08:	4418      	add	r0, r3
 800ac0a:	f010 001f 	ands.w	r0, r0, #31
 800ac0e:	f000 8092 	beq.w	800ad36 <_dtoa_r+0x90e>
 800ac12:	f1c0 0320 	rsb	r3, r0, #32
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	f340 8085 	ble.w	800ad26 <_dtoa_r+0x8fe>
 800ac1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1e:	f1c0 001c 	rsb	r0, r0, #28
 800ac22:	4403      	add	r3, r0
 800ac24:	4481      	add	r9, r0
 800ac26:	4407      	add	r7, r0
 800ac28:	9309      	str	r3, [sp, #36]	; 0x24
 800ac2a:	f1b9 0f00 	cmp.w	r9, #0
 800ac2e:	dd05      	ble.n	800ac3c <_dtoa_r+0x814>
 800ac30:	4651      	mov	r1, sl
 800ac32:	464a      	mov	r2, r9
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 fe9f 	bl	800b978 <__lshift>
 800ac3a:	4682      	mov	sl, r0
 800ac3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	dd05      	ble.n	800ac4e <_dtoa_r+0x826>
 800ac42:	4621      	mov	r1, r4
 800ac44:	461a      	mov	r2, r3
 800ac46:	4628      	mov	r0, r5
 800ac48:	f000 fe96 	bl	800b978 <__lshift>
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d072      	beq.n	800ad3a <_dtoa_r+0x912>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4650      	mov	r0, sl
 800ac58:	f000 fefa 	bl	800ba50 <__mcmp>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	da6c      	bge.n	800ad3a <_dtoa_r+0x912>
 800ac60:	2300      	movs	r3, #0
 800ac62:	4651      	mov	r1, sl
 800ac64:	220a      	movs	r2, #10
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 fcda 	bl	800b620 <__multadd>
 800ac6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6e:	4682      	mov	sl, r0
 800ac70:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 81ac 	beq.w	800afd2 <_dtoa_r+0xbaa>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	220a      	movs	r2, #10
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fccd 	bl	800b620 <__multadd>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	4606      	mov	r6, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f300 8093 	bgt.w	800adb6 <_dtoa_r+0x98e>
 800ac90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	dc59      	bgt.n	800ad4a <_dtoa_r+0x922>
 800ac96:	e08e      	b.n	800adb6 <_dtoa_r+0x98e>
 800ac98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac9e:	e75d      	b.n	800ab5c <_dtoa_r+0x734>
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	1e5c      	subs	r4, r3, #1
 800aca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	bfbf      	itttt	lt
 800acaa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800acae:	1ae3      	sublt	r3, r4, r3
 800acb0:	18d2      	addlt	r2, r2, r3
 800acb2:	bfa8      	it	ge
 800acb4:	1b1c      	subge	r4, r3, r4
 800acb6:	9b08      	ldr	r3, [sp, #32]
 800acb8:	bfbe      	ittt	lt
 800acba:	940a      	strlt	r4, [sp, #40]	; 0x28
 800acbc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800acbe:	2400      	movlt	r4, #0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bfb5      	itete	lt
 800acc4:	eba9 0703 	sublt.w	r7, r9, r3
 800acc8:	464f      	movge	r7, r9
 800acca:	2300      	movlt	r3, #0
 800accc:	9b08      	ldrge	r3, [sp, #32]
 800acce:	e747      	b.n	800ab60 <_dtoa_r+0x738>
 800acd0:	464f      	mov	r7, r9
 800acd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acd6:	e74c      	b.n	800ab72 <_dtoa_r+0x74a>
 800acd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acda:	e773      	b.n	800abc4 <_dtoa_r+0x79c>
 800acdc:	3fe00000 	.word	0x3fe00000
 800ace0:	40240000 	.word	0x40240000
 800ace4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	dc18      	bgt.n	800ad1c <_dtoa_r+0x8f4>
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	b9b3      	cbnz	r3, 800ad1c <_dtoa_r+0x8f4>
 800acee:	9b05      	ldr	r3, [sp, #20]
 800acf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acf4:	b993      	cbnz	r3, 800ad1c <_dtoa_r+0x8f4>
 800acf6:	9b05      	ldr	r3, [sp, #20]
 800acf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	0d1b      	lsrs	r3, r3, #20
 800acfe:	051b      	lsls	r3, r3, #20
 800ad00:	b17b      	cbz	r3, 800ad22 <_dtoa_r+0x8fa>
 800ad02:	f04f 0801 	mov.w	r8, #1
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	f109 0901 	add.w	r9, r9, #1
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f47f af6f 	bne.w	800abf6 <_dtoa_r+0x7ce>
 800ad18:	2001      	movs	r0, #1
 800ad1a:	e774      	b.n	800ac06 <_dtoa_r+0x7de>
 800ad1c:	f04f 0800 	mov.w	r8, #0
 800ad20:	e7f6      	b.n	800ad10 <_dtoa_r+0x8e8>
 800ad22:	4698      	mov	r8, r3
 800ad24:	e7f4      	b.n	800ad10 <_dtoa_r+0x8e8>
 800ad26:	d080      	beq.n	800ac2a <_dtoa_r+0x802>
 800ad28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2a:	331c      	adds	r3, #28
 800ad2c:	441a      	add	r2, r3
 800ad2e:	4499      	add	r9, r3
 800ad30:	441f      	add	r7, r3
 800ad32:	9209      	str	r2, [sp, #36]	; 0x24
 800ad34:	e779      	b.n	800ac2a <_dtoa_r+0x802>
 800ad36:	4603      	mov	r3, r0
 800ad38:	e7f6      	b.n	800ad28 <_dtoa_r+0x900>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dc34      	bgt.n	800adaa <_dtoa_r+0x982>
 800ad40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	dd31      	ble.n	800adaa <_dtoa_r+0x982>
 800ad46:	9b08      	ldr	r3, [sp, #32]
 800ad48:	9306      	str	r3, [sp, #24]
 800ad4a:	9b06      	ldr	r3, [sp, #24]
 800ad4c:	b963      	cbnz	r3, 800ad68 <_dtoa_r+0x940>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	2205      	movs	r2, #5
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 fc64 	bl	800b620 <__multadd>
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	f000 fe77 	bl	800ba50 <__mcmp>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	f73f adbf 	bgt.w	800a8e6 <_dtoa_r+0x4be>
 800ad68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad6a:	9f03      	ldr	r7, [sp, #12]
 800ad6c:	ea6f 0b03 	mvn.w	fp, r3
 800ad70:	f04f 0800 	mov.w	r8, #0
 800ad74:	4621      	mov	r1, r4
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 fc30 	bl	800b5dc <_Bfree>
 800ad7c:	2e00      	cmp	r6, #0
 800ad7e:	f43f aead 	beq.w	800aadc <_dtoa_r+0x6b4>
 800ad82:	f1b8 0f00 	cmp.w	r8, #0
 800ad86:	d005      	beq.n	800ad94 <_dtoa_r+0x96c>
 800ad88:	45b0      	cmp	r8, r6
 800ad8a:	d003      	beq.n	800ad94 <_dtoa_r+0x96c>
 800ad8c:	4641      	mov	r1, r8
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f000 fc24 	bl	800b5dc <_Bfree>
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	f000 fc20 	bl	800b5dc <_Bfree>
 800ad9c:	e69e      	b.n	800aadc <_dtoa_r+0x6b4>
 800ad9e:	2400      	movs	r4, #0
 800ada0:	4626      	mov	r6, r4
 800ada2:	e7e1      	b.n	800ad68 <_dtoa_r+0x940>
 800ada4:	46c3      	mov	fp, r8
 800ada6:	4626      	mov	r6, r4
 800ada8:	e59d      	b.n	800a8e6 <_dtoa_r+0x4be>
 800adaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 80c8 	beq.w	800af42 <_dtoa_r+0xb1a>
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	9306      	str	r3, [sp, #24]
 800adb6:	2f00      	cmp	r7, #0
 800adb8:	dd05      	ble.n	800adc6 <_dtoa_r+0x99e>
 800adba:	4631      	mov	r1, r6
 800adbc:	463a      	mov	r2, r7
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 fdda 	bl	800b978 <__lshift>
 800adc4:	4606      	mov	r6, r0
 800adc6:	f1b8 0f00 	cmp.w	r8, #0
 800adca:	d05b      	beq.n	800ae84 <_dtoa_r+0xa5c>
 800adcc:	4628      	mov	r0, r5
 800adce:	6871      	ldr	r1, [r6, #4]
 800add0:	f000 fbc4 	bl	800b55c <_Balloc>
 800add4:	4607      	mov	r7, r0
 800add6:	b928      	cbnz	r0, 800ade4 <_dtoa_r+0x9bc>
 800add8:	4602      	mov	r2, r0
 800adda:	f240 21ef 	movw	r1, #751	; 0x2ef
 800adde:	4b81      	ldr	r3, [pc, #516]	; (800afe4 <_dtoa_r+0xbbc>)
 800ade0:	f7ff bb36 	b.w	800a450 <_dtoa_r+0x28>
 800ade4:	6932      	ldr	r2, [r6, #16]
 800ade6:	f106 010c 	add.w	r1, r6, #12
 800adea:	3202      	adds	r2, #2
 800adec:	0092      	lsls	r2, r2, #2
 800adee:	300c      	adds	r0, #12
 800adf0:	f7ff fa81 	bl	800a2f6 <memcpy>
 800adf4:	2201      	movs	r2, #1
 800adf6:	4639      	mov	r1, r7
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 fdbd 	bl	800b978 <__lshift>
 800adfe:	46b0      	mov	r8, r6
 800ae00:	4606      	mov	r6, r0
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	9a03      	ldr	r2, [sp, #12]
 800ae06:	3301      	adds	r3, #1
 800ae08:	9308      	str	r3, [sp, #32]
 800ae0a:	9b06      	ldr	r3, [sp, #24]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	930a      	str	r3, [sp, #40]	; 0x28
 800ae18:	9b08      	ldr	r3, [sp, #32]
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	4650      	mov	r0, sl
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	f7ff fa76 	bl	800a312 <quorem>
 800ae26:	4641      	mov	r1, r8
 800ae28:	9006      	str	r0, [sp, #24]
 800ae2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae2e:	4650      	mov	r0, sl
 800ae30:	f000 fe0e 	bl	800ba50 <__mcmp>
 800ae34:	4632      	mov	r2, r6
 800ae36:	9009      	str	r0, [sp, #36]	; 0x24
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f000 fe24 	bl	800ba88 <__mdiff>
 800ae40:	68c2      	ldr	r2, [r0, #12]
 800ae42:	4607      	mov	r7, r0
 800ae44:	bb02      	cbnz	r2, 800ae88 <_dtoa_r+0xa60>
 800ae46:	4601      	mov	r1, r0
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f000 fe01 	bl	800ba50 <__mcmp>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4639      	mov	r1, r7
 800ae52:	4628      	mov	r0, r5
 800ae54:	920c      	str	r2, [sp, #48]	; 0x30
 800ae56:	f000 fbc1 	bl	800b5dc <_Bfree>
 800ae5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae5e:	9f08      	ldr	r7, [sp, #32]
 800ae60:	ea43 0102 	orr.w	r1, r3, r2
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	4319      	orrs	r1, r3
 800ae68:	d110      	bne.n	800ae8c <_dtoa_r+0xa64>
 800ae6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae6e:	d029      	beq.n	800aec4 <_dtoa_r+0xa9c>
 800ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd02      	ble.n	800ae7c <_dtoa_r+0xa54>
 800ae76:	9b06      	ldr	r3, [sp, #24]
 800ae78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	f883 9000 	strb.w	r9, [r3]
 800ae82:	e777      	b.n	800ad74 <_dtoa_r+0x94c>
 800ae84:	4630      	mov	r0, r6
 800ae86:	e7ba      	b.n	800adfe <_dtoa_r+0x9d6>
 800ae88:	2201      	movs	r2, #1
 800ae8a:	e7e1      	b.n	800ae50 <_dtoa_r+0xa28>
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	db04      	blt.n	800ae9c <_dtoa_r+0xa74>
 800ae92:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae94:	430b      	orrs	r3, r1
 800ae96:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	d120      	bne.n	800aede <_dtoa_r+0xab6>
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	dded      	ble.n	800ae7c <_dtoa_r+0xa54>
 800aea0:	4651      	mov	r1, sl
 800aea2:	2201      	movs	r2, #1
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 fd67 	bl	800b978 <__lshift>
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4682      	mov	sl, r0
 800aeae:	f000 fdcf 	bl	800ba50 <__mcmp>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	dc03      	bgt.n	800aebe <_dtoa_r+0xa96>
 800aeb6:	d1e1      	bne.n	800ae7c <_dtoa_r+0xa54>
 800aeb8:	f019 0f01 	tst.w	r9, #1
 800aebc:	d0de      	beq.n	800ae7c <_dtoa_r+0xa54>
 800aebe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aec2:	d1d8      	bne.n	800ae76 <_dtoa_r+0xa4e>
 800aec4:	2339      	movs	r3, #57	; 0x39
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	7013      	strb	r3, [r2, #0]
 800aeca:	463b      	mov	r3, r7
 800aecc:	461f      	mov	r7, r3
 800aece:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	2a39      	cmp	r2, #57	; 0x39
 800aed6:	d06b      	beq.n	800afb0 <_dtoa_r+0xb88>
 800aed8:	3201      	adds	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	e74a      	b.n	800ad74 <_dtoa_r+0x94c>
 800aede:	2a00      	cmp	r2, #0
 800aee0:	dd07      	ble.n	800aef2 <_dtoa_r+0xaca>
 800aee2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aee6:	d0ed      	beq.n	800aec4 <_dtoa_r+0xa9c>
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	f109 0301 	add.w	r3, r9, #1
 800aeee:	7013      	strb	r3, [r2, #0]
 800aef0:	e740      	b.n	800ad74 <_dtoa_r+0x94c>
 800aef2:	9b08      	ldr	r3, [sp, #32]
 800aef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aef6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d042      	beq.n	800af84 <_dtoa_r+0xb5c>
 800aefe:	4651      	mov	r1, sl
 800af00:	2300      	movs	r3, #0
 800af02:	220a      	movs	r2, #10
 800af04:	4628      	mov	r0, r5
 800af06:	f000 fb8b 	bl	800b620 <__multadd>
 800af0a:	45b0      	cmp	r8, r6
 800af0c:	4682      	mov	sl, r0
 800af0e:	f04f 0300 	mov.w	r3, #0
 800af12:	f04f 020a 	mov.w	r2, #10
 800af16:	4641      	mov	r1, r8
 800af18:	4628      	mov	r0, r5
 800af1a:	d107      	bne.n	800af2c <_dtoa_r+0xb04>
 800af1c:	f000 fb80 	bl	800b620 <__multadd>
 800af20:	4680      	mov	r8, r0
 800af22:	4606      	mov	r6, r0
 800af24:	9b08      	ldr	r3, [sp, #32]
 800af26:	3301      	adds	r3, #1
 800af28:	9308      	str	r3, [sp, #32]
 800af2a:	e775      	b.n	800ae18 <_dtoa_r+0x9f0>
 800af2c:	f000 fb78 	bl	800b620 <__multadd>
 800af30:	4631      	mov	r1, r6
 800af32:	4680      	mov	r8, r0
 800af34:	2300      	movs	r3, #0
 800af36:	220a      	movs	r2, #10
 800af38:	4628      	mov	r0, r5
 800af3a:	f000 fb71 	bl	800b620 <__multadd>
 800af3e:	4606      	mov	r6, r0
 800af40:	e7f0      	b.n	800af24 <_dtoa_r+0xafc>
 800af42:	9b08      	ldr	r3, [sp, #32]
 800af44:	9306      	str	r3, [sp, #24]
 800af46:	9f03      	ldr	r7, [sp, #12]
 800af48:	4621      	mov	r1, r4
 800af4a:	4650      	mov	r0, sl
 800af4c:	f7ff f9e1 	bl	800a312 <quorem>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af56:	f807 9b01 	strb.w	r9, [r7], #1
 800af5a:	1afa      	subs	r2, r7, r3
 800af5c:	9b06      	ldr	r3, [sp, #24]
 800af5e:	4293      	cmp	r3, r2
 800af60:	dd07      	ble.n	800af72 <_dtoa_r+0xb4a>
 800af62:	4651      	mov	r1, sl
 800af64:	2300      	movs	r3, #0
 800af66:	220a      	movs	r2, #10
 800af68:	4628      	mov	r0, r5
 800af6a:	f000 fb59 	bl	800b620 <__multadd>
 800af6e:	4682      	mov	sl, r0
 800af70:	e7ea      	b.n	800af48 <_dtoa_r+0xb20>
 800af72:	9b06      	ldr	r3, [sp, #24]
 800af74:	f04f 0800 	mov.w	r8, #0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfcc      	ite	gt
 800af7c:	461f      	movgt	r7, r3
 800af7e:	2701      	movle	r7, #1
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	441f      	add	r7, r3
 800af84:	4651      	mov	r1, sl
 800af86:	2201      	movs	r2, #1
 800af88:	4628      	mov	r0, r5
 800af8a:	f000 fcf5 	bl	800b978 <__lshift>
 800af8e:	4621      	mov	r1, r4
 800af90:	4682      	mov	sl, r0
 800af92:	f000 fd5d 	bl	800ba50 <__mcmp>
 800af96:	2800      	cmp	r0, #0
 800af98:	dc97      	bgt.n	800aeca <_dtoa_r+0xaa2>
 800af9a:	d102      	bne.n	800afa2 <_dtoa_r+0xb7a>
 800af9c:	f019 0f01 	tst.w	r9, #1
 800afa0:	d193      	bne.n	800aeca <_dtoa_r+0xaa2>
 800afa2:	463b      	mov	r3, r7
 800afa4:	461f      	mov	r7, r3
 800afa6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afaa:	2a30      	cmp	r2, #48	; 0x30
 800afac:	d0fa      	beq.n	800afa4 <_dtoa_r+0xb7c>
 800afae:	e6e1      	b.n	800ad74 <_dtoa_r+0x94c>
 800afb0:	9a03      	ldr	r2, [sp, #12]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d18a      	bne.n	800aecc <_dtoa_r+0xaa4>
 800afb6:	2331      	movs	r3, #49	; 0x31
 800afb8:	f10b 0b01 	add.w	fp, fp, #1
 800afbc:	e797      	b.n	800aeee <_dtoa_r+0xac6>
 800afbe:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <_dtoa_r+0xbc0>)
 800afc0:	f7ff ba9f 	b.w	800a502 <_dtoa_r+0xda>
 800afc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f47f aa77 	bne.w	800a4ba <_dtoa_r+0x92>
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <_dtoa_r+0xbc4>)
 800afce:	f7ff ba98 	b.w	800a502 <_dtoa_r+0xda>
 800afd2:	9b06      	ldr	r3, [sp, #24]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dcb6      	bgt.n	800af46 <_dtoa_r+0xb1e>
 800afd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afda:	2b02      	cmp	r3, #2
 800afdc:	f73f aeb5 	bgt.w	800ad4a <_dtoa_r+0x922>
 800afe0:	e7b1      	b.n	800af46 <_dtoa_r+0xb1e>
 800afe2:	bf00      	nop
 800afe4:	0800ce10 	.word	0x0800ce10
 800afe8:	0800cd70 	.word	0x0800cd70
 800afec:	0800cd94 	.word	0x0800cd94

0800aff0 <__ssputs_r>:
 800aff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff4:	461f      	mov	r7, r3
 800aff6:	688e      	ldr	r6, [r1, #8]
 800aff8:	4682      	mov	sl, r0
 800affa:	42be      	cmp	r6, r7
 800affc:	460c      	mov	r4, r1
 800affe:	4690      	mov	r8, r2
 800b000:	680b      	ldr	r3, [r1, #0]
 800b002:	d82c      	bhi.n	800b05e <__ssputs_r+0x6e>
 800b004:	898a      	ldrh	r2, [r1, #12]
 800b006:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b00a:	d026      	beq.n	800b05a <__ssputs_r+0x6a>
 800b00c:	6965      	ldr	r5, [r4, #20]
 800b00e:	6909      	ldr	r1, [r1, #16]
 800b010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b014:	eba3 0901 	sub.w	r9, r3, r1
 800b018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b01c:	1c7b      	adds	r3, r7, #1
 800b01e:	444b      	add	r3, r9
 800b020:	106d      	asrs	r5, r5, #1
 800b022:	429d      	cmp	r5, r3
 800b024:	bf38      	it	cc
 800b026:	461d      	movcc	r5, r3
 800b028:	0553      	lsls	r3, r2, #21
 800b02a:	d527      	bpl.n	800b07c <__ssputs_r+0x8c>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f000 f95f 	bl	800b2f0 <_malloc_r>
 800b032:	4606      	mov	r6, r0
 800b034:	b360      	cbz	r0, 800b090 <__ssputs_r+0xa0>
 800b036:	464a      	mov	r2, r9
 800b038:	6921      	ldr	r1, [r4, #16]
 800b03a:	f7ff f95c 	bl	800a2f6 <memcpy>
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	6126      	str	r6, [r4, #16]
 800b04c:	444e      	add	r6, r9
 800b04e:	6026      	str	r6, [r4, #0]
 800b050:	463e      	mov	r6, r7
 800b052:	6165      	str	r5, [r4, #20]
 800b054:	eba5 0509 	sub.w	r5, r5, r9
 800b058:	60a5      	str	r5, [r4, #8]
 800b05a:	42be      	cmp	r6, r7
 800b05c:	d900      	bls.n	800b060 <__ssputs_r+0x70>
 800b05e:	463e      	mov	r6, r7
 800b060:	4632      	mov	r2, r6
 800b062:	4641      	mov	r1, r8
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	f000 fe63 	bl	800bd30 <memmove>
 800b06a:	2000      	movs	r0, #0
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	1b9b      	subs	r3, r3, r6
 800b070:	60a3      	str	r3, [r4, #8]
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	4433      	add	r3, r6
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07c:	462a      	mov	r2, r5
 800b07e:	f000 fe28 	bl	800bcd2 <_realloc_r>
 800b082:	4606      	mov	r6, r0
 800b084:	2800      	cmp	r0, #0
 800b086:	d1e0      	bne.n	800b04a <__ssputs_r+0x5a>
 800b088:	4650      	mov	r0, sl
 800b08a:	6921      	ldr	r1, [r4, #16]
 800b08c:	f000 fef2 	bl	800be74 <_free_r>
 800b090:	230c      	movs	r3, #12
 800b092:	f8ca 3000 	str.w	r3, [sl]
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	e7e9      	b.n	800b078 <__ssputs_r+0x88>

0800b0a4 <_svfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4698      	mov	r8, r3
 800b0aa:	898b      	ldrh	r3, [r1, #12]
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	061b      	lsls	r3, r3, #24
 800b0b0:	460d      	mov	r5, r1
 800b0b2:	4614      	mov	r4, r2
 800b0b4:	b09d      	sub	sp, #116	; 0x74
 800b0b6:	d50e      	bpl.n	800b0d6 <_svfiprintf_r+0x32>
 800b0b8:	690b      	ldr	r3, [r1, #16]
 800b0ba:	b963      	cbnz	r3, 800b0d6 <_svfiprintf_r+0x32>
 800b0bc:	2140      	movs	r1, #64	; 0x40
 800b0be:	f000 f917 	bl	800b2f0 <_malloc_r>
 800b0c2:	6028      	str	r0, [r5, #0]
 800b0c4:	6128      	str	r0, [r5, #16]
 800b0c6:	b920      	cbnz	r0, 800b0d2 <_svfiprintf_r+0x2e>
 800b0c8:	230c      	movs	r3, #12
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0d0:	e0d0      	b.n	800b274 <_svfiprintf_r+0x1d0>
 800b0d2:	2340      	movs	r3, #64	; 0x40
 800b0d4:	616b      	str	r3, [r5, #20]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0da:	2320      	movs	r3, #32
 800b0dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e0:	2330      	movs	r3, #48	; 0x30
 800b0e2:	f04f 0901 	mov.w	r9, #1
 800b0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b28c <_svfiprintf_r+0x1e8>
 800b0ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f2:	4623      	mov	r3, r4
 800b0f4:	469a      	mov	sl, r3
 800b0f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fa:	b10a      	cbz	r2, 800b100 <_svfiprintf_r+0x5c>
 800b0fc:	2a25      	cmp	r2, #37	; 0x25
 800b0fe:	d1f9      	bne.n	800b0f4 <_svfiprintf_r+0x50>
 800b100:	ebba 0b04 	subs.w	fp, sl, r4
 800b104:	d00b      	beq.n	800b11e <_svfiprintf_r+0x7a>
 800b106:	465b      	mov	r3, fp
 800b108:	4622      	mov	r2, r4
 800b10a:	4629      	mov	r1, r5
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff ff6f 	bl	800aff0 <__ssputs_r>
 800b112:	3001      	adds	r0, #1
 800b114:	f000 80a9 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b11a:	445a      	add	r2, fp
 800b11c:	9209      	str	r2, [sp, #36]	; 0x24
 800b11e:	f89a 3000 	ldrb.w	r3, [sl]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 80a1 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b128:	2300      	movs	r3, #0
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b12e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b132:	f10a 0a01 	add.w	sl, sl, #1
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	9307      	str	r3, [sp, #28]
 800b13a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b13e:	931a      	str	r3, [sp, #104]	; 0x68
 800b140:	4654      	mov	r4, sl
 800b142:	2205      	movs	r2, #5
 800b144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b148:	4850      	ldr	r0, [pc, #320]	; (800b28c <_svfiprintf_r+0x1e8>)
 800b14a:	f7ff f8c6 	bl	800a2da <memchr>
 800b14e:	9a04      	ldr	r2, [sp, #16]
 800b150:	b9d8      	cbnz	r0, 800b18a <_svfiprintf_r+0xe6>
 800b152:	06d0      	lsls	r0, r2, #27
 800b154:	bf44      	itt	mi
 800b156:	2320      	movmi	r3, #32
 800b158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b15c:	0711      	lsls	r1, r2, #28
 800b15e:	bf44      	itt	mi
 800b160:	232b      	movmi	r3, #43	; 0x2b
 800b162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b166:	f89a 3000 	ldrb.w	r3, [sl]
 800b16a:	2b2a      	cmp	r3, #42	; 0x2a
 800b16c:	d015      	beq.n	800b19a <_svfiprintf_r+0xf6>
 800b16e:	4654      	mov	r4, sl
 800b170:	2000      	movs	r0, #0
 800b172:	f04f 0c0a 	mov.w	ip, #10
 800b176:	9a07      	ldr	r2, [sp, #28]
 800b178:	4621      	mov	r1, r4
 800b17a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b17e:	3b30      	subs	r3, #48	; 0x30
 800b180:	2b09      	cmp	r3, #9
 800b182:	d94d      	bls.n	800b220 <_svfiprintf_r+0x17c>
 800b184:	b1b0      	cbz	r0, 800b1b4 <_svfiprintf_r+0x110>
 800b186:	9207      	str	r2, [sp, #28]
 800b188:	e014      	b.n	800b1b4 <_svfiprintf_r+0x110>
 800b18a:	eba0 0308 	sub.w	r3, r0, r8
 800b18e:	fa09 f303 	lsl.w	r3, r9, r3
 800b192:	4313      	orrs	r3, r2
 800b194:	46a2      	mov	sl, r4
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	e7d2      	b.n	800b140 <_svfiprintf_r+0x9c>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	1d19      	adds	r1, r3, #4
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	9103      	str	r1, [sp, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bfbb      	ittet	lt
 800b1a6:	425b      	neglt	r3, r3
 800b1a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b1ac:	9307      	strge	r3, [sp, #28]
 800b1ae:	9307      	strlt	r3, [sp, #28]
 800b1b0:	bfb8      	it	lt
 800b1b2:	9204      	strlt	r2, [sp, #16]
 800b1b4:	7823      	ldrb	r3, [r4, #0]
 800b1b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b1b8:	d10c      	bne.n	800b1d4 <_svfiprintf_r+0x130>
 800b1ba:	7863      	ldrb	r3, [r4, #1]
 800b1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1be:	d134      	bne.n	800b22a <_svfiprintf_r+0x186>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	3402      	adds	r4, #2
 800b1c4:	1d1a      	adds	r2, r3, #4
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	9203      	str	r2, [sp, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfb8      	it	lt
 800b1ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b290 <_svfiprintf_r+0x1ec>
 800b1d8:	2203      	movs	r2, #3
 800b1da:	4650      	mov	r0, sl
 800b1dc:	7821      	ldrb	r1, [r4, #0]
 800b1de:	f7ff f87c 	bl	800a2da <memchr>
 800b1e2:	b138      	cbz	r0, 800b1f4 <_svfiprintf_r+0x150>
 800b1e4:	2240      	movs	r2, #64	; 0x40
 800b1e6:	9b04      	ldr	r3, [sp, #16]
 800b1e8:	eba0 000a 	sub.w	r0, r0, sl
 800b1ec:	4082      	lsls	r2, r0
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	3401      	adds	r4, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f8:	2206      	movs	r2, #6
 800b1fa:	4826      	ldr	r0, [pc, #152]	; (800b294 <_svfiprintf_r+0x1f0>)
 800b1fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b200:	f7ff f86b 	bl	800a2da <memchr>
 800b204:	2800      	cmp	r0, #0
 800b206:	d038      	beq.n	800b27a <_svfiprintf_r+0x1d6>
 800b208:	4b23      	ldr	r3, [pc, #140]	; (800b298 <_svfiprintf_r+0x1f4>)
 800b20a:	bb1b      	cbnz	r3, 800b254 <_svfiprintf_r+0x1b0>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	3307      	adds	r3, #7
 800b210:	f023 0307 	bic.w	r3, r3, #7
 800b214:	3308      	adds	r3, #8
 800b216:	9303      	str	r3, [sp, #12]
 800b218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21a:	4433      	add	r3, r6
 800b21c:	9309      	str	r3, [sp, #36]	; 0x24
 800b21e:	e768      	b.n	800b0f2 <_svfiprintf_r+0x4e>
 800b220:	460c      	mov	r4, r1
 800b222:	2001      	movs	r0, #1
 800b224:	fb0c 3202 	mla	r2, ip, r2, r3
 800b228:	e7a6      	b.n	800b178 <_svfiprintf_r+0xd4>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f04f 0c0a 	mov.w	ip, #10
 800b230:	4619      	mov	r1, r3
 800b232:	3401      	adds	r4, #1
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	4620      	mov	r0, r4
 800b238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b23c:	3a30      	subs	r2, #48	; 0x30
 800b23e:	2a09      	cmp	r2, #9
 800b240:	d903      	bls.n	800b24a <_svfiprintf_r+0x1a6>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0c6      	beq.n	800b1d4 <_svfiprintf_r+0x130>
 800b246:	9105      	str	r1, [sp, #20]
 800b248:	e7c4      	b.n	800b1d4 <_svfiprintf_r+0x130>
 800b24a:	4604      	mov	r4, r0
 800b24c:	2301      	movs	r3, #1
 800b24e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b252:	e7f0      	b.n	800b236 <_svfiprintf_r+0x192>
 800b254:	ab03      	add	r3, sp, #12
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	462a      	mov	r2, r5
 800b25a:	4638      	mov	r0, r7
 800b25c:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <_svfiprintf_r+0x1f8>)
 800b25e:	a904      	add	r1, sp, #16
 800b260:	f7fe fb4a 	bl	80098f8 <_printf_float>
 800b264:	1c42      	adds	r2, r0, #1
 800b266:	4606      	mov	r6, r0
 800b268:	d1d6      	bne.n	800b218 <_svfiprintf_r+0x174>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	065b      	lsls	r3, r3, #25
 800b26e:	f53f af2d 	bmi.w	800b0cc <_svfiprintf_r+0x28>
 800b272:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b274:	b01d      	add	sp, #116	; 0x74
 800b276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27a:	ab03      	add	r3, sp, #12
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	462a      	mov	r2, r5
 800b280:	4638      	mov	r0, r7
 800b282:	4b06      	ldr	r3, [pc, #24]	; (800b29c <_svfiprintf_r+0x1f8>)
 800b284:	a904      	add	r1, sp, #16
 800b286:	f7fe fdd7 	bl	8009e38 <_printf_i>
 800b28a:	e7eb      	b.n	800b264 <_svfiprintf_r+0x1c0>
 800b28c:	0800ce21 	.word	0x0800ce21
 800b290:	0800ce27 	.word	0x0800ce27
 800b294:	0800ce2b 	.word	0x0800ce2b
 800b298:	080098f9 	.word	0x080098f9
 800b29c:	0800aff1 	.word	0x0800aff1

0800b2a0 <malloc>:
 800b2a0:	4b02      	ldr	r3, [pc, #8]	; (800b2ac <malloc+0xc>)
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f000 b823 	b.w	800b2f0 <_malloc_r>
 800b2aa:	bf00      	nop
 800b2ac:	200001d4 	.word	0x200001d4

0800b2b0 <sbrk_aligned>:
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	4e0e      	ldr	r6, [pc, #56]	; (800b2ec <sbrk_aligned+0x3c>)
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	6831      	ldr	r1, [r6, #0]
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	b911      	cbnz	r1, 800b2c2 <sbrk_aligned+0x12>
 800b2bc:	f000 fd86 	bl	800bdcc <_sbrk_r>
 800b2c0:	6030      	str	r0, [r6, #0]
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f000 fd81 	bl	800bdcc <_sbrk_r>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d00a      	beq.n	800b2e4 <sbrk_aligned+0x34>
 800b2ce:	1cc4      	adds	r4, r0, #3
 800b2d0:	f024 0403 	bic.w	r4, r4, #3
 800b2d4:	42a0      	cmp	r0, r4
 800b2d6:	d007      	beq.n	800b2e8 <sbrk_aligned+0x38>
 800b2d8:	1a21      	subs	r1, r4, r0
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f000 fd76 	bl	800bdcc <_sbrk_r>
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d101      	bne.n	800b2e8 <sbrk_aligned+0x38>
 800b2e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	20001a88 	.word	0x20001a88

0800b2f0 <_malloc_r>:
 800b2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f4:	1ccd      	adds	r5, r1, #3
 800b2f6:	f025 0503 	bic.w	r5, r5, #3
 800b2fa:	3508      	adds	r5, #8
 800b2fc:	2d0c      	cmp	r5, #12
 800b2fe:	bf38      	it	cc
 800b300:	250c      	movcc	r5, #12
 800b302:	2d00      	cmp	r5, #0
 800b304:	4607      	mov	r7, r0
 800b306:	db01      	blt.n	800b30c <_malloc_r+0x1c>
 800b308:	42a9      	cmp	r1, r5
 800b30a:	d905      	bls.n	800b318 <_malloc_r+0x28>
 800b30c:	230c      	movs	r3, #12
 800b30e:	2600      	movs	r6, #0
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	4630      	mov	r0, r6
 800b314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b318:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b3ec <_malloc_r+0xfc>
 800b31c:	f000 f912 	bl	800b544 <__malloc_lock>
 800b320:	f8d8 3000 	ldr.w	r3, [r8]
 800b324:	461c      	mov	r4, r3
 800b326:	bb5c      	cbnz	r4, 800b380 <_malloc_r+0x90>
 800b328:	4629      	mov	r1, r5
 800b32a:	4638      	mov	r0, r7
 800b32c:	f7ff ffc0 	bl	800b2b0 <sbrk_aligned>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	4604      	mov	r4, r0
 800b334:	d155      	bne.n	800b3e2 <_malloc_r+0xf2>
 800b336:	f8d8 4000 	ldr.w	r4, [r8]
 800b33a:	4626      	mov	r6, r4
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	d145      	bne.n	800b3cc <_malloc_r+0xdc>
 800b340:	2c00      	cmp	r4, #0
 800b342:	d048      	beq.n	800b3d6 <_malloc_r+0xe6>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	4631      	mov	r1, r6
 800b348:	4638      	mov	r0, r7
 800b34a:	eb04 0903 	add.w	r9, r4, r3
 800b34e:	f000 fd3d 	bl	800bdcc <_sbrk_r>
 800b352:	4581      	cmp	r9, r0
 800b354:	d13f      	bne.n	800b3d6 <_malloc_r+0xe6>
 800b356:	6821      	ldr	r1, [r4, #0]
 800b358:	4638      	mov	r0, r7
 800b35a:	1a6d      	subs	r5, r5, r1
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7ff ffa7 	bl	800b2b0 <sbrk_aligned>
 800b362:	3001      	adds	r0, #1
 800b364:	d037      	beq.n	800b3d6 <_malloc_r+0xe6>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	442b      	add	r3, r5
 800b36a:	6023      	str	r3, [r4, #0]
 800b36c:	f8d8 3000 	ldr.w	r3, [r8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d038      	beq.n	800b3e6 <_malloc_r+0xf6>
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	42a2      	cmp	r2, r4
 800b378:	d12b      	bne.n	800b3d2 <_malloc_r+0xe2>
 800b37a:	2200      	movs	r2, #0
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	e00f      	b.n	800b3a0 <_malloc_r+0xb0>
 800b380:	6822      	ldr	r2, [r4, #0]
 800b382:	1b52      	subs	r2, r2, r5
 800b384:	d41f      	bmi.n	800b3c6 <_malloc_r+0xd6>
 800b386:	2a0b      	cmp	r2, #11
 800b388:	d917      	bls.n	800b3ba <_malloc_r+0xca>
 800b38a:	1961      	adds	r1, r4, r5
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	6025      	str	r5, [r4, #0]
 800b390:	bf18      	it	ne
 800b392:	6059      	strne	r1, [r3, #4]
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	bf08      	it	eq
 800b398:	f8c8 1000 	streq.w	r1, [r8]
 800b39c:	5162      	str	r2, [r4, r5]
 800b39e:	604b      	str	r3, [r1, #4]
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	f104 060b 	add.w	r6, r4, #11
 800b3a6:	f000 f8d3 	bl	800b550 <__malloc_unlock>
 800b3aa:	f026 0607 	bic.w	r6, r6, #7
 800b3ae:	1d23      	adds	r3, r4, #4
 800b3b0:	1af2      	subs	r2, r6, r3
 800b3b2:	d0ae      	beq.n	800b312 <_malloc_r+0x22>
 800b3b4:	1b9b      	subs	r3, r3, r6
 800b3b6:	50a3      	str	r3, [r4, r2]
 800b3b8:	e7ab      	b.n	800b312 <_malloc_r+0x22>
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	6862      	ldr	r2, [r4, #4]
 800b3be:	d1dd      	bne.n	800b37c <_malloc_r+0x8c>
 800b3c0:	f8c8 2000 	str.w	r2, [r8]
 800b3c4:	e7ec      	b.n	800b3a0 <_malloc_r+0xb0>
 800b3c6:	4623      	mov	r3, r4
 800b3c8:	6864      	ldr	r4, [r4, #4]
 800b3ca:	e7ac      	b.n	800b326 <_malloc_r+0x36>
 800b3cc:	4634      	mov	r4, r6
 800b3ce:	6876      	ldr	r6, [r6, #4]
 800b3d0:	e7b4      	b.n	800b33c <_malloc_r+0x4c>
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	e7cc      	b.n	800b370 <_malloc_r+0x80>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	4638      	mov	r0, r7
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	f000 f8b8 	bl	800b550 <__malloc_unlock>
 800b3e0:	e797      	b.n	800b312 <_malloc_r+0x22>
 800b3e2:	6025      	str	r5, [r4, #0]
 800b3e4:	e7dc      	b.n	800b3a0 <_malloc_r+0xb0>
 800b3e6:	605b      	str	r3, [r3, #4]
 800b3e8:	deff      	udf	#255	; 0xff
 800b3ea:	bf00      	nop
 800b3ec:	20001a84 	.word	0x20001a84

0800b3f0 <__sflush_r>:
 800b3f0:	898a      	ldrh	r2, [r1, #12]
 800b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	0710      	lsls	r0, r2, #28
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	d457      	bmi.n	800b4ac <__sflush_r+0xbc>
 800b3fc:	684b      	ldr	r3, [r1, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dc04      	bgt.n	800b40c <__sflush_r+0x1c>
 800b402:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b404:	2b00      	cmp	r3, #0
 800b406:	dc01      	bgt.n	800b40c <__sflush_r+0x1c>
 800b408:	2000      	movs	r0, #0
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b40e:	2e00      	cmp	r6, #0
 800b410:	d0fa      	beq.n	800b408 <__sflush_r+0x18>
 800b412:	2300      	movs	r3, #0
 800b414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b418:	682f      	ldr	r7, [r5, #0]
 800b41a:	6a21      	ldr	r1, [r4, #32]
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	d032      	beq.n	800b486 <__sflush_r+0x96>
 800b420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b422:	89a3      	ldrh	r3, [r4, #12]
 800b424:	075a      	lsls	r2, r3, #29
 800b426:	d505      	bpl.n	800b434 <__sflush_r+0x44>
 800b428:	6863      	ldr	r3, [r4, #4]
 800b42a:	1ac0      	subs	r0, r0, r3
 800b42c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b42e:	b10b      	cbz	r3, 800b434 <__sflush_r+0x44>
 800b430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b432:	1ac0      	subs	r0, r0, r3
 800b434:	2300      	movs	r3, #0
 800b436:	4602      	mov	r2, r0
 800b438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b43a:	4628      	mov	r0, r5
 800b43c:	6a21      	ldr	r1, [r4, #32]
 800b43e:	47b0      	blx	r6
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	d106      	bne.n	800b454 <__sflush_r+0x64>
 800b446:	6829      	ldr	r1, [r5, #0]
 800b448:	291d      	cmp	r1, #29
 800b44a:	d82b      	bhi.n	800b4a4 <__sflush_r+0xb4>
 800b44c:	4a28      	ldr	r2, [pc, #160]	; (800b4f0 <__sflush_r+0x100>)
 800b44e:	410a      	asrs	r2, r1
 800b450:	07d6      	lsls	r6, r2, #31
 800b452:	d427      	bmi.n	800b4a4 <__sflush_r+0xb4>
 800b454:	2200      	movs	r2, #0
 800b456:	6062      	str	r2, [r4, #4]
 800b458:	6922      	ldr	r2, [r4, #16]
 800b45a:	04d9      	lsls	r1, r3, #19
 800b45c:	6022      	str	r2, [r4, #0]
 800b45e:	d504      	bpl.n	800b46a <__sflush_r+0x7a>
 800b460:	1c42      	adds	r2, r0, #1
 800b462:	d101      	bne.n	800b468 <__sflush_r+0x78>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b903      	cbnz	r3, 800b46a <__sflush_r+0x7a>
 800b468:	6560      	str	r0, [r4, #84]	; 0x54
 800b46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b46c:	602f      	str	r7, [r5, #0]
 800b46e:	2900      	cmp	r1, #0
 800b470:	d0ca      	beq.n	800b408 <__sflush_r+0x18>
 800b472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b476:	4299      	cmp	r1, r3
 800b478:	d002      	beq.n	800b480 <__sflush_r+0x90>
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 fcfa 	bl	800be74 <_free_r>
 800b480:	2000      	movs	r0, #0
 800b482:	6360      	str	r0, [r4, #52]	; 0x34
 800b484:	e7c1      	b.n	800b40a <__sflush_r+0x1a>
 800b486:	2301      	movs	r3, #1
 800b488:	4628      	mov	r0, r5
 800b48a:	47b0      	blx	r6
 800b48c:	1c41      	adds	r1, r0, #1
 800b48e:	d1c8      	bne.n	800b422 <__sflush_r+0x32>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0c5      	beq.n	800b422 <__sflush_r+0x32>
 800b496:	2b1d      	cmp	r3, #29
 800b498:	d001      	beq.n	800b49e <__sflush_r+0xae>
 800b49a:	2b16      	cmp	r3, #22
 800b49c:	d101      	bne.n	800b4a2 <__sflush_r+0xb2>
 800b49e:	602f      	str	r7, [r5, #0]
 800b4a0:	e7b2      	b.n	800b408 <__sflush_r+0x18>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	e7ae      	b.n	800b40a <__sflush_r+0x1a>
 800b4ac:	690f      	ldr	r7, [r1, #16]
 800b4ae:	2f00      	cmp	r7, #0
 800b4b0:	d0aa      	beq.n	800b408 <__sflush_r+0x18>
 800b4b2:	0793      	lsls	r3, r2, #30
 800b4b4:	bf18      	it	ne
 800b4b6:	2300      	movne	r3, #0
 800b4b8:	680e      	ldr	r6, [r1, #0]
 800b4ba:	bf08      	it	eq
 800b4bc:	694b      	ldreq	r3, [r1, #20]
 800b4be:	1bf6      	subs	r6, r6, r7
 800b4c0:	600f      	str	r7, [r1, #0]
 800b4c2:	608b      	str	r3, [r1, #8]
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	dd9f      	ble.n	800b408 <__sflush_r+0x18>
 800b4c8:	4633      	mov	r3, r6
 800b4ca:	463a      	mov	r2, r7
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	6a21      	ldr	r1, [r4, #32]
 800b4d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b4d4:	47e0      	blx	ip
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	dc06      	bgt.n	800b4e8 <__sflush_r+0xf8>
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	e790      	b.n	800b40a <__sflush_r+0x1a>
 800b4e8:	4407      	add	r7, r0
 800b4ea:	1a36      	subs	r6, r6, r0
 800b4ec:	e7ea      	b.n	800b4c4 <__sflush_r+0xd4>
 800b4ee:	bf00      	nop
 800b4f0:	dfbffffe 	.word	0xdfbffffe

0800b4f4 <_fflush_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	b913      	cbnz	r3, 800b504 <_fflush_r+0x10>
 800b4fe:	2500      	movs	r5, #0
 800b500:	4628      	mov	r0, r5
 800b502:	bd38      	pop	{r3, r4, r5, pc}
 800b504:	b118      	cbz	r0, 800b50e <_fflush_r+0x1a>
 800b506:	6a03      	ldr	r3, [r0, #32]
 800b508:	b90b      	cbnz	r3, 800b50e <_fflush_r+0x1a>
 800b50a:	f7fe fe63 	bl	800a1d4 <__sinit>
 800b50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0f3      	beq.n	800b4fe <_fflush_r+0xa>
 800b516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b518:	07d0      	lsls	r0, r2, #31
 800b51a:	d404      	bmi.n	800b526 <_fflush_r+0x32>
 800b51c:	0599      	lsls	r1, r3, #22
 800b51e:	d402      	bmi.n	800b526 <_fflush_r+0x32>
 800b520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b522:	f7fe fed8 	bl	800a2d6 <__retarget_lock_acquire_recursive>
 800b526:	4628      	mov	r0, r5
 800b528:	4621      	mov	r1, r4
 800b52a:	f7ff ff61 	bl	800b3f0 <__sflush_r>
 800b52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b530:	4605      	mov	r5, r0
 800b532:	07da      	lsls	r2, r3, #31
 800b534:	d4e4      	bmi.n	800b500 <_fflush_r+0xc>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	059b      	lsls	r3, r3, #22
 800b53a:	d4e1      	bmi.n	800b500 <_fflush_r+0xc>
 800b53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b53e:	f7fe fecb 	bl	800a2d8 <__retarget_lock_release_recursive>
 800b542:	e7dd      	b.n	800b500 <_fflush_r+0xc>

0800b544 <__malloc_lock>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__malloc_lock+0x8>)
 800b546:	f7fe bec6 	b.w	800a2d6 <__retarget_lock_acquire_recursive>
 800b54a:	bf00      	nop
 800b54c:	20001a80 	.word	0x20001a80

0800b550 <__malloc_unlock>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__malloc_unlock+0x8>)
 800b552:	f7fe bec1 	b.w	800a2d8 <__retarget_lock_release_recursive>
 800b556:	bf00      	nop
 800b558:	20001a80 	.word	0x20001a80

0800b55c <_Balloc>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	69c6      	ldr	r6, [r0, #28]
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	b976      	cbnz	r6, 800b584 <_Balloc+0x28>
 800b566:	2010      	movs	r0, #16
 800b568:	f7ff fe9a 	bl	800b2a0 <malloc>
 800b56c:	4602      	mov	r2, r0
 800b56e:	61e0      	str	r0, [r4, #28]
 800b570:	b920      	cbnz	r0, 800b57c <_Balloc+0x20>
 800b572:	216b      	movs	r1, #107	; 0x6b
 800b574:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <_Balloc+0x78>)
 800b576:	4818      	ldr	r0, [pc, #96]	; (800b5d8 <_Balloc+0x7c>)
 800b578:	f000 fc4a 	bl	800be10 <__assert_func>
 800b57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b580:	6006      	str	r6, [r0, #0]
 800b582:	60c6      	str	r6, [r0, #12]
 800b584:	69e6      	ldr	r6, [r4, #28]
 800b586:	68f3      	ldr	r3, [r6, #12]
 800b588:	b183      	cbz	r3, 800b5ac <_Balloc+0x50>
 800b58a:	69e3      	ldr	r3, [r4, #28]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b592:	b9b8      	cbnz	r0, 800b5c4 <_Balloc+0x68>
 800b594:	2101      	movs	r1, #1
 800b596:	fa01 f605 	lsl.w	r6, r1, r5
 800b59a:	1d72      	adds	r2, r6, #5
 800b59c:	4620      	mov	r0, r4
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	f000 fc54 	bl	800be4c <_calloc_r>
 800b5a4:	b160      	cbz	r0, 800b5c0 <_Balloc+0x64>
 800b5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5aa:	e00e      	b.n	800b5ca <_Balloc+0x6e>
 800b5ac:	2221      	movs	r2, #33	; 0x21
 800b5ae:	2104      	movs	r1, #4
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f000 fc4b 	bl	800be4c <_calloc_r>
 800b5b6:	69e3      	ldr	r3, [r4, #28]
 800b5b8:	60f0      	str	r0, [r6, #12]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e4      	bne.n	800b58a <_Balloc+0x2e>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	6802      	ldr	r2, [r0, #0]
 800b5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5d0:	e7f7      	b.n	800b5c2 <_Balloc+0x66>
 800b5d2:	bf00      	nop
 800b5d4:	0800cda1 	.word	0x0800cda1
 800b5d8:	0800ce32 	.word	0x0800ce32

0800b5dc <_Bfree>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	69c6      	ldr	r6, [r0, #28]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	b976      	cbnz	r6, 800b604 <_Bfree+0x28>
 800b5e6:	2010      	movs	r0, #16
 800b5e8:	f7ff fe5a 	bl	800b2a0 <malloc>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	61e8      	str	r0, [r5, #28]
 800b5f0:	b920      	cbnz	r0, 800b5fc <_Bfree+0x20>
 800b5f2:	218f      	movs	r1, #143	; 0x8f
 800b5f4:	4b08      	ldr	r3, [pc, #32]	; (800b618 <_Bfree+0x3c>)
 800b5f6:	4809      	ldr	r0, [pc, #36]	; (800b61c <_Bfree+0x40>)
 800b5f8:	f000 fc0a 	bl	800be10 <__assert_func>
 800b5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b600:	6006      	str	r6, [r0, #0]
 800b602:	60c6      	str	r6, [r0, #12]
 800b604:	b13c      	cbz	r4, 800b616 <_Bfree+0x3a>
 800b606:	69eb      	ldr	r3, [r5, #28]
 800b608:	6862      	ldr	r2, [r4, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b610:	6021      	str	r1, [r4, #0]
 800b612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	0800cda1 	.word	0x0800cda1
 800b61c:	0800ce32 	.word	0x0800ce32

0800b620 <__multadd>:
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b624:	4607      	mov	r7, r0
 800b626:	460c      	mov	r4, r1
 800b628:	461e      	mov	r6, r3
 800b62a:	2000      	movs	r0, #0
 800b62c:	690d      	ldr	r5, [r1, #16]
 800b62e:	f101 0c14 	add.w	ip, r1, #20
 800b632:	f8dc 3000 	ldr.w	r3, [ip]
 800b636:	3001      	adds	r0, #1
 800b638:	b299      	uxth	r1, r3
 800b63a:	fb02 6101 	mla	r1, r2, r1, r6
 800b63e:	0c1e      	lsrs	r6, r3, #16
 800b640:	0c0b      	lsrs	r3, r1, #16
 800b642:	fb02 3306 	mla	r3, r2, r6, r3
 800b646:	b289      	uxth	r1, r1
 800b648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b64c:	4285      	cmp	r5, r0
 800b64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b652:	f84c 1b04 	str.w	r1, [ip], #4
 800b656:	dcec      	bgt.n	800b632 <__multadd+0x12>
 800b658:	b30e      	cbz	r6, 800b69e <__multadd+0x7e>
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	42ab      	cmp	r3, r5
 800b65e:	dc19      	bgt.n	800b694 <__multadd+0x74>
 800b660:	6861      	ldr	r1, [r4, #4]
 800b662:	4638      	mov	r0, r7
 800b664:	3101      	adds	r1, #1
 800b666:	f7ff ff79 	bl	800b55c <_Balloc>
 800b66a:	4680      	mov	r8, r0
 800b66c:	b928      	cbnz	r0, 800b67a <__multadd+0x5a>
 800b66e:	4602      	mov	r2, r0
 800b670:	21ba      	movs	r1, #186	; 0xba
 800b672:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <__multadd+0x84>)
 800b674:	480c      	ldr	r0, [pc, #48]	; (800b6a8 <__multadd+0x88>)
 800b676:	f000 fbcb 	bl	800be10 <__assert_func>
 800b67a:	6922      	ldr	r2, [r4, #16]
 800b67c:	f104 010c 	add.w	r1, r4, #12
 800b680:	3202      	adds	r2, #2
 800b682:	0092      	lsls	r2, r2, #2
 800b684:	300c      	adds	r0, #12
 800b686:	f7fe fe36 	bl	800a2f6 <memcpy>
 800b68a:	4621      	mov	r1, r4
 800b68c:	4638      	mov	r0, r7
 800b68e:	f7ff ffa5 	bl	800b5dc <_Bfree>
 800b692:	4644      	mov	r4, r8
 800b694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b698:	3501      	adds	r5, #1
 800b69a:	615e      	str	r6, [r3, #20]
 800b69c:	6125      	str	r5, [r4, #16]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	0800ce10 	.word	0x0800ce10
 800b6a8:	0800ce32 	.word	0x0800ce32

0800b6ac <__hi0bits>:
 800b6ac:	0c02      	lsrs	r2, r0, #16
 800b6ae:	0412      	lsls	r2, r2, #16
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	b9ca      	cbnz	r2, 800b6e8 <__hi0bits+0x3c>
 800b6b4:	0403      	lsls	r3, r0, #16
 800b6b6:	2010      	movs	r0, #16
 800b6b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b6bc:	bf04      	itt	eq
 800b6be:	021b      	lsleq	r3, r3, #8
 800b6c0:	3008      	addeq	r0, #8
 800b6c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b6c6:	bf04      	itt	eq
 800b6c8:	011b      	lsleq	r3, r3, #4
 800b6ca:	3004      	addeq	r0, #4
 800b6cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b6d0:	bf04      	itt	eq
 800b6d2:	009b      	lsleq	r3, r3, #2
 800b6d4:	3002      	addeq	r0, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	db05      	blt.n	800b6e6 <__hi0bits+0x3a>
 800b6da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b6de:	f100 0001 	add.w	r0, r0, #1
 800b6e2:	bf08      	it	eq
 800b6e4:	2020      	moveq	r0, #32
 800b6e6:	4770      	bx	lr
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e7e5      	b.n	800b6b8 <__hi0bits+0xc>

0800b6ec <__lo0bits>:
 800b6ec:	6803      	ldr	r3, [r0, #0]
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	f013 0007 	ands.w	r0, r3, #7
 800b6f4:	d00b      	beq.n	800b70e <__lo0bits+0x22>
 800b6f6:	07d9      	lsls	r1, r3, #31
 800b6f8:	d421      	bmi.n	800b73e <__lo0bits+0x52>
 800b6fa:	0798      	lsls	r0, r3, #30
 800b6fc:	bf49      	itett	mi
 800b6fe:	085b      	lsrmi	r3, r3, #1
 800b700:	089b      	lsrpl	r3, r3, #2
 800b702:	2001      	movmi	r0, #1
 800b704:	6013      	strmi	r3, [r2, #0]
 800b706:	bf5c      	itt	pl
 800b708:	2002      	movpl	r0, #2
 800b70a:	6013      	strpl	r3, [r2, #0]
 800b70c:	4770      	bx	lr
 800b70e:	b299      	uxth	r1, r3
 800b710:	b909      	cbnz	r1, 800b716 <__lo0bits+0x2a>
 800b712:	2010      	movs	r0, #16
 800b714:	0c1b      	lsrs	r3, r3, #16
 800b716:	b2d9      	uxtb	r1, r3
 800b718:	b909      	cbnz	r1, 800b71e <__lo0bits+0x32>
 800b71a:	3008      	adds	r0, #8
 800b71c:	0a1b      	lsrs	r3, r3, #8
 800b71e:	0719      	lsls	r1, r3, #28
 800b720:	bf04      	itt	eq
 800b722:	091b      	lsreq	r3, r3, #4
 800b724:	3004      	addeq	r0, #4
 800b726:	0799      	lsls	r1, r3, #30
 800b728:	bf04      	itt	eq
 800b72a:	089b      	lsreq	r3, r3, #2
 800b72c:	3002      	addeq	r0, #2
 800b72e:	07d9      	lsls	r1, r3, #31
 800b730:	d403      	bmi.n	800b73a <__lo0bits+0x4e>
 800b732:	085b      	lsrs	r3, r3, #1
 800b734:	f100 0001 	add.w	r0, r0, #1
 800b738:	d003      	beq.n	800b742 <__lo0bits+0x56>
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	4770      	bx	lr
 800b73e:	2000      	movs	r0, #0
 800b740:	4770      	bx	lr
 800b742:	2020      	movs	r0, #32
 800b744:	4770      	bx	lr
	...

0800b748 <__i2b>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	460c      	mov	r4, r1
 800b74c:	2101      	movs	r1, #1
 800b74e:	f7ff ff05 	bl	800b55c <_Balloc>
 800b752:	4602      	mov	r2, r0
 800b754:	b928      	cbnz	r0, 800b762 <__i2b+0x1a>
 800b756:	f240 1145 	movw	r1, #325	; 0x145
 800b75a:	4b04      	ldr	r3, [pc, #16]	; (800b76c <__i2b+0x24>)
 800b75c:	4804      	ldr	r0, [pc, #16]	; (800b770 <__i2b+0x28>)
 800b75e:	f000 fb57 	bl	800be10 <__assert_func>
 800b762:	2301      	movs	r3, #1
 800b764:	6144      	str	r4, [r0, #20]
 800b766:	6103      	str	r3, [r0, #16]
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	bf00      	nop
 800b76c:	0800ce10 	.word	0x0800ce10
 800b770:	0800ce32 	.word	0x0800ce32

0800b774 <__multiply>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	4691      	mov	r9, r2
 800b77a:	690a      	ldr	r2, [r1, #16]
 800b77c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b780:	460c      	mov	r4, r1
 800b782:	429a      	cmp	r2, r3
 800b784:	bfbe      	ittt	lt
 800b786:	460b      	movlt	r3, r1
 800b788:	464c      	movlt	r4, r9
 800b78a:	4699      	movlt	r9, r3
 800b78c:	6927      	ldr	r7, [r4, #16]
 800b78e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	6861      	ldr	r1, [r4, #4]
 800b796:	eb07 060a 	add.w	r6, r7, sl
 800b79a:	42b3      	cmp	r3, r6
 800b79c:	b085      	sub	sp, #20
 800b79e:	bfb8      	it	lt
 800b7a0:	3101      	addlt	r1, #1
 800b7a2:	f7ff fedb 	bl	800b55c <_Balloc>
 800b7a6:	b930      	cbnz	r0, 800b7b6 <__multiply+0x42>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7ae:	4b43      	ldr	r3, [pc, #268]	; (800b8bc <__multiply+0x148>)
 800b7b0:	4843      	ldr	r0, [pc, #268]	; (800b8c0 <__multiply+0x14c>)
 800b7b2:	f000 fb2d 	bl	800be10 <__assert_func>
 800b7b6:	f100 0514 	add.w	r5, r0, #20
 800b7ba:	462b      	mov	r3, r5
 800b7bc:	2200      	movs	r2, #0
 800b7be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7c2:	4543      	cmp	r3, r8
 800b7c4:	d321      	bcc.n	800b80a <__multiply+0x96>
 800b7c6:	f104 0314 	add.w	r3, r4, #20
 800b7ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7ce:	f109 0314 	add.w	r3, r9, #20
 800b7d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7d6:	9202      	str	r2, [sp, #8]
 800b7d8:	1b3a      	subs	r2, r7, r4
 800b7da:	3a15      	subs	r2, #21
 800b7dc:	f022 0203 	bic.w	r2, r2, #3
 800b7e0:	3204      	adds	r2, #4
 800b7e2:	f104 0115 	add.w	r1, r4, #21
 800b7e6:	428f      	cmp	r7, r1
 800b7e8:	bf38      	it	cc
 800b7ea:	2204      	movcc	r2, #4
 800b7ec:	9201      	str	r2, [sp, #4]
 800b7ee:	9a02      	ldr	r2, [sp, #8]
 800b7f0:	9303      	str	r3, [sp, #12]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d80c      	bhi.n	800b810 <__multiply+0x9c>
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	dd03      	ble.n	800b802 <__multiply+0x8e>
 800b7fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d05a      	beq.n	800b8b8 <__multiply+0x144>
 800b802:	6106      	str	r6, [r0, #16]
 800b804:	b005      	add	sp, #20
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	f843 2b04 	str.w	r2, [r3], #4
 800b80e:	e7d8      	b.n	800b7c2 <__multiply+0x4e>
 800b810:	f8b3 a000 	ldrh.w	sl, [r3]
 800b814:	f1ba 0f00 	cmp.w	sl, #0
 800b818:	d023      	beq.n	800b862 <__multiply+0xee>
 800b81a:	46a9      	mov	r9, r5
 800b81c:	f04f 0c00 	mov.w	ip, #0
 800b820:	f104 0e14 	add.w	lr, r4, #20
 800b824:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b828:	f8d9 1000 	ldr.w	r1, [r9]
 800b82c:	fa1f fb82 	uxth.w	fp, r2
 800b830:	b289      	uxth	r1, r1
 800b832:	fb0a 110b 	mla	r1, sl, fp, r1
 800b836:	4461      	add	r1, ip
 800b838:	f8d9 c000 	ldr.w	ip, [r9]
 800b83c:	0c12      	lsrs	r2, r2, #16
 800b83e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b842:	fb0a c202 	mla	r2, sl, r2, ip
 800b846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b84a:	b289      	uxth	r1, r1
 800b84c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b850:	4577      	cmp	r7, lr
 800b852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b856:	f849 1b04 	str.w	r1, [r9], #4
 800b85a:	d8e3      	bhi.n	800b824 <__multiply+0xb0>
 800b85c:	9a01      	ldr	r2, [sp, #4]
 800b85e:	f845 c002 	str.w	ip, [r5, r2]
 800b862:	9a03      	ldr	r2, [sp, #12]
 800b864:	3304      	adds	r3, #4
 800b866:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b86a:	f1b9 0f00 	cmp.w	r9, #0
 800b86e:	d021      	beq.n	800b8b4 <__multiply+0x140>
 800b870:	46ae      	mov	lr, r5
 800b872:	f04f 0a00 	mov.w	sl, #0
 800b876:	6829      	ldr	r1, [r5, #0]
 800b878:	f104 0c14 	add.w	ip, r4, #20
 800b87c:	f8bc b000 	ldrh.w	fp, [ip]
 800b880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b884:	b289      	uxth	r1, r1
 800b886:	fb09 220b 	mla	r2, r9, fp, r2
 800b88a:	4452      	add	r2, sl
 800b88c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b890:	f84e 1b04 	str.w	r1, [lr], #4
 800b894:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b898:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b89c:	f8be 1000 	ldrh.w	r1, [lr]
 800b8a0:	4567      	cmp	r7, ip
 800b8a2:	fb09 110a 	mla	r1, r9, sl, r1
 800b8a6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8ae:	d8e5      	bhi.n	800b87c <__multiply+0x108>
 800b8b0:	9a01      	ldr	r2, [sp, #4]
 800b8b2:	50a9      	str	r1, [r5, r2]
 800b8b4:	3504      	adds	r5, #4
 800b8b6:	e79a      	b.n	800b7ee <__multiply+0x7a>
 800b8b8:	3e01      	subs	r6, #1
 800b8ba:	e79c      	b.n	800b7f6 <__multiply+0x82>
 800b8bc:	0800ce10 	.word	0x0800ce10
 800b8c0:	0800ce32 	.word	0x0800ce32

0800b8c4 <__pow5mult>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	4615      	mov	r5, r2
 800b8ca:	f012 0203 	ands.w	r2, r2, #3
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	d007      	beq.n	800b8e4 <__pow5mult+0x20>
 800b8d4:	4c25      	ldr	r4, [pc, #148]	; (800b96c <__pow5mult+0xa8>)
 800b8d6:	3a01      	subs	r2, #1
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8de:	f7ff fe9f 	bl	800b620 <__multadd>
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	10ad      	asrs	r5, r5, #2
 800b8e6:	d03d      	beq.n	800b964 <__pow5mult+0xa0>
 800b8e8:	69f4      	ldr	r4, [r6, #28]
 800b8ea:	b97c      	cbnz	r4, 800b90c <__pow5mult+0x48>
 800b8ec:	2010      	movs	r0, #16
 800b8ee:	f7ff fcd7 	bl	800b2a0 <malloc>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	61f0      	str	r0, [r6, #28]
 800b8f6:	b928      	cbnz	r0, 800b904 <__pow5mult+0x40>
 800b8f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	; (800b970 <__pow5mult+0xac>)
 800b8fe:	481d      	ldr	r0, [pc, #116]	; (800b974 <__pow5mult+0xb0>)
 800b900:	f000 fa86 	bl	800be10 <__assert_func>
 800b904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b908:	6004      	str	r4, [r0, #0]
 800b90a:	60c4      	str	r4, [r0, #12]
 800b90c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b914:	b94c      	cbnz	r4, 800b92a <__pow5mult+0x66>
 800b916:	f240 2171 	movw	r1, #625	; 0x271
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7ff ff14 	bl	800b748 <__i2b>
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	f8c8 0008 	str.w	r0, [r8, #8]
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	f04f 0900 	mov.w	r9, #0
 800b92e:	07eb      	lsls	r3, r5, #31
 800b930:	d50a      	bpl.n	800b948 <__pow5mult+0x84>
 800b932:	4639      	mov	r1, r7
 800b934:	4622      	mov	r2, r4
 800b936:	4630      	mov	r0, r6
 800b938:	f7ff ff1c 	bl	800b774 <__multiply>
 800b93c:	4680      	mov	r8, r0
 800b93e:	4639      	mov	r1, r7
 800b940:	4630      	mov	r0, r6
 800b942:	f7ff fe4b 	bl	800b5dc <_Bfree>
 800b946:	4647      	mov	r7, r8
 800b948:	106d      	asrs	r5, r5, #1
 800b94a:	d00b      	beq.n	800b964 <__pow5mult+0xa0>
 800b94c:	6820      	ldr	r0, [r4, #0]
 800b94e:	b938      	cbnz	r0, 800b960 <__pow5mult+0x9c>
 800b950:	4622      	mov	r2, r4
 800b952:	4621      	mov	r1, r4
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff ff0d 	bl	800b774 <__multiply>
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	f8c0 9000 	str.w	r9, [r0]
 800b960:	4604      	mov	r4, r0
 800b962:	e7e4      	b.n	800b92e <__pow5mult+0x6a>
 800b964:	4638      	mov	r0, r7
 800b966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96a:	bf00      	nop
 800b96c:	0800cf80 	.word	0x0800cf80
 800b970:	0800cda1 	.word	0x0800cda1
 800b974:	0800ce32 	.word	0x0800ce32

0800b978 <__lshift>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	460c      	mov	r4, r1
 800b97e:	4607      	mov	r7, r0
 800b980:	4691      	mov	r9, r2
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	6849      	ldr	r1, [r1, #4]
 800b986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b98a:	68a3      	ldr	r3, [r4, #8]
 800b98c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b990:	f108 0601 	add.w	r6, r8, #1
 800b994:	42b3      	cmp	r3, r6
 800b996:	db0b      	blt.n	800b9b0 <__lshift+0x38>
 800b998:	4638      	mov	r0, r7
 800b99a:	f7ff fddf 	bl	800b55c <_Balloc>
 800b99e:	4605      	mov	r5, r0
 800b9a0:	b948      	cbnz	r0, 800b9b6 <__lshift+0x3e>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9a8:	4b27      	ldr	r3, [pc, #156]	; (800ba48 <__lshift+0xd0>)
 800b9aa:	4828      	ldr	r0, [pc, #160]	; (800ba4c <__lshift+0xd4>)
 800b9ac:	f000 fa30 	bl	800be10 <__assert_func>
 800b9b0:	3101      	adds	r1, #1
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	e7ee      	b.n	800b994 <__lshift+0x1c>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f100 0114 	add.w	r1, r0, #20
 800b9bc:	f100 0210 	add.w	r2, r0, #16
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	4553      	cmp	r3, sl
 800b9c4:	db33      	blt.n	800ba2e <__lshift+0xb6>
 800b9c6:	6920      	ldr	r0, [r4, #16]
 800b9c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9cc:	f104 0314 	add.w	r3, r4, #20
 800b9d0:	f019 091f 	ands.w	r9, r9, #31
 800b9d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9dc:	d02b      	beq.n	800ba36 <__lshift+0xbe>
 800b9de:	468a      	mov	sl, r1
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b9ec:	4310      	orrs	r0, r2
 800b9ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f6:	459c      	cmp	ip, r3
 800b9f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9fc:	d8f3      	bhi.n	800b9e6 <__lshift+0x6e>
 800b9fe:	ebac 0304 	sub.w	r3, ip, r4
 800ba02:	3b15      	subs	r3, #21
 800ba04:	f023 0303 	bic.w	r3, r3, #3
 800ba08:	3304      	adds	r3, #4
 800ba0a:	f104 0015 	add.w	r0, r4, #21
 800ba0e:	4584      	cmp	ip, r0
 800ba10:	bf38      	it	cc
 800ba12:	2304      	movcc	r3, #4
 800ba14:	50ca      	str	r2, [r1, r3]
 800ba16:	b10a      	cbz	r2, 800ba1c <__lshift+0xa4>
 800ba18:	f108 0602 	add.w	r6, r8, #2
 800ba1c:	3e01      	subs	r6, #1
 800ba1e:	4638      	mov	r0, r7
 800ba20:	4621      	mov	r1, r4
 800ba22:	612e      	str	r6, [r5, #16]
 800ba24:	f7ff fdda 	bl	800b5dc <_Bfree>
 800ba28:	4628      	mov	r0, r5
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba32:	3301      	adds	r3, #1
 800ba34:	e7c5      	b.n	800b9c2 <__lshift+0x4a>
 800ba36:	3904      	subs	r1, #4
 800ba38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3c:	459c      	cmp	ip, r3
 800ba3e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba42:	d8f9      	bhi.n	800ba38 <__lshift+0xc0>
 800ba44:	e7ea      	b.n	800ba1c <__lshift+0xa4>
 800ba46:	bf00      	nop
 800ba48:	0800ce10 	.word	0x0800ce10
 800ba4c:	0800ce32 	.word	0x0800ce32

0800ba50 <__mcmp>:
 800ba50:	4603      	mov	r3, r0
 800ba52:	690a      	ldr	r2, [r1, #16]
 800ba54:	6900      	ldr	r0, [r0, #16]
 800ba56:	b530      	push	{r4, r5, lr}
 800ba58:	1a80      	subs	r0, r0, r2
 800ba5a:	d10d      	bne.n	800ba78 <__mcmp+0x28>
 800ba5c:	3314      	adds	r3, #20
 800ba5e:	3114      	adds	r1, #20
 800ba60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba70:	4295      	cmp	r5, r2
 800ba72:	d002      	beq.n	800ba7a <__mcmp+0x2a>
 800ba74:	d304      	bcc.n	800ba80 <__mcmp+0x30>
 800ba76:	2001      	movs	r0, #1
 800ba78:	bd30      	pop	{r4, r5, pc}
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	d3f4      	bcc.n	800ba68 <__mcmp+0x18>
 800ba7e:	e7fb      	b.n	800ba78 <__mcmp+0x28>
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba84:	e7f8      	b.n	800ba78 <__mcmp+0x28>
	...

0800ba88 <__mdiff>:
 800ba88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	4607      	mov	r7, r0
 800ba90:	4611      	mov	r1, r2
 800ba92:	4628      	mov	r0, r5
 800ba94:	4614      	mov	r4, r2
 800ba96:	f7ff ffdb 	bl	800ba50 <__mcmp>
 800ba9a:	1e06      	subs	r6, r0, #0
 800ba9c:	d111      	bne.n	800bac2 <__mdiff+0x3a>
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7ff fd5b 	bl	800b55c <_Balloc>
 800baa6:	4602      	mov	r2, r0
 800baa8:	b928      	cbnz	r0, 800bab6 <__mdiff+0x2e>
 800baaa:	f240 2137 	movw	r1, #567	; 0x237
 800baae:	4b3a      	ldr	r3, [pc, #232]	; (800bb98 <__mdiff+0x110>)
 800bab0:	483a      	ldr	r0, [pc, #232]	; (800bb9c <__mdiff+0x114>)
 800bab2:	f000 f9ad 	bl	800be10 <__assert_func>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800babc:	4610      	mov	r0, r2
 800babe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	bfa4      	itt	ge
 800bac4:	4623      	movge	r3, r4
 800bac6:	462c      	movge	r4, r5
 800bac8:	4638      	mov	r0, r7
 800baca:	6861      	ldr	r1, [r4, #4]
 800bacc:	bfa6      	itte	ge
 800bace:	461d      	movge	r5, r3
 800bad0:	2600      	movge	r6, #0
 800bad2:	2601      	movlt	r6, #1
 800bad4:	f7ff fd42 	bl	800b55c <_Balloc>
 800bad8:	4602      	mov	r2, r0
 800bada:	b918      	cbnz	r0, 800bae4 <__mdiff+0x5c>
 800badc:	f240 2145 	movw	r1, #581	; 0x245
 800bae0:	4b2d      	ldr	r3, [pc, #180]	; (800bb98 <__mdiff+0x110>)
 800bae2:	e7e5      	b.n	800bab0 <__mdiff+0x28>
 800bae4:	f102 0814 	add.w	r8, r2, #20
 800bae8:	46c2      	mov	sl, r8
 800baea:	f04f 0c00 	mov.w	ip, #0
 800baee:	6927      	ldr	r7, [r4, #16]
 800baf0:	60c6      	str	r6, [r0, #12]
 800baf2:	692e      	ldr	r6, [r5, #16]
 800baf4:	f104 0014 	add.w	r0, r4, #20
 800baf8:	f105 0914 	add.w	r9, r5, #20
 800bafc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bb00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb04:	3410      	adds	r4, #16
 800bb06:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bb0a:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb0e:	fa1f f18b 	uxth.w	r1, fp
 800bb12:	4461      	add	r1, ip
 800bb14:	fa1f fc83 	uxth.w	ip, r3
 800bb18:	0c1b      	lsrs	r3, r3, #16
 800bb1a:	eba1 010c 	sub.w	r1, r1, ip
 800bb1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb22:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bb26:	b289      	uxth	r1, r1
 800bb28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bb2c:	454e      	cmp	r6, r9
 800bb2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bb32:	f84a 1b04 	str.w	r1, [sl], #4
 800bb36:	d8e6      	bhi.n	800bb06 <__mdiff+0x7e>
 800bb38:	1b73      	subs	r3, r6, r5
 800bb3a:	3b15      	subs	r3, #21
 800bb3c:	f023 0303 	bic.w	r3, r3, #3
 800bb40:	3515      	adds	r5, #21
 800bb42:	3304      	adds	r3, #4
 800bb44:	42ae      	cmp	r6, r5
 800bb46:	bf38      	it	cc
 800bb48:	2304      	movcc	r3, #4
 800bb4a:	4418      	add	r0, r3
 800bb4c:	4443      	add	r3, r8
 800bb4e:	461e      	mov	r6, r3
 800bb50:	4605      	mov	r5, r0
 800bb52:	4575      	cmp	r5, lr
 800bb54:	d30e      	bcc.n	800bb74 <__mdiff+0xec>
 800bb56:	f10e 0103 	add.w	r1, lr, #3
 800bb5a:	1a09      	subs	r1, r1, r0
 800bb5c:	f021 0103 	bic.w	r1, r1, #3
 800bb60:	3803      	subs	r0, #3
 800bb62:	4586      	cmp	lr, r0
 800bb64:	bf38      	it	cc
 800bb66:	2100      	movcc	r1, #0
 800bb68:	440b      	add	r3, r1
 800bb6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb6e:	b189      	cbz	r1, 800bb94 <__mdiff+0x10c>
 800bb70:	6117      	str	r7, [r2, #16]
 800bb72:	e7a3      	b.n	800babc <__mdiff+0x34>
 800bb74:	f855 8b04 	ldr.w	r8, [r5], #4
 800bb78:	fa1f f188 	uxth.w	r1, r8
 800bb7c:	4461      	add	r1, ip
 800bb7e:	140c      	asrs	r4, r1, #16
 800bb80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb84:	b289      	uxth	r1, r1
 800bb86:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb8a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bb8e:	f846 1b04 	str.w	r1, [r6], #4
 800bb92:	e7de      	b.n	800bb52 <__mdiff+0xca>
 800bb94:	3f01      	subs	r7, #1
 800bb96:	e7e8      	b.n	800bb6a <__mdiff+0xe2>
 800bb98:	0800ce10 	.word	0x0800ce10
 800bb9c:	0800ce32 	.word	0x0800ce32

0800bba0 <__d2b>:
 800bba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bba2:	2101      	movs	r1, #1
 800bba4:	4617      	mov	r7, r2
 800bba6:	461c      	mov	r4, r3
 800bba8:	9e08      	ldr	r6, [sp, #32]
 800bbaa:	f7ff fcd7 	bl	800b55c <_Balloc>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	b930      	cbnz	r0, 800bbc0 <__d2b+0x20>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	f240 310f 	movw	r1, #783	; 0x30f
 800bbb8:	4b22      	ldr	r3, [pc, #136]	; (800bc44 <__d2b+0xa4>)
 800bbba:	4823      	ldr	r0, [pc, #140]	; (800bc48 <__d2b+0xa8>)
 800bbbc:	f000 f928 	bl	800be10 <__assert_func>
 800bbc0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bbc4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bbc8:	bb24      	cbnz	r4, 800bc14 <__d2b+0x74>
 800bbca:	2f00      	cmp	r7, #0
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	d026      	beq.n	800bc1e <__d2b+0x7e>
 800bbd0:	4668      	mov	r0, sp
 800bbd2:	9700      	str	r7, [sp, #0]
 800bbd4:	f7ff fd8a 	bl	800b6ec <__lo0bits>
 800bbd8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbdc:	b1e8      	cbz	r0, 800bc1a <__d2b+0x7a>
 800bbde:	f1c0 0320 	rsb	r3, r0, #32
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	430b      	orrs	r3, r1
 800bbe8:	40c2      	lsrs	r2, r0
 800bbea:	616b      	str	r3, [r5, #20]
 800bbec:	9201      	str	r2, [sp, #4]
 800bbee:	9b01      	ldr	r3, [sp, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bf14      	ite	ne
 800bbf4:	2102      	movne	r1, #2
 800bbf6:	2101      	moveq	r1, #1
 800bbf8:	61ab      	str	r3, [r5, #24]
 800bbfa:	6129      	str	r1, [r5, #16]
 800bbfc:	b1bc      	cbz	r4, 800bc2e <__d2b+0x8e>
 800bbfe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bc02:	4404      	add	r4, r0
 800bc04:	6034      	str	r4, [r6, #0]
 800bc06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc0c:	6018      	str	r0, [r3, #0]
 800bc0e:	4628      	mov	r0, r5
 800bc10:	b003      	add	sp, #12
 800bc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc18:	e7d7      	b.n	800bbca <__d2b+0x2a>
 800bc1a:	6169      	str	r1, [r5, #20]
 800bc1c:	e7e7      	b.n	800bbee <__d2b+0x4e>
 800bc1e:	a801      	add	r0, sp, #4
 800bc20:	f7ff fd64 	bl	800b6ec <__lo0bits>
 800bc24:	9b01      	ldr	r3, [sp, #4]
 800bc26:	2101      	movs	r1, #1
 800bc28:	616b      	str	r3, [r5, #20]
 800bc2a:	3020      	adds	r0, #32
 800bc2c:	e7e5      	b.n	800bbfa <__d2b+0x5a>
 800bc2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc32:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bc36:	6030      	str	r0, [r6, #0]
 800bc38:	6918      	ldr	r0, [r3, #16]
 800bc3a:	f7ff fd37 	bl	800b6ac <__hi0bits>
 800bc3e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bc42:	e7e2      	b.n	800bc0a <__d2b+0x6a>
 800bc44:	0800ce10 	.word	0x0800ce10
 800bc48:	0800ce32 	.word	0x0800ce32

0800bc4c <__sread>:
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	460c      	mov	r4, r1
 800bc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc54:	f000 f8a8 	bl	800bda8 <_read_r>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	bfab      	itete	ge
 800bc5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc5e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc60:	181b      	addge	r3, r3, r0
 800bc62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc66:	bfac      	ite	ge
 800bc68:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc6a:	81a3      	strhlt	r3, [r4, #12]
 800bc6c:	bd10      	pop	{r4, pc}

0800bc6e <__swrite>:
 800bc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc72:	461f      	mov	r7, r3
 800bc74:	898b      	ldrh	r3, [r1, #12]
 800bc76:	4605      	mov	r5, r0
 800bc78:	05db      	lsls	r3, r3, #23
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	d505      	bpl.n	800bc8c <__swrite+0x1e>
 800bc80:	2302      	movs	r3, #2
 800bc82:	2200      	movs	r2, #0
 800bc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc88:	f000 f87c 	bl	800bd84 <_lseek_r>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	4632      	mov	r2, r6
 800bc90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	4628      	mov	r0, r5
 800bc98:	463b      	mov	r3, r7
 800bc9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca2:	f000 b8a3 	b.w	800bdec <_write_r>

0800bca6 <__sseek>:
 800bca6:	b510      	push	{r4, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcae:	f000 f869 	bl	800bd84 <_lseek_r>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	bf15      	itete	ne
 800bcb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcc2:	81a3      	strheq	r3, [r4, #12]
 800bcc4:	bf18      	it	ne
 800bcc6:	81a3      	strhne	r3, [r4, #12]
 800bcc8:	bd10      	pop	{r4, pc}

0800bcca <__sclose>:
 800bcca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcce:	f000 b849 	b.w	800bd64 <_close_r>

0800bcd2 <_realloc_r>:
 800bcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd6:	4680      	mov	r8, r0
 800bcd8:	4614      	mov	r4, r2
 800bcda:	460e      	mov	r6, r1
 800bcdc:	b921      	cbnz	r1, 800bce8 <_realloc_r+0x16>
 800bcde:	4611      	mov	r1, r2
 800bce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce4:	f7ff bb04 	b.w	800b2f0 <_malloc_r>
 800bce8:	b92a      	cbnz	r2, 800bcf6 <_realloc_r+0x24>
 800bcea:	f000 f8c3 	bl	800be74 <_free_r>
 800bcee:	4625      	mov	r5, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf6:	f000 f917 	bl	800bf28 <_malloc_usable_size_r>
 800bcfa:	4284      	cmp	r4, r0
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	d802      	bhi.n	800bd06 <_realloc_r+0x34>
 800bd00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd04:	d812      	bhi.n	800bd2c <_realloc_r+0x5a>
 800bd06:	4621      	mov	r1, r4
 800bd08:	4640      	mov	r0, r8
 800bd0a:	f7ff faf1 	bl	800b2f0 <_malloc_r>
 800bd0e:	4605      	mov	r5, r0
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0ed      	beq.n	800bcf0 <_realloc_r+0x1e>
 800bd14:	42bc      	cmp	r4, r7
 800bd16:	4622      	mov	r2, r4
 800bd18:	4631      	mov	r1, r6
 800bd1a:	bf28      	it	cs
 800bd1c:	463a      	movcs	r2, r7
 800bd1e:	f7fe faea 	bl	800a2f6 <memcpy>
 800bd22:	4631      	mov	r1, r6
 800bd24:	4640      	mov	r0, r8
 800bd26:	f000 f8a5 	bl	800be74 <_free_r>
 800bd2a:	e7e1      	b.n	800bcf0 <_realloc_r+0x1e>
 800bd2c:	4635      	mov	r5, r6
 800bd2e:	e7df      	b.n	800bcf0 <_realloc_r+0x1e>

0800bd30 <memmove>:
 800bd30:	4288      	cmp	r0, r1
 800bd32:	b510      	push	{r4, lr}
 800bd34:	eb01 0402 	add.w	r4, r1, r2
 800bd38:	d902      	bls.n	800bd40 <memmove+0x10>
 800bd3a:	4284      	cmp	r4, r0
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	d807      	bhi.n	800bd50 <memmove+0x20>
 800bd40:	1e43      	subs	r3, r0, #1
 800bd42:	42a1      	cmp	r1, r4
 800bd44:	d008      	beq.n	800bd58 <memmove+0x28>
 800bd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd4e:	e7f8      	b.n	800bd42 <memmove+0x12>
 800bd50:	4601      	mov	r1, r0
 800bd52:	4402      	add	r2, r0
 800bd54:	428a      	cmp	r2, r1
 800bd56:	d100      	bne.n	800bd5a <memmove+0x2a>
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd62:	e7f7      	b.n	800bd54 <memmove+0x24>

0800bd64 <_close_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	2300      	movs	r3, #0
 800bd68:	4d05      	ldr	r5, [pc, #20]	; (800bd80 <_close_r+0x1c>)
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f6 fb5a 	bl	8002428 <_close>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_close_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_close_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20001a8c 	.word	0x20001a8c

0800bd84 <_lseek_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	4d05      	ldr	r5, [pc, #20]	; (800bda4 <_lseek_r+0x20>)
 800bd90:	602a      	str	r2, [r5, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f7f6 fb6c 	bl	8002470 <_lseek>
 800bd98:	1c43      	adds	r3, r0, #1
 800bd9a:	d102      	bne.n	800bda2 <_lseek_r+0x1e>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b103      	cbz	r3, 800bda2 <_lseek_r+0x1e>
 800bda0:	6023      	str	r3, [r4, #0]
 800bda2:	bd38      	pop	{r3, r4, r5, pc}
 800bda4:	20001a8c 	.word	0x20001a8c

0800bda8 <_read_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4604      	mov	r4, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	4611      	mov	r1, r2
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	4d05      	ldr	r5, [pc, #20]	; (800bdc8 <_read_r+0x20>)
 800bdb4:	602a      	str	r2, [r5, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f7f6 fafd 	bl	80023b6 <_read>
 800bdbc:	1c43      	adds	r3, r0, #1
 800bdbe:	d102      	bne.n	800bdc6 <_read_r+0x1e>
 800bdc0:	682b      	ldr	r3, [r5, #0]
 800bdc2:	b103      	cbz	r3, 800bdc6 <_read_r+0x1e>
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	20001a8c 	.word	0x20001a8c

0800bdcc <_sbrk_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4d05      	ldr	r5, [pc, #20]	; (800bde8 <_sbrk_r+0x1c>)
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f6 fb56 	bl	8002488 <_sbrk>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_sbrk_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_sbrk_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20001a8c 	.word	0x20001a8c

0800bdec <_write_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4d05      	ldr	r5, [pc, #20]	; (800be0c <_write_r+0x20>)
 800bdf8:	602a      	str	r2, [r5, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f7f6 faf8 	bl	80023f0 <_write>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_write_r+0x1e>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b103      	cbz	r3, 800be0a <_write_r+0x1e>
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	20001a8c 	.word	0x20001a8c

0800be10 <__assert_func>:
 800be10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be12:	4614      	mov	r4, r2
 800be14:	461a      	mov	r2, r3
 800be16:	4b09      	ldr	r3, [pc, #36]	; (800be3c <__assert_func+0x2c>)
 800be18:	4605      	mov	r5, r0
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68d8      	ldr	r0, [r3, #12]
 800be1e:	b14c      	cbz	r4, 800be34 <__assert_func+0x24>
 800be20:	4b07      	ldr	r3, [pc, #28]	; (800be40 <__assert_func+0x30>)
 800be22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be26:	9100      	str	r1, [sp, #0]
 800be28:	462b      	mov	r3, r5
 800be2a:	4906      	ldr	r1, [pc, #24]	; (800be44 <__assert_func+0x34>)
 800be2c:	f000 f884 	bl	800bf38 <fiprintf>
 800be30:	f000 f8a1 	bl	800bf76 <abort>
 800be34:	4b04      	ldr	r3, [pc, #16]	; (800be48 <__assert_func+0x38>)
 800be36:	461c      	mov	r4, r3
 800be38:	e7f3      	b.n	800be22 <__assert_func+0x12>
 800be3a:	bf00      	nop
 800be3c:	200001d4 	.word	0x200001d4
 800be40:	0800d097 	.word	0x0800d097
 800be44:	0800d0a4 	.word	0x0800d0a4
 800be48:	0800d0d2 	.word	0x0800d0d2

0800be4c <_calloc_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	fba1 5402 	umull	r5, r4, r1, r2
 800be52:	b934      	cbnz	r4, 800be62 <_calloc_r+0x16>
 800be54:	4629      	mov	r1, r5
 800be56:	f7ff fa4b 	bl	800b2f0 <_malloc_r>
 800be5a:	4606      	mov	r6, r0
 800be5c:	b928      	cbnz	r0, 800be6a <_calloc_r+0x1e>
 800be5e:	4630      	mov	r0, r6
 800be60:	bd70      	pop	{r4, r5, r6, pc}
 800be62:	220c      	movs	r2, #12
 800be64:	2600      	movs	r6, #0
 800be66:	6002      	str	r2, [r0, #0]
 800be68:	e7f9      	b.n	800be5e <_calloc_r+0x12>
 800be6a:	462a      	mov	r2, r5
 800be6c:	4621      	mov	r1, r4
 800be6e:	f7fe f9fa 	bl	800a266 <memset>
 800be72:	e7f4      	b.n	800be5e <_calloc_r+0x12>

0800be74 <_free_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4605      	mov	r5, r0
 800be78:	2900      	cmp	r1, #0
 800be7a:	d040      	beq.n	800befe <_free_r+0x8a>
 800be7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be80:	1f0c      	subs	r4, r1, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	bfb8      	it	lt
 800be86:	18e4      	addlt	r4, r4, r3
 800be88:	f7ff fb5c 	bl	800b544 <__malloc_lock>
 800be8c:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <_free_r+0x8c>)
 800be8e:	6813      	ldr	r3, [r2, #0]
 800be90:	b933      	cbnz	r3, 800bea0 <_free_r+0x2c>
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	6014      	str	r4, [r2, #0]
 800be96:	4628      	mov	r0, r5
 800be98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9c:	f7ff bb58 	b.w	800b550 <__malloc_unlock>
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d908      	bls.n	800beb6 <_free_r+0x42>
 800bea4:	6820      	ldr	r0, [r4, #0]
 800bea6:	1821      	adds	r1, r4, r0
 800bea8:	428b      	cmp	r3, r1
 800beaa:	bf01      	itttt	eq
 800beac:	6819      	ldreq	r1, [r3, #0]
 800beae:	685b      	ldreq	r3, [r3, #4]
 800beb0:	1809      	addeq	r1, r1, r0
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	e7ed      	b.n	800be92 <_free_r+0x1e>
 800beb6:	461a      	mov	r2, r3
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	b10b      	cbz	r3, 800bec0 <_free_r+0x4c>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d9fa      	bls.n	800beb6 <_free_r+0x42>
 800bec0:	6811      	ldr	r1, [r2, #0]
 800bec2:	1850      	adds	r0, r2, r1
 800bec4:	42a0      	cmp	r0, r4
 800bec6:	d10b      	bne.n	800bee0 <_free_r+0x6c>
 800bec8:	6820      	ldr	r0, [r4, #0]
 800beca:	4401      	add	r1, r0
 800becc:	1850      	adds	r0, r2, r1
 800bece:	4283      	cmp	r3, r0
 800bed0:	6011      	str	r1, [r2, #0]
 800bed2:	d1e0      	bne.n	800be96 <_free_r+0x22>
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	4408      	add	r0, r1
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	6053      	str	r3, [r2, #4]
 800bede:	e7da      	b.n	800be96 <_free_r+0x22>
 800bee0:	d902      	bls.n	800bee8 <_free_r+0x74>
 800bee2:	230c      	movs	r3, #12
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	e7d6      	b.n	800be96 <_free_r+0x22>
 800bee8:	6820      	ldr	r0, [r4, #0]
 800beea:	1821      	adds	r1, r4, r0
 800beec:	428b      	cmp	r3, r1
 800beee:	bf01      	itttt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	1809      	addeq	r1, r1, r0
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	6063      	str	r3, [r4, #4]
 800befa:	6054      	str	r4, [r2, #4]
 800befc:	e7cb      	b.n	800be96 <_free_r+0x22>
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20001a84 	.word	0x20001a84

0800bf04 <__ascii_mbtowc>:
 800bf04:	b082      	sub	sp, #8
 800bf06:	b901      	cbnz	r1, 800bf0a <__ascii_mbtowc+0x6>
 800bf08:	a901      	add	r1, sp, #4
 800bf0a:	b142      	cbz	r2, 800bf1e <__ascii_mbtowc+0x1a>
 800bf0c:	b14b      	cbz	r3, 800bf22 <__ascii_mbtowc+0x1e>
 800bf0e:	7813      	ldrb	r3, [r2, #0]
 800bf10:	600b      	str	r3, [r1, #0]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	1e10      	subs	r0, r2, #0
 800bf16:	bf18      	it	ne
 800bf18:	2001      	movne	r0, #1
 800bf1a:	b002      	add	sp, #8
 800bf1c:	4770      	bx	lr
 800bf1e:	4610      	mov	r0, r2
 800bf20:	e7fb      	b.n	800bf1a <__ascii_mbtowc+0x16>
 800bf22:	f06f 0001 	mvn.w	r0, #1
 800bf26:	e7f8      	b.n	800bf1a <__ascii_mbtowc+0x16>

0800bf28 <_malloc_usable_size_r>:
 800bf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2c:	1f18      	subs	r0, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfbc      	itt	lt
 800bf32:	580b      	ldrlt	r3, [r1, r0]
 800bf34:	18c0      	addlt	r0, r0, r3
 800bf36:	4770      	bx	lr

0800bf38 <fiprintf>:
 800bf38:	b40e      	push	{r1, r2, r3}
 800bf3a:	b503      	push	{r0, r1, lr}
 800bf3c:	4601      	mov	r1, r0
 800bf3e:	ab03      	add	r3, sp, #12
 800bf40:	4805      	ldr	r0, [pc, #20]	; (800bf58 <fiprintf+0x20>)
 800bf42:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf46:	6800      	ldr	r0, [r0, #0]
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	f000 f843 	bl	800bfd4 <_vfiprintf_r>
 800bf4e:	b002      	add	sp, #8
 800bf50:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf54:	b003      	add	sp, #12
 800bf56:	4770      	bx	lr
 800bf58:	200001d4 	.word	0x200001d4

0800bf5c <__ascii_wctomb>:
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4608      	mov	r0, r1
 800bf60:	b141      	cbz	r1, 800bf74 <__ascii_wctomb+0x18>
 800bf62:	2aff      	cmp	r2, #255	; 0xff
 800bf64:	d904      	bls.n	800bf70 <__ascii_wctomb+0x14>
 800bf66:	228a      	movs	r2, #138	; 0x8a
 800bf68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	4770      	bx	lr
 800bf70:	2001      	movs	r0, #1
 800bf72:	700a      	strb	r2, [r1, #0]
 800bf74:	4770      	bx	lr

0800bf76 <abort>:
 800bf76:	2006      	movs	r0, #6
 800bf78:	b508      	push	{r3, lr}
 800bf7a:	f000 fa87 	bl	800c48c <raise>
 800bf7e:	2001      	movs	r0, #1
 800bf80:	f7f6 fa0f 	bl	80023a2 <_exit>

0800bf84 <__sfputc_r>:
 800bf84:	6893      	ldr	r3, [r2, #8]
 800bf86:	b410      	push	{r4}
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	6093      	str	r3, [r2, #8]
 800bf8e:	da07      	bge.n	800bfa0 <__sfputc_r+0x1c>
 800bf90:	6994      	ldr	r4, [r2, #24]
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	db01      	blt.n	800bf9a <__sfputc_r+0x16>
 800bf96:	290a      	cmp	r1, #10
 800bf98:	d102      	bne.n	800bfa0 <__sfputc_r+0x1c>
 800bf9a:	bc10      	pop	{r4}
 800bf9c:	f000 b934 	b.w	800c208 <__swbuf_r>
 800bfa0:	6813      	ldr	r3, [r2, #0]
 800bfa2:	1c58      	adds	r0, r3, #1
 800bfa4:	6010      	str	r0, [r2, #0]
 800bfa6:	7019      	strb	r1, [r3, #0]
 800bfa8:	4608      	mov	r0, r1
 800bfaa:	bc10      	pop	{r4}
 800bfac:	4770      	bx	lr

0800bfae <__sfputs_r>:
 800bfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	460f      	mov	r7, r1
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	18d5      	adds	r5, r2, r3
 800bfb8:	42ac      	cmp	r4, r5
 800bfba:	d101      	bne.n	800bfc0 <__sfputs_r+0x12>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e007      	b.n	800bfd0 <__sfputs_r+0x22>
 800bfc0:	463a      	mov	r2, r7
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	f7ff ffdc 	bl	800bf84 <__sfputc_r>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d1f3      	bne.n	800bfb8 <__sfputs_r+0xa>
 800bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bfd4 <_vfiprintf_r>:
 800bfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	460d      	mov	r5, r1
 800bfda:	4614      	mov	r4, r2
 800bfdc:	4698      	mov	r8, r3
 800bfde:	4606      	mov	r6, r0
 800bfe0:	b09d      	sub	sp, #116	; 0x74
 800bfe2:	b118      	cbz	r0, 800bfec <_vfiprintf_r+0x18>
 800bfe4:	6a03      	ldr	r3, [r0, #32]
 800bfe6:	b90b      	cbnz	r3, 800bfec <_vfiprintf_r+0x18>
 800bfe8:	f7fe f8f4 	bl	800a1d4 <__sinit>
 800bfec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfee:	07d9      	lsls	r1, r3, #31
 800bff0:	d405      	bmi.n	800bffe <_vfiprintf_r+0x2a>
 800bff2:	89ab      	ldrh	r3, [r5, #12]
 800bff4:	059a      	lsls	r2, r3, #22
 800bff6:	d402      	bmi.n	800bffe <_vfiprintf_r+0x2a>
 800bff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bffa:	f7fe f96c 	bl	800a2d6 <__retarget_lock_acquire_recursive>
 800bffe:	89ab      	ldrh	r3, [r5, #12]
 800c000:	071b      	lsls	r3, r3, #28
 800c002:	d501      	bpl.n	800c008 <_vfiprintf_r+0x34>
 800c004:	692b      	ldr	r3, [r5, #16]
 800c006:	b99b      	cbnz	r3, 800c030 <_vfiprintf_r+0x5c>
 800c008:	4629      	mov	r1, r5
 800c00a:	4630      	mov	r0, r6
 800c00c:	f000 f93a 	bl	800c284 <__swsetup_r>
 800c010:	b170      	cbz	r0, 800c030 <_vfiprintf_r+0x5c>
 800c012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c014:	07dc      	lsls	r4, r3, #31
 800c016:	d504      	bpl.n	800c022 <_vfiprintf_r+0x4e>
 800c018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c01c:	b01d      	add	sp, #116	; 0x74
 800c01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	0598      	lsls	r0, r3, #22
 800c026:	d4f7      	bmi.n	800c018 <_vfiprintf_r+0x44>
 800c028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c02a:	f7fe f955 	bl	800a2d8 <__retarget_lock_release_recursive>
 800c02e:	e7f3      	b.n	800c018 <_vfiprintf_r+0x44>
 800c030:	2300      	movs	r3, #0
 800c032:	9309      	str	r3, [sp, #36]	; 0x24
 800c034:	2320      	movs	r3, #32
 800c036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c03a:	2330      	movs	r3, #48	; 0x30
 800c03c:	f04f 0901 	mov.w	r9, #1
 800c040:	f8cd 800c 	str.w	r8, [sp, #12]
 800c044:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c1f4 <_vfiprintf_r+0x220>
 800c048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c04c:	4623      	mov	r3, r4
 800c04e:	469a      	mov	sl, r3
 800c050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c054:	b10a      	cbz	r2, 800c05a <_vfiprintf_r+0x86>
 800c056:	2a25      	cmp	r2, #37	; 0x25
 800c058:	d1f9      	bne.n	800c04e <_vfiprintf_r+0x7a>
 800c05a:	ebba 0b04 	subs.w	fp, sl, r4
 800c05e:	d00b      	beq.n	800c078 <_vfiprintf_r+0xa4>
 800c060:	465b      	mov	r3, fp
 800c062:	4622      	mov	r2, r4
 800c064:	4629      	mov	r1, r5
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff ffa1 	bl	800bfae <__sfputs_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	f000 80a9 	beq.w	800c1c4 <_vfiprintf_r+0x1f0>
 800c072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c074:	445a      	add	r2, fp
 800c076:	9209      	str	r2, [sp, #36]	; 0x24
 800c078:	f89a 3000 	ldrb.w	r3, [sl]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80a1 	beq.w	800c1c4 <_vfiprintf_r+0x1f0>
 800c082:	2300      	movs	r3, #0
 800c084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c08c:	f10a 0a01 	add.w	sl, sl, #1
 800c090:	9304      	str	r3, [sp, #16]
 800c092:	9307      	str	r3, [sp, #28]
 800c094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c098:	931a      	str	r3, [sp, #104]	; 0x68
 800c09a:	4654      	mov	r4, sl
 800c09c:	2205      	movs	r2, #5
 800c09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0a2:	4854      	ldr	r0, [pc, #336]	; (800c1f4 <_vfiprintf_r+0x220>)
 800c0a4:	f7fe f919 	bl	800a2da <memchr>
 800c0a8:	9a04      	ldr	r2, [sp, #16]
 800c0aa:	b9d8      	cbnz	r0, 800c0e4 <_vfiprintf_r+0x110>
 800c0ac:	06d1      	lsls	r1, r2, #27
 800c0ae:	bf44      	itt	mi
 800c0b0:	2320      	movmi	r3, #32
 800c0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0b6:	0713      	lsls	r3, r2, #28
 800c0b8:	bf44      	itt	mi
 800c0ba:	232b      	movmi	r3, #43	; 0x2b
 800c0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c6:	d015      	beq.n	800c0f4 <_vfiprintf_r+0x120>
 800c0c8:	4654      	mov	r4, sl
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	f04f 0c0a 	mov.w	ip, #10
 800c0d0:	9a07      	ldr	r2, [sp, #28]
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0d8:	3b30      	subs	r3, #48	; 0x30
 800c0da:	2b09      	cmp	r3, #9
 800c0dc:	d94d      	bls.n	800c17a <_vfiprintf_r+0x1a6>
 800c0de:	b1b0      	cbz	r0, 800c10e <_vfiprintf_r+0x13a>
 800c0e0:	9207      	str	r2, [sp, #28]
 800c0e2:	e014      	b.n	800c10e <_vfiprintf_r+0x13a>
 800c0e4:	eba0 0308 	sub.w	r3, r0, r8
 800c0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	46a2      	mov	sl, r4
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	e7d2      	b.n	800c09a <_vfiprintf_r+0xc6>
 800c0f4:	9b03      	ldr	r3, [sp, #12]
 800c0f6:	1d19      	adds	r1, r3, #4
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	9103      	str	r1, [sp, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfbb      	ittet	lt
 800c100:	425b      	neglt	r3, r3
 800c102:	f042 0202 	orrlt.w	r2, r2, #2
 800c106:	9307      	strge	r3, [sp, #28]
 800c108:	9307      	strlt	r3, [sp, #28]
 800c10a:	bfb8      	it	lt
 800c10c:	9204      	strlt	r2, [sp, #16]
 800c10e:	7823      	ldrb	r3, [r4, #0]
 800c110:	2b2e      	cmp	r3, #46	; 0x2e
 800c112:	d10c      	bne.n	800c12e <_vfiprintf_r+0x15a>
 800c114:	7863      	ldrb	r3, [r4, #1]
 800c116:	2b2a      	cmp	r3, #42	; 0x2a
 800c118:	d134      	bne.n	800c184 <_vfiprintf_r+0x1b0>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	3402      	adds	r4, #2
 800c11e:	1d1a      	adds	r2, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	9203      	str	r2, [sp, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfb8      	it	lt
 800c128:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c12c:	9305      	str	r3, [sp, #20]
 800c12e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1f8 <_vfiprintf_r+0x224>
 800c132:	2203      	movs	r2, #3
 800c134:	4650      	mov	r0, sl
 800c136:	7821      	ldrb	r1, [r4, #0]
 800c138:	f7fe f8cf 	bl	800a2da <memchr>
 800c13c:	b138      	cbz	r0, 800c14e <_vfiprintf_r+0x17a>
 800c13e:	2240      	movs	r2, #64	; 0x40
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	eba0 000a 	sub.w	r0, r0, sl
 800c146:	4082      	lsls	r2, r0
 800c148:	4313      	orrs	r3, r2
 800c14a:	3401      	adds	r4, #1
 800c14c:	9304      	str	r3, [sp, #16]
 800c14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c152:	2206      	movs	r2, #6
 800c154:	4829      	ldr	r0, [pc, #164]	; (800c1fc <_vfiprintf_r+0x228>)
 800c156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c15a:	f7fe f8be 	bl	800a2da <memchr>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d03f      	beq.n	800c1e2 <_vfiprintf_r+0x20e>
 800c162:	4b27      	ldr	r3, [pc, #156]	; (800c200 <_vfiprintf_r+0x22c>)
 800c164:	bb1b      	cbnz	r3, 800c1ae <_vfiprintf_r+0x1da>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	3307      	adds	r3, #7
 800c16a:	f023 0307 	bic.w	r3, r3, #7
 800c16e:	3308      	adds	r3, #8
 800c170:	9303      	str	r3, [sp, #12]
 800c172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c174:	443b      	add	r3, r7
 800c176:	9309      	str	r3, [sp, #36]	; 0x24
 800c178:	e768      	b.n	800c04c <_vfiprintf_r+0x78>
 800c17a:	460c      	mov	r4, r1
 800c17c:	2001      	movs	r0, #1
 800c17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c182:	e7a6      	b.n	800c0d2 <_vfiprintf_r+0xfe>
 800c184:	2300      	movs	r3, #0
 800c186:	f04f 0c0a 	mov.w	ip, #10
 800c18a:	4619      	mov	r1, r3
 800c18c:	3401      	adds	r4, #1
 800c18e:	9305      	str	r3, [sp, #20]
 800c190:	4620      	mov	r0, r4
 800c192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c196:	3a30      	subs	r2, #48	; 0x30
 800c198:	2a09      	cmp	r2, #9
 800c19a:	d903      	bls.n	800c1a4 <_vfiprintf_r+0x1d0>
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0c6      	beq.n	800c12e <_vfiprintf_r+0x15a>
 800c1a0:	9105      	str	r1, [sp, #20]
 800c1a2:	e7c4      	b.n	800c12e <_vfiprintf_r+0x15a>
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ac:	e7f0      	b.n	800c190 <_vfiprintf_r+0x1bc>
 800c1ae:	ab03      	add	r3, sp, #12
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	462a      	mov	r2, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4b13      	ldr	r3, [pc, #76]	; (800c204 <_vfiprintf_r+0x230>)
 800c1b8:	a904      	add	r1, sp, #16
 800c1ba:	f7fd fb9d 	bl	80098f8 <_printf_float>
 800c1be:	4607      	mov	r7, r0
 800c1c0:	1c78      	adds	r0, r7, #1
 800c1c2:	d1d6      	bne.n	800c172 <_vfiprintf_r+0x19e>
 800c1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	d405      	bmi.n	800c1d6 <_vfiprintf_r+0x202>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	059a      	lsls	r2, r3, #22
 800c1ce:	d402      	bmi.n	800c1d6 <_vfiprintf_r+0x202>
 800c1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1d2:	f7fe f881 	bl	800a2d8 <__retarget_lock_release_recursive>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	065b      	lsls	r3, r3, #25
 800c1da:	f53f af1d 	bmi.w	800c018 <_vfiprintf_r+0x44>
 800c1de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1e0:	e71c      	b.n	800c01c <_vfiprintf_r+0x48>
 800c1e2:	ab03      	add	r3, sp, #12
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	4b06      	ldr	r3, [pc, #24]	; (800c204 <_vfiprintf_r+0x230>)
 800c1ec:	a904      	add	r1, sp, #16
 800c1ee:	f7fd fe23 	bl	8009e38 <_printf_i>
 800c1f2:	e7e4      	b.n	800c1be <_vfiprintf_r+0x1ea>
 800c1f4:	0800ce21 	.word	0x0800ce21
 800c1f8:	0800ce27 	.word	0x0800ce27
 800c1fc:	0800ce2b 	.word	0x0800ce2b
 800c200:	080098f9 	.word	0x080098f9
 800c204:	0800bfaf 	.word	0x0800bfaf

0800c208 <__swbuf_r>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	460e      	mov	r6, r1
 800c20c:	4614      	mov	r4, r2
 800c20e:	4605      	mov	r5, r0
 800c210:	b118      	cbz	r0, 800c21a <__swbuf_r+0x12>
 800c212:	6a03      	ldr	r3, [r0, #32]
 800c214:	b90b      	cbnz	r3, 800c21a <__swbuf_r+0x12>
 800c216:	f7fd ffdd 	bl	800a1d4 <__sinit>
 800c21a:	69a3      	ldr	r3, [r4, #24]
 800c21c:	60a3      	str	r3, [r4, #8]
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	071a      	lsls	r2, r3, #28
 800c222:	d525      	bpl.n	800c270 <__swbuf_r+0x68>
 800c224:	6923      	ldr	r3, [r4, #16]
 800c226:	b31b      	cbz	r3, 800c270 <__swbuf_r+0x68>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	6922      	ldr	r2, [r4, #16]
 800c22c:	b2f6      	uxtb	r6, r6
 800c22e:	1a98      	subs	r0, r3, r2
 800c230:	6963      	ldr	r3, [r4, #20]
 800c232:	4637      	mov	r7, r6
 800c234:	4283      	cmp	r3, r0
 800c236:	dc04      	bgt.n	800c242 <__swbuf_r+0x3a>
 800c238:	4621      	mov	r1, r4
 800c23a:	4628      	mov	r0, r5
 800c23c:	f7ff f95a 	bl	800b4f4 <_fflush_r>
 800c240:	b9e0      	cbnz	r0, 800c27c <__swbuf_r+0x74>
 800c242:	68a3      	ldr	r3, [r4, #8]
 800c244:	3b01      	subs	r3, #1
 800c246:	60a3      	str	r3, [r4, #8]
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	701e      	strb	r6, [r3, #0]
 800c250:	6962      	ldr	r2, [r4, #20]
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	429a      	cmp	r2, r3
 800c256:	d004      	beq.n	800c262 <__swbuf_r+0x5a>
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	07db      	lsls	r3, r3, #31
 800c25c:	d506      	bpl.n	800c26c <__swbuf_r+0x64>
 800c25e:	2e0a      	cmp	r6, #10
 800c260:	d104      	bne.n	800c26c <__swbuf_r+0x64>
 800c262:	4621      	mov	r1, r4
 800c264:	4628      	mov	r0, r5
 800c266:	f7ff f945 	bl	800b4f4 <_fflush_r>
 800c26a:	b938      	cbnz	r0, 800c27c <__swbuf_r+0x74>
 800c26c:	4638      	mov	r0, r7
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c270:	4621      	mov	r1, r4
 800c272:	4628      	mov	r0, r5
 800c274:	f000 f806 	bl	800c284 <__swsetup_r>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d0d5      	beq.n	800c228 <__swbuf_r+0x20>
 800c27c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c280:	e7f4      	b.n	800c26c <__swbuf_r+0x64>
	...

0800c284 <__swsetup_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4b2a      	ldr	r3, [pc, #168]	; (800c330 <__swsetup_r+0xac>)
 800c288:	4605      	mov	r5, r0
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	460c      	mov	r4, r1
 800c28e:	b118      	cbz	r0, 800c298 <__swsetup_r+0x14>
 800c290:	6a03      	ldr	r3, [r0, #32]
 800c292:	b90b      	cbnz	r3, 800c298 <__swsetup_r+0x14>
 800c294:	f7fd ff9e 	bl	800a1d4 <__sinit>
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c29e:	0718      	lsls	r0, r3, #28
 800c2a0:	d422      	bmi.n	800c2e8 <__swsetup_r+0x64>
 800c2a2:	06d9      	lsls	r1, r3, #27
 800c2a4:	d407      	bmi.n	800c2b6 <__swsetup_r+0x32>
 800c2a6:	2309      	movs	r3, #9
 800c2a8:	602b      	str	r3, [r5, #0]
 800c2aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	e034      	b.n	800c320 <__swsetup_r+0x9c>
 800c2b6:	0758      	lsls	r0, r3, #29
 800c2b8:	d512      	bpl.n	800c2e0 <__swsetup_r+0x5c>
 800c2ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2bc:	b141      	cbz	r1, 800c2d0 <__swsetup_r+0x4c>
 800c2be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2c2:	4299      	cmp	r1, r3
 800c2c4:	d002      	beq.n	800c2cc <__swsetup_r+0x48>
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f7ff fdd4 	bl	800be74 <_free_r>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	6363      	str	r3, [r4, #52]	; 0x34
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2d6:	81a3      	strh	r3, [r4, #12]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	6923      	ldr	r3, [r4, #16]
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	f043 0308 	orr.w	r3, r3, #8
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	b94b      	cbnz	r3, 800c300 <__swsetup_r+0x7c>
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2f6:	d003      	beq.n	800c300 <__swsetup_r+0x7c>
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f000 f83f 	bl	800c37e <__smakebuf_r>
 800c300:	89a0      	ldrh	r0, [r4, #12]
 800c302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c306:	f010 0301 	ands.w	r3, r0, #1
 800c30a:	d00a      	beq.n	800c322 <__swsetup_r+0x9e>
 800c30c:	2300      	movs	r3, #0
 800c30e:	60a3      	str	r3, [r4, #8]
 800c310:	6963      	ldr	r3, [r4, #20]
 800c312:	425b      	negs	r3, r3
 800c314:	61a3      	str	r3, [r4, #24]
 800c316:	6923      	ldr	r3, [r4, #16]
 800c318:	b943      	cbnz	r3, 800c32c <__swsetup_r+0xa8>
 800c31a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c31e:	d1c4      	bne.n	800c2aa <__swsetup_r+0x26>
 800c320:	bd38      	pop	{r3, r4, r5, pc}
 800c322:	0781      	lsls	r1, r0, #30
 800c324:	bf58      	it	pl
 800c326:	6963      	ldrpl	r3, [r4, #20]
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	e7f4      	b.n	800c316 <__swsetup_r+0x92>
 800c32c:	2000      	movs	r0, #0
 800c32e:	e7f7      	b.n	800c320 <__swsetup_r+0x9c>
 800c330:	200001d4 	.word	0x200001d4

0800c334 <__swhatbuf_r>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	460c      	mov	r4, r1
 800c338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33c:	4615      	mov	r5, r2
 800c33e:	2900      	cmp	r1, #0
 800c340:	461e      	mov	r6, r3
 800c342:	b096      	sub	sp, #88	; 0x58
 800c344:	da0c      	bge.n	800c360 <__swhatbuf_r+0x2c>
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	2100      	movs	r1, #0
 800c34a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c34e:	bf0c      	ite	eq
 800c350:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c354:	2340      	movne	r3, #64	; 0x40
 800c356:	2000      	movs	r0, #0
 800c358:	6031      	str	r1, [r6, #0]
 800c35a:	602b      	str	r3, [r5, #0]
 800c35c:	b016      	add	sp, #88	; 0x58
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	466a      	mov	r2, sp
 800c362:	f000 f849 	bl	800c3f8 <_fstat_r>
 800c366:	2800      	cmp	r0, #0
 800c368:	dbed      	blt.n	800c346 <__swhatbuf_r+0x12>
 800c36a:	9901      	ldr	r1, [sp, #4]
 800c36c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c370:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c374:	4259      	negs	r1, r3
 800c376:	4159      	adcs	r1, r3
 800c378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c37c:	e7eb      	b.n	800c356 <__swhatbuf_r+0x22>

0800c37e <__smakebuf_r>:
 800c37e:	898b      	ldrh	r3, [r1, #12]
 800c380:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c382:	079d      	lsls	r5, r3, #30
 800c384:	4606      	mov	r6, r0
 800c386:	460c      	mov	r4, r1
 800c388:	d507      	bpl.n	800c39a <__smakebuf_r+0x1c>
 800c38a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	2301      	movs	r3, #1
 800c394:	6163      	str	r3, [r4, #20]
 800c396:	b002      	add	sp, #8
 800c398:	bd70      	pop	{r4, r5, r6, pc}
 800c39a:	466a      	mov	r2, sp
 800c39c:	ab01      	add	r3, sp, #4
 800c39e:	f7ff ffc9 	bl	800c334 <__swhatbuf_r>
 800c3a2:	9900      	ldr	r1, [sp, #0]
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7fe ffa2 	bl	800b2f0 <_malloc_r>
 800c3ac:	b948      	cbnz	r0, 800c3c2 <__smakebuf_r+0x44>
 800c3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b2:	059a      	lsls	r2, r3, #22
 800c3b4:	d4ef      	bmi.n	800c396 <__smakebuf_r+0x18>
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	f043 0302 	orr.w	r3, r3, #2
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	e7e3      	b.n	800c38a <__smakebuf_r+0xc>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	6020      	str	r0, [r4, #0]
 800c3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	9b00      	ldr	r3, [sp, #0]
 800c3ce:	6120      	str	r0, [r4, #16]
 800c3d0:	6163      	str	r3, [r4, #20]
 800c3d2:	9b01      	ldr	r3, [sp, #4]
 800c3d4:	b15b      	cbz	r3, 800c3ee <__smakebuf_r+0x70>
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3dc:	f000 f81e 	bl	800c41c <_isatty_r>
 800c3e0:	b128      	cbz	r0, 800c3ee <__smakebuf_r+0x70>
 800c3e2:	89a3      	ldrh	r3, [r4, #12]
 800c3e4:	f023 0303 	bic.w	r3, r3, #3
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	431d      	orrs	r5, r3
 800c3f2:	81a5      	strh	r5, [r4, #12]
 800c3f4:	e7cf      	b.n	800c396 <__smakebuf_r+0x18>
	...

0800c3f8 <_fstat_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4d06      	ldr	r5, [pc, #24]	; (800c418 <_fstat_r+0x20>)
 800c3fe:	4604      	mov	r4, r0
 800c400:	4608      	mov	r0, r1
 800c402:	4611      	mov	r1, r2
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	f7f6 f81a 	bl	800243e <_fstat>
 800c40a:	1c43      	adds	r3, r0, #1
 800c40c:	d102      	bne.n	800c414 <_fstat_r+0x1c>
 800c40e:	682b      	ldr	r3, [r5, #0]
 800c410:	b103      	cbz	r3, 800c414 <_fstat_r+0x1c>
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	20001a8c 	.word	0x20001a8c

0800c41c <_isatty_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	2300      	movs	r3, #0
 800c420:	4d05      	ldr	r5, [pc, #20]	; (800c438 <_isatty_r+0x1c>)
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	602b      	str	r3, [r5, #0]
 800c428:	f7f6 f818 	bl	800245c <_isatty>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_isatty_r+0x1a>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_isatty_r+0x1a>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20001a8c 	.word	0x20001a8c

0800c43c <_raise_r>:
 800c43c:	291f      	cmp	r1, #31
 800c43e:	b538      	push	{r3, r4, r5, lr}
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	d904      	bls.n	800c450 <_raise_r+0x14>
 800c446:	2316      	movs	r3, #22
 800c448:	6003      	str	r3, [r0, #0]
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c452:	b112      	cbz	r2, 800c45a <_raise_r+0x1e>
 800c454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c458:	b94b      	cbnz	r3, 800c46e <_raise_r+0x32>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f830 	bl	800c4c0 <_getpid_r>
 800c460:	462a      	mov	r2, r5
 800c462:	4601      	mov	r1, r0
 800c464:	4620      	mov	r0, r4
 800c466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46a:	f000 b817 	b.w	800c49c <_kill_r>
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d00a      	beq.n	800c488 <_raise_r+0x4c>
 800c472:	1c59      	adds	r1, r3, #1
 800c474:	d103      	bne.n	800c47e <_raise_r+0x42>
 800c476:	2316      	movs	r3, #22
 800c478:	6003      	str	r3, [r0, #0]
 800c47a:	2001      	movs	r0, #1
 800c47c:	e7e7      	b.n	800c44e <_raise_r+0x12>
 800c47e:	2400      	movs	r4, #0
 800c480:	4628      	mov	r0, r5
 800c482:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c486:	4798      	blx	r3
 800c488:	2000      	movs	r0, #0
 800c48a:	e7e0      	b.n	800c44e <_raise_r+0x12>

0800c48c <raise>:
 800c48c:	4b02      	ldr	r3, [pc, #8]	; (800c498 <raise+0xc>)
 800c48e:	4601      	mov	r1, r0
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f7ff bfd3 	b.w	800c43c <_raise_r>
 800c496:	bf00      	nop
 800c498:	200001d4 	.word	0x200001d4

0800c49c <_kill_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	2300      	movs	r3, #0
 800c4a0:	4d06      	ldr	r5, [pc, #24]	; (800c4bc <_kill_r+0x20>)
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f7f5 ff6a 	bl	8002382 <_kill>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d102      	bne.n	800c4b8 <_kill_r+0x1c>
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	b103      	cbz	r3, 800c4b8 <_kill_r+0x1c>
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20001a8c 	.word	0x20001a8c

0800c4c0 <_getpid_r>:
 800c4c0:	f7f5 bf58 	b.w	8002374 <_getpid>

0800c4c4 <log>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	f000 f835 	bl	800c538 <__ieee754_log>
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f4 fb03 	bl	8000ae4 <__aeabi_dcmpun>
 800c4de:	b998      	cbnz	r0, 800c508 <log+0x44>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f4 faf2 	bl	8000ad0 <__aeabi_dcmpgt>
 800c4ec:	b960      	cbnz	r0, 800c508 <log+0x44>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	f7f4 fac3 	bl	8000a80 <__aeabi_dcmpeq>
 800c4fa:	b140      	cbz	r0, 800c50e <log+0x4a>
 800c4fc:	f7fd fec0 	bl	800a280 <__errno>
 800c500:	2322      	movs	r3, #34	; 0x22
 800c502:	2600      	movs	r6, #0
 800c504:	4f06      	ldr	r7, [pc, #24]	; (800c520 <log+0x5c>)
 800c506:	6003      	str	r3, [r0, #0]
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c50e:	f7fd feb7 	bl	800a280 <__errno>
 800c512:	2321      	movs	r3, #33	; 0x21
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	4803      	ldr	r0, [pc, #12]	; (800c524 <log+0x60>)
 800c518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c51c:	f000 b804 	b.w	800c528 <nan>
 800c520:	fff00000 	.word	0xfff00000
 800c524:	0800d0d2 	.word	0x0800d0d2

0800c528 <nan>:
 800c528:	2000      	movs	r0, #0
 800c52a:	4901      	ldr	r1, [pc, #4]	; (800c530 <nan+0x8>)
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	7ff80000 	.word	0x7ff80000
 800c534:	00000000 	.word	0x00000000

0800c538 <__ieee754_log>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	460d      	mov	r5, r1
 800c546:	b087      	sub	sp, #28
 800c548:	da24      	bge.n	800c594 <__ieee754_log+0x5c>
 800c54a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c54e:	4304      	orrs	r4, r0
 800c550:	d108      	bne.n	800c564 <__ieee754_log+0x2c>
 800c552:	2200      	movs	r2, #0
 800c554:	2300      	movs	r3, #0
 800c556:	2000      	movs	r0, #0
 800c558:	49cb      	ldr	r1, [pc, #812]	; (800c888 <__ieee754_log+0x350>)
 800c55a:	f7f4 f953 	bl	8000804 <__aeabi_ddiv>
 800c55e:	b007      	add	sp, #28
 800c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c564:	2900      	cmp	r1, #0
 800c566:	da04      	bge.n	800c572 <__ieee754_log+0x3a>
 800c568:	f7f3 fe6a 	bl	8000240 <__aeabi_dsub>
 800c56c:	2200      	movs	r2, #0
 800c56e:	2300      	movs	r3, #0
 800c570:	e7f3      	b.n	800c55a <__ieee754_log+0x22>
 800c572:	2200      	movs	r2, #0
 800c574:	4bc5      	ldr	r3, [pc, #788]	; (800c88c <__ieee754_log+0x354>)
 800c576:	f7f4 f81b 	bl	80005b0 <__aeabi_dmul>
 800c57a:	460b      	mov	r3, r1
 800c57c:	460d      	mov	r5, r1
 800c57e:	4602      	mov	r2, r0
 800c580:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c584:	48c2      	ldr	r0, [pc, #776]	; (800c890 <__ieee754_log+0x358>)
 800c586:	4285      	cmp	r5, r0
 800c588:	dd06      	ble.n	800c598 <__ieee754_log+0x60>
 800c58a:	4610      	mov	r0, r2
 800c58c:	4619      	mov	r1, r3
 800c58e:	f7f3 fe59 	bl	8000244 <__adddf3>
 800c592:	e7e4      	b.n	800c55e <__ieee754_log+0x26>
 800c594:	2100      	movs	r1, #0
 800c596:	e7f5      	b.n	800c584 <__ieee754_log+0x4c>
 800c598:	152c      	asrs	r4, r5, #20
 800c59a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c59e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c5a2:	440c      	add	r4, r1
 800c5a4:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c5a8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800c5ac:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800c5b0:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800c5b4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800c5b8:	ea41 0305 	orr.w	r3, r1, r5
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	4bb4      	ldr	r3, [pc, #720]	; (800c894 <__ieee754_log+0x35c>)
 800c5c4:	f7f3 fe3c 	bl	8000240 <__aeabi_dsub>
 800c5c8:	1cab      	adds	r3, r5, #2
 800c5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	468b      	mov	fp, r1
 800c5d4:	f04f 0200 	mov.w	r2, #0
 800c5d8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800c5dc:	dc53      	bgt.n	800c686 <__ieee754_log+0x14e>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f7f4 fa4e 	bl	8000a80 <__aeabi_dcmpeq>
 800c5e4:	b1d0      	cbz	r0, 800c61c <__ieee754_log+0xe4>
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	f000 8122 	beq.w	800c830 <__ieee754_log+0x2f8>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f7f3 ff75 	bl	80004dc <__aeabi_i2d>
 800c5f2:	a391      	add	r3, pc, #580	; (adr r3, 800c838 <__ieee754_log+0x300>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	460f      	mov	r7, r1
 800c5fc:	f7f3 ffd8 	bl	80005b0 <__aeabi_dmul>
 800c600:	a38f      	add	r3, pc, #572	; (adr r3, 800c840 <__ieee754_log+0x308>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	4604      	mov	r4, r0
 800c608:	460d      	mov	r5, r1
 800c60a:	4630      	mov	r0, r6
 800c60c:	4639      	mov	r1, r7
 800c60e:	f7f3 ffcf 	bl	80005b0 <__aeabi_dmul>
 800c612:	4602      	mov	r2, r0
 800c614:	460b      	mov	r3, r1
 800c616:	4620      	mov	r0, r4
 800c618:	4629      	mov	r1, r5
 800c61a:	e7b8      	b.n	800c58e <__ieee754_log+0x56>
 800c61c:	a38a      	add	r3, pc, #552	; (adr r3, 800c848 <__ieee754_log+0x310>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	4650      	mov	r0, sl
 800c624:	4659      	mov	r1, fp
 800c626:	f7f3 ffc3 	bl	80005b0 <__aeabi_dmul>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	2000      	movs	r0, #0
 800c630:	4999      	ldr	r1, [pc, #612]	; (800c898 <__ieee754_log+0x360>)
 800c632:	f7f3 fe05 	bl	8000240 <__aeabi_dsub>
 800c636:	4652      	mov	r2, sl
 800c638:	4606      	mov	r6, r0
 800c63a:	460f      	mov	r7, r1
 800c63c:	465b      	mov	r3, fp
 800c63e:	4650      	mov	r0, sl
 800c640:	4659      	mov	r1, fp
 800c642:	f7f3 ffb5 	bl	80005b0 <__aeabi_dmul>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4630      	mov	r0, r6
 800c64c:	4639      	mov	r1, r7
 800c64e:	f7f3 ffaf 	bl	80005b0 <__aeabi_dmul>
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	b914      	cbnz	r4, 800c65e <__ieee754_log+0x126>
 800c658:	4632      	mov	r2, r6
 800c65a:	463b      	mov	r3, r7
 800c65c:	e0a2      	b.n	800c7a4 <__ieee754_log+0x26c>
 800c65e:	4620      	mov	r0, r4
 800c660:	f7f3 ff3c 	bl	80004dc <__aeabi_i2d>
 800c664:	a374      	add	r3, pc, #464	; (adr r3, 800c838 <__ieee754_log+0x300>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	4680      	mov	r8, r0
 800c66c:	4689      	mov	r9, r1
 800c66e:	f7f3 ff9f 	bl	80005b0 <__aeabi_dmul>
 800c672:	a373      	add	r3, pc, #460	; (adr r3, 800c840 <__ieee754_log+0x308>)
 800c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c678:	4604      	mov	r4, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	4640      	mov	r0, r8
 800c67e:	4649      	mov	r1, r9
 800c680:	f7f3 ff96 	bl	80005b0 <__aeabi_dmul>
 800c684:	e0a7      	b.n	800c7d6 <__ieee754_log+0x29e>
 800c686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c68a:	f7f3 fddb 	bl	8000244 <__adddf3>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4650      	mov	r0, sl
 800c694:	4659      	mov	r1, fp
 800c696:	f7f4 f8b5 	bl	8000804 <__aeabi_ddiv>
 800c69a:	e9cd 0100 	strd	r0, r1, [sp]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f7f3 ff1c 	bl	80004dc <__aeabi_i2d>
 800c6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f7f3 ff7e 	bl	80005b0 <__aeabi_dmul>
 800c6b4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c6b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c6bc:	4602      	mov	r2, r0
 800c6be:	9305      	str	r3, [sp, #20]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	f7f3 ff73 	bl	80005b0 <__aeabi_dmul>
 800c6ca:	a361      	add	r3, pc, #388	; (adr r3, 800c850 <__ieee754_log+0x318>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4689      	mov	r9, r1
 800c6d4:	f7f3 ff6c 	bl	80005b0 <__aeabi_dmul>
 800c6d8:	a35f      	add	r3, pc, #380	; (adr r3, 800c858 <__ieee754_log+0x320>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 fdb1 	bl	8000244 <__adddf3>
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	f7f3 ff63 	bl	80005b0 <__aeabi_dmul>
 800c6ea:	a35d      	add	r3, pc, #372	; (adr r3, 800c860 <__ieee754_log+0x328>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fda8 	bl	8000244 <__adddf3>
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	f7f3 ff5a 	bl	80005b0 <__aeabi_dmul>
 800c6fc:	a35a      	add	r3, pc, #360	; (adr r3, 800c868 <__ieee754_log+0x330>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fd9f 	bl	8000244 <__adddf3>
 800c706:	4632      	mov	r2, r6
 800c708:	463b      	mov	r3, r7
 800c70a:	f7f3 ff51 	bl	80005b0 <__aeabi_dmul>
 800c70e:	a358      	add	r3, pc, #352	; (adr r3, 800c870 <__ieee754_log+0x338>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	4606      	mov	r6, r0
 800c716:	460f      	mov	r7, r1
 800c718:	4640      	mov	r0, r8
 800c71a:	4649      	mov	r1, r9
 800c71c:	f7f3 ff48 	bl	80005b0 <__aeabi_dmul>
 800c720:	a355      	add	r3, pc, #340	; (adr r3, 800c878 <__ieee754_log+0x340>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 fd8d 	bl	8000244 <__adddf3>
 800c72a:	4642      	mov	r2, r8
 800c72c:	464b      	mov	r3, r9
 800c72e:	f7f3 ff3f 	bl	80005b0 <__aeabi_dmul>
 800c732:	a353      	add	r3, pc, #332	; (adr r3, 800c880 <__ieee754_log+0x348>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fd84 	bl	8000244 <__adddf3>
 800c73c:	4642      	mov	r2, r8
 800c73e:	464b      	mov	r3, r9
 800c740:	f7f3 ff36 	bl	80005b0 <__aeabi_dmul>
 800c744:	460b      	mov	r3, r1
 800c746:	4602      	mov	r2, r0
 800c748:	4639      	mov	r1, r7
 800c74a:	4630      	mov	r0, r6
 800c74c:	f7f3 fd7a 	bl	8000244 <__adddf3>
 800c750:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	3551      	adds	r5, #81	; 0x51
 800c758:	431d      	orrs	r5, r3
 800c75a:	2d00      	cmp	r5, #0
 800c75c:	4680      	mov	r8, r0
 800c75e:	4689      	mov	r9, r1
 800c760:	dd48      	ble.n	800c7f4 <__ieee754_log+0x2bc>
 800c762:	2200      	movs	r2, #0
 800c764:	4b4c      	ldr	r3, [pc, #304]	; (800c898 <__ieee754_log+0x360>)
 800c766:	4650      	mov	r0, sl
 800c768:	4659      	mov	r1, fp
 800c76a:	f7f3 ff21 	bl	80005b0 <__aeabi_dmul>
 800c76e:	4652      	mov	r2, sl
 800c770:	465b      	mov	r3, fp
 800c772:	f7f3 ff1d 	bl	80005b0 <__aeabi_dmul>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4606      	mov	r6, r0
 800c77c:	460f      	mov	r7, r1
 800c77e:	4640      	mov	r0, r8
 800c780:	4649      	mov	r1, r9
 800c782:	f7f3 fd5f 	bl	8000244 <__adddf3>
 800c786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c78a:	f7f3 ff11 	bl	80005b0 <__aeabi_dmul>
 800c78e:	4680      	mov	r8, r0
 800c790:	4689      	mov	r9, r1
 800c792:	b964      	cbnz	r4, 800c7ae <__ieee754_log+0x276>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4630      	mov	r0, r6
 800c79a:	4639      	mov	r1, r7
 800c79c:	f7f3 fd50 	bl	8000240 <__aeabi_dsub>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4650      	mov	r0, sl
 800c7a6:	4659      	mov	r1, fp
 800c7a8:	f7f3 fd4a 	bl	8000240 <__aeabi_dsub>
 800c7ac:	e6d7      	b.n	800c55e <__ieee754_log+0x26>
 800c7ae:	a322      	add	r3, pc, #136	; (adr r3, 800c838 <__ieee754_log+0x300>)
 800c7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b8:	f7f3 fefa 	bl	80005b0 <__aeabi_dmul>
 800c7bc:	a320      	add	r3, pc, #128	; (adr r3, 800c840 <__ieee754_log+0x308>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ca:	f7f3 fef1 	bl	80005b0 <__aeabi_dmul>
 800c7ce:	4642      	mov	r2, r8
 800c7d0:	464b      	mov	r3, r9
 800c7d2:	f7f3 fd37 	bl	8000244 <__adddf3>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4630      	mov	r0, r6
 800c7dc:	4639      	mov	r1, r7
 800c7de:	f7f3 fd2f 	bl	8000240 <__aeabi_dsub>
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	465b      	mov	r3, fp
 800c7e6:	f7f3 fd2b 	bl	8000240 <__aeabi_dsub>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	e7d9      	b.n	800c7a8 <__ieee754_log+0x270>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	f7f3 fd20 	bl	8000240 <__aeabi_dsub>
 800c800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c804:	f7f3 fed4 	bl	80005b0 <__aeabi_dmul>
 800c808:	4606      	mov	r6, r0
 800c80a:	460f      	mov	r7, r1
 800c80c:	2c00      	cmp	r4, #0
 800c80e:	f43f af23 	beq.w	800c658 <__ieee754_log+0x120>
 800c812:	a309      	add	r3, pc, #36	; (adr r3, 800c838 <__ieee754_log+0x300>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c81c:	f7f3 fec8 	bl	80005b0 <__aeabi_dmul>
 800c820:	a307      	add	r3, pc, #28	; (adr r3, 800c840 <__ieee754_log+0x308>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	4604      	mov	r4, r0
 800c828:	460d      	mov	r5, r1
 800c82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c82e:	e727      	b.n	800c680 <__ieee754_log+0x148>
 800c830:	2000      	movs	r0, #0
 800c832:	2100      	movs	r1, #0
 800c834:	e693      	b.n	800c55e <__ieee754_log+0x26>
 800c836:	bf00      	nop
 800c838:	fee00000 	.word	0xfee00000
 800c83c:	3fe62e42 	.word	0x3fe62e42
 800c840:	35793c76 	.word	0x35793c76
 800c844:	3dea39ef 	.word	0x3dea39ef
 800c848:	55555555 	.word	0x55555555
 800c84c:	3fd55555 	.word	0x3fd55555
 800c850:	df3e5244 	.word	0xdf3e5244
 800c854:	3fc2f112 	.word	0x3fc2f112
 800c858:	96cb03de 	.word	0x96cb03de
 800c85c:	3fc74664 	.word	0x3fc74664
 800c860:	94229359 	.word	0x94229359
 800c864:	3fd24924 	.word	0x3fd24924
 800c868:	55555593 	.word	0x55555593
 800c86c:	3fe55555 	.word	0x3fe55555
 800c870:	d078c69f 	.word	0xd078c69f
 800c874:	3fc39a09 	.word	0x3fc39a09
 800c878:	1d8e78af 	.word	0x1d8e78af
 800c87c:	3fcc71c5 	.word	0x3fcc71c5
 800c880:	9997fa04 	.word	0x9997fa04
 800c884:	3fd99999 	.word	0x3fd99999
 800c888:	c3500000 	.word	0xc3500000
 800c88c:	43500000 	.word	0x43500000
 800c890:	7fefffff 	.word	0x7fefffff
 800c894:	3ff00000 	.word	0x3ff00000
 800c898:	3fe00000 	.word	0x3fe00000

0800c89c <_init>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	bf00      	nop
 800c8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a2:	bc08      	pop	{r3}
 800c8a4:	469e      	mov	lr, r3
 800c8a6:	4770      	bx	lr

0800c8a8 <_fini>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	bf00      	nop
 800c8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ae:	bc08      	pop	{r3}
 800c8b0:	469e      	mov	lr, r3
 800c8b2:	4770      	bx	lr
